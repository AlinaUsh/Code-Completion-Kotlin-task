,signature,body,docstring,id
64279,@kotlin.internal.IntrinsicConstEvaluation public inline operator fun compareTo(other: Byte): Int,this.compareTo(other.toFloat()),"/**

     * Compares this value with the specified value for order.

     * Returns zero if this value is equal to the specified other value, a negative number if it's less than other,

     * or a positive number if it's greater than other.

     */",f17455:m3845
37349,@Test @TodoAnalysisApi fun `test - member function signature order`(),"{
    doTest(headersTestDataDir.resolve(""memberFunctionSignatureOrder""))
}","/**

     * KT-66066

     */",f11809:m619
32489,fun <T> Collection<T>?.concat(collection: Collection<T>): Collection<T>?,"{
    if (collection.isEmpty()) {
        return this
    }
    if (this == null) {
        return collection
    }
    if (this is LinkedHashSet) {
        addAll(collection)
        return this
    }
    val result = LinkedHashSet(this)
    result.addAll(collection)
    return result
}","/**

 * Concatenates the contents of this collection with the given collection, avoiding allocations if possible.

 * Can modify `this` if it is a mutable collection.

 */",f11015:m49
53050,"@Deprecated(""Synchronization on Any? object is not supported."", ReplaceWith(""lazy(initializer)"")) @DeprecatedSinceKotlin(warningSince = ""1.9"") public actual fun <T> lazy(lock: Any?, initializer: () -> T): Lazy<T>",UnsafeLazyImpl(initializer),"/**

 * Creates a new instance of the [Lazy] that uses the specified initialization function [initializer].

 *

 * The [lock] parameter is ignored.

 */",f16610:m51
8356,"private fun initCache(cache: BoxCache, generationState: NativeGenerationState, cacheName: String, rangeStartName: String, rangeEndName: String, declareOnly: Boolean): StaticData.Global","{
    val context = generationState.context
    val kotlinType = context.irBuiltIns.getKotlinClass(cache)
    val staticData = generationState.llvm.staticData
    val llvm = generationState.llvm
    val llvmType = kotlinType.defaultType.toLLVMType(llvm)
    val llvmBoxType = llvm.structType(llvm.runtime.objHeaderType, llvmType)
    val (start, end) = cache.defaultRange
    return if (declareOnly) {
        staticData.createGlobal(LLVMArrayType(llvmBoxType, end - start + 1)!!, cacheName, true)
    } else {
        staticData.placeGlobal(rangeStartName, createConstant(llvmType, start), true).setConstant(true)
        staticData.placeGlobal(rangeEndName, createConstant(llvmType, end), true).setConstant(true)
        val values = (start .. end).map { staticData.createConstKotlinObjectBody(kotlinType, createConstant(llvmType, it)) }
        staticData.placeGlobalArray(cacheName, llvmBoxType, values, true).also { it.setConstant(true) }
    }
}","/**

 * Adds global that refers to the cache.

 */",f3237:m259
63590,"@Suppress(""ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS"") public actual fun <T> Array<out T>.sortWith(comparator: Comparator<in T>, fromIndex: Int = 0, toIndex: Int = size): Unit","{
    AbstractList.checkRangeIndexes(fromIndex, toIndex, size)
    sortArrayWith(this, fromIndex, toIndex, comparator)
}","/**

 * Sorts a range in the array in-place with the given [comparator].

 * 

 * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.

 * 

 * @param fromIndex the start of the range (inclusive) to sort, 0 by default.

 * @param toIndex the end of the range (exclusive) to sort, size of this array by default.

 * 

 * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.

 * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].

 */",f17396:m5119
48016,private fun Project.setupCInteropCommonizerDependenciesForIde(sourceSet: DefaultKotlinSourceSet),"launch { addIntransitiveMetadataDependencyIfPossible(sourceSet, cinteropCommonizerDependencies(sourceSet)) }","/**

 * IDE will resolve the dependencies provided on source sets.

 * This will use the [Project.copyCommonizeCInteropForIdeTask] over the regular cinterop commonization task.

 * The copying task prevent red code within the IDE after cleaning the build output.

 */",f15513:m85
52053,fun ScriptEvaluationConfiguration.Builder.enableScriptsInstancesSharing(),"{
    this { scriptsInstancesSharing(true) }
}","/**

 * A helper to enable scriptsInstancesSharingMap with default implementation

 */",f16431:m233
58958,"public inline fun <C: Appendable> CharSequence.filterNotTo(destination: C, predicate: (Char) -> Boolean): C","{
    for (element in this) if (!predicate(element)) destination.append(element)
    return destination
}","/**

 * Appends all characters not matching the given [predicate] to the given [destination].

 * 

 * @sample samples.collections.Collections.Filtering.filterTo

 */",f17097:m981
7386,fun main(args: Array<String>),"{
    printField(""***"", 3)
    printField(""""""
    
        __*__
    
        _***_
    
        __*__
    
      """""", 10)
    printField(""""""
    
        __*__
    
        _*_*_
    
        __*__
    
      """""", 3)
    printField(""""""
    
        __**__
    
        __**__
    
        __**__
    
      """""", 3)
    printField(""""""
    
        __**__
    
        __**__
    
          __**__
    
          __**__
    
      """""", 6)
    printField(""""""
    
        ---------------
    
        ---***---***---
    
        ---------------
    
        -*----*-*----*-
    
        -*----*-*----*-
    
        -*----*-*----*-
    
        ---***---***---
    
        ---------------
    
        ---***---***---
    
        -*----*-*----*-
    
        -*----*-*----*-
    
        -*----*-*----*-
    
        ---------------
    
        ---***---***---
    
        ---------------
    
      """""", 10)
}",/** A few colony examples here */,f3089:m113
58573,"@SinceKotlin(""1.7"") public fun IntProgression.last(): Int","{
    if (isEmpty()) throw NoSuchElementException(""Progression $this is empty."")
    return this.last
}","/**

 * Returns the last element.

 * 

 * @throws NoSuchElementException if the progression is empty.

 * 

 * @sample samples.collections.Collections.Elements.last

 */",f17092:m157
58983,public fun CharSequence.toHashSet(): HashSet<Char>,"{
    return toCollection(HashSet<Char>(mapCapacity(length.coerceAtMost(128))))
}","/**

 * Returns a new [HashSet] of all characters.

 */",f17097:m1605
14880,"@Deprecated(""Use Kotlin compiler 1.4 to avoid deprecation warning."") @SinceKotlin(""1.1"") @DeprecatedSinceKotlin(hiddenSince = ""1.4"") public fun CharArray.contentToString(): String","{
    return this.contentToString()
}","/**

 * Returns a string representation of the contents of the specified array as if it is [List].

 * 

 * @sample samples.collections.Arrays.ContentOperations.contentToString

 */",f3831:m1993
63549,public actual operator fun LongArray.plus(element: Long): LongArray,"{
    val index = size
    val result = copyOfUninitializedElements(index + 1)
    result[index] = element
    return result
}","/**

 * Returns an array containing all elements of the original array and then the given [element].

 */",f17396:m4167
57333,"@Suppress(""ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS"") public actual fun ShortArray.fill(element: Short, fromIndex: Int = 0, toIndex: Int = size): Unit","{
    java.util.Arrays.fill(this, fromIndex, toIndex, element)
}","/**

 * Fills this array or its subrange with the specified [element] value.

 * 

 * @param fromIndex the start of the range (inclusive) to fill, 0 by default.

 * @param toIndex the end of the range (exclusive) to fill, size of this array by default.

 * 

 * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.

 * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].

 */",f16970:m3231
64046,@kotlin.internal.IntrinsicConstEvaluation public inline operator fun times(other: Short): Int,this.toInt() * other.toInt(),/** Multiplies this value by the other value. */,f17455:m321
11479,internal fun printWarning(message: String),"{
    println(""WARNING $message"")
}","/**

 * Output warning.

 *

 * @param message warning message.

 */",f3554:m1367
58498,"@SinceKotlin(""1.4"") @OptIn(kotlin.experimental.ExperimentalTypeInference::class) @OverloadResolutionByLambdaReturnType @kotlin.internal.InlineOnly public inline fun <K, V> Map<out K, V>.minOf(selector: (Map.Entry<K, V>) -> Float): Float","{
    return entries.minOf(selector)
}","/**

 * Returns the smallest value among all values produced by [selector] function

 * applied to each entry in the map.

 * 

 * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.

 * 

 * @throws NoSuchElementException if the map is empty.

 */",f17089:m841
7577,"fun execClangForCompilerTests(target: KonanTarget, action: Action<in ExecSpec>): ExecResult","{
    val defaultArgs = platformManager.platform(target).clang.clangArgs.toList()
    return execOperations.exec {
        action.execute(this)
        executable = if (target.family.isAppleFamily) {
            resolveToolchainExecutable(target, executable)
        } else {
            resolveExecutable(executable)
        }
        args = defaultArgs + args
    }
}","/**

     * Execute Clang the way that produced object file is compatible with

     * the one that produced by Kotlin/Native for given [target]. It means:

     * 1. We pass flags that set sysroot.

     * 2. We call Clang from toolchain in case of Apple target.

     */",f3121:m233
30899,"inline fun <T, R> Collection<T>.memoryOptimizedMap(transform: (T) -> R): List<R>","{
    return mapTo(ArrayList<R>(size), transform).compactIfPossible()
}","/**

 * A memory-optimized version of [Iterable.map].

 * @see Iterable.map

 */",f10791:m21
7894,private fun buildClangFlags(configurables: Configurables): List<String>,"mutableListOf<String>().apply {
    require(configurables is ClangFlags)
    addAll(configurables.clangFlags)
    addAll(configurables.clangNooptFlags)
    val targetTriple = if (configurables is AppleConfigurables) {
        configurables.targetTriple.withOSVersion(configurables.osVersionMin)
    } else {
        configurables.targetTriple
    }
    addAll(listOf(""-triple"", targetTriple.toString()))
}.toList()","/**

 * Returns a list of Clang -cc1 arguments (including -cc1 itself) that are used for bitcode compilation in Kotlin/Native.

 *

 * See also: [org.jetbrains.kotlin.backend.konan.BitcodeCompiler]

 */",f3153:m521
57364,public actual operator fun DoubleArray.plus(elements: DoubleArray): DoubleArray,"{
    val thisSize = size
    val arraySize = elements.size
    val result = java.util.Arrays.copyOf(this, thisSize + arraySize)
    System.arraycopy(elements, 0, result, thisSize, arraySize)
    return result
}","/**

 * Returns an array containing all elements of the original array and then all elements of the given [elements] array.

 */",f16970:m3919
31540,"fun MemberScope.getDescriptorsFiltered(kindFilter: DescriptorKindFilter = DescriptorKindFilter.ALL, nameFilter: (Name) -> Boolean = ALL_NAME_FILTER): Collection<DeclarationDescriptor>","{
    if (kindFilter.kindMask == 0) return listOf()
    return getContributedDescriptors(kindFilter, nameFilter).filter { kindFilter.accepts(it) && nameFilter(it.name) }
}","/**

 * The same as getDescriptors(kindFilter, nameFilter) but the result is guaranteed to be filtered by kind and name.

 */",f10898:m157
58963,@kotlin.internal.InlineOnly public inline fun String.slice(indices: Iterable<Int>): String,"{
    return (this as CharSequence).slice(indices).toString()
}","/**

 * Returns a string containing characters of the original string at specified [indices].

 */",f17097:m1085
57319,"@JvmName(""copyOfRangeInline"") @kotlin.internal.InlineOnly public actual inline fun DoubleArray.copyOfRange(fromIndex: Int, toIndex: Int): DoubleArray","{
    return if (kotlin.internal.apiVersionIsAtLeast(1, 3, 0)) {
        copyOfRangeImpl(fromIndex, toIndex)
    } else {
        if (toIndex > size) throw IndexOutOfBoundsException(""toIndex: $toIndex, size: $size"")
        java.util.Arrays.copyOfRange(this, fromIndex, toIndex)
    }
}","/**

 * Returns a new array which is a copy of the specified range of the original array.

 * 

 * @param fromIndex the start of the range (inclusive) to copy.

 * @param toIndex the end of the range (exclusive) to copy.

 * 

 * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.

 * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].

 */",f16970:m2911
58859,public fun <T> Sequence<T>.none(): Boolean,"{
    return !iterator().hasNext()
}","/**

 * Returns `true` if the sequence has no elements.

 *

 * The operation is _terminal_.

 * 

 * @sample samples.collections.Collections.Aggregates.none

 */",f17096:m4287
15022,"@SinceKotlin(""1.1"") public actual fun <T: Comparable<T>> maxOf(a: T, b: T, c: T): T","{
    return maxOf(a, maxOf(b, c))
}","/**

 * Returns the greater of three values.

 * 

 * If there are multiple equal maximal values, returns the first of them.

 */",f3836:m163
14874,"@Deprecated(""Use Kotlin compiler 1.4 to avoid deprecation warning."") @SinceKotlin(""1.1"") @DeprecatedSinceKotlin(hiddenSince = ""1.4"") public fun ShortArray.contentToString(): String","{
    return this.contentToString()
}","/**

 * Returns a string representation of the contents of the specified array as if it is [List].

 * 

 * @sample samples.collections.Arrays.ContentOperations.contentToString

 */",f3831:m1849
15029,"@SinceKotlin(""1.4"") public actual fun <T: Comparable<T>> maxOf(a: T, vararg other: T): T","{
    var max = a
    for (e in other) max = maxOf(max, e)
    return max
}","/**

 * Returns the greater of the given values.

 * 

 * If there are multiple equal maximal values, returns the first of them.

 */",f3836:m299
11455,"fun <T: Any, OptionType: MultipleOptionType> MultipleOption<T, OptionType, DefaultRequiredType.None>.required(): MultipleOption<T, OptionType, DefaultRequiredType.Required>","{
    val newOption = with((delegate.cast<ParsingValue<T, List<T>>>()).descriptor as OptionDescriptor) { MultipleOption<T, OptionType, DefaultRequiredType.Required>(OptionDescriptor(optionFullFormPrefix, optionShortFromPrefix, type, fullName, shortName, description, defaultValue?.toList() ?: listOf(), true, multiple, delimiter, deprecatedWarning), owner) }
    owner.entity = newOption
    return newOption
}","/**

 * Requires the option to be always provided in command line.

 */",f3549:m401
27459,"fun invalidateAndGetDirtyFiles(changedSources: Collection<File>, dirtyClasspathJvmNames: Collection<String>, compiledSources: List<File>): SourcesToReprocess","{
    if (!aptCache.isIncremental) {
        return SourcesToReprocess.FullRebuild
    }
    /**
    
             * Incremental annotation processing tries to limit the number of .java files that are passes to annotation processors, and it
    
             * uses already existing .class files to resolve types. This relies on outputs of kotlinc and javac being present.
    
             *
    
             * The check below verifies that the number of types defined in the processed .java files matches the number of .class files
    
             * in the compiled sources. This check does not guarantee that .class file will indeed exist for every defined type, but
    
             * even if such check is introduced, there is no guarantee that the actual content of the source file matches the .class file. E.g:
    
             * - clean build i.e non-incremental KAPT
    
             * - modify B.java with error in the method body: KAPT runs successfully, but java compilation will fail (assume old B.class is kept)
    
             * - add C.java that references B as method parameter type: KAPT wil only process C.java, and it will use old version of B
    
             * To properly fix this, KAPT needs to keep track of kotlinc and javac compilation outcome, and there is no clean API to do that.
    
             *
    
             * However, comparing total numbers is probably good enough, and it should eliminate most of the issues. See KT-41456 for details.
    
             */<bound method PropertyDeclaration.__str__ of PropertyDeclaration(position=Position(line=125, column=9), modifiers=(), mutability=<Mutability.VAL: 'val'>, generics=(), receiver=None, declaration=VariableDeclaration(position=Position(line=125, column=13), annotations=(), name='totalDeclaredTypes', type=None), constraints=(), value=PostfixUnaryExpression(position=Position(line=125, column=34), expression=SimpleIdentifier(position=Position(line=125, column=34), value='javaCache'), suffixes=[NavigationSuffix(position=Position(line=125, column=43), operator='.', suffix='getSourceFileDefinedTypesCount'), CallSuffix(position=Position(line=125, column=74), generics=(), arguments=ValueArguments(position=Position(line=125, column=74), sequence=[]), lambda_expression=None)]), delegate=None, getter=None, setter=None)>
    val compileOutputHasEnoughClassFiles = checkMinNumberOfClassFiles(compiledSources, totalDeclaredTypes)
    if (!compileOutputHasEnoughClassFiles) {
        return SourcesToReprocess.FullRebuild
    }
    val dirtyClasspathFqNames = HashSet<String>(dirtyClasspathJvmNames.size)
    dirtyClasspathJvmNames.forEach { dirtyClasspathFqNames.add(it.replace(""$"", ""."").replace(""/"", ""."")) }
    val changes = Changes(changedSources, dirtyClasspathFqNames.toSet())
    val aggregatingGeneratedTypes = aptCache.getAggregatingGeneratedTypes(javaCache::getTypesForFiles)
    val impactedTypes = getAllImpactedTypes(changes, aggregatingGeneratedTypes)
    val isolatingGeneratedTypes = aptCache.getIsolatingGeneratedTypes(javaCache::getTypesForFiles)
    val sourcesToReprocess = changedSources.toMutableSet()
    val classNamesToReprocess = mutableListOf<String>()
    if (changedSources.isNotEmpty() || impactedTypes.isNotEmpty()) {
        for (aggregatingOrigin in aptCache.getAggregatingOrigins()) {
            if (aggregatingOrigin in impactedTypes) continue
            val originSource = javaCache.getSourceForType(aggregatingOrigin)
            if (originSource.extension == ""java"") {
                sourcesToReprocess.add(originSource)
            } else if (originSource.extension == ""class"") {
                classNamesToReprocess.add(aggregatingOrigin)
            }
        }
    }
    for (impactedType in impactedTypes) {
        if (impactedType !in isolatingGeneratedTypes && impactedType !in aggregatingGeneratedTypes) {
            sourcesToReprocess.add(javaCache.getSourceForType(impactedType))
        } else if (impactedType in isolatingGeneratedTypes) {
            val isolatingOrigin = aptCache.getOriginForGeneratedIsolatingType(impactedType, javaCache::getSourceForType)
            if (isolatingOrigin in impactedTypes || isolatingOrigin in dirtyClasspathFqNames) {
                continue
            }
            val originSource = javaCache.getSourceForType(isolatingOrigin)
            if (originSource.extension == ""java"") {
                sourcesToReprocess.add(originSource)
            } else if (originSource.extension == ""class"") {
                classNamesToReprocess.add(isolatingOrigin)
            }
        }
    }
    if (sourcesToReprocess.isNotEmpty() || classNamesToReprocess.isNotEmpty()) {
        javaCache.invalidateDataForTypes(impactedTypes)
        aptCache.invalidateAggregating()
        aptCache.invalidateIsolatingForOriginTypes(impactedTypes + dirtyClasspathFqNames)
    }
    return SourcesToReprocess.Incremental(sourcesToReprocess.toList(), impactedTypes, classNamesToReprocess)
}","/**

     * From set of changed sources, get list of files to recompile using structural information and dependency information from

     * annotation processing.

     */",f9696:m71
63677,"@Deprecated(""Use Kotlin compiler 1.4 to avoid deprecation warning."") @SinceKotlin(""1.3"") @DeprecatedSinceKotlin(hiddenSince = ""1.4"") @ExperimentalUnsignedTypes public fun UShortArray.contentHashCode(): Int","{
    return this.contentHashCode()
}","/**

 * Returns a hash code based on the contents of this array as if it is [List].

 */",f17408:m465
48052,internal suspend fun Project.findCInteropCommonizerGroup(dependent: CInteropCommonizerDependent): CInteropCommonizerGroup?,"{
    val suitableGroups = kotlinCInteropGroups.await().filter { group -> group.interops.containsAll(dependent.interops) && group.targets.contains(dependent.target) }
    assert(suitableGroups.size <= 1) { ""CInteropCommonizerTask: Unnecessary work detected: More than one suitable group found for cinterop dependent."" }
    return suitableGroups.firstOrNull()
}","/**

 * Utility function that allows to find the corresponding [CInteropCommonizerGroup] for a given [CInteropCommonizerDependent]

 */",f15520:m187
57083,"public fun File.appendText(text: String, charset: Charset = Charsets.UTF_8): Unit","FileOutputStream(this, true).use { it.writeTextImpl(text, charset) }","/**

 * Appends [text] to the content of this file using UTF-8 or the specified [charset].

 *

 * @param text text to append to file.

 * @param charset character set to use.

 */",f16956:m285
43571,"fun BuildResult.assertOutputContains(expectedSubString: String, message: String = ""Build output does not contain \""$expectedSubString\"""")","{
    assert(output.contains(expectedSubString)) {
        printBuildOutput()
        message
    }
}","/**

 * Asserts Gradle output contains [expectedSubString] string.

 */",f13457:m29
63332,internal fun <T> MutableList<T>.replaceAll(transformation: (T) -> T),"{
    val it = listIterator()
    while (it.hasNext()) {
        val element = it.next()
        it.set(transformation(element))
    }
}","/**

 * Replaces each element in the list with a result of a transformation specified.

 */",f17381:m15
57476,"@SinceKotlin(""1.4"") @OptIn(kotlin.experimental.ExperimentalTypeInference::class) @OverloadResolutionByLambdaReturnType @kotlin.jvm.JvmName(""sumOfBigInteger"") @kotlin.internal.InlineOnly public inline fun FloatArray.sumOf(selector: (Float) -> java.math.BigInteger): java.math.BigInteger","{
    var sum: java.math.BigInteger = 0.toBigInteger()
    for (element in this) {
        sum += selector(element)
    }
    return sum
}","/**

 * Returns the sum of all values produced by [selector] function applied to each element in the array.

 */",f16970:m6081
7339,fun main(args: Array<String>),"{
    if (args.isEmpty()) {
        printBottles(99)
    } else {
        val bottles = args[0].toIntOrNull()
        if (bottles != null) {
            printBottles(bottles)
        } else {
            println(""You have passed '${args[0]}' as a number of bottles, "" + ""but it is not a valid integral number"")
        }
    }
}","/**

 * This example implements the famous ""99 Bottles of Beer"" program

 * See http://99-bottles-of-beer.net/

 *

 * The point is to print out a song with the following lyrics:

 *

 *     The ""99 bottles of beer"" song

 *

 *     99 bottles of beer on the wall, 99 bottles of beer.

 *     Take one down, pass it around, 98 bottles of beer on the wall.

 *

 *     98 bottles of beer on the wall, 98 bottles of beer.

 *     Take one down, pass it around, 97 bottles of beer on the wall.

 *

 *       ...

 *

 *     2 bottles of beer on the wall, 2 bottles of beer.

 *     Take one down, pass it around, 1 bottle of beer on the wall.

 *

 *     1 bottle of beer on the wall, 1 bottle of beer.

 *     Take one down, pass it around, no more bottles of beer on the wall.

 *

 *     No more bottles of beer on the wall, no more bottles of beer.

 *     Go to the store and buy some more, 99 bottles of beer on the wall.

 *

 * Additionally, you can pass the desired initial number of bottles to use (rather than 99)

 * as a command-line argument

 */",f3077:m5
63446,"@Deprecated(""Use Kotlin compiler 1.4 to avoid deprecation warning."") @SinceKotlin(""1.1"") @DeprecatedSinceKotlin(hiddenSince = ""1.4"") public fun <T> Array<out T>.contentHashCode(): Int","{
    return this.contentHashCode()
}","/**

 * Returns a hash code based on the contents of this array as if it is [List].

 */",f17396:m1405
15050,"@SinceKotlin(""1.4"") public actual fun <T: Comparable<T>> minOf(a: T, vararg other: T): T","{
    var min = a
    for (e in other) min = minOf(min, e)
    return min
}","/**

 * Returns the smaller of the given values.

 * 

 * If there are multiple equal minimal values, returns the first of them.

 */",f3836:m739
64883,"@Suppress(""INVISIBLE_REFERENCE"", ""INVISIBLE_MEMBER"") @InlineOnly public actual inline fun todo(@Suppress(""UNUSED_PARAMETER"") block: () -> Unit)","{
    println(""TODO at "" + currentStackTrace()[0])
}","/**

 * Takes the given [block] of test code and _doesn't_ execute it.

 *

 * This keeps the code under test referenced, but doesn't actually test it until it is implemented.

 */",f17532:m187
57024,@kotlin.internal.InlineOnly public inline fun URL.readText(charset: Charset = Charsets.UTF_8): String,readBytes().toString(charset),"/**

 * Reads the entire content of this URL as a String using UTF-8 or the specified [charset].

 *

 * This method is not recommended on huge files.

 *

 * @param charset a character set to use.

 * @return a string with this URL entire content.

 */",f16950:m273
14963,public actual operator fun ByteArray.plus(elements: Collection<Byte>): ByteArray,"{
    var index = size
    val result = copyOfUninitializedElements(index + elements.size)
    for (element in elements) result[index++] = element
    return result
}","/**

 * Returns an array containing all elements of the original array and then all elements of the given [elements] collection.

 */",f3831:m4181
10039,"internal fun <Data, Context: PhaseContext> getDefaultLlvmModuleActions(): Set<Action<Data, Context>>","setOf(createLlvmDumperAction(), createLlvmVerifierAction())","/**

 * Default set of dump and validate actions for LLVM phases.

 */",f3408:m159
36974,fun getOutputLines(withErrors: Boolean = false): List<String>,"getResult(withErrors, handleError = true).outputLines","/**

     * If withErrors is true then output from error stream will be added

     */",f11677:m165
49531,private fun ResolvedDependencyResult.toModuleDependencyIdentifier(): ModuleDependencyIdentifier,"{
    val component = selected
    return when (val componentId = component.id) {
        is ModuleComponentIdentifier -> ModuleDependencyIdentifier(componentId.group, componentId.module)
        is ProjectComponentIdentifier -> {
            if (componentId in params.build) {
                params.projectData[componentId.projectPath]?.moduleId?.getOrThrow() ?: error(""Cant find project Module ID by ${componentId.projectPath}"")
            } else {
                ModuleDependencyIdentifier(component.moduleVersion?.group ?: ""unspecified"", component.moduleVersion?.name ?: ""unspecified"")
            }
        }
        else -> error(""Unknown ComponentIdentifier: $this"")
    }
}","/**

     * Behaves as [ModuleIds.fromComponent]

     */",f15872:m593
54632,internal fun Char.digitToIntImpl(): Int,"{
    val ch = this.code
    val index = binarySearchRange(Digit.rangeStart, ch)
    val diff = ch - Digit.rangeStart[index]
    return if (diff < 10) diff else -1
}","/**

 * Returns an integer from 0..9 indicating the digit this character represents,

 * or -1 if this character is not a digit.

 */",f16708:m85
52875,"@SinceKotlin(""1.4"") public actual fun Int.takeHighestOneBit(): Int",if (this == 0) 0 else 1.shl(Int.SIZE_BITS - 1 - countLeadingZeroBits()),"/**

 * Returns a number having a single bit set in the position of the most significant set bit of this [Int] number,

 * or zero, if this number is zero.

 */",f16581:m255
58799,"public inline fun <T, K, M: MutableMap<in K, MutableList<T>>> Sequence<T>.groupByTo(destination: M, keySelector: (T) -> K): M","{
    for (element in this) {
        val key = keySelector(element)
        val list = destination.getOrPut(key) { ArrayList<T>() }
        list.add(element)
    }
    return destination
}","/**

 * Groups elements of the original sequence by the key returned by the given [keySelector] function

 * applied to each element and puts to the [destination] map each group key associated with a list of corresponding elements.

 * 

 * @return The [destination] map.

 *

 * The operation is _terminal_.

 * 

 * @sample samples.collections.Collections.Transformations.groupBy

 */",f17096:m2019
56542,"@SinceKotlin(""1.2"") public actual operator fun MatchGroupCollection.get(name: String): MatchGroup?","{
    val namedGroups = this as? MatchNamedGroupCollection ?: throw UnsupportedOperationException(""Retrieving groups by name is not supported on this platform."")
    return namedGroups[name]
}","/**

 * Returns a named group with the specified [name].

 *

 * @return An instance of [MatchGroup] if the group with the specified [name] was matched or `null` otherwise.

 * @throws IllegalArgumentException if there is no group with the specified [name] defined in the regex pattern.

 * @throws UnsupportedOperationException if this match group collection doesn't support getting match groups by name,

 * for example, when it's not supported by the current platform.

 */",f16893:m19
14995,"@SinceKotlin(""1.4"") @Suppress(""ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS"") public actual fun DoubleArray.sort(fromIndex: Int = 0, toIndex: Int = size): Unit","{
    AbstractList.checkRangeIndexes(fromIndex, toIndex, size)
    sortArray(this, fromIndex, toIndex)
}","/**

 * Sorts a range in the array in-place.

 * 

 * @param fromIndex the start of the range (inclusive) to sort, 0 by default.

 * @param toIndex the end of the range (exclusive) to sort, size of this array by default.

 * 

 * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.

 * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].

 * 

 * @sample samples.collections.Arrays.Sorting.sortRangeOfArray

 */",f3831:m4923
64411,"@SinceKotlin(""1.1"") public inline fun <reified T: Enum<T>> enumValueOf(name: String): T",enumValueOfIntrinsic(name),"/**

 * Returns an enum entry with specified name.

 */",f17462:m175
56139,public fun <T: Any> nullsFirst(comparator: Comparator<in T>): Comparator<T?>,"Comparator { a, b -> when {
    a === b -> 0
    a == null -> -1
    b == null -> 1
    else -> comparator.compare(a, b)
} }","/**

 * Extends the given [comparator] of non-nullable values to a comparator of nullable values

 * considering `null` value less than any other value.

 * Non-null values are compared with the provided [comparator].

 *

 * @sample samples.comparisons.Comparisons.nullsFirstLastWithComparator

 */",f16832:m449
13962,"@Suppress(""ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS"") public actual fun String.replace(oldChar: Char, newChar: Char, ignoreCase: Boolean = false): String","{
    return if (!ignoreCase) replace(oldChar, newChar) else replaceIgnoreCase(oldChar, newChar)
}","/**

 * Returns a new string with all occurrences of [oldChar] replaced with [newChar].

 *

 * @sample samples.text.Strings.replace

 */",f3713:m111
58984,public fun CharSequence.toList(): List<Char>,"{
    return when (length) {
        0 -> emptyList()
        1 -> listOf(this[0])
        else -> this.toMutableList()
    }
}","/**

 * Returns a [List] containing all characters.

 */",f17097:m1619
70357,"fun put(key: K, value: D, oldValue: D?): S","{
    @Suppress(""UNCHECKED_CAST"") if (value == oldValue) return this as S
    return copy(map.put(key, value))
}","/**

     * This overload exists just for sake of optimizations: in some cases we've just retrieved the old value,

     * so we don't need to scan through the persistent hashmap again

     */",f19634:m71
63546,public actual operator fun ByteArray.plus(element: Byte): ByteArray,"{
    val index = size
    val result = copyOfUninitializedElements(index + 1)
    result[index] = element
    return result
}","/**

 * Returns an array containing all elements of the original array and then the given [element].

 */",f17396:m4107
47785,internal fun KonanTarget.enabledOnCurrentHostForKlibCompilation(provider: PropertiesProvider),HostManager().isEnabled(this) || provider.enableKlibsCrossCompilation,"/**

 * Returns whether klib compilation is allowed for [this]-target on the current host.

 * [enabledOnCurrentHostForBinariesCompilation] returns 'true' only if [enabledOnCurrentHostForKlibCompilation]

 * returns 'true'

 *

 * [enabledOnCurrentHostForKlibCompilation] might return 'true' in some cases where [enabledOnCurrentHostForBinariesCompilation]

 * returns 'false' (e.g.: compile a klib for iOS target on Linux when the code depends only on Kotlin Stdlib)

 *

 * Ideally, these APIs should be in [HostManager] instead of KGP-side wrappers. Refer to KT-64512 for that

 */",f15455:m229
55895,"@kotlin.internal.LowPriorityInOverloadResolution public fun <T: Any> generateSequence(seed: T?, nextFunction: (T) -> T?): Sequence<T>","if (seed == null) EmptySequence else GeneratorSequence({ seed }, nextFunction)","/**

 * Returns a sequence defined by the starting value [seed] and the function [nextFunction],

 * which is invoked to calculate the next value based on the previous one on each iteration.

 *

 * The sequence produces values until it encounters first `null` value.

 * If [seed] is `null`, an empty sequence is produced.

 *

 * The sequence can be iterated multiple times, each time starting with [seed].

 *

 * @see kotlin.sequences.sequence

 *

 * @sample samples.collections.Sequences.Building.generateSequenceWithSeed

 */",f16815:m1323
11927,"@Suppress(""NON_PUBLIC_CALL_FROM_PUBLIC_INLINE"") inline fun <reified T: NativePointed> interpretNullablePointed(ptr: NativePtr): T?","{
    if (ptr == nativeNullPtr) {
        return null
    } else {
        val result = nativeMemUtils.allocateInstance<T>()
        result.rawPtr = ptr
        return result
    }
}","/**

 * Returns interpretation of entity with given pointer, or `null` if it is null.

 *

 * @param T must not be abstract

 */",f3611:m89
14955,public actual operator fun ShortArray.plus(element: Short): ShortArray,"{
    val index = size
    val result = copyOfUninitializedElements(index + 1)
    result[index] = element
    return result
}","/**

 * Returns an array containing all elements of the original array and then the given [element].

 */",f3831:m4021
64459,"@SinceKotlin(""1.5"") @WasExperimental(ExperimentalPathApi::class) @Throws(IOException::class) @kotlin.internal.InlineOnly public inline fun <T> Path.useLines(charset: Charset = Charsets.UTF_8, block: (Sequence<String>) -> T): T","{
    contract { callsInPlace(block, InvocationKind.EXACTLY_ONCE) }
    return Files.newBufferedReader(this, charset).use { block(it.lineSequence()) }
}","/**

 * Calls the [block] callback giving it a sequence of all the lines in this file and closes the reader once

 * the processing is complete.



 * @param charset character set to use for reading text, UTF-8 by default.

 * @return the value returned by [block].

 */",f17469:m537
52944,public fun <T> ItemArrayLike<T>.asList(): List<T>,"object : AbstractList<T>() {
    override val size: Int get() = this@asList.length

    override fun get(index: Int): T = when (index) {
        in 0 .. lastIndex -> this@asList.item(index).unsafeCast<T>()
        else -> throw IndexOutOfBoundsException(""index $index is not in range [0..$lastIndex]"")
    }
}","/**

 * Returns the view of this `ItemArrayLike<T>` collection as `List<T>`

 */",f16593:m25
23023,"private fun Project.fixWiredSourceSetSecondaryVariants(wireSourceSet: SourceSet, commonSourceSet: SourceSet)","{
    configurations.matching { it.name == wireSourceSet.apiElementsConfigurationName || it.name == wireSourceSet.runtimeElementsConfigurationName }.configureEach { outgoing { variants.maybeCreate(""classes"").apply {
        attributes { attribute(LibraryElements.LIBRARY_ELEMENTS_ATTRIBUTE, objects.named(LibraryElements.CLASSES)) }
        (commonSourceSet.output.classesDirs.files + wireSourceSet.output.classesDirs.files).toSet().forEach { if (!artifacts.files.contains(it)) {
            artifact(it) { type = ArtifactTypeDefinition.JVM_CLASS_DIRECTORY }
        } }
    } } }
    configurations.matching { it.name == wireSourceSet.runtimeElementsConfigurationName }.configureEach { outgoing {
        val resourcesDirectories = listOfNotNull(commonSourceSet.output.resourcesDir, wireSourceSet.output.resourcesDir)
        if (resourcesDirectories.isNotEmpty()) {
            variants.maybeCreate(""resources"").apply {
                attributes { attribute(LibraryElements.LIBRARY_ELEMENTS_ATTRIBUTE, objects.named(LibraryElements.RESOURCES)) }
                resourcesDirectories.forEach { if (!artifacts.files.contains(it)) {
                    artifact(it) { type = ArtifactTypeDefinition.JVM_RESOURCES_DIRECTORY }
                } }
            }
        }
    } }
}","/**

 * Fixes wired SourceSet does not expose compiled common classes and common resources as secondary variant

 * which is used in the Kotlin Project compilation.

 */",f8830:m379
56157,@kotlin.internal.InlineOnly public inline fun <T> T.apply(block: T.() -> Unit): T,"{
    contract { callsInPlace(block, InvocationKind.EXACTLY_ONCE) }
    block()
    return this
}","/**

 * Calls the specified function [block] with `this` value as its receiver and returns `this` value.

 *

 * For detailed usage information see the documentation for [scope functions](https://kotlinlang.org/docs/reference/scope-functions.html#apply).

 */",f16833:m145
41447,"inline fun <reified E: Exception> assertThrows(message: String = ""Expected ${E::class.java.name} to be thrown"", body: () -> Unit): Throwable","{
    try {
        body()
    } catch (e: Throwable) {
        if (e is E) {
            return e
        }
    }
    throw AssertionError(message)
}","/**

 * A replacement for the JUnit Jupiter function to be used in JUnit 4 tests.

 *

 * Asserts that the given code block throws an exception of the specified type.

 *

 * @param E the type of exception that is expected to be thrown

 * @param message the error message to be used if the exception is not thrown

 * @param body the code block to be executed and verified

 * @return the caught exception if it is of the specified type

 * @throws AssertionError if the specified exception is not thrown

 */",f13041:m15
16178,internal fun FirBasedSymbol<*>.unwrapSymbolToPostpone(): FirBasedSymbol<*>,"when (this) {
    is FirValueParameterSymbol -> containingFunctionSymbol
    else -> this
}","/**

 * @return a symbol which should be used as a member of [postponedSymbolsForAnnotationResolution] collection

 *

 * @see postponedSymbolsForAnnotationResolution

 */",f4076:m149
63448,"@Deprecated(""Use Kotlin compiler 1.4 to avoid deprecation warning."") @SinceKotlin(""1.1"") @DeprecatedSinceKotlin(hiddenSince = ""1.4"") public fun ShortArray.contentHashCode(): Int","{
    return this.contentHashCode()
}","/**

 * Returns a hash code based on the contents of this array as if it is [List].

 */",f17396:m1445
14910,public actual fun IntArray.copyOf(newSize: Int): IntArray,"{
    return this.copyOfUninitializedElements(newSize)
}","/**

 * Returns new array which is a copy of the original array, resized to the given [newSize].

 * The copy is either truncated or padded at the end with zero values if necessary.

 * 

 * - If [newSize] is less than the size of the original array, the copy array is truncated to the [newSize].

 * - If [newSize] is greater than the size of the original array, the extra elements in the copy array are filled with zero values.

 * 

 * @sample samples.collections.Arrays.CopyOfOperations.resizedPrimitiveCopyOf

 */",f3831:m2827
64076,"@Deprecated(""Direct conversion to Char is deprecated. Use toInt().toChar() or Char constructor instead."", ReplaceWith(""this.toInt().toChar()"")) @DeprecatedSinceKotlin(warningSince = ""1.5"", errorSince = ""2.3"") @kotlin.internal.IntrinsicConstEvaluation public override fun toChar(): Char",reinterpretAsInt().reinterpretAsChar(),"/**

     * Converts this [Byte] value to [Char].

     *

     * If this value is non-negative, the resulting `Char` code is equal to this value.

     *

     * The least significant 8 bits of the resulting `Char` code are the same as the bits of this `Byte` value,

     * whereas the most significant 8 bits are filled with the sign bit of this value.

     */",f17455:m725
52789,@Test fun testLookBehind(),"{
    var regex: Regex
    var result: List<String>
    regex = ""(?<=^/nl(?:/nl)?/\\d{1,600}[\\d+]{0,600}/[\\d+]{0,600})(\\d+)"".toRegex()
    result = regex.allGroups(""/nl/nl/1+2/3+4/"")
    assertEquals(2, result.count())
    assertEquals(""0 => 3; 1 => 3"", result[0])
    assertEquals(""0 => 4; 1 => 4"", result[1])
    regex = ""abe(?<=[ab][!be](.|\\b))(=|t)"".toRegex()
    result = regex.allGroups(""abet   abe="")
    assertEquals(2, result.count())
    assertEquals(""0 => abet; 1 => e; 2 => t"", result[0])
    assertEquals(""0 => abe=; 1 => ; 2 => ="", result[1])
}","/**

     * Tests regular expressions with lookbehind asserts.

     */",f16574:m39
54830,"@SinceKotlin(""1.1"") @kotlin.internal.InlineOnly public actual inline fun minOf(a: Long, b: Long, c: Long): Long","{
    return minOf(a, minOf(b, c))
}","/**

 * Returns the smaller of three values.

 */",f16714:m663
58563,"@kotlin.jvm.JvmName(""sumOfUInt"") @SinceKotlin(""1.5"") @WasExperimental(ExperimentalUnsignedTypes::class) public fun Sequence<UInt>.sum(): UInt","{
    var sum: UInt = 0u
    for (element in this) {
        sum += element
    }
    return sum
}","/**

 * Returns the sum of all elements in the sequence.

 *

 * The operation is _terminal_.

 */",f17091:m37
19993,"public inline fun <R> analyze(useSiteKtElement: KtElement, action: KtAnalysisSession.() -> R): R","KtAnalysisSessionProvider.getInstance(useSiteKtElement.project).analyse(useSiteKtElement, action)","/**

 * Executes the given [action] in a [KtAnalysisSession] context.

 *

 * The project will be analyzed from the perspective of [useSiteKtElement]'s module, also called the use-site module.

 *

 * @see KtAnalysisSession

 */",f5731:m35
10426,"fun satisfy(mark: Int, planner: Planner): Constraint?","{
    chooseMethod(mark)
    if (!isSatisfied()) {
        if (strength == Strength.REQUIRED) alert(""Could not satisfy a required constraint!"")
        return null
    }
    markInputs(mark)
    val out = this.output()
    val overridden = out.determinedBy
    if (overridden != null) overridden.markUnsatisfied()
    out.determinedBy = this
    if (!planner.addPropagate(this, mark)) alert(""Cycle encountered"")
    out.mark = mark
    return overridden
}","/**

   * Attempt to find a way to enforce this constraint. If successful,

   * record the solution, perhaps modifying the current dataflow

   * graph. Answer the constraint that this constraint overrides, if

   * there is one, or nil, if there isn't.

   * Assume: I am not already satisfied.

   */",f3476:m281
63672,"@Deprecated(""Use Kotlin compiler 1.4 to avoid deprecation warning."") @SinceKotlin(""1.3"") @DeprecatedSinceKotlin(hiddenSince = ""1.4"") @ExperimentalUnsignedTypes public infix fun UByteArray.contentEquals(other: UByteArray): Boolean","{
    return this.contentEquals(other)
}","/**

 * Checks if the two specified arrays are *structurally* equal to one another.

 * 

 * Two arrays are considered structurally equal if they have the same size, and elements at corresponding indices are equal.

 * 

 * @param other the array to compare with this array.

 * @return `true` if the two arrays are structurally equal, `false` otherwise.

 * 

 * @sample samples.collections.Arrays.ContentOperations.intArrayContentEquals

 */",f17408:m327
43427,"fun cartesianProductOf(first: Iterable<Any?>, second: Iterable<Any?>, vararg rest: Iterable<Any?>): Sequence<List<Any?>>","{
    var result: Sequence<Pair<Any?, Any?>> = first x second
    for (restItem in rest) {
        result = result x restItem
    }
    return result.flattenPairs
}","/**

 * Cartesian product of two and more collections.

 * Returns a sequence of all possible combinations between given elements.

 * Combination is represented as a list with indexes matching order of inputs

 * i.e.

 * ```

 * cartesianProductOf(listOf(""a"", ""b""), listOf(1, 2), listOf(4.3, 6.3)).map { list ->

 *    list[0] // will contain elements of the first argument e.g. ""a""

 *    list[1] // will contain elements of the second argument e.g. 2

 *    list[2] // will contain elements of the second argument e.g. 4.3

 *    // and so on

 * }

 * ```

 */",f13431:m15
54673,"@SinceKotlin(""1.4"") public actual fun <T> Array<out T>?.contentHashCode(): Int","{
    return contentHashCodeInternal()
}","/**

 * Returns a hash code based on the contents of this array as if it is [List].

 */",f16713:m887
58654,public infix fun Byte.downTo(to: Long): LongProgression,"{
    return LongProgression.fromClosedRange(this.toLong(), to, -1L)
}","/**

 * Returns a progression from this value down to the specified [to] value with the step -1.

 * 

 * The [to] value should be less than or equal to `this` value.

 * If the [to] value is greater than `this` value the returned progression is empty.

 */",f17092:m1751
57140,"@SinceKotlin(""1.1"") @kotlin.internal.InlineOnly public actual inline fun maxOf(a: Byte, b: Byte): Byte","{
    return Math.max(a.toInt(), b.toInt()).toByte()
}","/**

 * Returns the greater of two values.

 */",f16966:m53
14866,"@SinceKotlin(""1.4"") public actual fun IntArray?.contentHashCode(): Int","{
    if (this === null) return 0
    var result = 1
    for (element in this) result = 31 * result + element.hashCode()
    return result
}","/**

 * Returns a hash code based on the contents of this array as if it is [List].

 */",f3831:m1657
56143,public fun <T: Comparable<T>> naturalOrder(): Comparator<T>,"@Suppress(""UNCHECKED_CAST"") (NaturalOrderComparator as Comparator<T>)","/**

 * Returns a comparator that compares [Comparable] objects in natural order.

 *

 * The natural order of a `Comparable` type here means the order established by its `compareTo` function.

 *

 * @sample samples.comparisons.Comparisons.naturalOrderComparator

 */",f16832:m557
53128,public actual fun String.toLong(): Long,toLongOrNull() ?: numberFormatError(this),"/**

 * Parses the string as a [Long] number and returns the result.

 * @throws NumberFormatException if the string is not a valid representation of a number.

 */",f16618:m113
55745,"@ExperimentalStdlibApi @SinceKotlin(""1.9"") @ExperimentalUnsignedTypes @InlineOnly public inline fun String.hexToUByteArray(format: HexFormat = HexFormat.Default): UByteArray",hexToByteArray(format).asUByteArray(),"/**

 * Parses bytes from this string using the specified [HexFormat].

 *

 * Note that only [HexFormat.BytesHexFormat] affects parsing,

 * and parsing is performed in case-insensitive manner.

 * Also, any of the char sequences CRLF, LF and CR is considered a valid line separator.

 *

 * @param format the [HexFormat] to use for parsing, [HexFormat.Default] by default.

 *

 * @throws IllegalArgumentException if this string does not comply with the specified [format].

 */",f16790:m99
59155,"@SinceKotlin(""1.1"") public fun <T> minOf(a: T, b: T, c: T, comparator: Comparator<in T>): T","{
    return minOf(a, minOf(b, c, comparator), comparator)
}","/**

 * Returns the smaller of three values according to the order specified by the given [comparator].

 * 

 * If there are multiple equal minimal values, returns the first of them.

 */",f17100:m605
53118,"@SinceKotlin(""1.2"") @Suppress(""ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS"") public actual fun String.compareTo(other: String, ignoreCase: Boolean = false): Int","{
    if (ignoreCase) {
        val n1 = this.length
        val n2 = other.length
        val min = minOf(n1, n2)
        if (min == 0) return n1 - n2
        for (index in 0 until min) {
            var thisChar = this[index]
            var otherChar = other[index]
            if (thisChar != otherChar) {
                thisChar = thisChar.uppercaseChar()
                otherChar = otherChar.uppercaseChar()
                if (thisChar != otherChar) {
                    thisChar = thisChar.lowercaseChar()
                    otherChar = otherChar.lowercaseChar()
                    if (thisChar != otherChar) {
                        return thisChar.compareTo(otherChar)
                    }
                }
            }
        }
        return n1 - n2
    } else {
        return compareTo(other)
    }
}","/**

 * Compares two strings lexicographically, optionally ignoring case differences.

 *

 * If [ignoreCase] is true, the result of `Char.uppercaseChar().lowercaseChar()` on each character is compared.

 */",f16617:m585
14259,"public fun compareAndSwap(expected: T, newValue: T): T","this::value.compareAndExchangeField(expected, newValue)","/**

     * Atomically sets the value to the given [new value][newValue] if the current value equals the [expected value][expected]

     * and returns the old value in any case.

     *

     * Provides sequential consistent ordering guarantees and cannot fail spuriously.

     *

     * Comparison of values is done by reference.

     */",f3762:m397
58604,"@Deprecated(""This `contains` operation mixing integer and floating point arguments has ambiguous semantics and is going to be removed."") @DeprecatedSinceKotlin(warningSince = ""1.3"", errorSince = ""1.4"", hiddenSince = ""1.5"") @kotlin.jvm.JvmName(""intRangeContains"") public operator fun ClosedRange<Int>.contains(value: Double): Boolean","{
    return value.toIntExactOrNull().let { if (it != null) contains(it) else false }
}","/**

 * Checks if the specified [value] belongs to this range.

 */",f17092:m811
58971,public inline fun String.takeWhile(predicate: (Char) -> Boolean): String,"{
    for (index in 0 until length) if (!predicate(get(index))) {
        return substring(0, index)
    }
    return this
}","/**

 * Returns a string containing the first characters that satisfy the given [predicate].

 * 

 * @sample samples.text.Strings.take

 */",f17097:m1283
63603,internal fun Char.digitToIntImpl(): Int,"{
    val ch = this.code
    val index = binarySearchRange(rangeStart, ch)
    val diff = ch - rangeStart[index]
    return if (diff < 10) diff else -1
}","/**

 * Returns an integer from 0..9 indicating the digit this character represents,

 * or -1 if this character is not a digit.

 */",f17399:m81
13778,@kotlin.internal.IntrinsicConstEvaluation public operator fun compareTo(other: Byte): Int,this.compareTo(other.toDouble()),"/**

     * Compares this value with the specified value for order.

     * Returns zero if this value is equal to the specified other value, a negative number if it's less than other,

     * or a positive number if it's greater than other.

     */",f3686:m4609
63678,"@Deprecated(""Use Kotlin compiler 1.4 to avoid deprecation warning."") @SinceKotlin(""1.3"") @DeprecatedSinceKotlin(hiddenSince = ""1.4"") @ExperimentalUnsignedTypes public fun UIntArray.contentToString(): String","{
    return this.contentToString()
}","/**

 * Returns a string representation of the contents of the specified array as if it is [List].

 * 

 * @sample samples.collections.Arrays.ContentOperations.contentToString

 */",f17408:m487
47734,"@Deprecated(message = ""This is old k/n downloading method that is used on configuration phase"", replaceWith = ReplaceWith(""KotlinNativeInstaller"", ""org.jetbrains.kotlin.gradle.targets.native.toolchain.KotlinNativeInstaller""), level = DeprecationLevel.WARNING) internal fun Project.setupNativeCompiler(konanTarget: KonanTarget)","{
    val isKonanHomeOverridden = kotlinPropertiesProvider.nativeHome != null
    if (!isKonanHomeOverridden) {
        val downloader = NativeCompilerDownloader(this)
        if (kotlinPropertiesProvider.nativeReinstall) {
            logger.info(""Reinstall Kotlin/Native distribution"")
            downloader.compilerDirectory.deleteRecursively()
        }
        downloader.downloadIfNeeded()
        logger.info(""Kotlin/Native distribution: ${konanHome.absolutePath}"")
    } else {
        logger.info(""User-provided Kotlin/Native distribution: ${konanHome.absolutePath}"")
    }
    val distributionType = NativeDistributionTypeProvider(project).getDistributionType()
    if (distributionType.mustGeneratePlatformLibs) {
        PlatformLibrariesGenerator(project, konanTarget).generatePlatformLibsIfNeeded()
    }
}","/**

 * Sets up the Kotlin/Native compiler for the given project.

 *

 * @param konanTarget The target platform for the Kotlin/Native compiler.

 */",f15442:m465
63557,public actual operator fun IntArray.plus(elements: Collection<Int>): IntArray,"{
    var index = size
    val result = copyOfUninitializedElements(index + elements.size)
    for (element in elements) result[index++] = element
    return result
}","/**

 * Returns an array containing all elements of the original array and then all elements of the given [elements] collection.

 */",f17396:m4327
54645,public actual fun FloatArray.elementAt(index: Int): Float,"{
    return elementAtOrElse(index) { throw IndexOutOfBoundsException(""index: $index, size: $size}"") }
}","/**

 * Returns an element at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this array.

 * 

 * @sample samples.collections.Collections.Elements.elementAt

 */",f16713:m127
55910,public fun <T> mutableSetOf(vararg elements: T): MutableSet<T>,elements.toCollection(LinkedHashSet(mapCapacity(elements.size))),"/**

 * Returns a new [MutableSet] with the given elements.

 * Elements of the set are iterated in the order they were specified.

 * @sample samples.collections.Collections.Sets.mutableSet

 */",f16817:m145
7540,"fun buildCompileList(source: Path, outputDirectory: String, defaultModule: TestModule = TestModule.default()): List<TestFile>","{
    val result = mutableListOf<TestFile>()
    val srcFile = source.toFile()
    val srcText = srcFile.readText().replace(Regex(""<!.*?!>(.*?)<!>"")) { match -> match.groupValues[1] }
    var supportModule: TestModule? = if (srcText.contains(""// WITH_COROUTINES"")) TestModule.support() else null
    val moduleMatcher = MODULE_PATTERN.matcher(srcText)
    val fileMatcher = FILE_PATTERN.matcher(srcText)
    var nextModuleExists = moduleMatcher.find()
    var nextFileExists = fileMatcher.find()
    if (!nextModuleExists && !nextFileExists) {
        if (supportModule != null) defaultModule.dependencies.add(supportModule.name)
        result.add(TestFile(srcFile.name, ""$outputDirectory/${srcFile.name}"", srcText, defaultModule))
    } else {
        var processedChars = 0
        var module: TestModule = defaultModule
        while (nextModuleExists || nextFileExists) {
            if (nextModuleExists) {
                var moduleName = moduleMatcher.group(1)
                val moduleDependencies = moduleMatcher.group(2)
                val moduleFriends = moduleMatcher.group(3)
                if (moduleName != null) {
                    moduleName = moduleName.trim { it <= ' ' }
                    val dependencies = mutableListOf<String>().apply { addAll(moduleDependencies.parseModuleList().map { if (it != ""support"") ""${srcFile.name}.$it"" else it }) }
                    module = TestModule(""${srcFile.name}.$moduleName"", dependencies, mutableListOf<String>().apply { addAll(moduleFriends.parseModuleList().map { ""${srcFile.name}.$it"" }) })
                }
            }
            if (supportModule != null && !module.dependencies.contains(""support"")) {
                module.dependencies.add(""support"")
            }
            nextModuleExists = moduleMatcher.find()
            while (nextFileExists) {
                val fileName = fileMatcher.group(1)
                val filePath = ""$outputDirectory/$fileName""
                val start = processedChars
                nextFileExists = fileMatcher.find()
                val end = when {
                    nextFileExists && nextModuleExists -> Math.min(fileMatcher.start(), moduleMatcher.start())
                    nextFileExists -> fileMatcher.start()
                    else -> srcText.length
                }
                val fileText = srcText.substring(start, end)
                processedChars = end
                if (fileName.endsWith("".kt"")) {
                    result.add(TestFile(fileName, filePath, fileText, module))
                }
                if (nextModuleExists && nextFileExists && fileMatcher.start() > moduleMatcher.start()) break
            }
        }
    }
    return result
}","/**

 * Creates test files from the given source file that may contain different test directives.

 *

 * @return list of test files [TestFile] to be compiled

 */",f3117:m45
14873,"@Deprecated(""Use Kotlin compiler 1.4 to avoid deprecation warning."") @SinceKotlin(""1.1"") @DeprecatedSinceKotlin(hiddenSince = ""1.4"") public fun ByteArray.contentToString(): String","{
    return this.contentToString()
}","/**

 * Returns a string representation of the contents of the specified array as if it is [List].

 * 

 * @sample samples.collections.Arrays.ContentOperations.contentToString

 */",f3831:m1825
52028,operator fun <R> List<ScriptDiagnostic>.plus(result: ResultWithDiagnostics<R>): ResultWithDiagnostics<R>,"when (result) {
    is ResultWithDiagnostics.Success -> ResultWithDiagnostics.Success(result.value, this + result.reports)
    is ResultWithDiagnostics.Failure -> ResultWithDiagnostics.Failure(this + result.reports)
}","/**

 * Merges diagnostics report with the [result] wrapper

 */",f16426:m409
50319,@Test fun `test commonizeNativeDistributionTask applied jvm-ecosystem plugin`(),"{
    val rootProject = ProjectBuilder.builder().build() as ProjectInternal
    val subproject = ProjectBuilder.builder().withParent(rootProject).build() as ProjectInternal
    val jvmEcosystemPluginId = ""jvm-ecosystem""
    assertNull(rootProject.plugins.findPlugin(jvmEcosystemPluginId))
    val kotlin = subproject.applyMultiplatformPlugin()
    assertNull(rootProject.plugins.findPlugin(jvmEcosystemPluginId))
    kotlin.linuxArm64()
    kotlin.linuxX64()
    rootProject.evaluate()
    subproject.evaluate()
    assertNotNull(rootProject.plugins.findPlugin(jvmEcosystemPluginId))
}","/**

     * Check if jvm-ecosystem plugin is applied when commonizer task is applied to the root project.

     * Context: https://github.com/gradle/gradle/issues/20145

     * https://youtrack.jetbrains.com/issue/KT-51583

     */",f16097:m171
58831,"@SinceKotlin(""1.4"") @OptIn(kotlin.experimental.ExperimentalTypeInference::class) @OverloadResolutionByLambdaReturnType @kotlin.internal.InlineOnly public inline fun <T> Sequence<T>.maxOfOrNull(selector: (T) -> Double): Double?","{
    val iterator = iterator()
    if (!iterator.hasNext()) return null
    var maxValue = selector(iterator.next())
    while (iterator.hasNext()) {
        val v = selector(iterator.next())
        maxValue = maxOf(maxValue, v)
    }
    return maxValue
}","/**

 * Returns the largest value among all values produced by [selector] function

 * applied to each element in the sequence or `null` if there are no elements.

 * 

 * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.

 *

 * The operation is _terminal_.

 */",f17096:m3055
57286,"@SinceKotlin(""1.3"") @Suppress(""ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS"") public actual fun <T> Array<out T>.copyInto(destination: Array<T>, destinationOffset: Int = 0, startIndex: Int = 0, endIndex: Int = size): Array<T>","{
    System.arraycopy(this, startIndex, destination, destinationOffset, endIndex - startIndex)
    return destination
}","/**

 * Copies this array or its subrange into the [destination] array and returns that array.

 * 

 * It's allowed to pass the same array in the [destination] and even specify the subrange so that it overlaps with the destination range.

 * 

 * @param destination the array to copy to.

 * @param destinationOffset the position in the [destination] array to copy to, 0 by default.

 * @param startIndex the beginning (inclusive) of the subrange to copy, 0 by default.

 * @param endIndex the end (exclusive) of the subrange to copy, size of this array by default.

 * 

 * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of this array indices or when `startIndex > endIndex`.

 * @throws IndexOutOfBoundsException when the subrange doesn't fit into the [destination] array starting at the specified [destinationOffset],

 * or when that index is out of the [destination] array indices range.

 * 

 * @return the [destination] array.

 */",f16970:m1825
50443,@Test fun `launch in EvaluateBuildscript`(),"{
    val project = buildProject()
    project.startKotlinPluginLifecycle()
    var executed = false
    project.launch { executed = true }
    assertTrue(executed, ""Expected coroutine in $EvaluateBuildscript Phase to be executed right away"")
}","/**

     * Launching in 'EvaluateBuildscript' will execute the launched code right away!

     * This code will showcase that launching before any 'afterEvaluate' listeners have been invoked is possible.

     * However, the launched coroutines can be executed right away.

     */",f16110:m55
54640,public actual fun <T> Array<out T>.elementAt(index: Int): T,"{
    return elementAtOrElse(index) { throw IndexOutOfBoundsException(""index: $index, size: $size}"") }
}","/**

 * Returns an element at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this array.

 * 

 * @sample samples.collections.Collections.Elements.elementAt

 */",f16713:m37
56227,"@SinceKotlin(""1.5"") @kotlin.internal.InlineOnly @kotlin.internal.IntrinsicConstEvaluation public inline fun Short.floorDiv(other: Byte): Int",this.toInt().floorDiv(other.toInt()),"/** Divides this value by the other value, flooring the result to an integer that is closer to negative infinity. */",f16842:m173
57394,public actual fun BooleanArray.toTypedArray(): Array<Boolean>,"{
    val result = arrayOfNulls<Boolean>(size)
    for (index in indices) result[index] = this[index]
    @Suppress(""UNCHECKED_CAST"") return result as Array<Boolean>
}","/**

 * Returns a *typed* object array containing all of the elements of this primitive array.

 */",f16970:m4653
45614,fun toolOptions(configure: TO.() -> Unit),"{
    configure(toolOptions)
}","/**

     * Configures the [toolOptions] with the provided configuration.

     */",f14891:m65
54822,"@SinceKotlin(""1.1"") @kotlin.internal.InlineOnly public actual inline fun minOf(a: Int, b: Int): Int","{
    return JsMath.min(a, b)
}","/**

 * Returns the smaller of two values.

 */",f16714:m509
41028,private fun cleanupStash(),"{
    reporter.debug { ""Cleaning up stash"" }
    reporter.measure(GradleBuildTime.CLEAN_BACKUP_STASH) { Files.walk(stashDir).use { it.sorted(Comparator.reverseOrder()).forEach(Files::delete) } }
}","/**

     * Deletes the [stashDir].

     */",f12984:m471
55120,@kotlin.internal.IntrinsicConstEvaluation public inline operator fun plus(other: Double): Double,this.toDouble().plus(other),/** Adds the other value to this value. */,f16727:m2559
54646,public actual fun DoubleArray.elementAt(index: Int): Double,"{
    return elementAtOrElse(index) { throw IndexOutOfBoundsException(""index: $index, size: $size}"") }
}","/**

 * Returns an element at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this array.

 * 

 * @sample samples.collections.Collections.Elements.elementAt

 */",f16713:m145
58974,"public inline fun <K, V> CharSequence.associate(transform: (Char) -> Pair<K, V>): Map<K, V>","{
    val capacity = mapCapacity(length).coerceAtLeast(16)
    return associateTo(LinkedHashMap<K, V>(capacity), transform)
}","/**

 * Returns a [Map] containing key-value pairs provided by [transform] function

 * applied to characters of the given char sequence.

 * 

 * If any of two pairs would have the same key the last one gets added to the map.

 * 

 * The returned map preserves the entry iteration order of the original char sequence.

 * 

 * @sample samples.text.Strings.associate

 */",f17097:m1339
13482,@kotlin.internal.IntrinsicConstEvaluation public inline operator fun plus(other: Byte): Int,this.toInt() + other.toInt(),/** Adds the other value to this value. */,f3686:m191
58878,"@SinceKotlin(""1.5"") @OptIn(kotlin.experimental.ExperimentalTypeInference::class) @OverloadResolutionByLambdaReturnType @kotlin.jvm.JvmName(""sumOfUInt"") @WasExperimental(ExperimentalUnsignedTypes::class) @kotlin.internal.InlineOnly public inline fun <T> Sequence<T>.sumOf(selector: (T) -> UInt): UInt","{
    var sum: UInt = 0.toUInt()
    for (element in this) {
        sum += selector(element)
    }
    return sum
}","/**

 * Returns the sum of all values produced by [selector] function applied to each element in the sequence.

 *

 * The operation is _terminal_.

 */",f17096:m5063
56965,"@SinceKotlin(""1.3"") @InlineOnly public actual inline fun <R, T> (suspend R.() -> T).startCoroutineUninterceptedOrReturn(receiver: R, completion: Continuation<T>): Any?","if (this !is BaseContinuationImpl) wrapWithContinuationImpl(receiver, completion) else (this as Function2<R, Continuation<T>, Any?>).invoke(receiver, completion)","/**

 * Starts an unintercepted coroutine with receiver type [R] and result type [T] and executes it until its first suspension.

 * Returns the result of the coroutine or throws its exception if it does not suspend or [COROUTINE_SUSPENDED] if it suspends.

 * In the latter case, the [completion] continuation is invoked when the coroutine completes with a result or an exception.

 *

 * The coroutine is started directly in the invoker's thread without going through the [ContinuationInterceptor] that might

 * be present in the completion's [CoroutineContext]. It is the invoker's responsibility to ensure that a proper invocation

 * context is established.

 *

 * This function is designed to be used from inside of [suspendCoroutineUninterceptedOrReturn] to resume the execution of the suspended

 * coroutine using a reference to the suspending function.

 */",f16944:m91
53147,"@Suppress(""ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS"") public actual fun String.startsWith(prefix: String, ignoreCase: Boolean = false): Boolean","{
    if (!ignoreCase) return nativeStartsWith(prefix, 0) else return regionMatches(0, prefix, 0, prefix.length, ignoreCase)
}","/**

 * Returns `true` if this string starts with the specified prefix.

 */",f16624:m31
21920,internal fun FirCallableSymbol<*>.computeImportableName(useSiteSession: FirSession): FqName?,"{
    if (callableId.isLocal) return null
    if (origin is FirDeclarationOrigin.SamConstructor) return callableId.asSingleFqName()
    val containingClassId = callableId.classId ?: return callableId.asSingleFqName()
    if (this is FirConstructorSymbol) return containingClassId.asSingleFqName()
    val containingClass = getContainingClassSymbol(useSiteSession) ?: return null
    val canBeImported = containingClass.origin is FirDeclarationOrigin.Java || containingClass.classKind == ClassKind.ENUM_CLASS || containingClass.classKind == ClassKind.OBJECT
    return if (canBeImported) callableId.asSingleFqName() else null
}","/**

 * @receiver A symbol that needs to be imported

 * @param useSiteSession A use-site fir session.

 * @return An [FqName] by which this symbol can be imported (if it is possible)

 */",f8662:m103
14004,"@SinceKotlin(""1.5"") public actual fun CharSequence?.contentEquals(other: CharSequence?, ignoreCase: Boolean): Boolean","{
    return if (ignoreCase) this.contentEqualsIgnoreCaseImpl(other) else this.contentEqualsImpl(other)
}","/**

 * Returns `true` if the contents of this char sequence are equal to the contents of the specified [other], optionally ignoring case difference.

 *

 * @param ignoreCase `true` to ignore character case when comparing contents.

 *

 * @sample samples.text.Strings.contentEquals

 */",f3713:m1023
23950,"fun analyzeSpecialSerializers(moduleDescriptor: ModuleDescriptor, annotations: Annotations): ClassDescriptor?","when {
    annotations.hasAnnotation(SerializationAnnotations.contextualFqName) || annotations.hasAnnotation(SerializationAnnotations.contextualOnPropertyFqName) -> moduleDescriptor.getClassFromSerializationPackage(SpecialBuiltins.contextSerializer)
    annotations.hasAnnotation(SerializationAnnotations.polymorphicFqName) -> moduleDescriptor.getClassFromSerializationPackage(SpecialBuiltins.polymorphicSerializer)
    else -> null
}","/**

 * Returns class descriptor for ContextSerializer or PolymorphicSerializer

 * if [annotations] contains @Contextual or @Polymorphic annotation

 */",f9040:m211
14832,"@SinceKotlin(""1.1"") @kotlin.internal.LowPriorityInOverloadResolution public actual fun <T> Array<out T>.contentDeepHashCode(): Int","{
    return this.contentDeepHashCode()
}","/**

 * Returns a hash code based on the contents of this array as if it is [List].

 * Nested arrays are treated as lists too.

 * 

 * If any of arrays contains itself on any nesting level the behavior is undefined.

 */",f3831:m549
56878,@kotlin.internal.InlineOnly public inline fun assert(value: Boolean),"{
    assert(value) { ""Assertion failed"" }
}","/**

 * Throws an [AssertionError] if the [value] is false

 * and runtime assertions have been enabled on the JVM using the *-ea* JVM option.

 */",f16931:m33
63657,"@SinceKotlin(""1.4"") public actual fun minOf(a: Int, vararg other: Int): Int","{
    var min = a
    for (e in other) min = minOf(min, e)
    return min
}","/**

 * Returns the smaller of the given values.

 */",f17406:m803
58826,"@SinceKotlin(""1.7"") @kotlin.jvm.JvmName(""maxByOrThrow"") @Suppress(""CONFLICTING_OVERLOADS"") public inline fun <T, R: Comparable<R>> Sequence<T>.maxBy(selector: (T) -> R): T","{
    val iterator = iterator()
    if (!iterator.hasNext()) throw NoSuchElementException()
    var maxElem = iterator.next()
    if (!iterator.hasNext()) return maxElem
    var maxValue = selector(maxElem)
    do {
        val e = iterator.next()
        val v = selector(e)
        if (maxValue < v) {
            maxElem = e
            maxValue = v
        }
    } while (iterator.hasNext())
    return maxElem
}","/**

 * Returns the first element yielding the largest value of the given function.

 *

 * The operation is _terminal_.

 * 

 * @throws NoSuchElementException if the sequence is empty.

 * 

 * @sample samples.collections.Collections.Aggregates.maxBy

 */",f17096:m2797
23021,fun Project.excludeGradleCommonDependencies(sourceSet: SourceSet),"{
    configurations[sourceSet.implementationConfigurationName].excludeGradleCommonDependencies()
    configurations[sourceSet.apiConfigurationName].excludeGradleCommonDependencies()
    configurations[sourceSet.runtimeOnlyConfigurationName].excludeGradleCommonDependencies()
}","/**

 * Exclude Gradle runtime from given SourceSet configurations.

 */",f8830:m239
58543,"@SinceKotlin(""1.5"") @WasExperimental(ExperimentalUnsignedTypes::class) public infix fun UIntProgression.step(step: Int): UIntProgression","{
    checkStepIsPositive(step > 0, step)
    return UIntProgression.fromClosedRange(first, last, if (this.step > 0) step else -step)
}","/**

 * Returns a progression that goes over the same range with the given step.

 * 

 * @sample samples.ranges.Ranges.stepUInt

 */",f17090:m693
11470,"private fun treatAsArgument(arg: String, argumentsQueue: ArgumentsQueue)","{
    if (!saveAsArg(arg, argumentsQueue)) {
        usedSubcommand?.let { (if (treatAsOption) subcommandsOptions else subcommandsArguments).add(arg) } ?: printError(""Too many arguments! Couldn't process argument $arg!"")
    }
}","/**

     * Treat value as argument value.

     *

     * @param arg string with argument value.

     * @param argumentsQueue queue with active argument descriptors.

     */",f3554:m737
55122,@kotlin.internal.IntrinsicConstEvaluation public inline operator fun minus(other: Short): Long,this.minus(other.toLong()),/** Subtracts the other value from this value. */,f16727:m2579
54838,"@SinceKotlin(""1.4"") public actual fun minOf(a: Float, vararg other: Float): Float","{
    var min = a
    for (e in other) min = minOf(min, e)
    return min
}","/**

 * Returns the smaller of the given values.

 * 

 * If any value is `NaN`, returns `NaN`.

 */",f16714:m829
52405,open fun isLineTerminator(char: Char): Boolean,isLineTerminator(char.toInt()),/** Checks if the single character is a line terminator or not. */,f16498:m109
58762,public inline fun <reified R> Sequence<*>.filterIsInstance(): Sequence<@kotlin.internal.NoInfer R>,"{
    @Suppress(""UNCHECKED_CAST"") return filter { it is R } as Sequence<R>
}","/**

 * Returns a sequence containing all elements that are instances of specified type parameter R.

 *

 * The operation is _intermediate_ and _stateless_.

 * 

 * @sample samples.collections.Collections.Filtering.filterIsInstance

 */",f17096:m935
58796,"public inline fun <T, R, C: MutableCollection<in R>> Sequence<T>.flatMapTo(destination: C, transform: (T) -> Sequence<R>): C","{
    for (element in this) {
        val list = transform(element)
        destination.addAll(list)
    }
    return destination
}","/**

 * Appends all elements yielded from results of [transform] function being invoked on each element of original sequence, to the given [destination].

 *

 * The operation is _terminal_.

 */",f17096:m1935
58470,"@SinceKotlin(""1.4"") @OptIn(kotlin.experimental.ExperimentalTypeInference::class) @OverloadResolutionByLambdaReturnType @kotlin.jvm.JvmName(""flatMapSequence"") public inline fun <K, V, R> Map<out K, V>.flatMap(transform: (Map.Entry<K, V>) -> Sequence<R>): List<R>","{
    return flatMapTo(ArrayList<R>(), transform)
}","/**

 * Returns a single list of all elements yielded from results of [transform] function being invoked on each entry of original map.

 * 

 * @sample samples.collections.Collections.Transformations.flatMap

 */",f17089:m159
56600,@PublishedApi internal actual fun mapCapacity(expectedSize: Int): Int,"when {
    expectedSize < 0 -> expectedSize
    expectedSize < 3 -> expectedSize + 1
    expectedSize < INT_MAX_POWER_OF_TWO -> ((expectedSize / 0.75F) + 1.0F).toInt()
    else -> Int.MAX_VALUE
}","/**

 * Calculate the initial capacity of a map, based on Guava's

 * [com.google.common.collect.Maps.capacity](https://github.com/google/guava/blob/v28.2/guava/src/com/google/common/collect/Maps.java#L325)

 * approach.

 */",f16913:m281
59114,"@kotlin.jvm.JvmName(""sumOfULong"") @SinceKotlin(""1.5"") @WasExperimental(ExperimentalUnsignedTypes::class) public fun Iterable<ULong>.sum(): ULong","{
    var sum: ULong = 0uL
    for (element in this) {
        sum += element
    }
    return sum
}","/**

 * Returns the sum of all elements in the collection.

 */",f17099:m173
64275,@kotlin.internal.IntrinsicConstEvaluation public override fun toDouble(): Double,wasm_f64_convert_i64_s(this),"/**

     * Converts this [Long] value to [Double].

     *

     * The resulting value is the closest `Double` to this `Long` value.

     * In case when this `Long` value is exactly between two `Double`s,

     * the one with zero at least significant bit of mantissa is selected.

     */",f17455:m3709
57291,"@SinceKotlin(""1.3"") @Suppress(""ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS"") public actual fun FloatArray.copyInto(destination: FloatArray, destinationOffset: Int = 0, startIndex: Int = 0, endIndex: Int = size): FloatArray","{
    System.arraycopy(this, startIndex, destination, destinationOffset, endIndex - startIndex)
    return destination
}","/**

 * Copies this array or its subrange into the [destination] array and returns that array.

 * 

 * It's allowed to pass the same array in the [destination] and even specify the subrange so that it overlaps with the destination range.

 * 

 * @param destination the array to copy to.

 * @param destinationOffset the position in the [destination] array to copy to, 0 by default.

 * @param startIndex the beginning (inclusive) of the subrange to copy, 0 by default.

 * @param endIndex the end (exclusive) of the subrange to copy, size of this array by default.

 * 

 * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of this array indices or when `startIndex > endIndex`.

 * @throws IndexOutOfBoundsException when the subrange doesn't fit into the [destination] array starting at the specified [destinationOffset],

 * or when that index is out of the [destination] array indices range.

 * 

 * @return the [destination] array.

 */",f16970:m2055
63282,"private fun codePointFrom3(bytes: ByteArray, byte1: Int, index: Int, endIndex: Int, throwOnMalformed: Boolean): Int","{
    if (index >= endIndex) {
        return malformed(0, index, throwOnMalformed)
    }
    val byte2 = bytes[index].toInt()
    if (byte1 and 0xF == 0) {
        if (byte2 and 0xE0 != 0xA0) {
            return malformed(0, index, throwOnMalformed)
        }
    } else if (byte1 and 0xF == 0xD) {
        if (byte2 and 0xE0 != 0x80) {
            return malformed(0, index, throwOnMalformed)
        }
    } else if (byte2 and 0xC0 != 0x80) {
        return malformed(0, index, throwOnMalformed)
    }
    if (index + 1 == endIndex) {
        return malformed(1, index, throwOnMalformed)
    }
    val byte3 = bytes[index + 1].toInt()
    if (byte3 and 0xC0 != 0x80) {
        return malformed(1, index, throwOnMalformed)
    }
    return (byte1 shl 12) xor (byte2 shl 6) xor byte3 xor -0x1E080
}","/**

 * Returns code point corresponding to UTF-8 sequence of three bytes,

 * where the first byte of the sequence is the [byte1] and the others are in the [bytes] array starting from the [index].

 * Returns a non-positive value indicating number of bytes from [bytes] included in malformed sequence

 * if the sequence is malformed and [throwOnMalformed] is false.

 *

 * @throws CharacterCodingException if the sequence of three bytes is malformed and [throwOnMalformed] is true.

 */",f17358:m99
53168,"@LowPriorityInOverloadResolution @Deprecated(message = ""This API is moved to another package, use 'kotlinx.dom.hasClass' instead."", replaceWith = ReplaceWith(""this.hasClass(cssClass)"", ""kotlinx.dom.hasClass"")) @DeprecatedSinceKotlin(warningSince = ""1.4"", errorSince = ""1.6"") @Suppress(""NOTHING_TO_INLINE"") public inline fun Element.hasClass(cssClass: String): Boolean",this.newHasClass(cssClass),/** Returns true if the element has the given CSS class style in its 'class' attribute */,f16628:m27
8713,fun getDeclaredFields(llvm: CodegenLlvmHelpers): List<FieldInfo>,"{
    val outerThisField = if (irClass.isInner) context.innerClassesSupport.getOuterThisField(irClass) else null
    val moduleDeserializer = context.irLinker.getCachedDeclarationModuleDeserializer(irClass)
    if (moduleDeserializer != null) return moduleDeserializer.deserializeClassFields(irClass, outerThisField?.toFieldInfo(llvm))
    val declarations = irClass.declarations.toMutableList()
    outerThisField?.let { if (!declarations.contains(it)) declarations += it }
    return declarations.mapNotNull { when (it) {
        is IrField -> it.takeIf { it.isReal && !it.isStatic }?.toFieldInfo(llvm)
        is IrProperty -> it.takeIf { it.isReal }?.backingField?.takeIf { !it.isStatic }?.toFieldInfo(llvm)
        else -> null
    } }
}","/**

     * Fields declared in the class.

     */",f3286:m1005
58996,public inline fun <R> CharSequence.map(transform: (Char) -> R): List<R>,"{
    return mapTo(ArrayList<R>(length), transform)
}","/**

 * Returns a list containing the results of applying the given [transform] function

 * to each character in the original char sequence.

 * 

 * @sample samples.text.Strings.map

 */",f17097:m1935
48511,fun getSharedLib(buildType: NativeBuildType): SharedLibrary,"getSharedLib("""", buildType)",/** Returns a shared library with the empty name prefix and the given build type. Throws an exception if there is no such binary.*/,f15652:m199
58768,"public inline fun <T, C: MutableCollection<in T>> Sequence<T>.filterTo(destination: C, predicate: (T) -> Boolean): C","{
    for (element in this) if (predicate(element)) destination.add(element)
    return destination
}","/**

 * Appends all elements matching the given [predicate] to the given [destination].

 *

 * The operation is _terminal_.

 * 

 * @sample samples.collections.Collections.Filtering.filterTo

 */",f17096:m1077
57311,@kotlin.internal.InlineOnly public actual inline fun CharArray.copyOf(newSize: Int): CharArray,"{
    return java.util.Arrays.copyOf(this, newSize)
}","/**

 * Returns new array which is a copy of the original array, resized to the given [newSize].

 * The copy is either truncated or padded at the end with null char (`\u0000`) values if necessary.

 * 

 * - If [newSize] is less than the size of the original array, the copy array is truncated to the [newSize].

 * - If [newSize] is greater than the size of the original array, the extra elements in the copy array are filled with null char (`\u0000`) values.

 * 

 * @sample samples.collections.Arrays.CopyOfOperations.resizedPrimitiveCopyOf

 */",f16970:m2615
57292,"@SinceKotlin(""1.3"") @Suppress(""ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS"") public actual fun DoubleArray.copyInto(destination: DoubleArray, destinationOffset: Int = 0, startIndex: Int = 0, endIndex: Int = size): DoubleArray","{
    System.arraycopy(this, startIndex, destination, destinationOffset, endIndex - startIndex)
    return destination
}","/**

 * Copies this array or its subrange into the [destination] array and returns that array.

 * 

 * It's allowed to pass the same array in the [destination] and even specify the subrange so that it overlaps with the destination range.

 * 

 * @param destination the array to copy to.

 * @param destinationOffset the position in the [destination] array to copy to, 0 by default.

 * @param startIndex the beginning (inclusive) of the subrange to copy, 0 by default.

 * @param endIndex the end (exclusive) of the subrange to copy, size of this array by default.

 * 

 * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of this array indices or when `startIndex > endIndex`.

 * @throws IndexOutOfBoundsException when the subrange doesn't fit into the [destination] array starting at the specified [destinationOffset],

 * or when that index is out of the [destination] array indices range.

 * 

 * @return the [destination] array.

 */",f16970:m2101
59548,"@SinceKotlin(""1.2"") @kotlin.internal.InlineOnly public inline fun <@kotlin.internal.OnlyInputTypes K, V> Map<out K, V>.getOrDefault(key: K, defaultValue: V): V","(this as Map<K, V>).getOrDefault(key, defaultValue)","/**

 * Returns the value to which the specified key is mapped, or

 * [defaultValue] if this map contains no mapping for the key.

 */",f17131:m45
54747,public actual operator fun ShortArray.plus(elements: Collection<Short>): ShortArray,"{
    var index = size
    val result = this.copyOf(size + elements.size)
    for (element in elements) result[index++] = element
    return result
}","/**

 * Returns an array containing all elements of the original array and then all elements of the given [elements] collection.

 */",f16713:m2795
55287,public operator fun String?.plus(other: Any?): String,"(this?.toString() ?: ""null"").plus(other?.toString() ?: ""null"")","/**

 * Concatenates this string with the string representation of the given [other] object. If either the receiver

 * or the [other] object are null, they are represented as the string ""null"".

 */",f16731:m37
56153,@kotlin.internal.InlineOnly public inline fun TODO(reason: String): Nothing,"throw NotImplementedError(""An operation is not implemented: $reason"")","/**

 * Always throws [NotImplementedError] stating that operation is not implemented.

 *

 * @param reason a string explaining why the implementation is missing.

 */",f16833:m47
63281,"private fun codePointFrom2(bytes: ByteArray, byte1: Int, index: Int, endIndex: Int, throwOnMalformed: Boolean): Int","{
    if (byte1 and 0x1E == 0 || index >= endIndex) {
        return malformed(0, index, throwOnMalformed)
    }
    val byte2 = bytes[index].toInt()
    if (byte2 and 0xC0 != 0x80) {
        return malformed(0, index, throwOnMalformed)
    }
    return (byte1 shl 6) xor byte2 xor 0xF80
}","/**

 * Returns code point corresponding to UTF-8 sequence of two bytes,

 * where the first byte of the sequence is the [byte1] and the second byte is in the [bytes] array at the [index].

 * Returns zero if the sequence is malformed and [throwOnMalformed] is false.

 *

 * @throws CharacterCodingException if the sequence of two bytes is malformed and [throwOnMalformed] is true.

 */",f17358:m63
13598,@kotlin.internal.IntrinsicConstEvaluation public inline operator fun compareTo(other: Float): Int,this.toFloat().compareTo(other),"/**

     * Compares this value with the specified value for order.

     * Returns zero if this value is equal to the specified other value, a negative number if it's less than other,

     * or a positive number if it's greater than other.

     */",f3686:m1883
45752,"fun <T: Dependency> compileOnly(dependency: T, configure: Action<T>)",compileOnly(dependency) { configure.execute(this) },"/**

     * Adds a `compileOnly` dependency to this entity.

     *

     * @see [HasKotlinDependencies.compileOnlyConfigurationName]

     *

     * @param dependency The dependency to add.

     * @param configure Additional configuration for the [dependency].

     * @return The added [dependency].

     */",f14927:m371
45635,@ExperimentalKotlinGradlePluginApi fun compilerOptions(configure: Action<CO>),"{
    configure.execute(compilerOptions)
}","/**

     * Configures the [compilerOptions] with the provided configuration.

     */",f14904:m65
1485,fun TranslationContext.getPrecisePrimitiveType(expression: KtExpression): KotlinType?,"{
    val bindingContext = bindingContext()
    val ktType = bindingContext.getType(expression) ?: return null
    return ktType.refineType()
}","/**

 * Tries to get precise statically known primitive type. Takes generic supertypes into account. Doesn't handle smart-casts.

 * This is needed to be compatible with JVM NaN behaviour:

 *

 * // Generics with Double super-type

 * fun <T: Double> foo(v: T) = println(v == v)

 * foo(Double.NaN) // false

 *

 * Also see org/jetbrains/kotlin/codegen/codegenUtil.kt#calcTypeForIEEE754ArithmeticIfNeeded

 */",f359:m613
14145,"@SinceKotlin(""1.3"") @Suppress(""UNCHECKED_CAST"") public actual fun <R, T> (suspend R.() -> T).createCoroutineUnintercepted(receiver: R, completion: Continuation<T>): Continuation<Unit>","{
    val probeCompletion = probeCoroutineCreated(completion)
    return if (this is BaseContinuationImpl) create(receiver, probeCompletion) else {
        createCoroutineFromSuspendFunction(probeCompletion) { this.startCoroutineUninterceptedOrReturn(receiver, it) }
    }
}","/**

 * Creates unintercepted coroutine with receiver type [R] and result type [T].

 * This function creates a new, fresh instance of suspendable computation every time it is invoked.

 *

 * To start executing the created coroutine, invoke `resume(Unit)` on the returned [Continuation] instance.

 * The [completion] continuation is invoked when coroutine completes with result or exception.

 *

 * This function returns unintercepted continuation.

 * Invocation of `resume(Unit)` starts coroutine immediately in the invoker's call stack without going through the

 * [ContinuationInterceptor] that might be present in the completion's [CoroutineContext].

 * It is the invoker's responsibility to ensure that a proper invocation context is established.

 * Note that [completion] of this function may get invoked in an arbitrary context.

 *

 * [Continuation.intercepted] can be used to acquire the intercepted continuation.

 * Invocation of `resume(Unit)` on intercepted continuation guarantees that execution of

 * both the coroutine and [completion] happens in the invocation context established by

 * [ContinuationInterceptor].

 *

 * Repeated invocation of any resume function on the resulting continuation corrupts the

 * state machine of the coroutine and may result in arbitrary behaviour or exception.

 */",f3737:m307
32513,private fun FunctionDescriptor.incDecCheckForExpectClass(receiver: ReceiverParameterDescriptor): Boolean,"{
    val receiverValue = receiver.value
    if (receiverValue !is ImplicitClassReceiver) return false
    val classDescriptor = receiverValue.classDescriptor
    if (!classDescriptor.isExpect) return false
    val potentialActualAliasId = classDescriptor.classId ?: return false
    val actualReceiverTypeAlias = classDescriptor.module.findClassifierAcrossModuleDependencies(potentialActualAliasId) as? TypeAliasDescriptor ?: return false
    returnType?.let { returnType -> return returnType.isSubtypeOf(actualReceiverTypeAlias.expandedType) }
    return false
}","/**

     * See KT-49714

     * Workaround for mismatching types of an implicit dispatch receiver inside an `expect` class

     * and a type resolved from a reference to this class. During compilation all actual type aliases are known,

     * so the explicit return type is `actual`. But the implicit receiver type inside the class remains `expect`

     * because it's received from the default type of the containing class, which is not affected by the `actual` type alias.

     *

     * `actual` classes are not affected, since non-parameterized type constructors with equal fqNames are considered

     * equal, so subtyping check passes in this case despite mismatching expect/actual in the corresponding declaration descriptors.

     */",f11016:m455
59076,"@SinceKotlin(""1.2"") public fun <R> CharSequence.windowed(size: Int, step: Int = 1, partialWindows: Boolean = false, transform: (CharSequence) -> R): List<R>","{
    checkWindowSizeStep(size, step)
    val thisSize = this.length
    val resultCapacity = thisSize / step + if (thisSize % step == 0) 0 else 1
    val result = ArrayList<R>(resultCapacity)
    var index = 0
    while (index in 0 until thisSize) {
        val end = index + size
        val coercedEnd = if (end < 0 || end > thisSize) {
            if (partialWindows) thisSize else break
        } else end
        result.add(transform(subSequence(index, coercedEnd)))
        index += step
    }
    return result
}","/**

 * Returns a list of results of applying the given [transform] function to

 * an each char sequence representing a view over the window of the given [size]

 * sliding along this char sequence with the given [step].

 * 

 * Note that the char sequence passed to the [transform] function is ephemeral and is valid only inside that function.

 * You should not store it or allow it to escape in some way, unless you made a snapshot of it.

 * Several last char sequences may have fewer characters than the given [size].

 * 

 * Both [size] and [step] must be positive and can be greater than the number of elements in this char sequence.

 * @param size the number of elements to take in each window

 * @param step the number of elements to move the window forward by on an each step, by default 1

 * @param partialWindows controls whether or not to keep partial windows in the end if any,

 * by default `false` which means partial windows won't be preserved

 * 

 * @sample samples.collections.Sequences.Transformations.averageWindows

 */",f17097:m4665
24806,fun <T> siblings(block: () -> T): T,"{
    if (parent != null) {
        return block()
    }
    val prevSibling = sibling
    val prevParent = parent
    val prevCurrent = current
    try {
        parent = current
        sibling = null
        return block()
    } finally {
        parent = prevParent
        sibling = prevSibling
        current = prevCurrent
    }
}","/**

     * Inside this block, treat all entered path parts as siblings of the current path part.

     */",f9214:m205
7371,"fun findPath(maze: Maze): List<Pair<Int, Int>>?","{
    val previous = HashMap<Pair<Int, Int>, Pair<Int, Int>>()
    val queue = ArrayDeque<Pair<Int, Int>>()
    val visited = HashSet<Pair<Int, Int>>()
    queue.offer(maze.start)
    visited.add(maze.start)
    while (!queue.isEmpty()) {
        val cell = queue.poll()
        if (cell == maze.end) break
        for (newCell in maze.neighbors(cell.first, cell.second)) {
            if (newCell in visited) continue
            previous[newCell] = cell
            queue.offer(newCell)
            visited.add(cell)
        }
    }
    if (previous[maze.end] == null) return null
    val path = ArrayList<Pair<Int, Int>>()
    var current = previous[maze.end]
    while (current != maze.start) {
        path.add(0, current!!)
        current = previous[current]
    }
    return path
}","/**

 * This function looks for a path from max.start to maze.end through

 * free space (a path does not go through walls). One can move only

 * straightly up, down, left or right, no diagonal moves allowed.

 */",f3085:m53
49002,@ExternalKotlinTargetApi fun IdeDependencyResolver(vararg resolvers: IdeDependencyResolver?): IdeDependencyResolver,IdeDependencyResolver(resolvers.toList()),"/**

 * Creates a composite [IdeDependencyResolver] from the specified [resolvers]

 * Resolvers that are `null` will be ignored.

 * The composite will preserve the order and invoke the [resolvers] in the same order as specified.

 * The resulting set of dependencies will be the superset of all results of individual resolvers.

 */",f15731:m233
58930,public inline fun CharSequence.indexOfLast(predicate: (Char) -> Boolean): Int,"{
    for (index in indices.reversed()) {
        if (predicate(this[index])) {
            return index
        }
    }
    return -1
}","/**

 * Returns index of the last character matching the given [predicate], or -1 if the char sequence does not contain such character.

 */",f17097:m331
14931,"internal fun FloatArray.copyOfUninitializedElements(fromIndex: Int, toIndex: Int): FloatArray","{
    val newSize = toIndex - fromIndex
    if (newSize < 0) {
        throw IllegalArgumentException(""$fromIndex > $toIndex"")
    }
    val result = FloatArray(newSize)
    this.copyInto(result, 0, fromIndex, toIndex.coerceAtMost(size))
    return result
}","/**

 * Returns new array which is a copy of the original array's range between [fromIndex] (inclusive)

 * and [toIndex] (exclusive) with new elements filled with **lateinit** _uninitialized_ values.

 * Attempts to read _uninitialized_ values from this array work in implementation-dependent manner,

 * either throwing exception or returning some kind of implementation-specific default value.

 */",f3831:m3421
58651,public infix fun Short.downTo(to: Int): IntProgression,"{
    return IntProgression.fromClosedRange(this.toInt(), to, -1)
}","/**

 * Returns a progression from this value down to the specified [to] value with the step -1.

 * 

 * The [to] value should be less than or equal to `this` value.

 * If the [to] value is greater than `this` value the returned progression is empty.

 */",f17092:m1691
67484,"override fun printBuildReport(data: ReadableFileReportData<B, P>, outputFile: File)","{
    outputFile.bufferedWriter().use { writer -> Printer(writer).printBuildReport(data, printMetrics) { compileStatisticsData -> printCustomTaskMetrics(compileStatisticsData, this) } }
}","/**

     * Prints general build information, sum up compile metrics and detailed task and transform information.

     *

     * BuildExecutionData / BuildOperationRecord contains data for both tasks and transforms.

     * We still use the term ""tasks"" because saying ""tasks/transforms"" is a bit verbose and ""build operations"" may sound a bit unfamiliar.

     */",f19206:m53
58790,"public fun <T, R> Sequence<T>.flatMap(transform: (T) -> Sequence<R>): Sequence<R>","{
    return FlatteningSequence(this, transform, Sequence<R>::iterator)
}","/**

 * Returns a single sequence of all elements from results of [transform] function being invoked on each element of original sequence.

 *

 * The operation is _intermediate_ and _stateless_.

 * 

 * @sample samples.collections.Collections.Transformations.flatMap

 */",f17096:m1735
57368,public actual fun IntArray.sort(): Unit,"{
    if (size > 1) java.util.Arrays.sort(this)
}","/**

 * Sorts the array in-place.

 * 

 * @sample samples.collections.Arrays.Sorting.sortArray

 */",f16970:m4001
43973,"@GradleTest @Disabled(""KT-60943: Will be fixed in K2"") fun `test - K2 - shared native compilation - assemble`(gradleVersion: GradleVersion)","{
    project(""kt-57944-k2-native-compilation"", gradleVersion, buildOptions = defaultBuildOptions.copy(languageVersion = ""2.0"")) { build(""assemble"") {
        assertTasksExecuted("":compileCommonMainKotlinMetadata"")
        assertTasksExecuted("":compileNativeMainKotlinMetadata"")
        assertTasksExecuted("":compileKotlinLinuxX64"")
    } }
}","/**

     *

     */",f13515:m101
57239,public actual fun LongArray.asList(): List<Long>,"{
    return object : AbstractList<Long>(), RandomAccess {
        override val size: Int get() = this@asList.size
    
        override fun isEmpty(): Boolean = this@asList.isEmpty()
    
        override fun contains(element: Long): Boolean = this@asList.contains(element)
    
        override fun get(index: Int): Long = this@asList[index]
    
        override fun indexOf(element: Long): Int = this@asList.indexOf(element)
    
        override fun lastIndexOf(element: Long): Int = this@asList.lastIndexOf(element)
    }
}","/**

 * Returns a [List] that wraps the original array.

 */",f16970:m355
58029,@kotlin.internal.InlineOnly public inline operator fun minus(other: UInt): UInt,this.toUInt().minus(other),/** Subtracts the other value from this value. */,f17058:m185
11471,"private fun <T: Any, U: Any> saveAsOption(parsingValue: ParsingValue<T, U>, value: String)","{
    parsingValue.addValue(value)
}","/**

     * Save value as option value.

     */",f3554:m765
65215,"private fun markAdditionalFilesForInitialRound(kotlinChunk: KotlinChunk, chunk: ModuleChunk, kotlinContext: KotlinCompileContext)","{
    val context = kotlinContext.jpsContext
    val dirtyFilesHolder = KotlinDirtySourceFilesHolder(chunk, context, object : DirtyFilesHolderBase<JavaSourceRootDescriptor, ModuleBuildTarget>(context) {
        override fun processDirtyFiles(processor: FileProcessor<JavaSourceRootDescriptor, ModuleBuildTarget>) {
            FSOperations.processFilesToRecompile(context, chunk, processor)
        }
    })
    val fsOperations = FSOperationsHelper(context, chunk, dirtyFilesHolder, LOG)
    val representativeTarget = kotlinContext.targetsBinding[chunk.representativeTarget()] ?: return
    val incrementalCaches = kotlinChunk.loadCaches(loadDependent = false)
    val messageCollector = MessageCollectorAdapter(context, representativeTarget)
    val environment = createCompileEnvironment(kotlinContext.jpsContext, representativeTarget, incrementalCaches, LookupTracker.DO_NOTHING, ExpectActualTracker.DoNothing, InlineConstTracker.DoNothing, EnumWhenTracker.DoNothing, ImportTracker.DoNothing, chunk, messageCollector) ?: return
    val removedClasses = HashSet<String>()
    for (target in kotlinChunk.targets) {
        val cache = incrementalCaches[target] ?: continue
        val dirtyFiles = dirtyFilesHolder.getDirtyFiles(target.jpsModuleBuildTarget).keys
        val removedFiles = dirtyFilesHolder.getRemovedFiles(target.jpsModuleBuildTarget)
        val existingClasses = JpsKotlinCompilerRunner().classesFqNamesByFiles(environment, dirtyFiles)
        val previousClasses = cache.classesFqNamesBySources(dirtyFiles + removedFiles)
        for (jvmClassName in previousClasses) {
            val fqName = jvmClassName.asString()
            if (fqName !in existingClasses) {
                removedClasses.add(fqName)
            }
        }
    }
    val changesCollector = ChangesCollector()
    removedClasses.forEach { changesCollector.collectSignature(FqName(it), areSubclassesAffected = true) }
    val affectedByRemovedClasses = changesCollector.getDirtyFiles(incrementalCaches.values, kotlinContext.lookupStorageManager)
    fsOperations.markFilesForCurrentRound(affectedByRemovedClasses.dirtyFiles + affectedByRemovedClasses.forceRecompileTogether)
}","/**

     * Invalidate usages of removed classes.

     * See KT-13677 for more details.

     *

     * todo(1.2.80): move to KotlinChunk

     * todo(1.2.80): got rid of jpsGlobalContext usages (replace with KotlinCompileContext)

     */",f17598:m429
36555,fun `test typealias and class`(),"{
    val result = commonize {
        outputTarget(""(a,b)"")
        simpleSingleSourceTarget(""a"", """"""class X """""")
        simpleSingleSourceTarget(""b"", """"""
        
                        class B
        
                        typealias X = B
        
                        """""")
    }
    result.assertCommonized(""(a,b)"", ""expect class X()"")
}","/**

     * See: https://youtrack.jetbrains.com/issue/KT-45992

     */",f11600:m53
57993,"@SinceKotlin(""1.5"") @WasExperimental(ExperimentalUnsignedTypes::class, ExperimentalStdlibApi::class) @kotlin.internal.InlineOnly public inline fun UInt.countTrailingZeroBits(): Int",toInt().countTrailingZeroBits(),"/**

 * Counts the number of consecutive least significant bits that are zero in the binary representation of this [UInt] number.

 */",f17056:m49
54672,"@SinceKotlin(""1.4"") public actual infix fun CharArray?.contentEquals(other: CharArray?): Boolean","{
    return contentEqualsInternal(other)
}","/**

 * Checks if the two specified arrays are *structurally* equal to one another.

 * 

 * Two arrays are considered structurally equal if they have the same size, and elements at corresponding indices are equal.

 * 

 * The arrays are also considered structurally equal if both are `null`.

 * 

 * @param other the array to compare with this array.

 * @return `true` if the two arrays are structurally equal, `false` otherwise.

 * 

 * @sample samples.collections.Arrays.ContentOperations.charArrayContentEquals

 */",f16713:m853
57471,"@SinceKotlin(""1.4"") @OptIn(kotlin.experimental.ExperimentalTypeInference::class) @OverloadResolutionByLambdaReturnType @kotlin.jvm.JvmName(""sumOfBigInteger"") @kotlin.internal.InlineOnly public inline fun <T> Array<out T>.sumOf(selector: (T) -> java.math.BigInteger): java.math.BigInteger","{
    var sum: java.math.BigInteger = 0.toBigInteger()
    for (element in this) {
        sum += selector(element)
    }
    return sum
}","/**

 * Returns the sum of all values produced by [selector] function applied to each element in the array.

 */",f16970:m5921
15948,protected open fun getDeclarationOriginFor(file: KtFile): FirDeclarationOrigin,"{
    val virtualFile = file.virtualFile
    return if (virtualFile.extension == BuiltInSerializerProtocol.BUILTINS_FILE_EXTENSION) {
        FirDeclarationOrigin.BuiltIns
    } else {
        FirDeclarationOrigin.Library
    }
}","/**

     * Computes the origin for the declarations coming from [file].

     *

     * We assume that a stub Kotlin declaration might come only from Library or from BuiltIns.

     * We do the decision based upon the extension of the [file].

     *

     * This method is left open so the inheritors can provide more optimal/strict implementations.

     */",f4031:m185
53131,@kotlin.internal.InlineOnly public actual inline fun String.toFloat(): Float,toDouble().unsafeCast<Float>(),"/**

 * Parses the string as a [Float] number and returns the result.

 * @throws NumberFormatException if the string is not a valid representation of a number.

 */",f16618:m157
57357,public actual operator fun CharArray.plus(elements: Collection<Char>): CharArray,"{
    var index = size
    val result = java.util.Arrays.copyOf(this, index + elements.size)
    for (element in elements) result[index++] = element
    return result
}","/**

 * Returns an array containing all elements of the original array and then all elements of the given [elements] collection.

 */",f16970:m3767
57397,public fun ByteArray.toSortedSet(): java.util.SortedSet<Byte>,"{
    return toCollection(java.util.TreeSet<Byte>())
}","/**

 * Returns a new [SortedSet][java.util.SortedSet] of all elements.

 */",f16970:m4711
27527,fun getIsolatingGeneratedTypes(typeInfoProvider: (Collection<File>) -> Set<String>): Set<String>,"{
    val generatedIsolating: MutableSet<File> = HashSet(isolatingMapping.size)
    isolatingMapping.keys.forEach { if (it.isJavaFileOrClass()) {
        generatedIsolating.add(it)
    } }
    return typeInfoProvider(generatedIsolating)
}",/** Returns all types generated by isolating APs. */,f9701:m273
40865,public fun StandaloneAnalysisAPISession.getAllLibraryModules(): Sequence<KtLibraryModule>,"{
    val projectStructureProvider = project.getService(ProjectStructureProvider::class.java) ?: error(""${ProjectStructureProvider::class.java} not found"")
    if (projectStructureProvider !is KtStaticProjectStructureProvider) {
        error(""Expected implementation of ${KtStaticProjectStructureProvider::class.java} but found ${projectStructureProvider.javaClass}"")
    }
    return projectStructureProvider.allKtModules.withClosureSequence<KtModule> { module -> module.allDirectDependencies().asIterable() }.filterIsInstance<KtLibraryModule>()
}","/**

 * Returns all registered [KtLibraryModule] in this [StandaloneAnalysisAPISession].

 * Note: If a library module is not added as a dependency of another module, make sure to add the module directly as in:

 * ```kotlin

 *  buildKtModuleProvider {

 *      addModule( // <- !! addModule !!

 *          buildKtLibraryModule {

 *              addBinaryRoot(myKlibRootPath)

 *              libraryName = myLibraryName

 *              // ...

 *          }

 *      )

 *  }

 * ```

 */",f12942:m31
13494,@kotlin.internal.IntrinsicConstEvaluation public inline operator fun times(other: Byte): Int,this.toInt() * other.toInt(),/** Multiplies this value by the other value. */,f3686:m311
58857,"@SinceKotlin(""1.7"") @kotlin.jvm.JvmName(""minWithOrThrow"") @Suppress(""CONFLICTING_OVERLOADS"") public fun <T> Sequence<T>.minWith(comparator: Comparator<in T>): T","{
    val iterator = iterator()
    if (!iterator.hasNext()) throw NoSuchElementException()
    var min = iterator.next()
    while (iterator.hasNext()) {
        val e = iterator.next()
        if (comparator.compare(min, e) > 0) min = e
    }
    return min
}","/**

 * Returns the first element having the smallest value according to the provided [comparator].

 *

 * The operation is _terminal_.

 * 

 * @throws NoSuchElementException if the sequence is empty.

 */",f17096:m4211
55917,"@SinceKotlin(""1.6"") @WasExperimental(ExperimentalStdlibApi::class) @kotlin.internal.InlineOnly @Suppress(""DEPRECATION"") public inline fun <E> buildSet(@BuilderInference builderAction: MutableSet<E>.() -> Unit): Set<E>","{
    contract { callsInPlace(builderAction, InvocationKind.EXACTLY_ONCE) }
    return buildSetInternal(builderAction)
}","/**

 * Builds a new read-only [Set] by populating a [MutableSet] using the given [builderAction]

 * and returning a read-only set with the same elements.

 *

 * The set passed as a receiver to the [builderAction] is valid only inside that function.

 * Using it outside of the function produces an unspecified behavior.

 *

 * Elements of the set are iterated in the order they were added by the [builderAction].

 *

 * The returned set is serializable (JVM).

 *

 * @sample samples.collections.Builders.Sets.buildSetSample

 */",f16817:m243
20228,public fun KtReference.isImplicitReferenceToCompanion(): Boolean,withValidityAssertion { analysisSession.referenceResolveProvider.isImplicitReferenceToCompanion(this) },"/**

     * Checks if the reference is an implicit reference to a companion object via the containing class.

     *

     * Example:

     * ```

     * class A {

     *    companion object {

     *       fun foo() {}

     *    }

     * }

     * ```

     *

     * For the case provided, inside the call `A.foo()`,

     * the `A` is an implicit reference to the companion object, so `isImplicitReferenceToCompanion` returns `true`

     *

     * @return `true` if the reference is an implicit reference to a companion object, `false` otherwise.

     */",f5796:m41
63462,"@SinceKotlin(""1.4"") public actual fun BooleanArray?.contentHashCode(): Int","{
    if (this === null) return 0
    var result = 1
    for (element in this) result = 31 * result + element.hashCode()
    return result
}","/**

 * Returns a hash code based on the contents of this array as if it is [List].

 */",f17396:m1753
33198,private fun SimpleFunctionDescriptor.shouldBeVisibleAsOverrideOfBuiltInWithErasedValueParameters(): Boolean,"{
    if (!name.sameAsBuiltinMethodWithErasedValueParameters) return false
    val candidatesToOverride = getFunctionsFromSupertypes(name).mapNotNull { BuiltinMethodsWithSpecialGenericSignature.getOverriddenBuiltinFunctionWithErasedValueParametersInJava(it) }
    return candidatesToOverride.any { candidate -> hasSameJvmDescriptorButDoesNotOverride(candidate) }
}","/**

     * Checks if function is a valid override of JDK analogue of built-in method with erased value parameters (e.g. Map.containsKey(k: K))

     *

     * Examples:

     * - boolean containsKey(Object key) -> true

     * - boolean containsKey(K key) -> false // Wrong JDK method override, while it's a valid Kotlin built-in override

     */",f11154:m357
58019,@kotlin.internal.InlineOnly public inline operator fun compareTo(other: UByte): Int,this.toInt().compareTo(other.toInt()),"/**

     * Compares this value with the specified value for order.

     * Returns zero if this value is equal to the specified other value, a negative number if it's less than other,

     * or a positive number if it's greater than other.

     */",f17058:m81
22889,"@Test @DisplayName(""sync shouldn't remove any existing properties not managed by the sync"") fun testSyncingIntoNonEmptyFile()","{
    val initialContent = mapOf(""oldProperty1"" to PropertyValue.Configured(""oldValue1""), ""oldProperty2"" to PropertyValue.Configured(""oldValue2""))
    fillInitialLocalPropertiesFile(initialContent)
    modifier.applySetup(setupFile)
    localPropertiesFile.propertiesFileContentAssertions { fileContents, properties ->
        assertContainsMarkersOnce(fileContents)
        val expectedProperties = setupFile.properties + initialContent.mapValues { it.value.value }
        assertEquals(expectedProperties.size, properties.size)
        for ((key, value) in expectedProperties) {
            assertEquals(value, properties[key])
        }
    }
}","/**

     * Checks that a file like

     * ```

     * a=1

     * b=2

     * c=3

     * ```

     * is being transformed into

     * ```

     * a=1

     * b=2

     * c=3

     * #header

     * d=4

     * f=5

     * #footer

     * ```

     */",f8809:m135
7385,fun next(field: Field): Field,"{
    return Field(field.width, field.height) { i, j ->
        val n = field.liveNeighbors(i, j)
        if (field[i, j]) n in 2 .. 3 else n == 3
    }
}","/**

 * This function takes the present state of the field

 * and return a new field representing the next moment of time

 */",f3089:m81
24809,"fun buildPath(prefix: String, pathSeparator: String = ""/"", siblingSeparator: String = "":""): Pair<String, Boolean>","{
    return buildString {
        append(prefix)
        current.print(this, pathSeparator, siblingSeparator)
    }.let { it to keys.add(it) }
}","/**

     * Build a path at the current position in the tree.

     *

     * @param prefix A string to prefix the path with

     * @param pathSeparator The string used to separate parts of the path

     * @param siblingSeparator When duplicate siblings are found an incrementing index is used to

     * make the path unique. This string will be used to separate the path part from the

     * incrementing index.

     *

     * @return A pair with `first` being the built key, and `second` being whether or not the key

     * was absent in the dictionary of already built keys. If `second` is false, this key is a

     * duplicate.

     */",f9214:m321
58500,"@SinceKotlin(""1.4"") @OptIn(kotlin.experimental.ExperimentalTypeInference::class) @OverloadResolutionByLambdaReturnType @kotlin.internal.InlineOnly public inline fun <K, V> Map<out K, V>.minOfOrNull(selector: (Map.Entry<K, V>) -> Double): Double?","{
    return entries.minOfOrNull(selector)
}","/**

 * Returns the smallest value among all values produced by [selector] function

 * applied to each entry in the map or `null` if there are no entries.

 * 

 * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.

 */",f17089:m901
20391,public fun getAllPossibleNames(): Set<Name>,withValidityAssertion { getPossibleCallableNames() + getPossibleClassifierNames() },"/**

     * Returns a **superset** of names which current scope may contain.

     * In other words `ALL_NAMES(scope)` is a subset of `scope.getAllNames()`

     */",f5839:m25
58010,"@SinceKotlin(""1.6"") @WasExperimental(ExperimentalStdlibApi::class, ExperimentalUnsignedTypes::class) @kotlin.internal.InlineOnly public inline fun UByte.rotateLeft(bitCount: Int): UByte",toByte().rotateLeft(bitCount).toUByte(),"/**

 * Rotates the binary representation of this [UByte] number left by the specified [bitCount] number of bits.

 * The most significant bits pushed out from the left side reenter the number as the least significant bits on the right side.

 *

 * Rotating the number left by a negative bit count is the same as rotating it right by the negated bit count:

 * `number.rotateLeft(-n) == number.rotateRight(n)`

 *

 * Rotating by a multiple of [UByte.SIZE_BITS] (8) returns the same number, or more generally

 * `number.rotateLeft(n) == number.rotateLeft(n % 8)`

 */",f17056:m395
59085,"@SinceKotlin(""1.5"") @WasExperimental(ExperimentalUnsignedTypes::class) public fun maxOf(a: UInt, b: UInt): UInt","{
    return if (a >= b) a else b
}","/**

 * Returns the greater of two values.

 */",f17098:m37
63514,"public actual fun FloatArray.copyOfRange(fromIndex: Int, toIndex: Int): FloatArray","{
    checkCopyOfRangeArguments(fromIndex, toIndex, size)
    return copyOfUninitializedElements(fromIndex, toIndex)
}","/**

 * Returns a new array which is a copy of the specified range of the original array.

 * 

 * @param fromIndex the start of the range (inclusive) to copy.

 * @param toIndex the end of the range (exclusive) to copy.

 * 

 * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.

 * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].

 */",f17396:m3201
58902,public fun <T> Sequence<T>.asIterable(): Iterable<T>,"{
    return Iterable { this.iterator() }
}","/**

 * Creates an [Iterable] instance that wraps the original sequence returning its elements when being iterated.

 */",f17096:m5833
14918,"public actual fun ByteArray.copyOfRange(fromIndex: Int, toIndex: Int): ByteArray","{
    checkCopyOfRangeArguments(fromIndex, toIndex, size)
    return copyOfUninitializedElements(fromIndex, toIndex)
}","/**

 * Returns a new array which is a copy of the specified range of the original array.

 * 

 * @param fromIndex the start of the range (inclusive) to copy.

 * @param toIndex the end of the range (exclusive) to copy.

 * 

 * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.

 * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].

 */",f3831:m3037
41982,internal fun Project.applyDebugKeystoreFix(testFixesProperties: TestFixesProperties),"{
    plugins.withId(""com.android.application"", fix<AppExtension>(testFixesProperties))
    plugins.withId(""com.android.library"", fix<LibraryExtension>(testFixesProperties))
    plugins.withId(""com.android.feature"", fix<FeatureExtension>(testFixesProperties))
    plugins.withId(""com.android.test"", fix<TestExtension>(testFixesProperties))
}","/**

 * AGP 7+ creates a keystore that is not compatible with lover versions of AGP,

 * but could consume keystores created by them.

 *

 * With this fix 'debug.keystore' could be checked in into the repo and shared

 * between test executions.

 */",f13199:m29
14753,public actual fun print(message: Any?),"{
    print(message.toString())
}",/** Prints the given [message] to the standard output stream. */,f3814:m29
56479,@kotlin.internal.InlineOnly public actual inline fun String.toByte(): Byte,java.lang.Byte.parseByte(this),"/**

 * Parses the string as a signed [Byte] number and returns the result.

 * @throws NumberFormatException if the string is not a valid representation of a number.

 */",f16885:m113
58979,"public inline fun <K, V, M: MutableMap<in K, in V>> CharSequence.associateTo(destination: M, transform: (Char) -> Pair<K, V>): M","{
    for (element in this) {
        destination += transform(element)
    }
    return destination
}","/**

 * Populates and returns the [destination] mutable map with key-value pairs

 * provided by [transform] function applied to each character of the given char sequence.

 * 

 * If any of two pairs would have the same key the last one gets added to the map.

 * 

 * @sample samples.text.Strings.associateTo

 */",f17097:m1491
63467,"@Deprecated(""Use Kotlin compiler 1.4 to avoid deprecation warning."") @SinceKotlin(""1.1"") @DeprecatedSinceKotlin(hiddenSince = ""1.4"") public fun IntArray.contentToString(): String","{
    return this.contentToString()
}","/**

 * Returns a string representation of the contents of the specified array as if it is [List].

 * 

 * @sample samples.collections.Arrays.ContentOperations.contentToString

 */",f17396:m1873
14070,public override fun toString(): String,"""${debugString(this)} -> ${debugString(value)}""","/**

     * Returns the string representation of the current [value].

     */",f3718:m345
43448,"@DisplayName(""KT-49798: com.android.build.api.attributes.AgpVersionAttr is not published"") @GradleAndroidTest fun testKT49798AgpVersionAttrNotPublished(gradleVersion: GradleVersion, agpVersion: String, jdkVersion: JdkVersions.ProvidedJdk)","{
    project(""new-mpp-android"", gradleVersion, buildOptions = defaultBuildOptions.copy(androidVersion = agpVersion), buildJdk = jdkVersion.location) { build(""publish"") {
        val libProject = subProject(""lib"")
        val debugPublicationDirectory = libProject.projectPath.resolve(""build/repo/com/example/lib-androidlib-debug"")
        val releasePublicationDirectory = libProject.projectPath.resolve(""build/repo/com/example/lib-androidlib"")
        listOf(debugPublicationDirectory, releasePublicationDirectory).forEach { publicationDirectory ->
            assertDirectoryExists(publicationDirectory)
            val moduleFiles = Files.walk(publicationDirectory).use { it.filter { file -> file.extension == ""module"" }.toList() }
            assertTrue(moduleFiles.isNotEmpty(), ""Missing .module file in $publicationDirectory"")
            assertTrue(moduleFiles.size == 1, ""Multiple .module files in $publicationDirectory: $moduleFiles"")
            val moduleFile = moduleFiles.single()
            val moduleFileText = moduleFile.readText()
            assertTrue(""AgpVersionAttr"" !in moduleFileText, "".module file $moduleFile leaks AgpVersionAttr"")
        }
    } }
}","/**

     * Starting from AGP version 7.1.0-alpha13, a new attribute com.android.build.api.attributes.AgpVersionAttr was added.

     * This attribute is *not intended* to be published.

     */",f13434:m1515
41236,fun deleteStorageFiles(),"{
    synchronized(this) { check(IOUtil.deleteAllFilesStartingWith(storageFile)) { ""Unable to delete storage file(s) with name prefix: ${storageFile.path}"" } }
}","/**

     * Deletes [storageFile] or a group of files associated with [storageFile] (e.g., an implementation of [PersistentStorage] may use a

     * [com.intellij.util.io.PersistentHashMap], which creates files such as ""storageFile.tab"", ""storageFile.tab.len"", etc.).

     *

     * Make sure the storage has been closed first before calling this method.

     */",f12998:m73
57337,"@Suppress(""ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS"") public actual fun DoubleArray.fill(element: Double, fromIndex: Int = 0, toIndex: Int = size): Unit","{
    java.util.Arrays.fill(this, fromIndex, toIndex, element)
}","/**

 * Fills this array or its subrange with the specified [element] value.

 * 

 * @param fromIndex the start of the range (inclusive) to fill, 0 by default.

 * @param toIndex the end of the range (exclusive) to fill, size of this array by default.

 * 

 * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.

 * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].

 */",f16970:m3343
58536,"@SinceKotlin(""1.5"") @WasExperimental(ExperimentalUnsignedTypes::class) public operator fun ULongRange.contains(value: UShort): Boolean","{
    return contains(value.toULong())
}","/**

 * Checks if the specified [value] belongs to this range.

 */",f17090:m543
58574,"@SinceKotlin(""1.7"") public fun LongProgression.last(): Long","{
    if (isEmpty()) throw NoSuchElementException(""Progression $this is empty."")
    return this.last
}","/**

 * Returns the last element.

 * 

 * @throws NoSuchElementException if the progression is empty.

 * 

 * @sample samples.collections.Collections.Elements.last

 */",f17092:m185
14060,public fun getAndAdd(delta: Long): Long,this::value.getAndAddField(delta),"/**

     * Atomically adds the [given value][delta] to the current value and returns the old value.

     */",f3718:m211
58858,"@SinceKotlin(""1.4"") public fun <T> Sequence<T>.minWithOrNull(comparator: Comparator<in T>): T?","{
    val iterator = iterator()
    if (!iterator.hasNext()) return null
    var min = iterator.next()
    while (iterator.hasNext()) {
        val e = iterator.next()
        if (comparator.compare(min, e) > 0) min = e
    }
    return min
}","/**

 * Returns the first element having the smallest value according to the provided [comparator] or `null` if there are no elements.

 *

 * The operation is _terminal_.

 */",f17096:m4253
48086,"fun throwExceptionIfCompilationFailed(exitCode: ExitCode, executionStrategy: KotlinCompilerExecutionStrategy)","{
    when (exitCode) {
        ExitCode.COMPILATION_ERROR -> throw CompilationErrorException(""Compilation error. See log for more details"")
        ExitCode.INTERNAL_ERROR -> throw FailedCompilationException(""Internal compiler error. See log for more details"")
        ExitCode.SCRIPT_EXECUTION_ERROR -> throw FailedCompilationException(""Script execution error. See log for more details"")
        ExitCode.OOM_ERROR -> throw OOMErrorException(executionStrategy)
        ExitCode.OK -> Unit
        else -> throw IllegalStateException(""Unexpected exit code: $exitCode"")
    }
}",/** Throws [FailedCompilationException] if compilation completed with [exitCode] != [ExitCode.OK]. */,f15532:m29
57034,@kotlin.internal.InlineOnly public inline fun InputStream.bufferedReader(charset: Charset = Charsets.UTF_8): BufferedReader,reader(charset).buffered(),/** Creates a buffered reader on this input stream using UTF-8 or the specified [charset]. */,f16952:m155
58123,@kotlin.internal.InlineOnly public inline fun toDouble(): Double,uintToDouble(this.toInt()),"/**

     * Converts this [UByte] value to [Double].

     *

     * The resulting `Double` value represents the same numerical value as this `UByte`.

     */",f17059:m691
58590,"@SinceKotlin(""1.4"") public fun CharRange.randomOrNull(random: Random): Char?","{
    if (isEmpty()) return null
    return random.nextInt(first.code, last.code + 1).toChar()
}","/**

 * Returns a random element from this range using the specified source of randomness, or `null` if this range is empty.

 */",f17092:m545
63291,"internal fun decomposeString(inputCodePoints: IntArray, inputLength: Int, outputCodePoints: IntArray): Int","{
    if (inputLength == 0) return 0
    var outputLength = 0
    for (i in 0 until inputLength) {
        val decomposition = getDecomposition(inputCodePoints[i])
        if (decomposition == null) {
            outputCodePoints[outputLength++] = inputCodePoints[i]
        } else {
            decomposition.copyInto(outputCodePoints, outputLength)
            outputLength += decomposition.size
        }
    }
    return outputLength
}","/**

 * Decomposes the given string represented as an array of codepoints. Saves the decomposition into [outputCodepoints] array.

 * Returns the length of the decomposition.

 */",f17362:m519
58705,public fun Byte.coerceAtMost(maximumValue: Byte): Byte,"{
    return if (this > maximumValue) maximumValue else this
}","/**

 * Ensures that this value is not greater than the specified [maximumValue].

 * 

 * @return this value if it's less than or equal to the [maximumValue] or the [maximumValue] otherwise.

 * 

 * @sample samples.comparisons.ComparableOps.coerceAtMost

 */",f17092:m2583
13853,"@SinceKotlin(""1.5"") @WasExperimental(ExperimentalStdlibApi::class) @kotlin.internal.InlineOnly public actual inline fun Char(code: UShort): Char","{
    return code.toInt().toChar()
}","/**

 * Creates a Char with the specified [code].

 *

 * @sample samples.text.Chars.charFromCode

 */",f3693:m15
21123,public fun addBinaryRoots(roots: Collection<Path>),"{
    binaryRoots.addAll(roots)
}","/**

     * Adds a collection of [roots] to the current library.

     *

     * See [addBinaryRoot] for details

     *

     * @see addBinaryRoot for details

     */",f8470:m53
57027,"@SinceKotlin(""1.1"") @PublishedApi internal fun Closeable?.closeFinally(cause: Throwable?): Unit","when {
    this == null -> {}
    cause == null -> close()
    else -> try {
        close()
    } catch (closeException: Throwable) {
        cause.addSuppressed(closeException)
    }
}","/**

 * Closes this [Closeable], suppressing possible exception or error thrown by [Closeable.close] function when

 * it's being closed due to some other [cause] exception occurred.

 *

 * The suppressed exception is added to the list of suppressed exceptions of [cause] exception, when it's supported.

 */",f16951:m91
28992,"@Suppress(""UNCHECKED_CAST"") inline fun <reified T: Parcelable> parcelableCreator(): Parcelable.Creator<T>","T::class.java.getDeclaredField(""CREATOR"").get(null) as? Parcelable.Creator<T> ?: throw IllegalArgumentException(""Could not access CREATOR field in class ${T::class.simpleName}"")","/**

 * Read the CREATOR field of the given [Parcelable] class. Calls to this function with

 * a concrete class will be optimized to a direct field access.

 */",f10119:m21
51937,fun ScriptingHostConfiguration?.with(body: ScriptingHostConfiguration.Builder.() -> Unit): ScriptingHostConfiguration,"{
    val newConfiguration = if (this == null) ScriptingHostConfiguration(body = body) else ScriptingHostConfiguration(this, body = body)
    return if (newConfiguration != this) newConfiguration else this
}","/**

 * An alternative to the constructor with base configuration, which returns a new configuration only if [body] adds anything

 * to the original one, otherwise returns original

 */",f16416:m69
57017,public fun Reader.readLines(): List<String>,"{
    val result = arrayListOf<String>()
    forEachLine { result.add(it) }
    return result
}","/**

 * Reads this reader content as a list of lines.

 *

 * Do not use this function for huge files.

 */",f16950:m73
57298,@kotlin.internal.InlineOnly public actual inline fun IntArray.copyOf(): IntArray,"{
    return java.util.Arrays.copyOf(this, size)
}","/**

 * Returns new array which is a copy of the original array.

 * 

 * @sample samples.collections.Arrays.CopyOfOperations.copyOf

 */",f16970:m2299
56082,@kotlin.internal.InlineOnly public inline operator fun <T> MutableCollection<in T>.plusAssign(elements: Array<T>),"{
    this.addAll(elements)
}","/**

 * Adds all elements of the given [elements] array to this mutable collection.

 */",f16825:m121
56051,"@SinceKotlin(""1.1"") public fun <K, V, M: MutableMap<in K, in V>> Map<out K, V>.toMap(destination: M): M",destination.apply { putAll(this@toMap) },"/**

 * Populates and returns the [destination] mutable map with key-value pairs from the given map.

 */",f16823:m1275
57094,"@SinceKotlin(""1.8"") @ExperimentalEncodingApi public fun InputStream.decodingWith(base64: Base64): InputStream","{
    return DecodeInputStream(this, base64)
}","/**

 * Returns an input stream that decodes symbols from this input stream using the specified [base64] encoding.

 *

 * Reading from the returned input stream leads to reading some symbols from the underlying input stream.

 * The symbols are decoded using the specified [base64] encoding and the resulting bytes are returned.

 * Symbols are decoded in 4-symbol blocks.

 *

 * The symbols for decoding are not required to be padded.

 * However, if there is a padding character present, the correct amount of padding character(s) must be present.

 * The padding character `'='` is interpreted as the end of the symbol stream. Subsequent symbols are not read even if

 * the end of the underlying input stream is not reached.

 *

 * The returned input stream should be closed in a timely manner. We suggest you try the [use] function,

 * which closes the resource after a given block of code is executed.

 * The close operation discards leftover bytes.

 * Closing the returned input stream will close the underlying input stream.

 */",f16958:m39
56034,"public fun <K, V> MutableMap<in K, in V>.putAll(pairs: Sequence<Pair<K, V>>): Unit","{
    for ((key, value) in pairs) {
        put(key, value)
    }
}","/**

 * Puts all the elements of the given sequence into this [MutableMap] with the first component in the pair being the key and the second the value.

 */",f16823:m887
58541,"@SinceKotlin(""1.5"") @WasExperimental(ExperimentalUnsignedTypes::class) public fun UIntProgression.reversed(): UIntProgression","{
    return UIntProgression.fromClosedRange(last, first, -step)
}","/**

 * Returns a progression that goes over the same range in the opposite direction with the same step.

 */",f17090:m657
58584,"@SinceKotlin(""1.3"") public fun CharRange.random(random: Random): Char","{
    try {
        return random.nextInt(first.code, last.code + 1).toChar()
    } catch (e: IllegalArgumentException) {
        throw NoSuchElementException(e.message)
    }
}","/**

 * Returns a random element from this range using the specified source of randomness.

 * 

 * @throws IllegalArgumentException if this range is empty.

 */",f17092:m423
58825,"@SinceKotlin(""1.7"") @kotlin.jvm.JvmName(""maxOrThrow"") @Suppress(""CONFLICTING_OVERLOADS"") public fun <T: Comparable<T>> Sequence<T>.max(): T","{
    val iterator = iterator()
    if (!iterator.hasNext()) throw NoSuchElementException()
    var max = iterator.next()
    while (iterator.hasNext()) {
        val e = iterator.next()
        if (max < e) max = e
    }
    return max
}","/**

 * Returns the largest element.

 *

 * The operation is _terminal_.

 * 

 * @throws NoSuchElementException if the sequence is empty.

 */",f17096:m2755
36889,"@Suppress(""DEPRECATION"") fun pathToPlatformSdk(platformName: String): String","when (platformName.toLowerCase()) {
    ""macosx"" -> macosxSdk
    ""iphoneos"" -> iphoneosSdk
    ""iphonesimulator"" -> iphonesimulatorSdk
    ""appletvos"" -> appletvosSdk
    ""appletvsimulator"" -> appletvsimulatorSdk
    ""watchos"" -> watchosSdk
    ""watchsimulator"" -> watchsimulatorSdk
    else -> error(""Unknown Apple platform: $platformName"")
}","/**

     * TODO: `toLowerCase` is deprecated and should be replaced with `lowercase`, but

     * this code used in buildSrc which depends on bootstrap version of stdlib, so right version

     * of this function isn't available, please replace warning suppression with right function

     * when compatible version of bootstrap will be available.

     */",f11647:m125
56182,@kotlin.internal.InlineOnly public inline fun require(value: Boolean): Unit,"{
    contract { returns() implies value }
    require(value) { ""Failed requirement."" }
}","/**

 * Throws an [IllegalArgumentException] if the [value] is false.

 *

 * @sample samples.misc.Preconditions.failRequireWithLazyMessage

 */",f16839:m25
11450,"fun <T: Any, TResult, DefaultType: DefaultRequiredType> AbstractSingleOption<T, TResult, DefaultType>.multiple(): MultipleOption<T, MultipleOptionType.Repeated, DefaultType>","{
    val newOption = with((delegate.cast<ParsingValue<T, T>>()).descriptor as OptionDescriptor) { MultipleOption<T, MultipleOptionType.Repeated, DefaultType>(OptionDescriptor(optionFullFormPrefix, optionShortFromPrefix, type, fullName, shortName, description, listOfNotNull(defaultValue), required, true, delimiter, deprecatedWarning), owner) }
    owner.entity = newOption
    return newOption
}","/**

 * Allows the option to have several values specified in command line string.

 * Number of values is unlimited.

 */",f3549:m199
9886,private fun ObjCExportCodeGenerator.createMethodVirtualAdapter(baseMethod: ObjCMethodSpec.BaseMethod<IrSimpleFunctionSymbol>): ObjCExportCodeGenerator.ObjCToKotlinMethodAdapter,"{
    val selector = baseMethod.selector
    val methodBridge = baseMethod.bridge
    val irFunction = baseMethod.owner
    val imp = generateObjCImp(irFunction, irFunction, methodBridge, isVirtual = true)
    return objCToKotlinMethodAdapter(selector, methodBridge, imp)
}","/**

 * We need to generate indirect version of a method for a cases

 * when it is called on an object of non-exported type.

 *

 * Consider the following example:

 * file.kt:

 * ```

 * open class Foo {

 *     open fun foo() {}

 * }

 * private class Bar : Foo() {

 *    override fun foo() {}

 * }

 *

 * fun createBar(): Foo = Bar()

 * ```

 * file.swift:

 * ```

 * FileKt.createBar().foo()

 * ```

 * There is no Objective-C typeinfo for `Bar`, thus `foo` will be called via method lookup.

 */",f3387:m2893
58622,"@kotlin.jvm.JvmName(""shortRangeContains"") @SinceKotlin(""1.9"") @WasExperimental(ExperimentalStdlibApi::class) public operator fun OpenEndRange<Short>.contains(value: Int): Boolean","{
    return value.toShortExactOrNull().let { if (it != null) contains(it) else false }
}","/**

 * Checks if the specified [value] belongs to this range.

 */",f17092:m1151
9077,"private fun buildClassSuiteConstructor(suiteName: String, testClassType: IrType, testCompanionType: IrType, testSuite: IrClassSymbol, owner: IrClass, functions: Collection<TestFunction>, ignored: Boolean): IrConstructor","context.irFactory.createConstructor(testSuite.owner.startOffset, testSuite.owner.endOffset, TEST_SUITE_GENERATED_MEMBER, Name.special(""<init>""), DescriptorVisibilities.PUBLIC, isInline = false, isExpect = false, testSuite.starProjectedType, IrConstructorSymbolImpl(), isPrimary = true).apply {
    parent = owner
    fun IrClass.getFunction(name: String, predicate: (IrSimpleFunction) -> Boolean) = simpleFunctions().single { it.name.asString() == name && predicate(it) }
    val registerTestCase = baseClassSuite.getFunction(""registerTestCase"") { it.valueParameters.size == 3 && it.valueParameters[0].type.isString() && it.valueParameters[1].type.isFunction() && it.valueParameters[2].type.isBoolean() }
    val registerFunction = baseClassSuite.getFunction(""registerFunction"") { it.valueParameters.size == 2 && it.valueParameters[0].type.isTestFunctionKind() && it.valueParameters[1].type.isFunction() }
    body = context.createIrBuilder(symbol, symbol.owner.startOffset, symbol.owner.endOffset).irBlockBody {
        +irDelegatingConstructorCall(baseClassSuiteConstructor).apply {
            putTypeArgument(0, testClassType)
            putTypeArgument(1, testCompanionType)
            putValueArgument(0, irString(suiteName))
            putValueArgument(1, irBoolean(ignored))
        }
        generateFunctionRegistration(testSuite.owner.thisReceiver!!, registerTestCase, registerFunction, functions)
    }
}","/**

     * Builds a constructor for a test suite class representing a test class (any class in the original IrFile with

     * method(s) annotated with @Test). The test suite class is a subclass of ClassTestSuite<T>

     * where T is the test class.

     */",f3318:m813
27001,"private fun IrBuilderWithScope.nest(sourceFile: SourceFile, node: AndNode, index: Int, variables: List<IrTemporaryVariable>, call: IrBuilderWithScope.(IrExpression, List<IrTemporaryVariable>) -> IrExpression): IrExpression","{
    val children = node.children
    val child = children[index]
    return buildExpression(sourceFile, child, variables) { argument, newVariables -> if (index + 1 == children.size) {
        call(argument, newVariables)
    } else {
        irIfThenElse(context.irBuiltIns.anyType, argument, nest(sourceFile, node, index + 1, newVariables, call), call(irFalse(), newVariables))
    } }
}","/**

 * ```

 * val result = call(1 == 1 && 2 == 2)

 * ```

 * Transforms to

 * ```

 * val result = run {

 *   val tmp0 = 1 == 1

 *   if (tmp0) {

 *     val tmp1 = 2 == 2

 *     call(tmp1, <diagram>)

 *   }

 *   else call(false, <diagram>)

 * }

 * ```

 */",f9511:m171
57379,"@Suppress(""ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS"") public actual fun ShortArray.sort(fromIndex: Int = 0, toIndex: Int = size): Unit","{
    java.util.Arrays.sort(this, fromIndex, toIndex)
}","/**

 * Sorts a range in the array in-place.

 * 

 * @param fromIndex the start of the range (inclusive) to sort, 0 by default.

 * @param toIndex the end of the range (exclusive) to sort, size of this array by default.

 * 

 * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.

 * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].

 * 

 * @sample samples.collections.Arrays.Sorting.sortRangeOfArray

 */",f16970:m4245
55916,"@SinceKotlin(""1.4"") public fun <T: Any> setOfNotNull(vararg elements: T?): Set<T>","{
    return elements.filterNotNullTo(LinkedHashSet())
}","/**

 * Returns a new read-only set only with those given elements, that are not null.

 * Elements of the set are iterated in the order they were specified.

 * The returned set is serializable (JVM).

 * @sample samples.collections.Collections.Sets.setOfNotNull

 */",f16817:m221
16623,inline fun <reified E: FirElement> KtElement.getOrBuildFirOfType(firResolveSession: LLFirResolveSession): E,"{
    val fir = getOrBuildFir(firResolveSession)
    if (fir is E) return fir
    throwUnexpectedFirElementError(fir, this, E::class)
}","/**

 * Get a [FirElement] which was created by [KtElement], but only if it is subtype of [E], throws [InvalidFirElementTypeException] otherwise

 * Returned [FirElement] is guaranteed to be resolved to [FirResolvePhase.BODY_RESOLVE] phase

 * This operation could be performance affective because it create FIleStructureElement and resolve non-local declaration into BODY phase

 */",f4145:m237
14789,"@SinceKotlin(""1.3"") @ExperimentalUnsignedTypes public actual fun ULongArray.asList(): List<ULong>","{
    return object : AbstractList<ULong>(), RandomAccess {
        override val size: Int get() = this@asList.size
    
        override fun isEmpty(): Boolean = this@asList.isEmpty()
    
        override fun contains(element: ULong): Boolean = this@asList.contains(element)
    
        override fun get(index: Int): ULong = this@asList[index]
    
        override fun indexOf(element: ULong): Int = this@asList.indexOf(element)
    
        override fun lastIndexOf(element: ULong): Int = this@asList.lastIndexOf(element)
    }
}","/**

 * Returns a [List] that wraps the original array.

 */",f3828:m159
10061,internal fun PhaseEngine<NativeGenerationState>.runAllLowerings(irModuleFragment: IrModuleFragment),"{
    val lowerings = getAllLowerings()
    irModuleFragment.files.forEach { file ->
        context.fileLowerState = FileLowerState()
        lowerings.fold(file) { loweredFile, lowering -> runPhase(lowering, loweredFile) }
    }
}","/**

 * Run whole IR lowering pipeline over [irModuleFragment].

 */",f3420:m83
46110,inline fun <reified T> T.withClosureSequence(crossinline edges: (T) -> Iterable<T>): Sequence<T>,"{
    val initialEdges = edges(this)
    val resolveDequeue = if (initialEdges is Collection && initialEdges.isEmpty()) return sequenceOf(this) else createDequeue<T>()
    return sequence {
        val results = HashSet<T>()
        yield(this@withClosureSequence)
        results.add(this@withClosureSequence)
        initialEdges.forEach { initialEdge -> if (results.add(initialEdge)) {
            yield(initialEdge)
            resolveDequeue.add(initialEdge)
        } }
        while (resolveDequeue.isNotEmpty()) { edges(resolveDequeue.removeAt(0)).forEach { edge -> if (results.add(edge)) {
            yield(edge)
            resolveDequeue.add(edge)
        } } }
    }
}","/**

 * Similar to [closureSequence], but will also include the receiver(seed) of this function into the final set

 * @see closure

 */",f15014:m185
56503,"@Suppress(""EXTENSION_SHADOWED_BY_MEMBER"") @SinceKotlin(""1.9"") @kotlin.internal.InlineOnly public actual inline fun StringBuilder.insert(index: Int, value: Byte): StringBuilder","this.insert(index, value.toInt())","/**

 * Inserts the string representation of the specified byte [value] into this string builder at the specified [index] and returns this instance.

 *

 * The overall effect is exactly as if the [value] were converted to a string by the `value.toString()` method,

 * and then that string was inserted into this string builder at the specified [index].

 *

 * @throws IndexOutOfBoundsException if [index] is less than zero or greater than the length of this string builder.

 */",f16890:m65
63604,internal fun Char.isDigitImpl(): Boolean,"{
    return digitToIntImpl() >= 0
}","/**

 * Returns `true` if this character is a digit.

 */",f17399:m103
63645,"@SinceKotlin(""1.1"") @kotlin.internal.InlineOnly public actual inline fun minOf(a: Float, b: Float): Float","{
    return when {
        a.isNaN() -> a
        b.isNaN() -> b
        else -> if (a.compareTo(b) <= 0) a else b
    }
}","/**

 * Returns the smaller of two values.

 * 

 * If either value is `NaN`, returns `NaN`.

 */",f17406:m543
58725,public operator fun <T> Set<T>.minus(elements: Iterable<T>): Set<T>,"{
    val other = elements.convertToListIfNotCollection()
    if (other.isEmpty()) return this.toSet()
    if (other is Set) return this.filterNotTo(LinkedHashSet<T>()) { it in other }
    val result = LinkedHashSet<T>(this)
    result.removeAll(other)
    return result
}","/**

 * Returns a set containing all elements of the original set except the elements contained in the given [elements] collection.

 * 

 * The returned set preserves the element iteration order of the original set.

 */",f17095:m85
52029,fun <R> R.asSuccess(reports: List<ScriptDiagnostic> = listOf()): ResultWithDiagnostics.Success<R>,"ResultWithDiagnostics.Success(this, reports)","/**

 * Converts the receiver value to the Success result wrapper with optional diagnostic [reports]

 */",f16426:m425
63563,public actual operator fun <T> Array<T>.plus(elements: Array<out T>): Array<T>,"{
    val thisSize = size
    val arraySize = elements.size
    val result = copyOfUninitializedElements(thisSize + arraySize)
    elements.copyInto(result, thisSize)
    return result
}","/**

 * Returns an array containing all elements of the original array and then all elements of the given [elements] array.

 */",f17396:m4447
54662,"@SinceKotlin(""1.1"") @kotlin.internal.LowPriorityInOverloadResolution public actual fun <T> Array<out T>.contentDeepToString(): String","{
    return this.contentDeepToString()
}","/**

 * Returns a string representation of the contents of this array as if it is a [List].

 * Nested arrays are treated as lists too.

 * 

 * If any of arrays contains itself on any nesting level that reference

 * is rendered as `""[...]""` to prevent recursion.

 * 

 * @sample samples.collections.Arrays.ContentOperations.contentDeepToString

 */",f16713:m507
14020,public actual fun String.toFloat(): Float,FloatingPointParser.parseFloat(this),"/**

 * Parses the string as a [Float] number and returns the result.

 * @throws NumberFormatException if the string is not a valid representation of a number.

 */",f3714:m255
58827,"@SinceKotlin(""1.4"") public inline fun <T, R: Comparable<R>> Sequence<T>.maxByOrNull(selector: (T) -> R): T?","{
    val iterator = iterator()
    if (!iterator.hasNext()) return null
    var maxElem = iterator.next()
    if (!iterator.hasNext()) return maxElem
    var maxValue = selector(maxElem)
    do {
        val e = iterator.next()
        val v = selector(e)
        if (maxValue < v) {
            maxElem = e
            maxValue = v
        }
    } while (iterator.hasNext())
    return maxElem
}","/**

 * Returns the first element yielding the largest value of the given function or `null` if there are no elements.

 *

 * The operation is _terminal_.

 * 

 * @sample samples.collections.Collections.Aggregates.maxByOrNull

 */",f17096:m2855
11896,"@Suppress(""FINAL_UPPER_BOUND"") @ExperimentalForeignApi public fun <T: ULong> NativePlacement.alloc(value: T): ULongVarOf<T>",alloc<ULongVarOf<T>> { this.value = value },"/**

 * Allocates variable with given value type and initializes it with given value.

 */",f3606:m149
53298,override fun equals(other: Any?): Boolean,"{
    if (other === this) return true
    if (other !is Set<*>) return false
    return AbstractSet.setEquals(this, other)
}","/**

     * Compares this set with another set instance with the unordered structural equality.

     *

     * @return `true`, if [other] instance is a [Set] of the same size, all elements of which are contained in this set.

     */",f16653:m27
63477,"@SinceKotlin(""1.4"") public actual fun LongArray?.contentToString(): String","{
    return this?.joinToString("", "", ""["", ""]"") ?: ""null""
}","/**

 * Returns a string representation of the contents of the specified array as if it is [List].

 * 

 * @sample samples.collections.Arrays.ContentOperations.contentToString

 */",f17396:m2097
57045,@kotlin.internal.InlineOnly public inline fun print(message: Short),"{
    System.out.print(message)
}",/** Prints the given [message] to the standard output stream. */,f16953:m81
58753,public fun <T> Sequence<T>.single(): T,"{
    val iterator = iterator()
    if (!iterator.hasNext()) throw NoSuchElementException(""Sequence is empty."")
    val single = iterator.next()
    if (iterator.hasNext()) throw IllegalArgumentException(""Sequence has more than one element."")
    return single
}","/**

 * Returns the single element, or throws an exception if the sequence is empty or has more than one element.

 *

 * The operation is _terminal_.

 */",f17096:m657
14047,public fun getAndSet(newValue: Int): Int,this::value.getAndSetField(newValue),"/**

     * Atomically sets the value to the given [new value][newValue] and returns the old value.

     */",f3718:m41
16688,"private fun rebindSetterParameter(expression: FirExpression, newPropertySymbol: FirPropertySymbol, oldPropertySymbol: FirPropertySymbol)","{
    requireWithAttachment(expression is FirPropertyAccessExpression, { ""Unexpected third argument: ${expression::class.simpleName}"" }) {
        withFirSymbolEntry(""newTarget"", newPropertySymbol)
        withFirSymbolEntry(""oldTarget"", oldPropertySymbol)
        withFirEntry(""expression"", expression)
    }
    val calleeReference = expression.resolvedCalleeReference(newPropertySymbol = newPropertySymbol, oldPropertySymbol = oldPropertySymbol)
    val resolvedParameterSymbol = calleeReference.resolvedSymbol
    val oldValueParameterSymbol = oldPropertySymbol.setterSymbol?.valueParameterSymbols?.first()
    requireWithAttachment(resolvedParameterSymbol == oldValueParameterSymbol, { ""Unexpected symbol: ${resolvedParameterSymbol::class.simpleName}"" }) {
        withFirEntry(""expression"", expression)
        withFirSymbolEntry(""actualOldParameter"", resolvedParameterSymbol)
        oldValueParameterSymbol?.let { withFirSymbolEntry(""expectedOldParameter"", it) }
        withFirSymbolEntry(""oldProperty"", oldPropertySymbol)
        withFirSymbolEntry(""newProperty"", newPropertySymbol)
    }
    expression.replaceCalleeReference(buildResolvedNamedReference {
        source = calleeReference.source
        name = calleeReference.name
        resolvedSymbol = newPropertySymbol.setterSymbol?.valueParameterSymbols?.first() ?: errorWithAttachment(""Parameter is not found"") {
            withFirSymbolEntry(""oldProperty"", oldPropertySymbol)
            withFirSymbolEntry(""newProperty"", newPropertySymbol)
        }
    })
}","/**

 * To cover third argument in setter body

 *

 * @see org.jetbrains.kotlin.fir.builder.generateAccessorsByDelegate

 */",f4161:m803
58260,@kotlin.internal.InlineOnly public inline infix fun xor(other: ULong): ULong,ULong(this.data xor other.data),/** Performs a bitwise XOR operation between the two values. */,f17066:m549
49160,"internal fun collectGeneralConfigurationTimeMetrics(project: Project, gradle: Gradle, buildReportOutputs: List<BuildReportType>, useClasspathSnapshot: Boolean, pluginVersion: String, isProjectIsolationEnabled: Boolean, isProjectIsolationRequested: Boolean, isConfigurationCacheRequested: Boolean): MetricContainer","{
    val configurationTimeMetrics = MetricContainer()
    val statisticOverhead = measureTimeMillis {
        configurationTimeMetrics.put(StringMetrics.KOTLIN_COMPILER_VERSION, pluginVersion)
        configurationTimeMetrics.put(StringMetrics.USE_CLASSPATH_SNAPSHOT, useClasspathSnapshot.toString())
        buildReportOutputs.forEach { when (it) {
            BuildReportType.BUILD_SCAN -> configurationTimeMetrics.put(BooleanMetrics.BUILD_SCAN_BUILD_REPORT, true)
            BuildReportType.FILE -> configurationTimeMetrics.put(BooleanMetrics.FILE_BUILD_REPORT, true)
            BuildReportType.HTTP -> configurationTimeMetrics.put(BooleanMetrics.HTTP_BUILD_REPORT, true)
            BuildReportType.SINGLE_FILE -> configurationTimeMetrics.put(BooleanMetrics.SINGLE_FILE_BUILD_REPORT, true)
            BuildReportType.TRY_NEXT_CONSOLE -> {}
            BuildReportType.JSON -> configurationTimeMetrics.put(BooleanMetrics.JSON_BUILD_REPORT, true)
        } }
        configurationTimeMetrics.put(StringMetrics.PROJECT_PATH, project.rootDir.absolutePath)
        configurationTimeMetrics.put(StringMetrics.GRADLE_VERSION, gradle.gradleVersion)
        if (!isProjectIsolationEnabled) { gradle.taskGraph.whenReady { taskExecutionGraph ->
            val executedTaskNames = taskExecutionGraph.allTasks.map { it.name }.distinct()
            configurationTimeMetrics.put(BooleanMetrics.MAVEN_PUBLISH_EXECUTED, executedTaskNames.contains(""install""))
        } }
        configurationTimeMetrics.put(BooleanMetrics.GRADLE_CONFIGURATION_CACHE_ENABLED, isConfigurationCacheRequested)
        configurationTimeMetrics.put(BooleanMetrics.GRADLE_PROJECT_ISOLATION_ENABLED, isProjectIsolationRequested)
    }
    configurationTimeMetrics.put(NumericalMetrics.STATISTICS_VISIT_ALL_PROJECTS_OVERHEAD, statisticOverhead)
    return configurationTimeMetrics
}","/**

 * Collect general configuration metrics

 **/",f15772:m39
63683,internal fun Char.isLowerCaseImpl(): Boolean,"{
    return getLetterType() == 1 || code.isOtherLowercase()
}","/**

 * Returns `true` if this character is a lower case letter, or it has contributory property `Other_Lowercase`.

 */",f17409:m133
14979,public actual operator fun CharArray.plus(elements: CharArray): CharArray,"{
    val thisSize = size
    val arraySize = elements.size
    val result = copyOfUninitializedElements(thisSize + arraySize)
    elements.copyInto(result, thisSize)
    return result
}","/**

 * Returns an array containing all elements of the original array and then all elements of the given [elements] array.

 */",f3831:m4517
57304,@kotlin.internal.InlineOnly public actual inline fun ByteArray.copyOf(newSize: Int): ByteArray,"{
    return java.util.Arrays.copyOf(this, newSize)
}","/**

 * Returns new array which is a copy of the original array, resized to the given [newSize].

 * The copy is either truncated or padded at the end with zero values if necessary.

 * 

 * - If [newSize] is less than the size of the original array, the copy array is truncated to the [newSize].

 * - If [newSize] is greater than the size of the original array, the extra elements in the copy array are filled with zero values.

 * 

 * @sample samples.collections.Arrays.CopyOfOperations.resizedPrimitiveCopyOf

 */",f16970:m2419
47953,"internal fun prepareKotlinNativeBundle(project: Project, kotlinNativeBundleConfiguration: ConfigurableFileCollection, kotlinNativeVersion: String, bundleDir: File, reinstallFlag: Boolean, konanTargets: Set<KonanTarget>, overriddenKonanHome: String?)","{
    if (overriddenKonanHome != null) {
        project.logger.info(""A user-provided Kotlin/Native distribution configured: ${overriddenKonanHome}. Disabling Kotlin Native Toolchain auto-provisioning."")
    } else {
        processToolchain(bundleDir, project, reinstallFlag, kotlinNativeVersion, kotlinNativeBundleConfiguration)
    }
    project.setupKotlinNativePlatformLibraries(konanTargets)
}","/**

     * This function downloads and installs a Kotlin Native bundle if needed

     * and then prepares its platform libraries if needed.

     *

     * @param project The Gradle project object.

     * @param kotlinNativeBundleConfiguration Gradle configuration for Kotlin Native Bundle

     * @param kotlinNativeVersion The version of Kotlin/Native to install

     * @param bundleDir The directory to store the Kotlin/Native bundle.

     * @param reinstallFlag A flag indicating whether to reinstall the bundle.

     * @param konanTargets The set of KonanTarget objects representing the targets for the Kotlin/Native bundle.

     * @param overriddenKonanHome Overridden konan home if present.

     * @return kotlin native version if toolchain was used, path to konan home if konan home was used

     */",f15492:m161
67800,"private fun collectArgumentsForClassifierTypeConstructor(c: TypeResolutionContext, classifierDescriptor: ClassifierDescriptorWithTypeParameters, qualifierParts: List<QualifiedExpressionResolver.ExpressionQualifierPart>): Pair<List<KtTypeProjection>, List<TypeProjection>?>?","{
    val classifierDescriptorChain = classifierDescriptor.classifierDescriptorsFromInnerToOuter()
    val reversedQualifierParts = qualifierParts.asReversed()
    var wasStatic = false
    val result = SmartList<KtTypeProjection>()
    val classifierChainLastIndex = min(classifierDescriptorChain.size, reversedQualifierParts.size) - 1
    for (index in 0 .. classifierChainLastIndex) {
        val qualifierPart = reversedQualifierParts[index]
        val currentArguments = qualifierPart.typeArguments?.arguments.orEmpty()
        val declaredTypeParameters = classifierDescriptorChain[index].declaredTypeParameters
        val currentParameters = if (wasStatic) emptyList() else declaredTypeParameters
        if (wasStatic && currentArguments.isNotEmpty() && declaredTypeParameters.isNotEmpty()) {
            c.trace.report(TYPE_ARGUMENTS_FOR_OUTER_CLASS_WHEN_NESTED_REFERENCED.on(qualifierPart.typeArguments!!))
            return null
        }
        if (currentArguments.size != currentParameters.size) {
            c.trace.report(WRONG_NUMBER_OF_TYPE_ARGUMENTS.on(qualifierPart.typeArguments ?: qualifierPart.expression, currentParameters.size, classifierDescriptorChain[index]))
            return null
        }
        result.addAll(currentArguments)
        wasStatic = wasStatic || !classifierDescriptorChain[index].isInner
    }
    val nonClassQualifierParts = reversedQualifierParts.subList(min(classifierChainLastIndex + 1, reversedQualifierParts.size), reversedQualifierParts.size)
    for ((_, _, typeArguments) in nonClassQualifierParts) {
        if (typeArguments != null) {
            c.trace.report(TYPE_ARGUMENTS_NOT_ALLOWED.on(typeArguments, ""here""))
            return null
        }
    }
    val parameters = classifierDescriptor.typeConstructor.parameters
    if (result.size < parameters.size) {
        val nextParameterOwner = parameters[result.size].original.containingDeclaration as? ClassDescriptor ?: return Pair(result, null)
        val restArguments = c.scope.findImplicitOuterClassArguments(nextParameterOwner)
        val restParameters = parameters.subList(result.size, parameters.size)
        val typeArgumentsCanBeSpecifiedCount = classifierDescriptor.classifierDescriptorsFromInnerToOuter().sumOf { it.declaredTypeParameters.size }
        if (restArguments == null && typeArgumentsCanBeSpecifiedCount > result.size) {
            c.trace.report(OUTER_CLASS_ARGUMENTS_REQUIRED.on(qualifierParts.first().expression, nextParameterOwner))
            return null
        } else if (restArguments == null) {
            assert(typeArgumentsCanBeSpecifiedCount == result.size) { ""Number of type arguments that can be specified ($typeArgumentsCanBeSpecifiedCount) "" + ""should be equal to actual arguments number ${result.size}, (classifier: $classifierDescriptor)"" }
            return Pair(result, null)
        } else {
            assert(restParameters.size == restArguments.size) { ""Number of type of restParameters should be equal to ${restParameters.size}, "" + ""but ${restArguments.size} were found for $classifierDescriptor/$nextParameterOwner"" }
            return Pair(result, restArguments)
        }
    }
    return Pair(result, null)
}","/**

     * @return yet unresolved KtTypeProjection arguments and already resolved ones relevant to an outer class

     * @return null if error was reported

     *

     * If second component is null then rest of the arguments should be appended using default types of relevant parameters

     */",f19246:m1729
63525,"internal fun BooleanArray.copyOfUninitializedElements(fromIndex: Int, toIndex: Int): BooleanArray","{
    val newSize = toIndex - fromIndex
    if (newSize < 0) {
        throw IllegalArgumentException(""$fromIndex > $toIndex"")
    }
    val result = BooleanArray(newSize)
    this.copyInto(result, 0, fromIndex, toIndex.coerceAtMost(size))
    return result
}","/**

 * Returns new array which is a copy of the original array's range between [fromIndex] (inclusive)

 * and [toIndex] (exclusive) with new elements filled with **lateinit** _uninitialized_ values.

 * Attempts to read _uninitialized_ values from this array work in implementation-dependent manner,

 * either throwing exception or returning some kind of implementation-specific default value.

 */",f17396:m3537
57126,public fun onLeave(function: (File) -> Unit): FileTreeWalk,"{
    return FileTreeWalk(start, direction, onEnter = onEnter, onLeave = function, onFail = onFail, maxDepth = maxDepth)
}","/**

     * Sets a callback [function], that is called on any left directory after its files are visited and after it is visited itself.

     */",f16960:m445
50919,"fun Project.assertConfigurationsHaveTaskDependencies(configurationName: String, vararg expectedTaskNames: String)","{
    val actualNames = configurations.getByName(configurationName).outgoing.artifacts.buildDependencies.getDependencies(null).map { it.path }
    assertEquals(expectedTaskNames.toSet(), actualNames.toSet(), ""Unexpected task dependencies for $configurationName"")
}","/**

 * Assert that given consumable configuration [configurationName] depends on [expectedTaskNames] tasks

 */",f16189:m229
58506,"@SinceKotlin(""1.4"") @kotlin.internal.InlineOnly public inline fun <K, V> Map<out K, V>.minWithOrNull(comparator: Comparator<in Map.Entry<K, V>>): Map.Entry<K, V>?","{
    return entries.minWithOrNull(comparator)
}","/**

 * Returns the first entry having the smallest value according to the provided [comparator] or `null` if there are no entries.

 */",f17089:m1059
20127,public fun KtWhenExpression.getMissingCases(): List<WhenMissingCase>,withValidityAssertion { analysisSession.expressionInfoProvider.getWhenMissingCases(this) },"/**

     * Returns cases missing from the branches of [KtWhenExpression].

     *

     * The missing cases of the when-expression in the following example are Direction.WEST and Direction.EAST:

     *

     * enum class Direction {

     *   NORTH, SOUTH, WEST, EAST

     * }

     * foo = when(direction) {

     *   Direction.NORTH -> 1

     *   Direction.SOUTH -> 2

     *   else -> 3

     * }

     *

     * If when-expression has no subject, then else-branch would be reported as missing even if it is explicitly present:

     *

     * fun test() {

     *     when {

     *         true -> {}

     *         else -> {}

     *     }

     * }

     *

     * Note that this function returns the same missing cases regardless of the existence of the else branch.

     * If you have to assume that it does not have the missing cases when it has an else branch,

     * you need a separate check whether it has an else branch or not.

     */",f5776:m49
16347,private fun Processor.processAnonymousObjectHeader(anonymousObject: FirAnonymousObject),"{
    processList(anonymousObject.superTypeRefs)
}","/**

     * Same as [processClassHeader], but for anonymous objects.

     *

     * N.B. Anonymous classes cannot have its own explicit type parameters, so we do not process them.

     */",f4108:m915
55800,public suspend fun yieldAll(sequence: Sequence<T>): Unit,yieldAll(sequence.iterator()),"/**

     * Yields potentially infinite sequence of values  to the [Iterator] being built

     * and suspends until all these values are iterated and the next one is requested.

     *

     * The sequence can be potentially infinite.

     *

     * @sample samples.collections.Sequences.Building.buildSequenceYieldAll

     */",f16811:m167
59561,"@SinceKotlin(""1.2"") public fun <T> Stream<T>.toList(): List<T>",collect(Collectors.toList<T>()),"/**

 * Returns a [List] containing all elements produced by this stream.

 *

 * @sample samples.streams.Streams.streamToList

 */",f17134:m131
55125,@kotlin.internal.IntrinsicConstEvaluation public inline operator fun minus(other: Float): Float,this.toFloat().minus(other),/** Subtracts the other value from this value. */,f16727:m2609
8588,"fun produceCAdapterBitcode(clang: ClangArgs, cppFile: File, bitcodeFile: File)","{
    val clangCommand = clang.clangCXX(""-std=c++17"", cppFile.absoluteFile.normalize().path, ""-emit-llvm"", ""-c"", ""-o"", bitcodeFile.absoluteFile.normalize().path)
    Command(clangCommand).execute()
}","/**

 * Fourth phase of C export: compile runtime bindings to bitcode.

 */",f3279:m23
57158,"@SinceKotlin(""1.4"") public actual fun maxOf(a: Float, vararg other: Float): Float","{
    var max = a
    for (e in other) max = maxOf(max, e)
    return max
}","/**

 * Returns the greater of the given values.

 * 

 * If any value is `NaN`, returns `NaN`.

 */",f16966:m409
57261,"@SinceKotlin(""1.4"") @kotlin.internal.InlineOnly public actual inline infix fun ShortArray?.contentEquals(other: ShortArray?): Boolean","{
    return java.util.Arrays.equals(this, other)
}","/**

 * Checks if the two specified arrays are *structurally* equal to one another.

 * 

 * Two arrays are considered structurally equal if they have the same size, and elements at corresponding indices are equal.

 * 

 * The arrays are also considered structurally equal if both are `null`.

 * 

 * @param other the array to compare with this array.

 * @return `true` if the two arrays are structurally equal, `false` otherwise.

 * 

 * @sample samples.collections.Arrays.ContentOperations.intArrayContentEquals

 */",f16970:m1205
27499,fun getTypesForFiles(files: Collection<File>): Set<String>,"{
    val typesFromFiles = HashSet<String>(files.size)
    for (file in files) {
        sourceCache[file.toURI()]?.declaredTypes?.let { typesFromFiles.addAll(it) }
    }
    return typesFromFiles
}",/** Returns all types defined in these files. */,f9700:m67
14100,@PublishedApi internal inline fun <E> arrayOfUninitializedElements(size: Int): Array<E>,"{
    require(size >= 0) { ""capacity must be non-negative."" }
    @Suppress(""TYPE_PARAMETER_AS_REIFIED"") return Array<E>(size)
}","/**

 * Returns an array of objects of the given type with the given [size], initialized with _uninitialized_ values.

 * Attempts to read _uninitialized_ values from this array work in implementation-dependent manner,

 * either throwing exception or returning some kind of implementation-specific default value.

 */",f3730:m23
59001,public inline fun <R: Any> CharSequence.mapNotNull(transform: (Char) -> R?): List<R>,"{
    return mapNotNullTo(ArrayList<R>(), transform)
}","/**

 * Returns a list containing only the non-null results of applying the given [transform] function

 * to each character in the original char sequence.

 * 

 * @sample samples.collections.Collections.Transformations.mapNotNull

 */",f17097:m2043
52610,override fun hashCode(): Int,AbstractSet.unorderedHashCode(this),"/**

     * Returns the hash code value for this set.

     */",f16550:m55
58659,public infix fun Short.downTo(to: Short): IntProgression,"{
    return IntProgression.fromClosedRange(this.toInt(), to.toInt(), -1)
}","/**

 * Returns a progression from this value down to the specified [to] value with the step -1.

 * 

 * The [to] value should be less than or equal to `this` value.

 * If the [to] value is greater than `this` value the returned progression is empty.

 */",f17092:m1851
14928,"internal fun ShortArray.copyOfUninitializedElements(fromIndex: Int, toIndex: Int): ShortArray","{
    val newSize = toIndex - fromIndex
    if (newSize < 0) {
        throw IllegalArgumentException(""$fromIndex > $toIndex"")
    }
    val result = ShortArray(newSize)
    this.copyInto(result, 0, fromIndex, toIndex.coerceAtMost(size))
    return result
}","/**

 * Returns new array which is a copy of the original array's range between [fromIndex] (inclusive)

 * and [toIndex] (exclusive) with new elements filled with **lateinit** _uninitialized_ values.

 * Attempts to read _uninitialized_ values from this array work in implementation-dependent manner,

 * either throwing exception or returning some kind of implementation-specific default value.

 */",f3831:m3325
57092,public fun File.readLines(charset: Charset = Charsets.UTF_8): List<String>,"{
    val result = ArrayList<String>()
    forEachLine(charset) { result.add(it) }
    return result
}","/**

 * Reads the file content as a list of lines.

 *

 * Do not use this function for huge files.

 *

 * @param charset character set to use. By default uses UTF-8 charset.

 * @return list of file lines.

 */",f16956:m525
15718,"protected fun doTestByKtFile(ktFile: KtFile, testServices: TestServices)","{
    fun TextRange.asLineColumnRange(): String {
        return getLineAndColumnRangeInPsiFile(ktFile, this).toString()
    }
    analyseForTest(ktFile) {
        val diagnosticsInFile = ktFile.collectDiagnosticsForFile(KtDiagnosticCheckerFilter.EXTENDED_AND_COMMON_CHECKERS).map { it.getKey() }.sorted()
        val diagnosticsFromElements = buildList { ktFile.accept(object : KtTreeVisitorVoid() {
            override fun visitKtElement(element: KtElement) {
                for (diagnostic in element.getDiagnostics(KtDiagnosticCheckerFilter.EXTENDED_AND_COMMON_CHECKERS)) {
                    add(element to diagnostic.getKey())
                }
                super.visitKtElement(element)
            }
        }) }.sortedBy { (_, diagnostic) -> diagnostic }
        val actual = buildString {
            fun DiagnosticKey.print(indent: Int) {
                val indentString = "" "".repeat(indent)
                append(indentString + factoryName)
                appendLine(""$indentString  text ranges: $textRanges"")
                appendLine(""$indentString  PSI: ${psi::class.simpleName} at ${psi.textRange.asLineColumnRange()}"")
            }
            appendLine(""Diagnostics from elements:"")
            for ((element, diagnostic) in diagnosticsFromElements) {
                appendLine(""  for PSI element of type ${element::class.simpleName} at ${element.textRange.asLineColumnRange()}"")
                diagnostic.print(4)
            }
        }
        testServices.assertions.assertEqualsToTestDataFileSibling(actual)
        assertEquals(diagnosticsInFile, diagnosticsFromElements.map { (_, v) -> v }, ""diagnostics collected from file should be the same as those collected from individual PSI elements."")
    }
}","/**

     * [ktFile] may be a fake file for dangling module tests.

     */",f3942:m57
52032,"fun makeFailureResult(message: String, path: String? = null, location: SourceCode.Location? = null): ResultWithDiagnostics.Failure","ResultWithDiagnostics.Failure(message.asErrorDiagnostics(ScriptDiagnostic.unspecifiedError, path, location))","/**

 * Makes Failure result with diagnostic [message] with optional [path] and [location]

 */",f16426:m461
52459,"override fun matches(startIndex: Int, testString: CharSequence, matchResult: MatchResultImpl): Int","{
    if (children.isEmpty()) {
        return -1
    }
    val oldStart = matchResult.getStart(groupIndex)
    matchResult.setStart(groupIndex, startIndex)
    children.forEach {
        val shift = it.matches(startIndex, testString, matchResult)
        if (shift >= 0) {
            return shift
        }
    }
    matchResult.setStart(groupIndex, oldStart)
    return -1
}","/**

     * Returns startIndex+shift, the next position to match

     */",f16512:m81
53155,"@Deprecated(""Use replaceFirstChar instead."", ReplaceWith(""replaceFirstChar { it.lowercase() }"")) @DeprecatedSinceKotlin(warningSince = ""1.5"") public actual fun String.decapitalize(): String","{
    return if (isNotEmpty()) substring(0, 1).lowercase() + substring(1) else this
}","/**

 * Returns a copy of this string having its first letter lowercased using the rules of the default locale,

 * or the original string if it's empty or already starts with a lower case letter.

 *

 * @sample samples.text.Strings.decapitalize

 */",f16624:m267
13995,"@SinceKotlin(""1.3"") public actual fun String.encodeToByteArray(): ByteArray","unsafeStringToUtf8(0, length)","/**

 * Encodes this string to an array of bytes in UTF-8 encoding.

 *

 * Any malformed char sequence is replaced by the replacement byte sequence.

 */",f3713:m863
34987,fun shouldCheckDeclaration(declaration: Any): Boolean,"when (declaration) {
    is KmFunction -> !declaration.name.startsWith(KNI_BRIDGE_FUNCTION_PREFIX)
    else -> true
}","/**

         * Certain auxiliary metadata entities may be intentionally excluded from comparison.

         * Ex: Kotlin/Native interface bridge functions.

         */",f11440:m61
59068,"@SinceKotlin(""1.5"") @OptIn(kotlin.experimental.ExperimentalTypeInference::class) @OverloadResolutionByLambdaReturnType @kotlin.jvm.JvmName(""sumOfULong"") @WasExperimental(ExperimentalUnsignedTypes::class) @kotlin.internal.InlineOnly public inline fun CharSequence.sumOf(selector: (Char) -> ULong): ULong","{
    var sum: ULong = 0.toULong()
    for (element in this) {
        sum += selector(element)
    }
    return sum
}","/**

 * Returns the sum of all values produced by [selector] function applied to each character in the char sequence.

 */",f17097:m4379
59024,"@SinceKotlin(""1.4"") @OptIn(kotlin.experimental.ExperimentalTypeInference::class) @OverloadResolutionByLambdaReturnType @kotlin.internal.InlineOnly public inline fun <R: Comparable<R>> CharSequence.maxOfOrNull(selector: (Char) -> R): R?","{
    if (isEmpty()) return null
    var maxValue = selector(this[0])
    for (i in 1 .. lastIndex) {
        val v = selector(this[i])
        if (maxValue < v) {
            maxValue = v
        }
    }
    return maxValue
}","/**

 * Returns the largest value among all values produced by [selector] function

 * applied to each character in the char sequence or `null` if there are no characters.

 */",f17097:m2731
48244,internal fun String.asValidTaskName(),"replace(invalidTaskNameCharacters, ""_"")","/**

 * Replaces characters which are not allowed in Gradle task names (/, \, :, <, >, "", ?, *, |) with '_'

 */",f15581:m93
58772,"public inline fun <T, R: Comparable<R>> Sequence<T>.sortedBy(crossinline selector: (T) -> R?): Sequence<T>","{
    return sortedWith(compareBy(selector))
}","/**

 * Returns a sequence that yields elements of this sequence sorted according to natural sort order of the value returned by specified [selector] function.

 * 

 * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.

 *

 * The operation is _intermediate_ and _stateful_.

 * 

 * @sample samples.collections.Collections.Sorting.sortedBy

 */",f17096:m1193
14899,public actual fun <T> Array<T>.copyOf(): Array<T>,"{
    return this.copyOfUninitializedElements(size)
}","/**

 * Returns new array which is a copy of the original array.

 * 

 * @sample samples.collections.Arrays.CopyOfOperations.copyOf

 */",f3831:m2613
63655,"@SinceKotlin(""1.4"") public actual fun minOf(a: Byte, vararg other: Byte): Byte","{
    var min = a
    for (e in other) min = minOf(min, e)
    return min
}","/**

 * Returns the smaller of the given values.

 */",f17406:m763
43573,"fun BuildResult.assertOutputContainsExactTimes(expectedSubString: String, expectedRepetitionTimes: Int = 1)","{
    var currentOffset = 0
    var count = 0
    var nextIndex = output.indexOf(expectedSubString, currentOffset)
    while (nextIndex != -1 && count < expectedRepetitionTimes + 1) {
        count++
        currentOffset = nextIndex + expectedSubString.length
        nextIndex = output.indexOf(expectedSubString, currentOffset)
    }
    assert(count == expectedRepetitionTimes) {
        printBuildOutput()
        ""Build output contains \""$expectedSubString\"" $count times""
    }
}","/**

 * Asserts Gradle output contains [expectedSubString] string exact times.

 */",f13457:m79
56618,public operator fun <T> java.util.Enumeration<T>.iterator(): Iterator<T>,"object : Iterator<T> {
    override fun hasNext(): Boolean = hasMoreElements()

    public override fun next(): T = nextElement()
}","/**

 * Creates an [Iterator] for an [java.util.Enumeration], allowing to use it in `for` loops.

 * @sample samples.collections.Iterators.iteratorForEnumeration

 */",f16920:m21
63433,"@Deprecated(""Use Kotlin compiler 1.4 to avoid deprecation warning."") @SinceKotlin(""1.1"") @DeprecatedSinceKotlin(hiddenSince = ""1.4"") public infix fun FloatArray.contentEquals(other: FloatArray): Boolean","{
    return this.contentEquals(other)
}","/**

 * Checks if the two specified arrays are *structurally* equal to one another.

 * 

 * Two arrays are considered structurally equal if they have the same size, and elements at corresponding indices are equal.

 * Elements are compared for equality using the [equals][Any.equals] function.

 * This means `NaN` is equal to itself and `-0.0` is not equal to `0.0`.

 * 

 * @param other the array to compare with this array.

 * @return `true` if the two arrays are structurally equal, `false` otherwise.

 * 

 * @sample samples.collections.Arrays.ContentOperations.doubleArrayContentEquals

 */",f17396:m831
14179,@ExperimentalNativeApi public fun Throwable.getStackTraceAddresses(): List<Long>,this.getStackTraceAddressesInternal(),"/**

 * Returns a list of stack trace addresses representing the stack trace

 * pertaining to this throwable.

 */",f3748:m17
63460,"@SinceKotlin(""1.4"") public actual fun FloatArray?.contentHashCode(): Int","{
    if (this === null) return 0
    var result = 1
    for (element in this) result = 31 * result + element.hashCode()
    return result
}","/**

 * Returns a hash code based on the contents of this array as if it is [List].

 */",f17396:m1705
64092,@kotlin.internal.IntrinsicConstEvaluation public inline operator fun plus(other: Byte): Int,this.toInt() + other.toInt(),/** Adds the other value to this value. */,f17455:m1057
14998,"@Suppress(""ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS"") public actual fun <T> Array<out T>.sortWith(comparator: Comparator<in T>, fromIndex: Int = 0, toIndex: Int = size): Unit","{
    AbstractList.checkRangeIndexes(fromIndex, toIndex, size)
    sortArrayWith(this, fromIndex, toIndex, comparator)
}","/**

 * Sorts a range in the array in-place with the given [comparator].

 * 

 * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.

 * 

 * @param fromIndex the start of the range (inclusive) to sort, 0 by default.

 * @param toIndex the end of the range (exclusive) to sort, size of this array by default.

 * 

 * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.

 * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].

 */",f3831:m5013
56076,"public fun <T, R> Iterable<Pair<T, R>>.unzip(): Pair<List<T>, List<R>>","{
    val expectedSize = collectionSizeOrDefault(10)
    val listT = ArrayList<T>(expectedSize)
    val listR = ArrayList<R>(expectedSize)
    for (pair in this) {
        listT.add(pair.first)
        listR.add(pair.second)
    }
    return listT to listR
}","/**

 * Returns a pair of lists, where

 * *first* list is built from the first values of each pair from this collection,

 * *second* list is built from the second values of each pair from this collection.

 * @sample samples.collections.Iterables.Operations.unzipIterable

 */",f16824:m107
55956,"@SinceKotlin(""1.1"") public inline fun <T, K, R, M: MutableMap<in K, R>> Grouping<T, K>.aggregateTo(destination: M, operation: (key: K, accumulator: R?, element: T, first: Boolean) -> R): M","{
    for (e in this.sourceIterator()) {
        val key = keyOf(e)
        val accumulator = destination[key]
        destination[key] = operation(key, accumulator, e, accumulator == null && !destination.containsKey(key))
    }
    return destination
}","/**

 * Groups elements from the [Grouping] source by key and applies [operation] to the elements of each group sequentially,

 * passing the previously accumulated value and the current element as arguments,

 * and stores the results in the given [destination] map.

 *

 * The key for each element is provided by the [Grouping.keyOf] function.

 *

 * @param operation a function that is invoked on each element with the following parameters:

 *  - `key`: the key of the group this element belongs to;

 *  - `accumulator`: the current value of the accumulator of the group, can be `null` if it's the first `element` encountered in the group;

 *  - `element`: the element from the source being aggregated;

 *  - `first`: indicates whether it's the first `element` encountered in the group.

 *

 * If the [destination] map already has a value corresponding to some key,

 * then the elements being aggregated for that key are never considered as `first`.

 *

 * @return the [destination] map associating the key of each group with the result of aggregation of the group elements.

 * @sample samples.collections.Grouping.aggregateByRadixTo

 */",f16820:m111
58580,"@SinceKotlin(""1.3"") @kotlin.internal.InlineOnly public inline fun LongRange.random(): Long","{
    return random(Random)
}","/**

 * Returns a random element from this range.

 * 

 * @throws IllegalArgumentException if this range is empty.

 */",f17092:m323
51959,"fun createEvaluationConfigurationFromTemplate(baseClassType: KotlinType, baseHostConfiguration: ScriptingHostConfiguration, contextClass: KClass<*> = ScriptEvaluationConfiguration::class, body: ScriptEvaluationConfiguration.Builder.() -> Unit = {}): ScriptEvaluationConfiguration","{
    val templateClass: KClass<*> = baseClassType.getTemplateClass(baseHostConfiguration, contextClass)
    val mainAnnotation = templateClass.kotlinScriptAnnotation
    val hostConfiguration = constructHostConfiguration(mainAnnotation.hostConfiguration, baseHostConfiguration) {}
    return constructEvaluationConfiguration(mainAnnotation, hostConfiguration, body)
}","/**

 * Creates evaluation configuration from annotated script base class

 * NOTE: it is preferable to use createScriptDefinitionFromTemplate for creating all configurations at once

 * @param baseClassType the annotated script base class to construct the configuration from

 * @param baseHostConfiguration scripting host configuration properties

 * @param contextClass optional context class to extract classloading strategy from

 * @param body optional configuration function to add more properties to the evaluation configuration

 */",f16419:m139
43618,"private fun BuildResult.assertTasksHaveOutcome(expected: TaskOutcome, taskPaths: Collection<String>)","{
    taskPaths.forEach { taskPath ->
        val task = task(taskPath)
        assertNotNull(task, ""expected Task $taskPath had state $expected, but task was not executed"")
        assert(task.outcome == expected) {
            printBuildOutput()
            """"""
            
                        |Expected Task $taskPath had state:${expected}, but was:${task.outcome}
            
                        |
            
                        |Actual task states:
            
                        |${getActualTasksAsString()}
            
                        """""".trimMargin()
        }
    }
}","/**

 * Asserts given [taskPaths] have [expected] execution state.

 */",f13463:m213
63554,public actual operator fun <T> Array<T>.plus(elements: Collection<T>): Array<T>,"{
    var index = size
    val result = copyOfUninitializedElements(index + elements.size)
    for (element in elements) result[index++] = element
    return result
}","/**

 * Returns an array containing all elements of the original array and then all elements of the given [elements] collection.

 */",f17396:m4267
21122,public fun addBinaryRoot(root: Path),"{
    binaryRoots.add(root)
}","/**

     * Adds a [root] to the current library.

     *

     * The [root] can be:

     * * A .jar file for JVM libraries or common metadata KLibs

     * * A directory with a set of .classfiles for JVM Libraries

     * * A Kotlin/Native, Kotlin/Common, Kotlin/JS KLib.

     * In this case, all KLib dependencies should be provided together with the KLib itself.

     */",f8470:m27
41003,fun File.deleteDirectoryContents(),"{
    when {
        isDirectory -> listFiles()!!.forEach { it.deleteRecursivelyOrThrow() }
        isFile -> error(""Expected a directory but found a regular file: $path"")
        else -> error(""Directory does not exist: $path"")
    }
}","/**

 * Deletes the contents of this directory (not the directory itself).

 *

 * If the directory does not exist or if this is a regular file, this method will throw an exception.

 */",f12982:m61
41022,override fun registerAddedOrChangedFile(outputFile: Path),"{
    if (isFileRelocationIsAlreadyRegisteredFor(outputFile)) return
    reporter.measure(GradleBuildTime.PRECISE_BACKUP_OUTPUT) { if (Files.exists(outputFile)) {
        stashFile(outputFile)
    } else {
        reporter.debug { ""Marking the $outputFile file as newly added"" }
        fileRelocationRegistry[outputFile] = null
    } }
}","/**

     * Moves the original [outputFile] before change to the [stashDir].

     * If the [outputFile] doesn't exist then it's marked to be removed if the transaction is unsuccessful.

     */",f12984:m345
49054,@ExternalKotlinTargetApi operator fun SourceSetConstraint.not(),SourceSetConstraint { sourceSet -> this@not(sourceSet).not() },"/**

 * Negates a given [SourceSetConstraint]:

 * The resulting constraint will match only SourceSets that would *not* have been matched by the source constraint

 */",f15735:m765
57078,public fun File.readBytes(): ByteArray,"inputStream().use { input ->
    var offset = 0
    var remaining = this.length().also { length -> if (length > Int.MAX_VALUE) throw OutOfMemoryError(""File $this is too big ($length bytes) to fit in memory."") }.toInt()
    val result = ByteArray(remaining)
    while (remaining > 0) {
        val read = input.read(result, offset, remaining)
        if (read < 0) break
        remaining -= read
        offset += read
    }
    if (remaining > 0) return@use result.copyOf(offset)
    val extraByte = input.read()
    if (extraByte == -1) return@use result
    val extra = ExposingBufferByteArrayOutputStream(DEFAULT_BUFFER_SIZE + 1)
    extra.write(extraByte)
    input.copyTo(extra)
    val resultingSize = result.size + extra.size()
    if (resultingSize < 0) throw OutOfMemoryError(""File $this is too big to fit in memory."")
    return@use extra.buffer.copyInto(destination = result.copyOf(resultingSize), destinationOffset = result.size, startIndex = 0, endIndex = extra.size())
}","/**

 * Gets the entire content of this file as a byte array.

 *

 * This method is not recommended on huge files. It has an internal limitation of 2 GB byte array size.

 *

 * @return the entire content of this file as a byte array.

 */",f16956:m123
13727,@kotlin.internal.IntrinsicConstEvaluation public operator fun compareTo(other: Short): Int,this.compareTo(other.toFloat()),"/**

     * Compares this value with the specified value for order.

     * Returns zero if this value is equal to the specified other value, a negative number if it's less than other,

     * or a positive number if it's greater than other.

     */",f3686:m3805
14966,public actual operator fun LongArray.plus(elements: Collection<Long>): LongArray,"{
    var index = size
    val result = copyOfUninitializedElements(index + elements.size)
    for (element in elements) result[index++] = element
    return result
}","/**

 * Returns an array containing all elements of the original array and then all elements of the given [elements] collection.

 */",f3831:m4241
64070,public operator fun rangeTo(other: Long): LongRange,"LongRange(this.toLong(), other)",/** Creates a range from this value to the specified [other] value. */,f17455:m627
52974,"@SinceKotlin(""1.3"") @PublishedApi internal fun checkBuilderCapacity(capacity: Int)","{
    require(capacity >= 0) { ""capacity must be non-negative."" }
}","/**

 * Checks a collection builder function capacity argument.

 * In JS no validation is made in Map/Set constructor yet.

 */",f16596:m459
52964,public actual fun <T> MutableList<T>.sortWith(comparator: Comparator<in T>): Unit,"{
    collectionsSort(this, comparator)
}","/**

 * Sorts elements in the list in-place according to the order specified with [comparator].

 *

 * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.

 *

 * @sample samples.collections.Collections.Sorting.sortMutableListWith

 */",f16596:m277
14903,public actual fun LongArray.copyOf(): LongArray,"{
    return this.copyOfUninitializedElements(size)
}","/**

 * Returns new array which is a copy of the original array.

 * 

 * @sample samples.collections.Arrays.CopyOfOperations.copyOf

 */",f3831:m2685
7885,"fun DependencyHandler.moduleTestFixtures(dependency: ProjectDependency, moduleName: String): ProjectDependency","dependency.copy().apply { capabilities { requireCapability(CppConsumerPlugin.moduleTestFixturesCapability(dependencyProject, moduleName)) } }","/**

 * Depend on [CompileToBitcodePlugin]'s module (testFixtures part) named [moduleName] defined in [dependency].

 */",f3152:m43
52470,"override fun matches(startIndex: Int, testString: CharSequence, matchResult: MatchResultImpl): Int","{
    if (startIndex + charCount > testString.length) {
        return -1
    }
    val shift = accepts(startIndex, testString)
    if (shift < 0) {
        return -1
    }
    return next.matches(startIndex + shift, testString, matchResult)
}","/**

     * Checks if we can enter this state and pass the control to the next one.

     * Return positive value if match succeeds, negative otherwise.

     */",f16516:m75
14071,public fun getAndSet(newValue: NativePtr): NativePtr,"{
    while (true) {
        val old = value
        if (this::value.compareAndSetField(old, newValue)) {
            return old
        }
    }
}","/**

     * Atomically sets the value to the given [new value][newValue] and returns the old value.

     */",f3718:m379
56280,public open fun isEmpty(): Boolean,if (step > 0) first > last else first < last,"/**

     * Checks if the progression is empty.

     *

     * Progression with a positive step is empty if its first element is greater than the last element.

     * Progression with a negative step is empty if its first element is less than the last element.

     */",f16847:m89
21821,private fun getCombinedFirKotlinDeclaredMemberScope(symbolWithMembers: KtSymbolWithMembers): FirContainingNamesAwareScope,"{
    val useSiteSession = analysisSession.useSiteSession
    return when (symbolWithMembers) {
        is KtFirScriptSymbol -> FirScriptDeclarationsScope(useSiteSession, symbolWithMembers.firSymbol.fir)
        else -> useSiteSession.declaredMemberScope(symbolWithMembers.getFirForScope(), memberRequiredPhase = null)
    }
}","/**

     * Returns a declared member scope which contains both static and non-static callables, as well as all classifiers. Java classes need to

     * be handled specially, because [declaredMemberScope] doesn't handle Java enhancement properly.

     */",f8641:m265
45757,"fun <T: Dependency> runtimeOnly(dependency: T, configure: Action<T>)",runtimeOnly(dependency) { configure.execute(this) },"/**

     * Adds a `runtimeOnly` dependency to this entity.

     *

     * @see [HasKotlinDependencies.runtimeOnlyConfigurationName]

     *

     * @param dependency The dependency to add.

     * @param configure Additional configuration for the [dependency].

     * @return The added [dependency].

     */",f14927:m489
63379,public operator fun plus(other: Int): Pointer,Pointer(address + other.toUInt()),/** Adds an [Int] to the address of this [Pointer] */,f17391:m35
52398,public actual operator fun contains(char: Char): Boolean,char.getCategoryValue() == this.value,"/**

     * Returns `true` if [char] character belongs to this category.

     */",f16492:m321
11458,fun valueDescription(value: TResult?),"value?.let { if (it is List<*> && it.isNotEmpty()) "" [${it.joinToString()}]"" else if (it !is List<*>) "" [$it]"" else null }","/**

     * Provide text description of value.

     *

     * @param value value got getting text description for.

     */",f3550:m63
64448,"@SinceKotlin(""1.5"") @WasExperimental(ExperimentalPathApi::class) @Throws(IOException::class) @kotlin.internal.InlineOnly public inline fun Path.bufferedWriter(charset: Charset = Charsets.UTF_8, bufferSize: Int = DEFAULT_BUFFER_SIZE, vararg options: OpenOption): BufferedWriter","{
    return BufferedWriter(OutputStreamWriter(Files.newOutputStream(this, *options), charset), bufferSize)
}","/**

 * Returns a new [BufferedWriter] for writing the content of this file.

 *

 * @param charset character set to use for writing text, UTF-8 by default.

 * @param bufferSize necessary size of the buffer.

 * @param options options to determine how the file is opened.

 */",f17469:m147
19999,public inline fun <reified PSI: PsiElement> KtSymbol.sourcePsi(): PSI?,"{
    if (origin != KtSymbolOrigin.SOURCE) return null
    return psi as PSI
}","/**

 * Get symbol [PsiElement]. **null** if its [KtSymbol.origin] !is [KtSymbolOrigin.SOURCE]. throws **ClassCastException** if its type !is [PSI]

 *

 * @see KtSymbol.psi

 */",f5735:m85
13928,"@SinceKotlin(""1.6"") @WasExperimental(ExperimentalStdlibApi::class) public actual fun Int.rotateLeft(bitCount: Int): Int",shl(bitCount) or ushr(32 - bitCount),"/**

 * Rotates the binary representation of this [Int] number left by the specified [bitCount] number of bits.

 * The most significant bits pushed out from the left side reenter the number as the least significant bits on the right side.

 *

 * Rotating the number left by a negative bit count is the same as rotating it right by the negated bit count:

 * `number.rotateLeft(-n) == number.rotateRight(n)`

 *

 * Rotating by a multiple of [Int.SIZE_BITS] (32) returns the same number, or more generally

 * `number.rotateLeft(n) == number.rotateLeft(n % 32)`

 */",f3706:m317
57050,@kotlin.internal.InlineOnly public inline fun print(message: CharArray),"{
    System.out.print(message)
}",/** Prints the given [message] to the standard output stream. */,f16953:m141
57473,"@SinceKotlin(""1.4"") @OptIn(kotlin.experimental.ExperimentalTypeInference::class) @OverloadResolutionByLambdaReturnType @kotlin.jvm.JvmName(""sumOfBigInteger"") @kotlin.internal.InlineOnly public inline fun ShortArray.sumOf(selector: (Short) -> java.math.BigInteger): java.math.BigInteger","{
    var sum: java.math.BigInteger = 0.toBigInteger()
    for (element in this) {
        sum += selector(element)
    }
    return sum
}","/**

 * Returns the sum of all values produced by [selector] function applied to each element in the array.

 */",f16970:m5985
37693,private fun isComponentNMethod(method: CallableMemberDescriptor): Boolean,"{
    if ((method as? FunctionDescriptor)?.isOperator != true) return false
    val parent = method.containingDeclaration
    if (parent is ClassDescriptor && parent.isData && DataClassResolver.isComponentLike(method.name)) {
        return true
    }
    return false
}","/**

 * Check that given [method] is a synthetic .componentN() method of a data class.

 */",f11831:m157
55132,@kotlin.internal.IntrinsicConstEvaluation public inline operator fun times(other: Double): Double,this.toDouble().times(other),/** Multiplies this value by the other value. */,f16727:m2679
56152,@kotlin.internal.InlineOnly public inline fun TODO(): Nothing,throw NotImplementedError(),"/**

 * Always throws [NotImplementedError] stating that operation is not implemented.

 */",f16833:m33
56872,"@SinceKotlin(""1.4"") @kotlin.internal.InlineOnly public actual inline fun Long.countTrailingZeroBits(): Int",java.lang.Long.numberOfTrailingZeros(this),"/**

 * Counts the number of consecutive least significant bits that are zero in the binary representation of this [Long] number.

 */",f16929:m359
58540,"@SinceKotlin(""1.5"") @WasExperimental(ExperimentalUnsignedTypes::class) public infix fun UShort.downTo(to: UShort): UIntProgression","{
    return UIntProgression.fromClosedRange(this.toUInt(), to.toUInt(), -1)
}","/**

 * Returns a progression from this value down to the specified [to] value with the step -1.

 * 

 * The [to] value should be less than or equal to `this` value.

 * If the [to] value is greater than `this` value the returned progression is empty.

 */",f17090:m633
49764,private fun checkAndReportDeprecatedMppProperties(project: Project),"{
    val projectProperties = project.kotlinPropertiesProvider
    val usedProperties = deprecatedMppProperties.mapNotNull { propertyName ->
        if (propertyName in propertiesSetByPlugin && projectProperties.mpp13XFlagsSetByPlugin) return@mapNotNull null
        propertyName.takeIf { projectProperties.property(propertyName).orNull != null }
    }
    if (usedProperties.isEmpty()) return
    project.kotlinToolingDiagnosticsCollector.reportOncePerGradleBuild(project, KotlinToolingDiagnostics.PreHMPPFlagsError(usedProperties))
}","/**

 * Declared properties have to be captured during plugin application phase before the HMPP migration util sets them.

 * Warnings have to be reported only for successfully evaluated projects without errors.

 */",f15950:m47
56297,public operator fun <T: Comparable<T>> T.rangeTo(that: T): ClosedRange<T>,"ComparableRange(this, that)","/**

 * Creates a range from this [Comparable] value to the specified [that] value.

 *

 * This value needs to be smaller than or equal to [that] value, otherwise the returned range will be empty.

 * @sample samples.ranges.Ranges.rangeFromComparable

 */",f16848:m61
58641,@kotlin.internal.InlineOnly public inline operator fun IntRange.contains(value: Short): Boolean,"{
    return (this as ClosedRange<Int>).contains(value)
}","/**

 * Checks if the specified [value] belongs to this range.

 */",f17092:m1499
56041,"public inline fun <K, V, M: MutableMap<in K, in V>> Map<out K, V>.filterNotTo(destination: M, predicate: (Map.Entry<K, V>) -> Boolean): M","{
    for (element in this) {
        if (!predicate(element)) {
            destination.put(element.key, element.value)
        }
    }
    return destination
}","/**

 * Appends all entries not matching the given [predicate] into the given [destination].

 *

 * @return the destination map.

 * @sample samples.collections.Maps.Filtering.filterNotTo

 */",f16823:m1075
55894,public fun <T: Any> generateSequence(nextFunction: () -> T?): Sequence<T>,"{
    return GeneratorSequence(nextFunction, { nextFunction() }).constrainOnce()
}","/**

 * Returns a sequence which invokes the function to calculate the next value on each iteration until the function returns `null`.

 *

 * The returned sequence is constrained to be iterated only once.

 *

 * @see constrainOnce

 * @see kotlin.sequences.sequence

 *

 * @sample samples.collections.Sequences.Building.generateSequence

 */",f16815:m1295
63583,"@SinceKotlin(""1.4"") @Suppress(""ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS"") public actual fun ShortArray.sort(fromIndex: Int = 0, toIndex: Int = size): Unit","{
    AbstractList.checkRangeIndexes(fromIndex, toIndex, size)
    sortArray(this, fromIndex, toIndex)
}","/**

 * Sorts a range in the array in-place.

 * 

 * @param fromIndex the start of the range (inclusive) to sort, 0 by default.

 * @param toIndex the end of the range (exclusive) to sort, size of this array by default.

 * 

 * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.

 * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].

 * 

 * @sample samples.collections.Arrays.Sorting.sortRangeOfArray

 */",f17396:m4885
11465,private fun inspectRequiredAndDefaultUsage(),"{
    var previousArgument: ParsingValue<*, *>? = null
    arguments.forEach { (_, currentArgument) ->
        previousArgument?.let { previous ->
            if (previous.descriptor.defaultValueSet) {
                if (!currentArgument.descriptor.defaultValueSet && currentArgument.descriptor.required) {
                    error(""Default value of argument ${previous.descriptor.fullName} will be unused,  "" + ""because next argument ${currentArgument.descriptor.fullName} is always required and has no default value."")
                }
            }
            if (!previous.descriptor.required) {
                if (!currentArgument.descriptor.defaultValueSet && currentArgument.descriptor.required) {
                    error(""Argument ${previous.descriptor.fullName} will be always required, "" + ""because next argument ${currentArgument.descriptor.fullName} is always required."")
                }
            }
        }
        previousArgument = currentArgument
    }
}","/**

     * Check usage of required property for arguments.

     * Make sense only for several last arguments.

     */",f3554:m515
56477,"@SinceKotlin(""1.1"") @kotlin.internal.InlineOnly public actual inline fun Long.toString(radix: Int): String","java.lang.Long.toString(this, checkRadix(radix))","/**

 * Returns a string representation of this [Long] value in the specified [radix].

 *

 * @throws IllegalArgumentException when [radix] is not a valid radix for number to string conversion.

 */",f16885:m77
15024,"@SinceKotlin(""1.1"") @kotlin.internal.InlineOnly public actual inline fun maxOf(a: Short, b: Short, c: Short): Short","{
    return maxOf(a.toInt(), maxOf(b.toInt(), c.toInt())).toShort()
}","/**

 * Returns the greater of three values.

 */",f3836:m201
53104,"@SinceKotlin(""1.4"") @Suppress(""ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS"") public actual fun String.encodeToByteArray(startIndex: Int = 0, endIndex: Int = this.length, throwOnInvalidSequence: Boolean = false): ByteArray","{
    AbstractList.checkBoundsIndexes(startIndex, endIndex, length)
    return encodeUtf8(this, startIndex, endIndex, throwOnInvalidSequence)
}","/**

 * Encodes this string or its substring to an array of bytes in UTF-8 encoding.

 *

 * @param startIndex the beginning (inclusive) of the substring to encode, 0 by default.

 * @param endIndex the end (exclusive) of the substring to encode, length of this string by default.

 * @param throwOnInvalidSequence specifies whether to throw an exception on malformed char sequence or replace.

 *

 * @throws IndexOutOfBoundsException if [startIndex] is less than zero or [endIndex] is greater than the length of this string.

 * @throws IllegalArgumentException if [startIndex] is greater than [endIndex].

 * @throws CharacterCodingException if this string contains malformed char sequence and [throwOnInvalidSequence] is true.

 */",f16617:m339
58610,"@Deprecated(""This `contains` operation mixing integer and floating point arguments has ambiguous semantics and is going to be removed."") @DeprecatedSinceKotlin(warningSince = ""1.3"", errorSince = ""1.4"", hiddenSince = ""1.5"") @kotlin.jvm.JvmName(""longRangeContains"") public operator fun ClosedRange<Long>.contains(value: Float): Boolean","{
    return value.toLongExactOrNull().let { if (it != null) contains(it) else false }
}","/**

 * Checks if the specified [value] belongs to this range.

 */",f17092:m927
14947,"@SinceKotlin(""1.3"") @Suppress(""ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS"") public actual fun IntArray.fill(element: Int, fromIndex: Int = 0, toIndex: Int = size): Unit","{
    arrayFill(this, fromIndex, toIndex, element)
}","/**

 * Fills this array or its subrange with the specified [element] value.

 * 

 * @param fromIndex the start of the range (inclusive) to fill, 0 by default.

 * @param toIndex the end of the range (exclusive) to fill, size of this array by default.

 * 

 * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.

 * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].

 */",f3831:m3801
59069,"@SinceKotlin(""1.2"") public fun CharSequence.chunked(size: Int): List<String>","{
    return windowed(size, size, partialWindows = true)
}","/**

 * Splits this char sequence into a list of strings each not exceeding the given [size].

 * 

 * The last string in the resulting list may have fewer characters than the given [size].

 * 

 * @param size the number of elements to take in each string, must be positive and can be greater than the number of elements in this char sequence.

 * 

 * @sample samples.text.Strings.chunked

 */",f17097:m4413
49799,@ExternalKotlinTargetApi fun <T: DecoratedExternalKotlinCompilation> DecoratedExternalKotlinTarget.createCompilation(descriptor: ExternalKotlinCompilationDescriptorBuilder<T>.() -> Unit): T,"{
    return createCompilation(ExternalKotlinCompilationDescriptor(descriptor))
}","/**

 * @see createCompilation

 */",f15962:m169
56208,"@SinceKotlin(""1.4"") @kotlin.internal.InlineOnly public inline fun Byte.takeHighestOneBit(): Byte",(toInt() and 0xFF).takeHighestOneBit().toByte(),"/**

 * Returns a number having a single bit set in the position of the most significant set bit of this [Byte] number,

 * or zero, if this number is zero.

 */",f16841:m305
56239,"@SinceKotlin(""1.5"") @kotlin.internal.InlineOnly @kotlin.internal.IntrinsicConstEvaluation public inline fun Int.floorDiv(other: Int): Int","{
    var q = this / other
    if (this xor other < 0 && q * other != this) q--
    return q
}","/** Divides this value by the other value, flooring the result to an integer that is closer to negative infinity. */",f16842:m389
58933,public fun CharSequence.lastOrNull(): Char?,"{
    return if (isEmpty()) null else this[length - 1]
}","/**

 * Returns the last character, or `null` if the char sequence is empty.

 * 

 * @sample samples.text.Strings.last

 */",f17097:m411
16621,fun KtElement.getOrBuildFir(firResolveSession: LLFirResolveSession): FirElement?,firResolveSession.getOrBuildFirFor(this),"/**

 * Build [FirElement] node in its final resolved state for a requested element.

 *

 * Note: that it isn't always [BODY_RESOLVE][FirResolvePhase.BODY_RESOLVE]

 * as not all declarations have types/bodies/etc. to resolve.

 *

 * This operation could be time-consuming because it creates

 * [FileStructureElement][org.jetbrains.kotlin.analysis.low.level.api.fir.file.structure.FileStructureElement]

 * and may resolve non-local declarations into [BODY_RESOLVE][FirResolvePhase.BODY_RESOLVE] phase.

 *

 * Please use [getOrBuildFirFile] to get [FirFile] in undefined phase.

 *

 * @return associated [FirElement] in final resolved state if it exists.

 *

 * @see getOrBuildFirFile

 * @see LLFirResolveSession.getOrBuildFirFor

 */",f4145:m177
56049,"@SinceKotlin(""1.1"") public fun <K, V> Map<out K, V>.toMap(): Map<K, V>","when (size) {
    0 -> emptyMap()
    1 -> toSingletonMap()
    else -> toMutableMap()
}","/**

 * Returns a new read-only map containing all key-value pairs from the original map.

 *

 * The returned map preserves the entry iteration order of the original map.

 */",f16823:m1235
11512,"fun invokeInterop(flavor: String, args: Array<String>, runFromDaemon: Boolean): Array<String>?","{
    check(flavor == ""native"") { ""wasm target in Kotlin/Native is removed. See https://kotl.in/native-targets-tiers"" }
    val arguments = CInteropArguments()
    arguments.argParser.parse(args)
    val outputFileName = arguments.output
    val noDefaultLibs = arguments.nodefaultlibs || arguments.nodefaultlibsDeprecated
    val noEndorsedLibs = arguments.noendorsedlibs
    val purgeUserLibs = arguments.purgeUserLibs
    val nopack = arguments.nopack
    val temporaryFilesDir = arguments.tempDir
    val moduleName = arguments.moduleName
    val shortModuleName = arguments.shortModuleName
    val buildDir = File(""$outputFileName-build"")
    val generatedDir = File(buildDir, ""kotlin"")
    val nativesDir = File(buildDir, ""natives"")
    val manifest = File(buildDir, ""manifest.properties"")
    val cstubsName = ""cstubs""
    val libraries = arguments.library
    val repos = arguments.repo
    val targetRequest = arguments.target
    val target = PlatformManager(KotlinNativePaths.homePath.absolutePath, konanDataDir = arguments.konanDataDir).targetManager(targetRequest).target
    val cinteropArgsToCompiler = Interop().interop(""native"", args, InternalInteropOptions(generatedDir.absolutePath, nativesDir.absolutePath, manifest.path, cstubsName), runFromDaemon) ?: return null
    val nativeStubs = arrayOf(""-native-library"", File(nativesDir, ""$cstubsName.bc"").path)
    return arrayOf(generatedDir.path, ""-produce"", ""library"", ""-o"", outputFileName, ""-target"", target.visibleName, ""-manifest"", manifest.path, ""-opt-in=kotlin.native.SymbolNameIsInternal"", ""-Xtemporary-files-dir=$temporaryFilesDir"") + nativeStubs + cinteropArgsToCompiler + libraries.flatMap { listOf(""-library"", it) } + repos.flatMap { listOf(""-repo"", it) } + (if (noDefaultLibs) arrayOf(""-$NODEFAULTLIBS"") else emptyArray()) + (if (noEndorsedLibs) arrayOf(""-$NOENDORSEDLIBS"") else emptyArray()) + (if (purgeUserLibs) arrayOf(""-$PURGE_USER_LIBS"") else emptyArray()) + (if (nopack) arrayOf(""-$NOPACK"") else emptyArray()) + moduleName?.let { arrayOf(""-module-name"", it) }.orEmpty() + shortModuleName?.let { arrayOf(""${K2NativeCompilerArguments.SHORT_MODULE_NAME_ARG}=$it"") }.orEmpty() + ""-library-version=${arguments.libraryVersion}"" + arguments.kotlincOption
}","/**

 * @return null if there is no need in compiler invocation.

 * Otherwise returns array of compiler args.

 */",f3562:m35
43972,@GradleTest fun `test - shared native klib - does not contain 'depends=' manifest property`(gradleVersion: GradleVersion),"{
    project(""kt-54995-compileSharedNative-with-okio"", gradleVersion) { build(""compileNativeMainKotlinMetadata"") {
        val nativeMainKlib = projectPath.resolve(""build/classes/kotlin/metadata/nativeMain/klib/test-project_nativeMain"")
        assertDirectoryExists(nativeMainKlib)
        val libraryFile = org.jetbrains.kotlin.library.resolveSingleFileKlib(org.jetbrains.kotlin.konan.file.File(nativeMainKlib), strategy = ToolingSingleFileKlibResolveStrategy)
        if (libraryFile.unresolvedDependencies.isNotEmpty()) {
            fail(""Expected metadata klib to not list dependencies. Found ${libraryFile.unresolvedDependencies}"")
        }
        if (libraryFile.manifestProperties.hasProperty(KLIB_PROPERTY_DEPENDS)) {
            fail(""Expected metadata klib to not contain $KLIB_PROPERTY_DEPENDS. "" + ""Value: ${libraryFile.manifestProperties.getProperty(KLIB_PROPERTY_DEPENDS)}"")
        }
    } }
}","/**

     * https://youtrack.jetbrains.com/issue/KT-56205/Shared-Native-Compilation-False-positive-w-Could-not-find-warnings-on-metadata-klibs

     * metadata klib should not contain any dependsOn= in their klib manifest.

     */",f13515:m41
63466,"@Deprecated(""Use Kotlin compiler 1.4 to avoid deprecation warning."") @SinceKotlin(""1.1"") @DeprecatedSinceKotlin(hiddenSince = ""1.4"") public fun ShortArray.contentToString(): String","{
    return this.contentToString()
}","/**

 * Returns a string representation of the contents of the specified array as if it is [List].

 * 

 * @sample samples.collections.Arrays.ContentOperations.contentToString

 */",f17396:m1849
43593,fun CommandLineArguments.assertCommandLineArgumentsContainSequentially(vararg expectedArgs: String),"{
    expectedArgs.forEach { assert(expectedArgs.isNotEmpty() && Collections.indexOfSubList(args, expectedArgs.toList()) != -1) {
        this.buildResult.printBuildOutput()
        ""There is no sequential arguments ${it} in actual command line arguments are: ${args}""
    } }
}","/**

 * Asserts that the given list of command line arguments contains sequentially all the expected arguments.

 *

 * @param expectedArgs the list of expected arguments

 * @throws AssertionError if any of the expected arguments are missing from the actual arguments list

 */",f13457:m755
70211,"override fun put(key: K, value: V): V?","{
    if (put(array, shift, key, value)) {
        if (++size_ >= (THRESHOLD ushr shift)) {
            rehash()
        }
    }
    return null
}","/**

     * Never returns previous values

     */",f19613:m153
59009,public inline fun CharSequence.count(predicate: (Char) -> Boolean): Int,"{
    var count = 0
    for (element in this) if (predicate(element)) ++count
    return count
}","/**

 * Returns the number of characters matching the given [predicate].

 */",f17097:m2199
14937,internal fun ShortArray.copyOfUninitializedElements(newSize: Int): ShortArray,"{
    return copyOfUninitializedElements(0, newSize)
}","/**

 * Returns new array which is a copy of the original array with new elements filled with **lateinit** _uninitialized_ values.

 * Attempts to read _uninitialized_ values from this array work in implementation-dependent manner,

 * either throwing exception or returning some kind of implementation-specific default value.

 */",f3831:m3585
8750,@OptIn(ObsoleteDescriptorBasedAPI::class) internal fun IrSymbol.findCStructDescriptor(): ClassDescriptor?,descriptor.findCStructDescriptor(),"/**

 * All structs that come from interop library inherit from CStructVar class.

 * This function checks that given symbol located in subtree of

 * CStructVar inheritor.

 */",f3292:m359
63280,"private fun codePointFromSurrogate(string: String, high: Int, index: Int, endIndex: Int, throwOnMalformed: Boolean): Int","{
    if (high !in 0xD800 .. 0xDBFF || index >= endIndex) {
        return malformed(0, index, throwOnMalformed)
    }
    val low = string[index].code
    if (low !in 0xDC00 .. 0xDFFF) {
        return malformed(0, index, throwOnMalformed)
    }
    return 0x10000 + ((high and 0x3FF) shl 10) or (low and 0x3FF)
}","/**

 * Returns code point corresponding to UTF-16 surrogate pair,

 * where the first of the pair is the [high] and the second is in the [string] at the [index].

 * Returns zero if the pair is malformed and [throwOnMalformed] is false.

 *

 * @throws CharacterCodingException if the pair is malformed and [throwOnMalformed] is true.

 */",f17358:m27
20113,public fun KtCallableSymbol.getContainingJvmClassName(): String?,withValidityAssertion { analysisSession.containingDeclarationProvider.getContainingJvmClassName(this) },"/**

     * Returns containing JVM class name for [KtCallableSymbol]

     *

     *   even for deserialized callables! (which is useful to look up the containing facade in [PsiElement])

     *   for regular, non-local callables from source, it is a mere conversion of [ClassId] inside [CallableId]

     *

     * The returned JVM class name is of fully qualified name format, e.g., foo.bar.Baz.Companion

     *

     * Note that this API is applicable for common or JVM modules only, and returns `null` for non-JVM modules.

     */",f5772:m87
43495,fun Path.addPrivateVal(): Path,"{
    appendText(""\nprivate val integerValue${changeCounter.incrementAndGet()} = 24\n"")
    return this
}","/**

 * Appends top-level `private val` to the content of the file.

 * Throws SecurityException or IOException, if append failed.

 * Every call to [addPrivateVal] or [addPublicVal] generates a new value name.

 */",f13446:m27
14945,"@SinceKotlin(""1.3"") @Suppress(""ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS"") public actual fun ByteArray.fill(element: Byte, fromIndex: Int = 0, toIndex: Int = size): Unit","{
    arrayFill(this, fromIndex, toIndex, element)
}","/**

 * Fills this array or its subrange with the specified [element] value.

 * 

 * @param fromIndex the start of the range (inclusive) to fill, 0 by default.

 * @param toIndex the end of the range (exclusive) to fill, size of this array by default.

 * 

 * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.

 * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].

 */",f3831:m3741
56921,"@SinceKotlin(""1.2"") @kotlin.internal.InlineOnly public inline fun Float.toBigDecimal(): BigDecimal",BigDecimal(this.toString()),"/**

 * Returns the value of this [Float] number as a [BigDecimal].

 *

 * The number is converted to a string and then the string is converted to a [BigDecimal].

 */",f16935:m199
13773,@kotlin.internal.IntrinsicConstEvaluation public override fun toString(): String,NumberConverter.convert(this),"/**

     * Returns the string representation of this [Float] value.

     *

     * Note that the representation format is unstable and may change in a future release.

     * However, it is guaranteed that the returned string is valid for converting back to [Float]

     * using [String.toFloat], and will result in the same numeric value.

     * The exact bit pattern of a `NaN` float is not guaranteed to be preserved though.

     */",f3686:m4463
15012,internal fun Char.isLowerCaseImpl(): Boolean,"{
    return getLetterType() == 1 || code.isOtherLowercase()
}","/**

 * Returns `true` if this character is a lower case letter, or it has contributory property `Other_Lowercase`.

 */",f3835:m133
57076,"@kotlin.internal.InlineOnly public inline fun File.bufferedWriter(charset: Charset = Charsets.UTF_8, bufferSize: Int = DEFAULT_BUFFER_SIZE): BufferedWriter",writer(charset).buffered(bufferSize),"/**

 * Returns a new [BufferedWriter] for writing the content of this file.

 *

 * @param bufferSize necessary size of the buffer.

 */",f16956:m91
58901,"public fun <T> Sequence<T>.joinToString(separator: CharSequence = "", "", prefix: CharSequence = """", postfix: CharSequence = """", limit: Int = -1, truncated: CharSequence = ""..."", transform: ((T) -> CharSequence)? = null): String","{
    return joinTo(StringBuilder(), separator, prefix, postfix, limit, truncated, transform).toString()
}","/**

 * Creates a string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.

 * 

 * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]

 * elements will be appended, followed by the [truncated] string (which defaults to ""..."").

 *

 * The operation is _terminal_.

 * 

 * @sample samples.collections.Collections.Transformations.joinToString

 */",f17096:m5805
64364,"@SinceKotlin(""1.1"") @kotlin.internal.IntrinsicConstEvaluation public operator fun rem(other: Double): Double","wasm_f64_copysign(this - (wasm_f64_truncate(this / other) * other), this)","/**

     * Calculates the remainder of truncating division of this value (dividend) by the other value (divisor).

     *

     * The result is either zero or has the same sign as the _dividend_ and has the absolute value less than the absolute value of the divisor.

     */",f17455:m5119
36819,"fun create(prefix: String, suffix: String = """"): File","File(dir, ""$prefix$suffix"")","/**

     * Create file named {name}{suffix} inside temporary dir

     */",f11632:m103
57341,public actual operator fun ByteArray.plus(element: Byte): ByteArray,"{
    val index = size
    val result = java.util.Arrays.copyOf(this, index + 1)
    result[index] = element
    return result
}","/**

 * Returns an array containing all elements of the original array and then the given [element].

 */",f16970:m3447
61621,"@SinceKotlin(""1.2"") public fun Long.toString(radix: Int): String",this.toStringImpl(checkRadix(radix)),"/**

 * Returns a string representation of this [Long] value in the specified [radix].

 *

 * @throws IllegalArgumentException when [radix] is not a valid radix for number to string conversion.

 */",f17248:m73
55128,@kotlin.internal.IntrinsicConstEvaluation public inline operator fun times(other: Short): Long,this.times(other.toLong()),/** Multiplies this value by the other value. */,f16727:m2639
33310,internal fun <V: Any> createCache(compute: (Class<*>) -> V): CacheByClass<V>,"{
    return if (useClassValue) ClassValueCache(compute) else ConcurrentHashMapCache(compute)
}","/**

 * Creates a **softly referenced** cache of values associated with [Class].

 * Values are computed using provided [compute] function.

 *

 * `null` values are not supported, though there aren't any technical limitations.

 */",f11165:m57
23079,fun Project.intellijRuntimeAnnotations(),"""org.jetbrains:annotations:${rootProject.extra[""versions.annotations""]}""","/**

 * Runtime version of annotations that are already in Kotlin stdlib (historically Kotlin has older version of this one).

 *

 * SHOULD NOT BE USED IN COMPILE CLASSPATH!

 *

 * `@NonNull`, `@Nullabe` from `idea/annotations.jar` has `TYPE` target which leads to different types treatment in Kotlin compiler.

 * On the other hand, `idea/annotations.jar` contains org/jetbrains/annotations/Async annations which is required for IDEA debugger.

 *

 * So, we are excluding `annotaions.jar` from all other `kotlin.build` and using this one for runtime only

 * to avoid accidentally including `annotations.jar` by calling `intellijDep()`.

 */",f8839:m57
59555,"@SinceKotlin(""1.6"") @WasExperimental(ExperimentalTime::class) @kotlin.internal.InlineOnly public inline fun Duration.toJavaDuration(): java.time.Duration","toComponents { seconds, nanoseconds -> java.time.Duration.ofSeconds(seconds, nanoseconds.toLong()) }","/**

 * Converts [kotlin.time.Duration][Duration] value to [java.time.Duration][java.time.Duration] value.

 *

 * An infinite duration is converted to either [Long.MAX_VALUE], or [Long.MIN_VALUE] seconds, depending on its sign.

 */",f17133:m51
7349,fun main(args: Array<String>),"{
    val result = html {
        head { title { +""XML encoding with Kotlin"" } }
        body {
            h1 { +""XML encoding with Kotlin"" }
            p { +""this format can be used as an alternative markup to XML"" }
            a(href = ""https://jetbrains.com/kotlin"") { +""Kotlin"" }
            p {
                +""This is some""
                b { +""mixed"" }
                +""text. For more see the""
                a(href = ""https://jetbrains.com/kotlin"") { +""Kotlin"" }
                +""project""
            }
            p { +""some text"" }
            p {
                +""Command line arguments were:""
                ul { for (arg in args) li { +arg } }
            }
        }
    }
    println(result)
}","/**

 * This is an example of a Type-Safe Groovy-style Builder

 *

 * Builders are good for declaratively describing data in your code.

 * In this example we show how to describe an HTML page in Kotlin.

 *

 * See this page for details:

 * https://confluence.jetbrains.net/display/Kotlin/Type-safe+Groovy-style+builders

 */",f3083:m5
57294,"@SinceKotlin(""1.3"") @Suppress(""ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS"") public actual fun CharArray.copyInto(destination: CharArray, destinationOffset: Int = 0, startIndex: Int = 0, endIndex: Int = size): CharArray","{
    System.arraycopy(this, startIndex, destination, destinationOffset, endIndex - startIndex)
    return destination
}","/**

 * Copies this array or its subrange into the [destination] array and returns that array.

 * 

 * It's allowed to pass the same array in the [destination] and even specify the subrange so that it overlaps with the destination range.

 * 

 * @param destination the array to copy to.

 * @param destinationOffset the position in the [destination] array to copy to, 0 by default.

 * @param startIndex the beginning (inclusive) of the subrange to copy, 0 by default.

 * @param endIndex the end (exclusive) of the subrange to copy, size of this array by default.

 * 

 * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of this array indices or when `startIndex > endIndex`.

 * @throws IndexOutOfBoundsException when the subrange doesn't fit into the [destination] array starting at the specified [destinationOffset],

 * or when that index is out of the [destination] array indices range.

 * 

 * @return the [destination] array.

 */",f16970:m2193
59037,"@SinceKotlin(""1.4"") @OptIn(kotlin.experimental.ExperimentalTypeInference::class) @OverloadResolutionByLambdaReturnType @kotlin.internal.InlineOnly public inline fun CharSequence.minOfOrNull(selector: (Char) -> Float): Float?","{
    if (isEmpty()) return null
    var minValue = selector(this[0])
    for (i in 1 .. lastIndex) {
        val v = selector(this[i])
        minValue = minOf(minValue, v)
    }
    return minValue
}","/**

 * Returns the smallest value among all values produced by [selector] function

 * applied to each character in the char sequence or `null` if there are no characters.

 * 

 * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.

 */",f17097:m3255
13356,fun getKotlinName(decl: StructDecl): String,"{
    val spelling = decl.spelling
    if (decl.isAnonymous) {
        val names = anonymousStructKotlinNames
        return names.getOrPut(decl) { ""anonymousStruct${names.size + 1}"" }
    }
    val strippedCName = if (spelling.startsWith(""struct "") || spelling.startsWith(""union "")) {
        spelling.substringAfter(' ')
    } else {
        spelling
    }
    return if (strippedCName !in forbiddenStructNames) strippedCName else (strippedCName + ""Struct"")
}","/**

     * The name to be used for this struct in Kotlin

     */",f3664:m131
21138,internal fun collectSourceFilePaths(root: Path): List<Path>,"{
    val result = mutableListOf<Path>()
    Files.walkFileTree(root, object : SimpleFileVisitor<Path>() {
        override fun preVisitDirectory(dir: Path, attrs: BasicFileAttributes): FileVisitResult {
            return if (Files.isReadable(dir)) FileVisitResult.CONTINUE else FileVisitResult.SKIP_SUBTREE
        }
    
        override fun visitFile(file: Path, attrs: BasicFileAttributes): FileVisitResult {
            if (!Files.isRegularFile(file) || !Files.isReadable(file)) return FileVisitResult.CONTINUE
            if (file.hasSuitableExtensionToAnalyse()) {
                result.add(file)
            }
            return FileVisitResult.CONTINUE
        }
    
        override fun visitFileFailed(file: Path, exc: IOException?): FileVisitResult {
            return FileVisitResult.CONTINUE
        }
    })
    return result
}","/**

 * Collect source file path from the given [root]

 *

 * E.g., for `project/app/src` as a [root], this will walk the file tree and

 * collect all `.kt`, `.kts`, and `.java` files under that folder.

 *

 * Note that this util gracefully skips [IOException] during file tree traversal.

 */",f8481:m165
13925,"@SinceKotlin(""1.4"") public actual fun Int.countTrailingZeroBits(): Int",if (this == 0) 32 else countTrailingZeroBits(this),"/**

 * Counts the number of consecutive least significant bits that are zero in the binary representation of this [Int] number.

 */",f3706:m271
58873,"@Deprecated(""Use sumOf instead."", ReplaceWith(""this.sumOf(selector)"")) @DeprecatedSinceKotlin(warningSince = ""1.5"") public inline fun <T> Sequence<T>.sumBy(selector: (T) -> Int): Int","{
    var sum: Int = 0
    for (element in this) {
        sum += selector(element)
    }
    return sum
}","/**

 * Returns the sum of all values produced by [selector] function applied to each element in the sequence.

 *

 * The operation is _terminal_.

 */",f17096:m4895
56241,"@SinceKotlin(""1.5"") @kotlin.internal.InlineOnly @kotlin.internal.IntrinsicConstEvaluation public inline fun Int.floorDiv(other: Long): Long",this.toLong().floorDiv(other),"/** Divides this value by the other value, flooring the result to an integer that is closer to negative infinity. */",f16842:m435
63547,public actual operator fun ShortArray.plus(element: Short): ShortArray,"{
    val index = size
    val result = copyOfUninitializedElements(index + 1)
    result[index] = element
    return result
}","/**

 * Returns an array containing all elements of the original array and then the given [element].

 */",f17396:m4127
23993,"fun getIfAnnotated(annotated: FirAnnotationContainer, config: LombokConfig, session: FirSession): T?","annotated.annotations.findAnnotation(annotationName)?.let { annotation -> extract(annotation, config, session) }","/**

     * If element is annotated, get from it or config or default

     */",f9095:m143
20118,public fun isPublicApi(symbol: KtSymbolWithVisibility): Boolean,withValidityAssertion { analysisSession.visibilityChecker.isPublicApi(symbol) },"/**

     * Returns true for effectively public symbols, including internal declarations with @PublishedApi annotation.

     * In 'Explicit API' mode explicit visibility modifier and explicit return types are required for such symbols.

     * See FirExplicitApiDeclarationChecker.kt

     */",f5773:m69
63671,"@Deprecated(""Use Kotlin compiler 1.4 to avoid deprecation warning."") @SinceKotlin(""1.3"") @DeprecatedSinceKotlin(hiddenSince = ""1.4"") @ExperimentalUnsignedTypes public infix fun ULongArray.contentEquals(other: ULongArray): Boolean","{
    return this.contentEquals(other)
}","/**

 * Checks if the two specified arrays are *structurally* equal to one another.

 * 

 * Two arrays are considered structurally equal if they have the same size, and elements at corresponding indices are equal.

 * 

 * @param other the array to compare with this array.

 * @return `true` if the two arrays are structurally equal, `false` otherwise.

 * 

 * @sample samples.collections.Arrays.ContentOperations.intArrayContentEquals

 */",f17408:m291
59140,"@SinceKotlin(""1.4"") public fun <T> maxOf(a: T, vararg other: T, comparator: Comparator<in T>): T","{
    var max = a
    for (e in other) if (comparator.compare(max, e) < 0) max = e
    return max
}","/**

 * Returns the greater of the given values according to the order specified by the given [comparator].

 * 

 * If there are multiple equal maximal values, returns the first of them.

 */",f17100:m377
47981,"internal fun Project.addIntransitiveMetadataDependencyIfPossible(sourceSet: DefaultKotlinSourceSet, dependency: FileCollection)","{
    val dependencyConfigurationName = if (project.isIntransitiveMetadataConfigurationEnabled) {
        sourceSet.intransitiveMetadataConfigurationName
    } else {
        @Suppress(""DEPRECATION"") sourceSet.implementationMetadataConfigurationName
    }
    project.dependencies.add(dependencyConfigurationName, dependency)
}","/**

 * Dependencies here are using a special configuration called 'intransitiveMetadataConfiguration'.

 * This special configuration can tell the IDE that these dependencies shall *not* be transitively visible

 * to dependsOn edges.

 * This is necessary for the way the commonizer handles its ""expect refinement"" approach.

 * In this mode, every source set will receive exactly one commonized library to analyze its source code with.

 */",f15498:m23
63285,"internal fun decodeUtf8(bytes: ByteArray, startIndex: Int, endIndex: Int, throwOnMalformed: Boolean): String","{
    require(startIndex >= 0 && endIndex <= bytes.size && startIndex <= endIndex)
    var byteIndex = startIndex
    val stringBuilder = StringBuilder()
    while (byteIndex < endIndex) {
        val byte = bytes[byteIndex++].toInt()
        when {
            byte >= 0 -> stringBuilder.append(byte.toChar())
            byte shr 5 == -2 -> {
                val code = codePointFrom2(bytes, byte, byteIndex, endIndex, throwOnMalformed)
                if (code <= 0) {
                    stringBuilder.append(REPLACEMENT_CHAR)
                    byteIndex += -code
                } else {
                    stringBuilder.append(code.toChar())
                    byteIndex += 1
                }
            }
            byte shr 4 == -2 -> {
                val code = codePointFrom3(bytes, byte, byteIndex, endIndex, throwOnMalformed)
                if (code <= 0) {
                    stringBuilder.append(REPLACEMENT_CHAR)
                    byteIndex += -code
                } else {
                    stringBuilder.append(code.toChar())
                    byteIndex += 2
                }
            }
            byte shr 3 == -2 -> {
                val code = codePointFrom4(bytes, byte, byteIndex, endIndex, throwOnMalformed)
                if (code <= 0) {
                    stringBuilder.append(REPLACEMENT_CHAR)
                    byteIndex += -code
                } else {
                    val high = (code - 0x10000) shr 10 or 0xD800
                    val low = (code and 0x3FF) or 0xDC00
                    stringBuilder.append(high.toChar())
                    stringBuilder.append(low.toChar())
                    byteIndex += 3
                }
            }
            else -> {
                malformed(0, byteIndex, throwOnMalformed)
                stringBuilder.append(REPLACEMENT_CHAR)
            }
        }
    }
    return stringBuilder.toString()
}","/**

 * Decodes the UTF-8 [bytes] array and returns the resulting [String].

 *

 * @param bytes the byte array to decode.

 * @param startIndex the start offset (inclusive) of the array to be decoded.

 * @param endIndex the end offset (exclusive) of the array to be encoded.

 * @param throwOnMalformed whether to throw on malformed byte sequence or replace by the [REPLACEMENT_CHAR].

 *

 * @throws CharacterCodingException if the array is malformed UTF-8 byte sequence and [throwOnMalformed] is true.

 */",f17358:m417
14908,public actual fun ByteArray.copyOf(newSize: Int): ByteArray,"{
    return this.copyOfUninitializedElements(newSize)
}","/**

 * Returns new array which is a copy of the original array, resized to the given [newSize].

 * The copy is either truncated or padded at the end with zero values if necessary.

 * 

 * - If [newSize] is less than the size of the original array, the copy array is truncated to the [newSize].

 * - If [newSize] is greater than the size of the original array, the extra elements in the copy array are filled with zero values.

 * 

 * @sample samples.collections.Arrays.CopyOfOperations.resizedPrimitiveCopyOf

 */",f3831:m2775
63441,"@SinceKotlin(""1.4"") public actual infix fun LongArray?.contentEquals(other: LongArray?): Boolean","{
    if (this === other) return true
    if (this === null || other === null) return false
    if (size != other.size) return false
    for (i in indices) {
        if (this[i] != other[i]) return false
    }
    return true
}","/**

 * Checks if the two specified arrays are *structurally* equal to one another.

 * 

 * Two arrays are considered structurally equal if they have the same size, and elements at corresponding indices are equal.

 * 

 * The arrays are also considered structurally equal if both are `null`.

 * 

 * @param other the array to compare with this array.

 * @return `true` if the two arrays are structurally equal, `false` otherwise.

 * 

 * @sample samples.collections.Arrays.ContentOperations.intArrayContentEquals

 */",f17396:m1167
15407,@Test fun sinD(),"{
    assertEquals(""Incorrect answer"", 0.0, sin(0.0), 0.0)
    assertEquals(""Incorrect answer"", 0.8414709848078965, sin(1.0), 0.0)
}","/**

     * Tests kotlin.math.sin(Double)

     */",f3868:m1253
47286,fun require(request: String): String,"{
    return modules.require(request)
}","/**

     * Require [request] nodejs module and return canonical path to it's main js file.

     */",f15293:m205
56099,public fun <T> MutableIterable<T>.removeAll(predicate: (T) -> Boolean): Boolean,"filterInPlace(predicate, true)","/**

 * Removes all elements from this [MutableIterable] that match the given [predicate].

 *

 * @return `true` if any element was removed from this collection, or `false` when no elements were removed and collection was not modified.

 */",f16825:m411
30906,infix fun <T> List<T>.memoryOptimizedPlus(elements: List<T>): List<T>,"when (val resultSize = size + elements.size) {
    0 -> emptyList()
    1 -> Collections.singletonList(if (isEmpty()) elements.first() else first())
    else -> ArrayList<T>(resultSize).also {
        it.addAll(this)
        it.addAll(elements)
    }
}","/**

 * A memory-optimized version of [Iterable.plus].

 * @see Iterable.plus

 */",f10791:m133
59132,"@SinceKotlin(""1.1"") public fun <T> maxOf(a: T, b: T, comparator: Comparator<in T>): T","{
    return if (comparator.compare(a, b) >= 0) a else b
}","/**

 * Returns the greater of two values according to the order specified by the given [comparator].

 * 

 * If values are equal, returns the first one.

 */",f17100:m261
11478,internal fun makeUsage(): String,"{
    val result = StringBuilder()
    result.append(""Usage: ${fullCommandName.joinToString("" "")} options_list\n"")
    if (subcommands.isNotEmpty()) {
        result.append(""Subcommands: \n"")
        subcommands.forEach { (_, subcommand) -> result.append(subcommand.helpMessage) }
        result.append(""\n"")
    }
    if (arguments.isNotEmpty()) {
        result.append(""Arguments: \n"")
        arguments.forEach { result.append(it.value.descriptor.helpMessage) }
    }
    if (options.isNotEmpty()) {
        result.append(""Options: \n"")
        options.forEach { result.append(it.value.descriptor.helpMessage) }
    }
    return result.toString()
}","/**

     * Creates a message with the usage information.

     */",f3554:m1309
13923,"@SinceKotlin(""1.4"") public actual fun Int.countLeadingZeroBits(): Int",if (this == 0) 32 else countLeadingZeroBits(this),"/**

 * Counts the number of consecutive most significant bits that are zero in the binary representation of this [Int] number.

 */",f3706:m243
57142,"@SinceKotlin(""1.1"") @kotlin.internal.InlineOnly public actual inline fun maxOf(a: Int, b: Int): Int","{
    return Math.max(a, b)
}","/**

 * Returns the greater of two values.

 */",f16966:m89
59039,"@SinceKotlin(""1.4"") @OptIn(kotlin.experimental.ExperimentalTypeInference::class) @OverloadResolutionByLambdaReturnType @kotlin.internal.InlineOnly public inline fun <R> CharSequence.minOfWith(comparator: Comparator<in R>, selector: (Char) -> R): R","{
    if (isEmpty()) throw NoSuchElementException()
    var minValue = selector(this[0])
    for (i in 1 .. lastIndex) {
        val v = selector(this[i])
        if (comparator.compare(minValue, v) > 0) {
            minValue = v
        }
    }
    return minValue
}","/**

 * Returns the smallest value according to the provided [comparator]

 * among all values produced by [selector] function applied to each character in the char sequence.

 * 

 * @throws NoSuchElementException if the char sequence is empty.

 */",f17097:m3335
58837,"@SinceKotlin(""1.4"") public fun Sequence<Float>.maxOrNull(): Float?","{
    val iterator = iterator()
    if (!iterator.hasNext()) return null
    var max = iterator.next()
    while (iterator.hasNext()) {
        val e = iterator.next()
        max = maxOf(max, e)
    }
    return max
}","/**

 * Returns the largest element or `null` if there are no elements.

 * 

 * If any of elements is `NaN` returns `NaN`.

 *

 * The operation is _terminal_.

 */",f17096:m3327
58607,"@Deprecated(""This `contains` operation mixing integer and floating point arguments has ambiguous semantics and is going to be removed."") @DeprecatedSinceKotlin(warningSince = ""1.3"", errorSince = ""1.4"", hiddenSince = ""1.5"") @kotlin.jvm.JvmName(""shortRangeContains"") public operator fun ClosedRange<Short>.contains(value: Double): Boolean","{
    return value.toShortExactOrNull().let { if (it != null) contains(it) else false }
}","/**

 * Checks if the specified [value] belongs to this range.

 */",f17092:m871
56045,"public fun <K, V> Array<out Pair<K, V>>.toMap(): Map<K, V>","when (size) {
    0 -> emptyMap()
    1 -> mapOf(this[0])
    else -> toMap(LinkedHashMap<K, V>(mapCapacity(size)))
}","/**

 * Returns a new map containing all key-value pairs from the given array of pairs.

 *

 * The returned map preserves the entry iteration order of the original array.

 * If any of two pairs would have the same key the last one gets added to the map.

 */",f16823:m1171
57055,@kotlin.internal.InlineOnly public inline fun println(message: Short),"{
    System.out.println(message)
}",/** Prints the given [message] and the line separator to the standard output stream. */,f16953:m201
14791,"@SinceKotlin(""1.3"") @ExperimentalUnsignedTypes public actual fun UShortArray.asList(): List<UShort>","{
    return object : AbstractList<UShort>(), RandomAccess {
        override val size: Int get() = this@asList.size
    
        override fun isEmpty(): Boolean = this@asList.isEmpty()
    
        override fun contains(element: UShort): Boolean = this@asList.contains(element)
    
        override fun get(index: Int): UShort = this@asList[index]
    
        override fun indexOf(element: UShort): Int = this@asList.indexOf(element)
    
        override fun lastIndexOf(element: UShort): Int = this@asList.lastIndexOf(element)
    }
}","/**

 * Returns a [List] that wraps the original array.

 */",f3828:m223
15054,"@SinceKotlin(""1.4"") public actual fun minOf(a: Long, vararg other: Long): Long","{
    var min = a
    for (e in other) min = minOf(min, e)
    return min
}","/**

 * Returns the smaller of the given values.

 */",f3836:m823
48540,"@JvmOverloads fun staticLib(buildTypes: Collection<NativeBuildType> = NativeBuildType.DEFAULT_BUILD_TYPES, configure: Action<StaticLibrary>)",staticLib(buildTypes) { configure.execute(this) },/** Creates a static library with the default name prefix for each build type and configures it. */,f15652:m447
16610,"internal fun getDiagnostics(element: KtElement, filter: DiagnosticCheckerFilter): List<KtPsiDiagnostic>","{
    return diagnosticProvider.getDiagnostics(element, filter)
}","/**

     * @see LLDiagnosticProvider.getDiagnostics

     */",f4142:m165
55299,"@SinceKotlin(""1.1"") public inline fun <reified T: Enum<T>> enumValueOf(name: String): T",enumValueOfIntrinsic<T>(name),"/**

 * Returns an enum entry with specified name.

 */",f16731:m171
53098,"@SinceKotlin(""1.4"") public actual fun String.toCharArray(): CharArray","{
    return CharArray(length) { get(it) }
}","/**

 * Returns a [CharArray] containing characters of this string.

 */",f16617:m149
14958,public actual operator fun FloatArray.plus(element: Float): FloatArray,"{
    val index = size
    val result = copyOfUninitializedElements(index + 1)
    result[index] = element
    return result
}","/**

 * Returns an array containing all elements of the original array and then the given [element].

 */",f3831:m4081
48549,"@JvmOverloads fun test(namePrefix: String, buildTypes: Collection<NativeBuildType> = NativeBuildType.DEFAULT_BUILD_TYPES, configure: TestExecutable.() -> Unit = {})","createBinaries(namePrefix, namePrefix, NativeOutputKind.TEST, buildTypes, ::TestExecutable, configure)",/** Creates a test executable with the given [namePrefix] for each build type and configures it. */,f15652:m581
56064,"@SinceKotlin(""1.1"") public operator fun <K, V> Map<out K, V>.minus(keys: Array<out K>): Map<K, V>",this.toMutableMap().apply { minusAssign(keys) }.optimizeReadOnlyMap(),"/**

 * Returns a map containing all entries of the original map except those entries

 * the keys of which are contained in the given [keys] array.

 *

 * The returned map preserves the entry iteration order of the original map.

 */",f16823:m1499
58031,@kotlin.internal.InlineOnly public inline operator fun times(other: UByte): UInt,this.toUInt().times(other.toUInt()),/** Multiplies this value by the other value. */,f17058:m199
58473,"public inline fun <K, V, R> Map<out K, V>.map(transform: (Map.Entry<K, V>) -> R): List<R>","{
    return mapTo(ArrayList<R>(size), transform)
}","/**

 * Returns a list containing the results of applying the given [transform] function

 * to each entry in the original map.

 * 

 * @sample samples.collections.Maps.Transformations.mapToList

 */",f17089:m237
69886,"private fun isRelated(a: KotlinType, b: KotlinType, platformToKotlinClassMapper: PlatformToKotlinClassMapper): Boolean","{
    val aClasses = mapToPlatformIndependentClasses(a, platformToKotlinClassMapper)
    val bClasses = mapToPlatformIndependentClasses(b, platformToKotlinClassMapper)
    return aClasses.any { DescriptorUtils.isSubtypeOfClass(b, it) } || bClasses.any { DescriptorUtils.isSubtypeOfClass(a, it) }
}","/**

     * Two types are related, roughly, when one of them is a subtype of the other constructing class

     *

     * Note that some types have platform-specific counterparts, i.e. kotlin.String is mapped to java.lang.String,

     * such types (and all their sub- and supertypes) are related too.

     *

     * Due to limitations in PlatformToKotlinClassMap, we only consider mapping of platform classes to Kotlin classed

     * (i.e. java.lang.String -> kotlin.String) and ignore mappings that go the other way.

     */",f19566:m141
11090,"fun addHandlerTask(id: Int, priority: Int, queue: Packet?)","{
    this.addTask(id, priority, queue, HandlerTask(this))
}","/**

     * Add a handler task to this scheduler.

     * @param {int} id the identity of the task

     * @param {int} priority the task's priority

     * @param {Packet} queue the queue of work to be processed by the task

     */",f3500:m247
40629,"internal fun expandGlobTo(unexpandedPath: File, output: MutableCollection<File>)","{
    assertTrue(unexpandedPath.isAbsolute) { ""Path must be absolute: $unexpandedPath"" }
    val paths: List<File> = generateSequence(unexpandedPath) { it.parentFile }.toMutableList().apply { reverse() }
    for (index in 1 until paths.size) {
        val path: File = paths[index]
        val isGlob = '*' in path.name
        if (isGlob) {
            val basePath: File = paths[index - 1]
            val basePathAsPath: Path = basePath.toPath()
            val pattern: String = unexpandedPath.relativeTo(basePath).path.let { pattern -> if (File.separatorChar == '\\') pattern.replace(""\\"", ""\\\\"") else pattern }
            val matcher: PathMatcher = FileSystems.getDefault().getPathMatcher(""glob:$pattern"")
            Files.walkFileTree(basePathAsPath, object : SimpleFileVisitor<Path>() {
                override fun visitFile(file: Path, attrs: BasicFileAttributes): FileVisitResult {
                    if (matcher.matches(basePathAsPath.relativize(file))) output += file.toFile()
                    return FileVisitResult.CONTINUE
                }
            })
            return
        }
    }
    output += unexpandedPath
}","/**

 * Naive suboptimal implementation of glob expansion.

 */",f12874:m25
63449,"@Deprecated(""Use Kotlin compiler 1.4 to avoid deprecation warning."") @SinceKotlin(""1.1"") @DeprecatedSinceKotlin(hiddenSince = ""1.4"") public fun IntArray.contentHashCode(): Int","{
    return this.contentHashCode()
}","/**

 * Returns a hash code based on the contents of this array as if it is [List].

 */",f17396:m1465
15020,"@SinceKotlin(""1.1"") @kotlin.internal.InlineOnly public actual inline fun maxOf(a: Float, b: Float): Float","{
    return if (a.compareTo(b) >= 0) a else b
}","/**

 * Returns the greater of two values.

 * 

 * If either value is `NaN`, returns `NaN`.

 */",f3836:m119
63503,public actual fun LongArray.copyOf(newSize: Int): LongArray,"{
    return this.copyOfUninitializedElements(newSize)
}","/**

 * Returns new array which is a copy of the original array, resized to the given [newSize].

 * The copy is either truncated or padded at the end with zero values if necessary.

 * 

 * - If [newSize] is less than the size of the original array, the copy array is truncated to the [newSize].

 * - If [newSize] is greater than the size of the original array, the extra elements in the copy array are filled with zero values.

 * 

 * @sample samples.collections.Arrays.CopyOfOperations.resizedPrimitiveCopyOf

 */",f17396:m2905
23672,internal fun FirClassSymbol<*>.isSerializableEnum(session: FirSession): Boolean,"{
    return classKind.isEnumClass && hasSerializableOrMetaAnnotation(session)
}","/**

 * Check that class is enum and marked by `Serializable` or meta-serializable annotation.

 */",f8999:m369
53468,"@SinceKotlin(""1.4"") public fun Element.appendText(text: String): Element","{
    appendChild(ownerDocument!!.createTextNode(text))
    return this
}","/**

 * Creates text node and append it to the element.

 *

 * @return this element

 */",f16681:m35
14970,public actual operator fun CharArray.plus(elements: Collection<Char>): CharArray,"{
    var index = size
    val result = copyOfUninitializedElements(index + elements.size)
    for (element in elements) result[index++] = element
    return result
}","/**

 * Returns an array containing all elements of the original array and then all elements of the given [elements] collection.

 */",f3831:m4321
48249,internal fun Project.addConfigurationMetrics(reportAction: (MetricContainer) -> Unit),"{
    project.gradle.sharedServices.registrations.findByName(BuildFusService.serviceName)?.also {
        val parameters = it.parameters as BuildFusService.Parameters
        parameters.configurationMetrics.add(project.provider {
            val configurationTimeMetrics = MetricContainer()
            reportAction(configurationTimeMetrics)
            configurationTimeMetrics
        })
    }
}","/**

 * Invokes build FUS service if the reporting service is initialised and add configuration time metrics.

 *

 * New value will be present in configuration cache if BuildFusService.Parameters are not calculated yet

 * [BuildFusService.reportFusMetrics] should be called for execution time metrics

 */",f15582:m27
63524,"internal fun DoubleArray.copyOfUninitializedElements(fromIndex: Int, toIndex: Int): DoubleArray","{
    val newSize = toIndex - fromIndex
    if (newSize < 0) {
        throw IllegalArgumentException(""$fromIndex > $toIndex"")
    }
    val result = DoubleArray(newSize)
    this.copyInto(result, 0, fromIndex, toIndex.coerceAtMost(size))
    return result
}","/**

 * Returns new array which is a copy of the original array's range between [fromIndex] (inclusive)

 * and [toIndex] (exclusive) with new elements filled with **lateinit** _uninitialized_ values.

 * Attempts to read _uninitialized_ values from this array work in implementation-dependent manner,

 * either throwing exception or returning some kind of implementation-specific default value.

 */",f17396:m3505
57516,"@SinceKotlin(""1.4"") @OptIn(kotlin.experimental.ExperimentalTypeInference::class) @OverloadResolutionByLambdaReturnType @Suppress(""INAPPLICABLE_JVM_NAME"") @kotlin.jvm.JvmName(""sumOfBigDecimal"") @ExperimentalUnsignedTypes @kotlin.internal.InlineOnly public inline fun UIntArray.sumOf(selector: (UInt) -> java.math.BigDecimal): java.math.BigDecimal","{
    var sum: java.math.BigDecimal = 0.toBigDecimal()
    for (element in this) {
        sum += selector(element)
    }
    return sum
}","/**

 * Returns the sum of all values produced by [selector] function applied to each element in the array.

 */",f16971:m1023
57044,@kotlin.internal.InlineOnly public inline fun print(message: Byte),"{
    System.out.print(message)
}",/** Prints the given [message] to the standard output stream. */,f16953:m69
64091,@kotlin.internal.IntrinsicConstEvaluation public inline operator fun compareTo(other: Double): Int,this.toDouble().compareTo(other),"/**

     * Compares this value with the specified value for order.

     * Returns zero if this value is equal to the specified other value, a negative number if it's less than other,

     * or a positive number if it's greater than other.

     */",f17455:m1039
58474,"public inline fun <K, V, R: Any> Map<out K, V>.mapNotNull(transform: (Map.Entry<K, V>) -> R?): List<R>","{
    return mapNotNullTo(ArrayList<R>(), transform)
}","/**

 * Returns a list containing only the non-null results of applying the given [transform] function

 * to each entry in the original map.

 * 

 * @sample samples.collections.Maps.Transformations.mapNotNull

 */",f17089:m257
11467,@ExperimentalCli fun subcommands(vararg subcommandsList: Subcommand),"{
    subcommandsList.forEach {
        if (it.name in subcommands) {
            error(""Subcommand with name ${it.name} was already defined."")
        }
        it.prefixStyle = prefixStyle
        it.useDefaultHelpShortName = useDefaultHelpShortName
        fullCommandName.forEachIndexed { index, namePart -> it.fullCommandName.add(index, namePart) }
        subcommands[it.name] = it
    }
}","/**

     * Registers one or more subcommands.

     *

     * @param subcommandsList subcommands to add.

     */",f3554:m639
11889,"@Suppress(""FINAL_UPPER_BOUND"") @ExperimentalForeignApi public fun <T: Byte> NativePlacement.alloc(value: T): ByteVarOf<T>",alloc<ByteVarOf<T>> { this.value = value },"/**

 * Allocates variable with given value type and initializes it with given value.

 */",f3606:m37
63505,public actual fun DoubleArray.copyOf(newSize: Int): DoubleArray,"{
    return this.copyOfUninitializedElements(newSize)
}","/**

 * Returns new array which is a copy of the original array, resized to the given [newSize].

 * The copy is either truncated or padded at the end with zero values if necessary.

 * 

 * - If [newSize] is less than the size of the original array, the copy array is truncated to the [newSize].

 * - If [newSize] is greater than the size of the original array, the extra elements in the copy array are filled with zero values.

 * 

 * @sample samples.collections.Arrays.CopyOfOperations.resizedPrimitiveCopyOf

 */",f17396:m2957
51668,public fun ClassName.toJvmInternalName(): String,"if (this.isLocalClassName()) substring(1) else replace('.', '$')","/**

 * Converts [this] to a JVM internal name of the class, where package names are separated by '/', and class names are separated by '$',

 * for example: `""org/foo/bar/Baz.Nested""` -> `""org/foo/bar/Baz$Nested""`

 */",f16358:m25
58035,@kotlin.internal.InlineOnly public inline operator fun div(other: UByte): UInt,this.toUInt().div(other.toUInt()),"/** Divides this value by the other value, truncating the result to an integer that is closer to zero. */",f17058:m225
43528,fun Path.addSpecRepo(specRepo: String),"addCocoapodsBlock(""url(\""$specRepo\"")"".wrapIntoBlock(""specRepos""))","/**

 * Wraps the given string into a specRepos block and adds this block to the end of the [this] path.

 *

 * @param specRepo The code to be wrapped with the Cocoapods block.

 */",f13455:m141
30153,fun newArray(size: Int): Array<T>,"{
    throw NotImplementedError(""Generated by Android Extensions automatically"")
}","/**

     * Returns a new [Array]<T> with the given array [size].

     */",f10671:m73
55960,"@SinceKotlin(""1.1"") public inline fun <T, K, R, M: MutableMap<in K, R>> Grouping<T, K>.foldTo(destination: M, initialValue: R, operation: (accumulator: R, element: T) -> R): M","@Suppress(""UNCHECKED_CAST"") aggregateTo(destination) { _, acc, e, first -> operation(if (first) initialValue else acc as R, e) }","/**

 * Groups elements from the [Grouping] source by key and applies [operation] to the elements of each group sequentially,

 * passing the previously accumulated value and the current element as arguments,

 * and stores the results in the given [destination] map.

 * An initial value of accumulator is the same [initialValue] for each group.

 *

 * If the [destination] map already has a value corresponding to the key of some group,

 * that value is used as an initial value of the accumulator for that group.

 *

 * @param operation a function that is invoked on each element with the following parameters:

 *  - `accumulator`: the current value of the accumulator of the group;

 *  - `element`: the element from the source being accumulated.

 *

 * @return the [destination] map associating the key of each group with the result of accumulating the group elements.

 * @sample samples.collections.Grouping.foldByEvenLengthWithConstantInitialValueTo

 */",f16820:m331
53469,"@SinceKotlin(""1.4"") public fun Document.createElement(name: String, init: Element.() -> Unit): Element","{
    contract { callsInPlace(init, InvocationKind.EXACTLY_ONCE) }
    return createElement(name).apply(init)
}","/**

 * Creates a new element with the specified [name].

 *

 * The element is initialized with the specified [init] function.

 */",f16682:m21
14981,public actual fun IntArray.sort(): Unit,"{
    if (size > 1) sortArray(this, 0, size)
}","/**

 * Sorts the array in-place.

 * 

 * @sample samples.collections.Arrays.Sorting.sortArray

 */",f3831:m4555
52050,fun ScriptEvaluationConfiguration?.with(body: ScriptEvaluationConfiguration.Builder.() -> Unit): ScriptEvaluationConfiguration,"{
    val newConfiguration = if (this == null) ScriptEvaluationConfiguration(body = body) else ScriptEvaluationConfiguration(this, body = body)
    return if (newConfiguration != this) newConfiguration else this
}","/**

 * An alternative to the constructor with base configuration, which returns a new configuration only if [body] adds anything

 * to the original one, otherwise returns original

 */",f16431:m77
16622,inline fun <reified E: FirElement> KtElement.getOrBuildFirSafe(firResolveSession: LLFirResolveSession),getOrBuildFir(firResolveSession) as? E,"/**

 * Get a [FirElement] which was created by [KtElement], but only if it is subtype of [E], `null` otherwise

 * Returned [FirElement] is guaranteed to be resolved to [FirResolvePhase.BODY_RESOLVE] phase

 * This operation could be performance affective because it create FIleStructureElement and resolve non-local declaration into BODY phase

 */",f4145:m219
54850,"@SinceKotlin(""1.3"") @ExperimentalUnsignedTypes public actual fun UByteArray.asList(): List<UByte>","{
    return object : AbstractList<UByte>(), RandomAccess {
        override val size: Int get() = this@asList.size
    
        override fun isEmpty(): Boolean = this@asList.isEmpty()
    
        override fun contains(element: UByte): Boolean = this@asList.contains(element)
    
        override fun get(index: Int): UByte {
            AbstractList.checkElementIndex(index, size)
            return this@asList[index]
        }
    
        override fun indexOf(element: UByte): Int {
            @Suppress(""USELESS_CAST"") if ((element as Any?) !is UByte) return -1
            return this@asList.indexOf(element)
        }
    
        override fun lastIndexOf(element: UByte): Int {
            @Suppress(""USELESS_CAST"") if ((element as Any?) !is UByte) return -1
            return this@asList.lastIndexOf(element)
        }
    }
}","/**

 * Returns a [List] that wraps the original array.

 */",f16716:m229
50174,@Test fun `test - diamond hierarchy from documentation example`(),"{
    kotlin.applyHierarchyTemplate { common {
        group(""ios"") { withIos() }
        group(""frontend"") {
            withJvm()
            group(""ios"")
        }
        group(""apple"") {
            withMacos()
            group(""ios"")
        }
    } }
    kotlin.iosX64()
    kotlin.iosArm64()
    kotlin.macosX64()
    kotlin.jvm()
    assertEquals(stringSetOf(""frontendMain"", ""appleMain""), kotlin.dependingSourceSetNames(""commonMain""))
    assertEquals(stringSetOf(""jvmMain"", ""iosMain""), kotlin.dependingSourceSetNames(""frontendMain""))
    assertEquals(stringSetOf(""macosX64Main"", ""iosMain""), kotlin.dependingSourceSetNames(""appleMain""))
    assertEquals(stringSetOf(""iosArm64Main"", ""iosX64Main""), kotlin.dependingSourceSetNames(""iosMain""))
}","/**

     * Example from the documentation is supposed to create

     *                       commonMain

     *                           |

     *              +------------+----------+

     *              |                       |

     *          frontendMain            appleMain

     *              |                        |

     *    +---------+------------+-----------+----------+

     *    |                      |                      |

     * jvmMain                iosMain               macosX64Main

     *                           |

     *                           |

     *                      +----+----+

     *                      |         |

     *                iosX64Main   iosArm64Main

     */",f16073:m837
10038,"@Suppress(""UNCHECKED_CAST"") private fun <Data, Context: PhaseContext> findLlvmModule(data: Data, context: Context): LLVMModuleRef?","when {
    data is CPointer<*> -> data as LLVMModuleRef
    data is LlvmIrHolder -> data.llvmModule
    context is LlvmIrHolder -> context.llvmModule
    else -> null
}","/**

 *

 */",f3408:m135
63658,"@SinceKotlin(""1.4"") public actual fun minOf(a: Long, vararg other: Long): Long","{
    var min = a
    for (e in other) min = minOf(min, e)
    return min
}","/**

 * Returns the smaller of the given values.

 */",f17406:m823
14122,@ExperimentalNativeApi public fun <T> MutableList<T>.replaceAll(transformation: (T) -> T),"{
    val it = listIterator()
    while (it.hasNext()) {
        val element = it.next()
        it.set(transformation(element))
    }
}","/**

 * Replaces each element in the list with a result of a transformation specified.

 */",f3731:m19
54671,"@SinceKotlin(""1.4"") public actual infix fun BooleanArray?.contentEquals(other: BooleanArray?): Boolean","{
    return contentEqualsInternal(other)
}","/**

 * Checks if the two specified arrays are *structurally* equal to one another.

 * 

 * Two arrays are considered structurally equal if they have the same size, and elements at corresponding indices are equal.

 * 

 * The arrays are also considered structurally equal if both are `null`.

 * 

 * @param other the array to compare with this array.

 * @return `true` if the two arrays are structurally equal, `false` otherwise.

 * 

 * @sample samples.collections.Arrays.ContentOperations.booleanArrayContentEquals

 */",f16713:m819
14233,"public fun compareAndSet(expected: Int, newValue: Int): Boolean","this::value.compareAndSetField(expected, newValue)","/**

     * Atomically sets the value to the given [new value][newValue] if the current value equals the [expected value][expected],

     * returns true if the operation was successful and false only if the current value was not equal to the expected value.

     *

     * Provides sequential consistent ordering guarantees and cannot fail spuriously.

     */",f3762:m51
58977,"public inline fun <K, M: MutableMap<in K, in Char>> CharSequence.associateByTo(destination: M, keySelector: (Char) -> K): M","{
    for (element in this) {
        destination.put(keySelector(element), element)
    }
    return destination
}","/**

 * Populates and returns the [destination] mutable map with key-value pairs,

 * where key is provided by the [keySelector] function applied to each character of the given char sequence

 * and value is the character itself.

 * 

 * If any two characters would have the same key returned by [keySelector] the last one gets added to the map.

 * 

 * @sample samples.text.Strings.associateByTo

 */",f17097:m1427
53099,"@SinceKotlin(""1.4"") @Suppress(""ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS"") public actual fun String.toCharArray(startIndex: Int = 0, endIndex: Int = this.length): CharArray","{
    AbstractList.checkBoundsIndexes(startIndex, endIndex, length)
    return CharArray(endIndex - startIndex) { get(startIndex + it) }
}","/**

 * Returns a [CharArray] containing characters of this string or its substring.

 *

 * @param startIndex the beginning (inclusive) of the substring, 0 by default.

 * @param endIndex the end (exclusive) of the substring, length of this string by default.

 *

 * @throws IndexOutOfBoundsException if [startIndex] is less than zero or [endIndex] is greater than the length of this string.

 * @throws IllegalArgumentException if [startIndex] is greater than [endIndex].

 */",f16617:m165
57344,public actual operator fun LongArray.plus(element: Long): LongArray,"{
    val index = size
    val result = java.util.Arrays.copyOf(this, index + 1)
    result[index] = element
    return result
}","/**

 * Returns an array containing all elements of the original array and then the given [element].

 */",f16970:m3507
57079,public fun File.writeBytes(array: ByteArray): Unit,FileOutputStream(this).use { it.write(array) },"/**

 * Sets the content of this file as an [array] of bytes.

 * If this file already exists, it becomes overwritten.

 *

 * @param array byte array to write into this file.

 */",f16956:m215
56094,public fun <T> MutableCollection<in T>.removeAll(elements: Array<out T>): Boolean,"{
    return elements.isNotEmpty() && removeAll(elements.asList())
}","/**

 * Removes all elements from this [MutableCollection] that are also contained in the given [elements] array.

 */",f16825:m327
64876,"@Deprecated(""Provided for binary compatibility"", level = DeprecationLevel.HIDDEN) @JvmName(""assertFailsWith"") public fun <T: Throwable> assertFailsWithNoInline(exceptionClass: KClass<T>, block: () -> Unit): T","assertFailsWith(exceptionClass, block)",/** @suppress */,f17532:m89
17447,"fun <T, R> Collection<T>.singleOrZeroValue(transformer: (T) -> R?, ambiguityValueRenderer: (R) -> String): R?","{
    val newCollection = mapNotNull(transformer)
    return when (newCollection.size) {
        0 -> null
        1 -> newCollection.single()
        else -> error(buildString {
            appendLine(""Ambiguity values are not expected."")
            newCollection.joinTo(this, separator = ""\n"", transform = ambiguityValueRenderer)
        })
    }
}","/**

 * Transforms [this] collection with [transformer] and return single or null value. Throws [error] in the case of more than one element.

 */",f5234:m213
15395,@Test fun ln1p_D(),"{
    assertTrue(""Should return NaN"", Double.isNaN(ln1p(Double.NaN)))
    assertTrue(""Should return NaN"", Double.isNaN(ln1p(-32.0482175)))
    assertEquals(""Should return POSITIVE_INFINITY"", Double.POSITIVE_INFINITY, ln1p(Double.POSITIVE_INFINITY), 0.0)
    assertEquals(0.0.toBits(), ln1p(0.0).toBits())
    assertEquals(+0.0.toBits(), ln1p(+0.0).toBits())
    assertEquals((-0.0).toBits(), ln1p(-0.0).toBits())
    assertEquals(""Should return -0.2941782295312541"", -0.2941782295312541, ln1p(-0.254856327), 0.0)
    assertEquals(""Should return 7.368050685564151"", 7.368050685564151, ln1p(1583.542), 0.0)
    assertEquals(""Should return 0.4633708685409921"", 0.4633708685409921, ln1p(0.5894227), 0.0)
    assertEquals(""Should return 709.782712893384"", 709.782712893384, ln1p(Double.MAX_VALUE), 0.0)
    assertEquals(""Should return Double.MIN_VALUE"", Double.MIN_VALUE, ln1p(Double.MIN_VALUE), 0.0)
}","/**

     * Tests kotlin.math.ln1p(Double)

     */",f3868:m803
56526,"@Deprecated(""Use appendLine instead. Note that the new method always appends the line feed character '\\n' regardless of the system line separator."", ReplaceWith(""appendLine()""), level = DeprecationLevel.WARNING) public fun StringBuilder.appendln(): StringBuilder",append(SystemProperties.LINE_SEPARATOR),/** Appends a line separator to this StringBuilder. */,f16890:m547
57200,public fun <T: Comparable<T>> Sequence<T>.toSortedSet(): java.util.SortedSet<T>,"{
    return toCollection(java.util.TreeSet<T>())
}","/**

 * Returns a new [SortedSet][java.util.SortedSet] of all elements.

 *

 * The operation is _terminal_.

 */",f16968:m83
48201,"fun testFailed(reportTaskPath: String, testTaskPath: String)","{
    reportHasFailedTests[reportTaskPath] = true
    previouslyFailedTestTasks.add(testTaskPath)
}","/**

     * Marks [KotlinTestReport] with [reportTaskPath] as a report containing failed tests during the build.

     * [testTaskPath] is a path of the actual test task with failed tests.

     */",f15572:m83
58842,"@SinceKotlin(""1.7"") @kotlin.jvm.JvmName(""minOrThrow"") @Suppress(""CONFLICTING_OVERLOADS"") public fun Sequence<Float>.min(): Float","{
    val iterator = iterator()
    if (!iterator.hasNext()) throw NoSuchElementException()
    var min = iterator.next()
    while (iterator.hasNext()) {
        val e = iterator.next()
        min = minOf(min, e)
    }
    return min
}","/**

 * Returns the smallest element.

 * 

 * If any of elements is `NaN` returns `NaN`.

 *

 * The operation is _terminal_.

 * 

 * @throws NoSuchElementException if the sequence is empty.

 */",f17096:m3521
53157,"@Suppress(""ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS"") public actual fun String.replace(oldValue: String, newValue: String, ignoreCase: Boolean = false): String","nativeReplace(RegExp(Regex.escape(oldValue), if (ignoreCase) ""gui"" else ""gu""), Regex.nativeEscapeReplacement(newValue))","/**

 * Returns a new string obtained by replacing all occurrences of the [oldValue] substring in this string

 * with the specified [newValue] string.

 *

 * @sample samples.text.Strings.replace

 */",f16624:m353
54659,"@SinceKotlin(""1.4"") public actual infix fun <T> Array<out T>?.contentDeepEquals(other: Array<out T>?): Boolean","{
    return contentDeepEqualsImpl(other)
}","/**

 * Checks if the two specified arrays are *deeply* equal to one another.

 * 

 * Two arrays are considered deeply equal if they have the same size, and elements at corresponding indices are deeply equal.

 * That is, if two corresponding elements are nested arrays, they are also compared deeply.

 * Elements of other types are compared for equality using the [equals][Any.equals] function.

 * For floating point numbers, this means `NaN` is equal to itself and `-0.0` is not equal to `0.0`.

 * 

 * The arrays are also considered deeply equal if both are `null`.

 * 

 * If any of the arrays contain themselves at any nesting level, the behavior is undefined.

 * 

 * @param other the array to compare deeply with this array.

 * @return `true` if the two arrays are deeply equal, `false` otherwise.

 * 

 * @sample samples.collections.Arrays.ContentOperations.contentDeepEquals

 */",f16713:m417
43574,"fun BuildResult.assertOutputDoesNotContain(notExpectedSubString: String, wrappingCharsCount: Int = 100)","{
    assert(!output.contains(notExpectedSubString)) {
        printBuildOutput()
        val occurrences = mutableListOf<Pair<Int, Int>>()
        var startIndex = output.indexOf(notExpectedSubString)
        var endIndex = startIndex + notExpectedSubString.length
        do {
            occurrences.add(startIndex to endIndex)
            startIndex = output.indexOf(notExpectedSubString, endIndex)
            endIndex = startIndex + notExpectedSubString.length
        } while (startIndex != -1)
        val linesContainingSubString = occurrences.map { (startIndex, endIndex) -> output.subSequence((startIndex - wrappingCharsCount).coerceAtLeast(0), (endIndex + wrappingCharsCount).coerceAtMost(output.length)) }
        """"""
        
                |
        
                |===> Build output contains non-expected sub-string:
        
                |'$notExpectedSubString'
        
                |===> in following places:
        
                |${linesContainingSubString.joinToString(separator = ""\n|===> Next case:\n"")}
        
                |===> End of occurrences
        
                |
        
                """""".trimMargin()
    }
}","/**

 * Asserts Gradle output does not contain [notExpectedSubString] string.

 *

 * @param wrappingCharsCount amount of chars to include before and after [notExpectedSubString] occurrence

 */",f13457:m127
55624,"public inline fun <T> observable(initialValue: T, crossinline onChange: (property: KProperty<*>, oldValue: T, newValue: T) -> Unit): ReadWriteProperty<Any?, T>","object : ObservableProperty<T>(initialValue) {
    override fun afterChange(property: KProperty<*>, oldValue: T, newValue: T) = onChange(property, oldValue, newValue)
}","/**

     * Returns a property delegate for a read/write property that calls a specified callback function when changed.

     * @param initialValue the initial value of the property.

     * @param onChange the callback which is called after the change of the property is made. The value of the property

     *  has already been changed when this callback is invoked.

     *

     *  @sample samples.properties.Delegates.observableDelegate

     */",f16772:m45
50449,@Test fun `exception thrown in buildscript evaluation - coroutines waiting for configurationResult`(),"{
    val project = buildProjectWithMPP()
    val executed = mutableListOf<String>()
    project.launch {
        project.configurationResult.await()
        executed.add(""configurationResult.await()"")
    }
    project.launch {
        FinaliseDsl.await()
        project.configurationResult.await()
        executed.add(""FinaliseDsl"")
    }
    project.launchInStage(AfterEvaluateBuildscript) { executed.add(""AfterEvaluateBuildscript"") }
    project.tasks.whenObjectAdded { throw TestException() }
    assertFails { project.evaluate() }
    assertEquals(EvaluateBuildscript, project.kotlinPluginLifecycle.stage)
    assertEquals(listOf(""configurationResult.await()""), executed)
}","/**

     * Showcases how coroutines will behave if there is an exception thrown within the buildscript of the user.

     * In particular this sample shows how calls to `project.configurationResult` will be handled!

     *

     * In short: All coroutines that already suspended, waiting for the configurationResult will be unsuspended.

     * Like in [exception thrown in buildscript evaluation - inside user buildscript]:

     * Coroutines that ware waiting for later 'Stages' will not be executed (as their requirements are unmet)

     */",f16110:m439
57259,"@SinceKotlin(""1.4"") @kotlin.internal.InlineOnly public actual inline infix fun <T> Array<out T>?.contentEquals(other: Array<out T>?): Boolean","{
    return java.util.Arrays.equals(this, other)
}","/**

 * Checks if the two specified arrays are *structurally* equal to one another.

 * 

 * Two arrays are considered structurally equal if they have the same size, and elements at corresponding indices are equal.

 * Elements are compared for equality using the [equals][Any.equals] function.

 * For floating point numbers, this means `NaN` is equal to itself and `-0.0` is not equal to `0.0`.

 * 

 * The arrays are also considered structurally equal if both are `null`.

 * 

 * If the arrays contain nested arrays, use [contentDeepEquals] to recursively compare their elements.

 * 

 * @param other the array to compare with this array.

 * @return `true` if the two arrays are structurally equal, `false` otherwise.

 * 

 * @sample samples.collections.Arrays.ContentOperations.arrayContentEquals

 */",f16970:m1125
58925,public fun CharSequence.firstOrNull(): Char?,"{
    return if (isEmpty()) null else this[0]
}","/**

 * Returns the first character, or `null` if the char sequence is empty.

 */",f17097:m237
56543,"@kotlin.internal.InlineOnly public inline fun Timer.schedule(delay: Long, crossinline action: TimerTask.() -> Unit): TimerTask","{
    val task = timerTask(action)
    schedule(task, delay)
    return task
}","/**

 * Schedules an [action] to be executed after the specified [delay] (expressed in milliseconds).

 */",f16894:m25
59074,"public inline fun String.partition(predicate: (Char) -> Boolean): Pair<String, String>","{
    val first = StringBuilder()
    val second = StringBuilder()
    for (element in this) {
        if (predicate(element)) {
            first.append(element)
        } else {
            second.append(element)
        }
    }
    return Pair(first.toString(), second.toString())
}","/**

 * Splits the original string into pair of strings,

 * where *first* string contains characters for which [predicate] yielded `true`,

 * while *second* string contains characters for which [predicate] yielded `false`.

 * 

 * @sample samples.text.Strings.partition

 */",f17097:m4585
54790,public actual fun ByteArray.toTypedArray(): Array<Byte>,"{
    return js(""[]"").slice.call(this)
}","/**

 * Returns a *typed* object array containing all of the elements of this primitive array.

 */",f16713:m3751
15043,"@SinceKotlin(""1.1"") public actual fun <T: Comparable<T>> minOf(a: T, b: T, c: T): T","{
    return minOf(a, minOf(b, c))
}","/**

 * Returns the smaller of three values.

 * 

 * If there are multiple equal minimal values, returns the first of them.

 */",f3836:m603
55604,"@Suppress(""NO_ACTUAL_FOR_EXPECT"", ""EXPECTED_DECLARATION_WITH_BODY"") @SinceKotlin(""2.0"") @WasExperimental(ExperimentalStdlibApi::class) @kotlin.internal.InlineOnly public expect inline fun <T: AutoCloseable?, R> T.use(block: (T) -> R): R","{
    contract { callsInPlace(block, InvocationKind.EXACTLY_ONCE) }
    error(""Unreachable"")
}","/**

 * Executes the given [block] function on this resource and then closes it down correctly whether an exception

 * is thrown or not.

 *

 * In case if the resource is being closed due to an exception occurred in [block], and the closing also fails with an exception,

 * the latter is added to the [suppressed][Throwable.addSuppressed] exceptions of the former.

 *

 * @param block a function to process this [AutoCloseable] resource.

 * @return the result of [block] function invoked on this resource.

 */",f16768:m135
1708,private fun isSingletonReceiver(descriptor: DeclarationDescriptor): Boolean,"{
    if (descriptor !is ReceiverParameterDescriptor) return false
    val container = descriptor.containingDeclaration
    if (!DescriptorUtils.isObject(container)) return false
    if (containingDescriptor !is ClassDescriptor) {
        val containingClass = getParentOfType(containingDescriptor, ClassDescriptor::class.java, false)
        if (containingClass == container) return false
    }
    return true
}","/**

     * Test for the case like this:

     *

     * ```

     * object A {

     *     var x: Int

     *

     *     class B {

     *         fun foo() {

     *             { x }

     *         }

     *     }

     * }

     * ```

     *

     * We don't want to capture `A::this`, since we always can refer A by its FQN

     */",f381:m265
57278,"@SinceKotlin(""1.4"") @kotlin.internal.InlineOnly public actual inline fun ByteArray?.contentToString(): String","{
    return java.util.Arrays.toString(this)
}","/**

 * Returns a string representation of the contents of the specified array as if it is [List].

 * 

 * @sample samples.collections.Arrays.ContentOperations.contentToString

 */",f16970:m1649
14987,public actual fun CharArray.sort(): Unit,"{
    if (size > 1) sortArray(this, 0, size)
}","/**

 * Sorts the array in-place.

 * 

 * @sample samples.collections.Arrays.Sorting.sortArray

 */",f3831:m4663
48985,@ExternalKotlinTargetApi fun IdeDependencyResolver.withTransformer(transformer: IdeDependencyTransformer),"IdeDependencyResolver { sourceSet -> transformer.transform(sourceSet, this@withTransformer.resolve(sourceSet)) }","/**

 * Creates a [IdeDependencyResolver] which will invoke the given [transformer] right after resolving the dependencies from the

 * receiver.

 */",f15728:m49
12236,"internal fun findMacros(nativeIndex: NativeIndexImpl, compilation: CompilationWithPCH, translationUnits: List<CXTranslationUnit>, headers: Set<CXFile?>)","{
    val names = collectMacroNames(nativeIndex, translationUnits, headers)
    val macros = expandMacros(compilation, names, typeConverter = { nativeIndex.convertType(it) })
    macros.filterIsInstanceTo(nativeIndex.macroConstants)
    macros.filterIsInstanceTo(nativeIndex.wrappedMacros)
}","/**

 * Finds all ""macro constants"" and registers them as [NativeIndex.constants] in given index.

 */",f3629:m49
9235,private fun buildNullableArgToString(argument: IrExpression): IrExpression,"if (argument.type.isNullable()) {
    builder.irBlock { nullableArgToStringType(argument, context.irBuiltIns.stringType, irString(""null"")) }
} else buildNonNullableArgToString(argument)","/** Builds snippet of type String

     * - ""if(argument==null) ""null"" else argument.toString()"", if argument's type is nullable. Note: fortunately, all ""null"" string structures are unified

     * - ""argument.toString()"", otherwise

     * Note: should side effects are possible, temporary val is introduced

     */",f3332:m171
59036,"@SinceKotlin(""1.4"") @OptIn(kotlin.experimental.ExperimentalTypeInference::class) @OverloadResolutionByLambdaReturnType @kotlin.internal.InlineOnly public inline fun CharSequence.minOfOrNull(selector: (Char) -> Double): Double?","{
    if (isEmpty()) return null
    var minValue = selector(this[0])
    for (i in 1 .. lastIndex) {
        val v = selector(this[i])
        minValue = minOf(minValue, v)
    }
    return minValue
}","/**

 * Returns the smallest value among all values produced by [selector] function

 * applied to each character in the char sequence or `null` if there are no characters.

 * 

 * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.

 */",f17097:m3215
56071,@kotlin.internal.InlineOnly public inline fun <T> Iterable(crossinline iterator: () -> Iterator<T>): Iterable<T>,"object : Iterable<T> {
    override fun iterator(): Iterator<T> = iterator()
}","/**

 * Given an [iterator] function constructs an [Iterable] instance that returns values through the [Iterator]

 * provided by that function.

 * @sample samples.collections.Iterables.Building.iterable

 */",f16824:m19
21268,public inline fun <reified M: KtModule> KtModule.directFriendDependenciesOfType(): Sequence<M>,directFriendDependencies.asSequence().filterIsInstance<M>(),"/**

 * A list of all modules that the current module can depend on with friend dependency.

 *

 * @see KtModule.directFriendDependencies

 */",f8524:m35
58905,"@kotlin.jvm.JvmName(""averageOfShort"") public fun Sequence<Short>.average(): Double","{
    var sum: Double = 0.0
    var count: Int = 0
    for (element in this) {
        sum += element
        checkCountOverflow(++count)
    }
    return if (count == 0) Double.NaN else sum / count
}","/**

 * Returns an average value of elements in the sequence.

 *

 * The operation is _terminal_.

 */",f17096:m5895
16482,"protected fun <CANDIDATE> selectFirstElementInClasspathOrder(candidates: Collection<CANDIDATE>, getElement: (CANDIDATE) -> PsiElement?): Pair<CANDIDATE, PROVIDER>?","{
    if (candidates.isEmpty()) return null
    var currentCandidate: CANDIDATE? = null
    var currentPrecedence: Int = Int.MAX_VALUE
    var currentKtModule: KtModule? = null
    for (candidate in candidates) {
        val element = getElement(candidate) ?: continue
        val ktModule = getModule(element)
        val precedence = modulePrecedenceMap[ktModule] ?: continue
        if (precedence < currentPrecedence) {
            currentCandidate = candidate
            currentPrecedence = precedence
            currentKtModule = ktModule
        }
    }
    val candidate = currentCandidate ?: return null
    val ktModule = currentKtModule ?: error(""`currentKtModule` must not be `null` when `currentCandidate` has been found."")
    val provider = providersByKtModule.getValue(ktModule)
    return Pair(candidate, provider)
}","/**

     * Selects the element with the highest module precedence in [candidates], returning the element and the provider to which resolution

     * should be delegated. This is a post-processing step that preserves classpath order when, for example, an index access with a combined

     * scope isn't guaranteed to return the first element in classpath order.

     */",f4121:m101
13518,public operator fun rangeTo(other: Int): IntRange,"IntRange(this.toInt(), other)",/** Creates a range from this value to the specified [other] value. */,f3686:m619
48203,"fun reportFailure(failedTaskPath: String, parentTaskPath: String, failure: Error)","{
    testTaskSuppressedFailures.computeIfAbsent(parentTaskPath) { mutableListOf() }.add(failedTaskPath to failure)
}","/**

     * Reports a test task execution failure (not test failure).

     * @param failedTaskPath is a path of the failed test task

     * @param parentTaskPath is a path of a [KotlinTestReport] that the task reports to

     */",f15572:m115
56852,@kotlin.internal.InlineOnly public actual inline fun Float.isNaN(): Boolean,java.lang.Float.isNaN(this),"/**

 * Returns `true` if the specified number is a

 * Not-a-Number (NaN) value, `false` otherwise.

 */",f16929:m33
58741,"@SinceKotlin(""1.5"") @kotlin.internal.InlineOnly public inline fun <T, R: Any> Sequence<T>.firstNotNullOf(transform: (T) -> R?): R","{
    return firstNotNullOfOrNull(transform) ?: throw NoSuchElementException(""No element of the sequence was transformed to a non-null value."")
}","/**

 * Returns the first non-null value produced by [transform] function being applied to elements of this sequence in iteration order,

 * or throws [NoSuchElementException] if no non-null value was produced.

 *

 * The operation is _terminal_.

 * 

 * @sample samples.collections.Collections.Transformations.firstNotNullOf

 */",f17096:m261
7372,"fun Maze.neighbors(i: Int, j: Int): List<Pair<Int, Int>>","{
    val result = ArrayList<Pair<Int, Int>>()
    addIfFree(i - 1, j, result)
    addIfFree(i, j - 1, result)
    addIfFree(i + 1, j, result)
    addIfFree(i, j + 1, result)
    return result
}","/**

 * Find neighbors of the (i, j) cell that are not walls

 */",f3085:m125
29089,"override fun create(parcel: Parcel): Pair<F, S>",firstParceler.create(parcel) to secondParceler.create(parcel),"/**

     * Reads the [T] instance state from the [parcel], constructs the new [T] instance and returns it.

     */",f10233:m31
10117,protected fun libraryInCurrentDir(name: String): KotlinLibrary,"resolverByName(emptyList(), logger = KlibToolLogger(output)).resolve(name)",/** TODO: unify with [libraryInDefaultRepoOrCurrentDir] */,f3431:m129
9819,private fun PatchBuilder.addObjCPatches(),"{
    addProtocolImport(""NSCopying"")
    addPrivateSelector(""toKotlin:"")
    addPrivateSelector(""releaseAsAssociatedObject"")
    addPrivateClass(""KIteratorAsNSEnumerator"", ""iteratorHolder"")
    addPrivateClass(""KListAsNSArray"", ""listHolder"")
    addPrivateClass(""KMutableListAsNSMutableArray"", ""listHolder"")
    addPrivateClass(""KSetAsNSSet"", ""setHolder"")
    addPrivateClass(""KMapAsNSDictionary"", ""mapHolder"")
    addPrivateClass(""KotlinObjectHolder"", ""refHolder"")
    addPrivateClass(""KotlinObjCWeakReference"", ""referred"")
    addPrivateCategory(""NSObjectToKotlin"")
    addPrivateCategory(""NSStringToKotlin"")
    addPrivateCategory(""NSNumberToKotlin"")
    addPrivateCategory(""NSDecimalNumberToKotlin"")
    addPrivateCategory(""NSArrayToKotlin"")
    addPrivateCategory(""NSSetToKotlin"")
    addPrivateCategory(""NSDictionaryToKotlin"")
    addPrivateCategory(""NSEnumeratorAsAssociatedObject"")
    addExportedClass(objCExportNamer.kotlinAnyName, ""KotlinBase"", ""refHolder"", ""permanent"")
    addExportedClass(objCExportNamer.mutableSetName, ""KotlinMutableSet"", ""setHolder"")
    addExportedClass(objCExportNamer.mutableMapName, ""KotlinMutableDictionary"", ""mapHolder"")
    addExportedClass(objCExportNamer.kotlinNumberName, ""KotlinNumber"")
    NSNumberKind.values().mapNotNull { it.mappedKotlinClassId }.forEach { addExportedClass(objCExportNamer.numberBoxName(it), ""Kotlin${it.shortClassName}"", ""value_"") }
}","/**

 * Add patches for objc.bc.

 */",f3385:m181
64331,@kotlin.internal.IntrinsicConstEvaluation public inline operator fun compareTo(other: Int): Int,this.compareTo(other.toDouble()),"/**

     * Compares this value with the specified value for order.

     * Returns zero if this value is equal to the specified other value, a negative number if it's less than other,

     * or a positive number if it's greater than other.

     */",f17455:m4681
59011,"public inline fun <R> CharSequence.foldIndexed(initial: R, operation: (index: Int, acc: R, Char) -> R): R","{
    var index = 0
    var accumulator = initial
    for (element in this) accumulator = operation(index++, accumulator, element)
    return accumulator
}","/**

 * Accumulates value starting with [initial] value and applying [operation] from left to right

 * to current accumulator value and each character with its index in the original char sequence.

 * 

 * Returns the specified [initial] value if the char sequence is empty.

 * 

 * @param [operation] function that takes the index of a character, current accumulator value

 * and the character itself, and calculates the next accumulator value.

 */",f17097:m2245
57402,public fun DoubleArray.toSortedSet(): java.util.SortedSet<Double>,"{
    return toCollection(java.util.TreeSet<Double>())
}","/**

 * Returns a new [SortedSet][java.util.SortedSet] of all elements.

 */",f16970:m4781
55162,@kotlin.internal.IntrinsicConstEvaluation public infix fun xor(other: Long): Long,"Long(this.low xor other.low, this.high xor other.high)",/** Performs a bitwise XOR operation between the two values. */,f16727:m3113
53315,"protected actual open fun removeRange(fromIndex: Int, toIndex: Int)","{
    val iterator = listIterator(fromIndex)
    repeat(toIndex - fromIndex) {
        iterator.next()
        iterator.remove()
    }
}","/**

     * Removes the range of elements from this list starting from [fromIndex] and ending with but not including [toIndex].

     */",f16655:m181
14850,"@SinceKotlin(""1.4"") public actual infix fun FloatArray?.contentEquals(other: FloatArray?): Boolean","{
    if (this === other) return true
    if (this === null || other === null) return false
    if (size != other.size) return false
    for (i in indices) {
        if (!this[i].equals(other[i])) return false
    }
    return true
}","/**

 * Checks if the two specified arrays are *structurally* equal to one another.

 * 

 * Two arrays are considered structurally equal if they have the same size, and elements at corresponding indices are equal.

 * Elements are compared for equality using the [equals][Any.equals] function.

 * This means `NaN` is equal to itself and `-0.0` is not equal to `0.0`.

 * 

 * The arrays are also considered structurally equal if both are `null`.

 * 

 * @param other the array to compare with this array.

 * @return `true` if the two arrays are structurally equal, `false` otherwise.

 * 

 * @sample samples.collections.Arrays.ContentOperations.doubleArrayContentEquals

 */",f3831:m1213
56035,"public inline fun <K, V, R> Map<out K, V>.mapValues(transform: (Map.Entry<K, V>) -> R): Map<K, R>","{
    return mapValuesTo(LinkedHashMap<K, R>(mapCapacity(size)), transform)
}","/**

 * Returns a new map with entries having the keys of this map and the values obtained by applying the [transform]

 * function to each entry in this [Map].

 *

 * The returned map preserves the entry iteration order of the original map.

 *

 * @sample samples.collections.Maps.Transformations.mapValues

 */",f16823:m905
13969,@kotlin.internal.InlineOnly public actual inline fun String.substring(startIndex: Int): String,"subSequence(startIndex, this.length) as String","/**

 * Returns a substring of this string that starts at the specified [startIndex] and continues to the end of the string.

 */",f3713:m253
53166,"internal fun encodeUtf8(string: String, startIndex: Int, endIndex: Int, throwOnMalformed: Boolean): ByteArray","{
    require(startIndex >= 0 && endIndex <= string.length && startIndex <= endIndex)
    val bytes = ByteArray((endIndex - startIndex) * MAX_BYTES_PER_CHAR)
    var byteIndex = 0
    var charIndex = startIndex
    while (charIndex < endIndex) {
        val code = string[charIndex++].code
        when {
            code < 0x80 -> bytes[byteIndex++] = code.toByte()
            code < 0x800 -> {
                bytes[byteIndex++] = ((code shr 6) or 0xC0).toByte()
                bytes[byteIndex++] = ((code and 0x3F) or 0x80).toByte()
            }
            code < 0xD800 || code >= 0xE000 -> {
                bytes[byteIndex++] = ((code shr 12) or 0xE0).toByte()
                bytes[byteIndex++] = (((code shr 6) and 0x3F) or 0x80).toByte()
                bytes[byteIndex++] = ((code and 0x3F) or 0x80).toByte()
            }
            else -> {
                val codePoint = codePointFromSurrogate(string, code, charIndex, endIndex, throwOnMalformed)
                if (codePoint <= 0) {
                    bytes[byteIndex++] = REPLACEMENT_BYTE_SEQUENCE[0]
                    bytes[byteIndex++] = REPLACEMENT_BYTE_SEQUENCE[1]
                    bytes[byteIndex++] = REPLACEMENT_BYTE_SEQUENCE[2]
                } else {
                    bytes[byteIndex++] = ((codePoint shr 18) or 0xF0).toByte()
                    bytes[byteIndex++] = (((codePoint shr 12) and 0x3F) or 0x80).toByte()
                    bytes[byteIndex++] = (((codePoint shr 6) and 0x3F) or 0x80).toByte()
                    bytes[byteIndex++] = ((codePoint and 0x3F) or 0x80).toByte()
                    charIndex++
                }
            }
        }
    }
    return if (bytes.size == byteIndex) bytes else bytes.copyOf(byteIndex)
}","/**

 * Encodes the [string] using UTF-8 and returns the resulting [ByteArray].

 *

 * @param string the string to encode.

 * @param startIndex the start offset (inclusive) of the substring to encode.

 * @param endIndex the end offset (exclusive) of the substring to encode.

 * @param throwOnMalformed whether to throw on malformed char sequence or replace by the [REPLACEMENT_BYTE_SEQUENCE].

 *

 * @throws CharacterCodingException if the char sequence is malformed and [throwOnMalformed] is true.

 */",f16626:m305
55820,fun removeFirst(n: Int),"{
    require(n >= 0) { ""n shouldn't be negative but it is $n"" }
    require(n <= size) { ""n shouldn't be greater than the buffer size: n = $n, size = $size"" }
    if (n > 0) {
        val start = startIndex
        val end = start.forward(n)
        if (start > end) {
            buffer.fill(null, start, capacity)
            buffer.fill(null, 0, end)
        } else {
            buffer.fill(null, start, end)
        }
        startIndex = end
        size -= n
    }
}","/**

     * Removes [n] first elements from the buffer or fails with [IllegalArgumentException] if not enough elements in the buffer to remove

     */",f16812:m357
48359,"infix fun <K, V> Map<K, Set<V>>.mergeWith(that: Map<K, Set<V>>): Map<K, Set<V>>","{
    val result = mutableMapOf<K, Set<V>>()
    for ((k, setOfV) in this) {
        result[k] = setOfV + that[k].orEmpty()
    }
    val uniqueEntriesFromRight = that - this.keys
    result.putAll(uniqueEntriesFromRight)
    return result
}","/**

 * Merges two Map of Sets to new map

 * Example:

 * { 1: ['a', 'b'], 2: ['c'] }

 * merge

 * { 0: ['x'], 1: ['c'], 42: ['y'] }

 * =

 * { 0: ['x'], 1: ['a', 'b', 'c'], 2: ['c'], 42: ['y'] }

 */",f15611:m21
63277,"@Suppress(""DEPRECATION"") internal fun Char.Companion.toChars(codePoint: Int): CharArray","when {
    codePoint in 0 until MIN_SUPPLEMENTARY_CODE_POINT -> charArrayOf(codePoint.toChar())
    codePoint in MIN_SUPPLEMENTARY_CODE_POINT .. MAX_CODE_POINT -> {
        val low = ((codePoint - 0x10000) and 0x3FF) + MIN_LOW_SURROGATE.toInt()
        val high = (((codePoint - 0x10000) ushr 10) and 0x3FF) + MIN_HIGH_SURROGATE.toInt()
        charArrayOf(high.toChar(), low.toChar())
    }
    else -> throw IllegalArgumentException()
}","/**

 * Converts the codepoint specified to a char array. If the codepoint is not supplementary, the method will

 * return an array with one element otherwise it will return an array A with a high surrogate in A[0] and

 * a low surrogate in A[1].

 */",f17357:m79
59080,"public inline fun <V> CharSequence.zip(other: CharSequence, transform: (a: Char, b: Char) -> V): List<V>","{
    val length = minOf(this.length, other.length)
    val list = ArrayList<V>(length)
    for (i in 0 until length) {
        list.add(transform(this[i], other[i]))
    }
    return list
}","/**

 * Returns a list of values built from the characters of `this` and the [other] char sequences with the same index

 * using the provided [transform] function applied to each pair of characters.

 * The returned list has length of the shortest char sequence.

 * 

 * @sample samples.text.Strings.zipWithTransform

 */",f17097:m4847
43514,"fun assertClassDeclarationsContain(classesDir: Path, classFqn: String, vararg expectedDeclarations: String)","{
    assertClassDeclarationsContain(classesDir, classFqn, expectedDeclarations.toSet())
}","/**

 * Asserts that the class declarations of a given class contain the expected declarations. Uses `javap` to extract those.

 *

 * @param classesDir The path to the directory containing the compiled classes.

 * @param classFqn The fully qualified name of the class to inspect.

 * @param expectedDeclarations The set of expected class declarations.

 */",f13451:m279
63483,"@SinceKotlin(""1.3"") @Suppress(""ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS"") public actual fun ByteArray.copyInto(destination: ByteArray, destinationOffset: Int = 0, startIndex: Int = 0, endIndex: Int = size): ByteArray","{
    AbstractList.checkRangeIndexes(startIndex, endIndex, this.size)
    val rangeSize = endIndex - startIndex
    AbstractList.checkRangeIndexes(destinationOffset, destinationOffset + rangeSize, destination.size)
    kotlin.wasm.internal.copyWasmArray(this.storage, destination.storage, startIndex, destinationOffset, rangeSize)
    return destination
}","/**

 * Copies this array or its subrange into the [destination] array and returns that array.

 * 

 * It's allowed to pass the same array in the [destination] and even specify the subrange so that it overlaps with the destination range.

 * 

 * @param destination the array to copy to.

 * @param destinationOffset the position in the [destination] array to copy to, 0 by default.

 * @param startIndex the beginning (inclusive) of the subrange to copy, 0 by default.

 * @param endIndex the end (exclusive) of the subrange to copy, size of this array by default.

 * 

 * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of this array indices or when `startIndex > endIndex`.

 * @throws IndexOutOfBoundsException when the subrange doesn't fit into the [destination] array starting at the specified [destinationOffset],

 * or when that index is out of the [destination] array indices range.

 * 

 * @return the [destination] array.

 */",f17396:m2249
57047,@kotlin.internal.InlineOnly public inline fun print(message: Boolean),"{
    System.out.print(message)
}",/** Prints the given [message] to the standard output stream. */,f16953:m105
14061,public fun addAndGet(delta: Long): Long,this::value.getAndAddField(delta) + delta,"/**

     * Atomically adds the [given value][delta] to the current value and returns the new value.

     */",f3718:m221
21619,private fun KtTypeReference.getFirBySymbols(): FirElement?,"{
    val parent = parent
    return when {
        parent is KtParameter && parent.ownerFunction != null && parent.typeReference === this -> parent.resolveToFirSymbolOfTypeSafe<FirValueParameterSymbol>(firResolveSession, FirResolvePhase.TYPES)?.fir?.returnTypeRef
        parent is KtCallableDeclaration && (parent is KtNamedFunction || parent is KtProperty) && (parent.receiverTypeReference === this || parent.typeReference === this) -> {
            val firCallable = parent.resolveToFirSymbolOfTypeSafe<FirCallableSymbol<*>>(firResolveSession, FirResolvePhase.TYPES)?.fir
            if (parent.receiverTypeReference === this) {
                firCallable?.receiverParameter?.typeRef
            } else firCallable?.returnTypeRef
        }
        parent is KtConstructorCalleeExpression && parent.parent is KtAnnotationEntry -> {
            fun getFirDeclaration(annotationEntry: KtAnnotationEntry, ktTypeReference: KtTypeReference): FirMemberDeclaration? {
                if (annotationEntry.typeReference !== ktTypeReference) return null
                val declaration = annotationEntry.parent?.parent as? KtNamedDeclaration ?: return null
                return when {
                    declaration is KtClassOrObject -> declaration.resolveToFirSymbolOfTypeSafe<FirClassLikeSymbol<*>>(firResolveSession, FirResolvePhase.TYPES)?.fir
                    declaration is KtParameter && declaration.ownerFunction != null -> declaration.resolveToFirSymbolOfTypeSafe<FirValueParameterSymbol>(firResolveSession, FirResolvePhase.TYPES)?.fir
                    declaration is KtCallableDeclaration && (declaration is KtNamedFunction || declaration is KtProperty) -> {
                        declaration.resolveToFirSymbolOfTypeSafe<FirCallableSymbol<*>>(firResolveSession, FirResolvePhase.TYPES)?.fir
                    }
                    else -> return null
                }
            }
            fun FirMemberDeclaration.findAnnotationTypeRef(annotationEntry: KtAnnotationEntry) = annotations.find { it.psi === annotationEntry }?.annotationTypeRef
            val annotationEntry = parent.parent as KtAnnotationEntry
            val firDeclaration = getFirDeclaration(annotationEntry, this)
            if (firDeclaration != null) {
                firDeclaration.findAnnotationTypeRef(annotationEntry) ?: (firDeclaration as? FirProperty)?.run { backingField?.findAnnotationTypeRef(annotationEntry) ?: getter?.findAnnotationTypeRef(annotationEntry) ?: setter?.findAnnotationTypeRef(annotationEntry) }
            } else null
        }
        else -> null
    }
}","/**

     * Try to get fir element for type reference through symbols.

     * When the type is declared in compiled code this is faster than building FIR from decompiled text.

     */",f8611:m257
61755,"@SinceKotlin(""1.4"") public fun Node.clear()","{
    while (hasChildNodes()) {
        removeChild(firstChild!!)
    }
}",/** Removes all the children from this node. */,f17276:m19
57197,"@SinceKotlin(""1.4"") @OptIn(kotlin.experimental.ExperimentalTypeInference::class) @OverloadResolutionByLambdaReturnType @kotlin.jvm.JvmName(""sumOfBigInteger"") @kotlin.internal.InlineOnly public inline fun <T> Iterable<T>.sumOf(selector: (T) -> java.math.BigInteger): java.math.BigInteger","{
    var sum: java.math.BigInteger = 0.toBigInteger()
    for (element in this) {
        sum += selector(element)
    }
    return sum
}","/**

 * Returns the sum of all values produced by [selector] function applied to each element in the collection.

 */",f16967:m303
25376,@Test fun testOverriddenSymbolParentsInDefaultParameters(),"{
    compile(mapOf(""Base"" to mapOf(""base/Base.kt"" to """"""
    
                        package base
    
    
    
                        import androidx.compose.runtime.Composable
    
    
    
                        open class Base {
    
                          fun f(block: (@Composable () -> Unit)? = null) {}
    
                        }
    
                        """"""), ""Main"" to mapOf(""Main.kt"" to """"""
    
                        package main
    
    
    
                        import androidx.compose.runtime.Composable
    
                        import base.Base
    
    
    
                        class Child : Base() {
    
                          init { f {} }
    
                        }
    
                        """""")))
}","/**

     * Test for b/221280935

     */",f9257:m1999
56209,"@SinceKotlin(""1.4"") @kotlin.internal.InlineOnly public inline fun Byte.takeLowestOneBit(): Byte",toInt().takeLowestOneBit().toByte(),"/**

 * Returns a number having a single bit set in the position of the least significant set bit of this [Byte] number,

 * or zero, if this number is zero.

 */",f16841:m321
14907,public actual fun CharArray.copyOf(): CharArray,"{
    return this.copyOfUninitializedElements(size)
}","/**

 * Returns new array which is a copy of the original array.

 * 

 * @sample samples.collections.Arrays.CopyOfOperations.copyOf

 */",f3831:m2757
14140,"@Suppress(""UNCHECKED_CAST"") @kotlin.internal.InlineOnly public actual inline fun <R, T> (suspend R.() -> T).startCoroutineUninterceptedOrReturn(receiver: R, completion: Continuation<T>): Any?","{
    val wrappedCompletion = wrapWithContinuationImpl(completion)
    val function = this as? Function2<R, Continuation<T>, Any?>
    return if (function == null) startCoroutineUninterceptedOrReturnFallback(this, receiver, wrappedCompletion) else function.invoke(receiver, wrappedCompletion)
}","/**

 * Starts an unintercepted coroutine with receiver type [R] and result type [T] and executes it until its first suspension.

 * Returns the result of the coroutine or throws its exception if it does not suspend or [COROUTINE_SUSPENDED] if it suspends.

 * In the latter case, the [completion] continuation is invoked when the coroutine completes with a result or an exception.

 *

 * The coroutine is started directly in the invoker's thread without going through the [ContinuationInterceptor] that might

 * be present in the completion's [CoroutineContext]. It is the invoker's responsibility to ensure that a proper invocation

 * context is established.

 *

 * This function is designed to be used from inside of [suspendCoroutineUninterceptedOrReturn] to resume the execution of the suspended

 * coroutine using a reference to the suspending function.

 */",f3737:m97
43614,fun BuildResult.assertTasksUpToDate(taskPaths: Collection<String>),"{
    assertTasksUpToDate(*taskPaths.toTypedArray())
}","/**

 * Asserts given [taskPaths] have [TaskOutcome.UP_TO_DATE] execution state.

 */",f13463:m157
16169,"fun get(key: K, compute: (K) -> V?): V?",cache.get(key) { compute(it) ?: NullValue }?.nullValueToNull(),"/**

     * Returns the value for the given [key] if it's contained in the cache, or computes the value with [compute] and adds it to the cache.

     */",f4070:m39
7508,private fun String?.toTeamCityFormat(): String,"this?.let { it.replace(""\\|"", ""||"").replace(""\r"", ""|r"").replace(""\n"", ""|n"").replace(""'"", ""|'"").replace(""\\["", ""|["").replace(""]"", ""|]"") } ?: ""null""","/**

     * Teamcity require escaping some symbols in pipe manner.

     * https://github.com/GitTools/GitVersion/issues/94

     */",f3110:m319
58802,"public fun <T, R> Sequence<T>.map(transform: (T) -> R): Sequence<R>","{
    return TransformingSequence(this, transform)
}","/**

 * Returns a sequence containing the results of applying the given [transform] function

 * to each element in the original sequence.

 *

 * The operation is _intermediate_ and _stateless_.

 * 

 * @sample samples.collections.Collections.Transformations.map

 */",f17096:m2129
58710,public fun Double.coerceAtMost(maximumValue: Double): Double,"{
    return if (this > maximumValue) maximumValue else this
}","/**

 * Ensures that this value is not greater than the specified [maximumValue].

 * 

 * @return this value if it's less than or equal to the [maximumValue] or the [maximumValue] otherwise.

 * 

 * @sample samples.comparisons.ComparableOps.coerceAtMost

 */",f17092:m2693
57274,"@SinceKotlin(""1.4"") @kotlin.internal.InlineOnly public actual inline fun DoubleArray?.contentHashCode(): Int","{
    return java.util.Arrays.hashCode(this)
}","/**

 * Returns a hash code based on the contents of this array as if it is [List].

 */",f16970:m1573
57242,public actual fun BooleanArray.asList(): List<Boolean>,"{
    return object : AbstractList<Boolean>(), RandomAccess {
        override val size: Int get() = this@asList.size
    
        override fun isEmpty(): Boolean = this@asList.isEmpty()
    
        override fun contains(element: Boolean): Boolean = this@asList.contains(element)
    
        override fun get(index: Int): Boolean = this@asList[index]
    
        override fun indexOf(element: Boolean): Int = this@asList.indexOf(element)
    
        override fun lastIndexOf(element: Boolean): Int = this@asList.lastIndexOf(element)
    }
}","/**

 * Returns a [List] that wraps the original array.

 */",f16970:m439
20381,public fun getClassifierSymbols(vararg names: Name): Sequence<KtClassifierSymbol>,getClassifierSymbols(names.toList()),"/**

     * Return a sequence of [KtClassifierSymbol] which current scope contains, if classifier name present in [names].

     *

     * @see getClassifierSymbols

     */",f5837:m133
13966,"@Suppress(""ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS"") public actual fun String.replaceFirst(oldChar: Char, newChar: Char, ignoreCase: Boolean = false): String","{
    val index = indexOf(oldChar, ignoreCase = ignoreCase)
    return if (index < 0) this else this.replaceRange(index, index + 1, newChar.toString())
}","/**

 * Returns a new string with the first occurrence of [oldChar] replaced with [newChar].

 */",f3713:m195
8770,private fun extractEnumEntryValue(entryDescriptor: ClassDescriptor): IrExpression,"cEnumEntryValueTypes.firstNotNullOfOrNull { extractConstantValue(entryDescriptor, it) }?.let { context.constantValueGenerator.generateConstantValueAsExpression(SYNTHETIC_OFFSET, SYNTHETIC_OFFSET, it) } ?: error(""Enum entry $entryDescriptor has no appropriate @$cEnumEntryValueAnnotationName annotation!"")","/**

     * Every enum entry that came from metadata-based interop library is annotated with

     * [kotlinx.cinterop.internal.ConstantValue] annotation that holds internal constant value of the

     * corresponding entry.

     *

     * This function extracts value from the annotation.

     */",f3296:m293
13987,"@Deprecated(""Use CharArray.concatToString(startIndex, endIndex) instead"", ReplaceWith(""chars.concatToString(offset, offset + length)"")) @DeprecatedSinceKotlin(warningSince = ""1.4"", errorSince = ""1.5"") public actual fun String(chars: CharArray, offset: Int, length: Int): String","{
    if (offset < 0 || length < 0 || offset + length > chars.size) throw IndexOutOfBoundsException()
    return unsafeStringFromCharArray(chars, offset, length)
}","/**

 * Converts the characters from a portion of the specified array to a string.

 *

 * @throws IndexOutOfBoundsException if either [offset] or [length] are less than zero

 * or `offset + length` is out of [chars] array bounds.

 */",f3713:m639
55758,"@SinceKotlin(""1.4"") @LowPriorityInOverloadResolution public fun <T: Any> KClass<T>.cast(value: Any?): T","{
    if (!isInstance(value)) throw ClassCastException(""Value cannot be cast to $qualifiedOrSimpleName"")
    return value as T
}","/**

 * Casts the given [value] to the class represented by this [KClass] object.

 * Throws an exception if the value is `null` or if it is not an instance of this class.

 *

 * This is an experimental function that behaves as a similar function from kotlin.reflect.full on JVM.

 *

 * @see [KClass.isInstance]

 * @see [KClass.safeCast]

 */",f16794:m25
10429,override fun addToGraph(),"{
    myOutput.addConstraint(this)
    satisfied = false
}","/**

   * Adds this constraint to the constraint graph

   */",f3476:m377
16527,private fun FirElementWithResolveState.jumpingUnlock(toPhase: FirResolvePhase),"{
    val currentState = jumpingResolutionStatesStack.pop()
    resolveStateFieldUpdater.set(this, FirResolvedToPhaseState(toPhase))
    currentState.latch.countDown()
}","/**

     * Publish [FirResolvedToPhaseState] with [toPhase] phase and unlocks current [FirInProcessOfResolvingToJumpingPhaseState].

     *

     * @see withJumpingLockImpl

     * @see FirInProcessOfResolvingToJumpingPhaseState

     * @see FirResolvedToPhaseState

     */",f4129:m685
67325,"@ExperimentalBuildToolsApi @Suppress(""FunctionName"") @JvmName(""newInstance"") public fun SharedApiClassesClassLoader(): ClassLoader","SharedApiClassesClassLoaderImpl(SharedApiClassesClassLoaderImpl::class.java.classLoader, SharedApiClassesClassLoaderImpl::class.java.`package`.name)","/**

 * Creates a [ClassLoader] which reuses the API classes from the ClassLoader which loaded the API.

 * This way an API implementation can be loaded with almost fully isolated classpath, sharing only the classes from `org.jetbrains.kotlin.buildtools.api`,

 * so a caller still able to pass API parameters in a compatible way.

 */",f19147:m23
46118,inline fun <reified T: Any> T.linearClosureSequence(crossinline next: (T) -> T?): Sequence<T>,"{
    val initial = next(this) ?: return emptySequence()
    val results = HashSet<T>()
    return sequence {
        var enqueued: T? = initial
        while (enqueued != null) {
            if (enqueued != this@linearClosureSequence && results.add(enqueued)) {
                yield(enqueued)
                enqueued = next(enqueued)
            } else break
        }
    }
}","/**

 * @see closure

 * @receiver is not included in the return set

 */",f15014:m511
24737,"protected fun irNotEqual(lhs: IrExpression, rhs: IrExpression): IrExpression","{
    return irNot(irEqual(lhs, rhs))
}",/** Compare [lhs] and [rhs] using structural inequality (`!=`). */,f9212:m1203
15387,@Test fun cosh_D(),"{
    assertTrue(Double.isNaN(cosh(Double.NaN)))
    assertEquals(""Should return POSITIVE_INFINITY"", Double.POSITIVE_INFINITY, cosh(Double.POSITIVE_INFINITY), 0.0)
    assertEquals(""Should return POSITIVE_INFINITY"", Double.POSITIVE_INFINITY, cosh(Double.NEGATIVE_INFINITY), 0.0)
    assertEquals(""Should return 1.0"", 1.0, cosh(+0.0), 0.0)
    assertEquals(""Should return 1.0"", 1.0, cosh(-0.0), 0.0)
    assertEquals(""Should return POSITIVE_INFINITY"", Double.POSITIVE_INFINITY, cosh(1234.56), 0.0)
    assertEquals(""Should return POSITIVE_INFINITY"", Double.POSITIVE_INFINITY, cosh(-1234.56), 0.0)
    assertEquals(""Should return 1.0000000000005"", 1.0000000000005, cosh(0.000001), 0.0)
    assertEquals(""Should return 1.0000000000005"", 1.0000000000005, cosh(-0.000001), 0.0)
    assertEquals(""Should return 5.212214351945598"", 5.212214351945598, cosh(2.33482), 0.0)
    assertEquals(""Should return POSITIVE_INFINITY"", Double.POSITIVE_INFINITY, cosh(Double.MAX_VALUE), 0.0)
    assertEquals(""Should return 1.0"", 1.0, cosh(Double.MIN_VALUE), 0.0)
}","/**

     * Tests kotlin.math.cosh(Double)

     */",f3868:m463
14831,"@SinceKotlin(""1.4"") public actual infix fun <T> Array<out T>?.contentDeepEquals(other: Array<out T>?): Boolean","{
    return contentDeepEqualsImpl(other)
}","/**

 * Checks if the two specified arrays are *deeply* equal to one another.

 * 

 * Two arrays are considered deeply equal if they have the same size, and elements at corresponding indices are deeply equal.

 * That is, if two corresponding elements are nested arrays, they are also compared deeply.

 * Elements of other types are compared for equality using the [equals][Any.equals] function.

 * For floating point numbers, this means `NaN` is equal to itself and `-0.0` is not equal to `0.0`.

 * 

 * The arrays are also considered deeply equal if both are `null`.

 * 

 * If any of the arrays contain themselves at any nesting level, the behavior is undefined.

 * 

 * @param other the array to compare deeply with this array.

 * @return `true` if the two arrays are deeply equal, `false` otherwise.

 * 

 * @sample samples.collections.Arrays.ContentOperations.contentDeepEquals

 */",f3831:m505
57154,"@SinceKotlin(""1.4"") public actual fun maxOf(a: Byte, vararg other: Byte): Byte","{
    var max = a
    for (e in other) max = maxOf(max, e)
    return max
}","/**

 * Returns the greater of the given values.

 */",f16966:m329
50038,"fun diff(previousSnapshot: ClasspathSnapshot, changedFiles: Set<File>): KaptClasspathChanges","{
    if (!isCompatible(previousSnapshot)) {
        return KaptClasspathChanges.Unknown
    }
    if (annotationProcessorClasspath.any { it in changedFiles }) {
        return KaptClasspathChanges.Unknown
    }
    val unchangedBetweenCompilations = dataForFiles.keys.intersect(previousSnapshot.dataForFiles.keys).filter { it !in changedFiles }
    val currentToLoad = dataForFiles.keys.filter { it !in unchangedBetweenCompilations }.also { loadEntriesFor(it) }
    val previousToLoad = previousSnapshot.dataForFiles.keys.filter { it !in unchangedBetweenCompilations }
    check(currentToLoad.size == previousToLoad.size) { """"""
    
                Number of loaded files in snapshots differs. Reported changed files: $changedFiles
    
                Current snapshot data files: ${dataForFiles.keys}
    
                Previous snapshot data files: ${previousSnapshot.dataForFiles.keys}
    
            """""".trimIndent() }
    val currentHashesToAnalyze = getHashesToAnalyze(currentToLoad)
    val previousHashesToAnalyze = previousSnapshot.getHashesToAnalyze(previousToLoad)
    val changedClasses = mutableSetOf<String>()
    for (key in previousHashesToAnalyze.keys + currentHashesToAnalyze.keys) {
        val previousHash = previousHashesToAnalyze[key]
        if (previousHash == null) {
            changedClasses.add(key)
            continue
        }
        val currentHash = currentHashesToAnalyze[key]
        if (currentHash == null) {
            changedClasses.add(key)
            continue
        }
        if (!previousHash.contentEquals(currentHash)) {
            changedClasses.add(key)
        }
    }
    for (unchanged in unchangedBetweenCompilations) {
        dataForFiles[unchanged] = previousSnapshot.dataForFiles[unchanged]!!
    }
    val allImpactedClasses = findAllImpacted(changedClasses)
    return KaptClasspathChanges.Known(allImpactedClasses)
}",/** Compare this snapshot with the specified one only for the specified files. */,f16033:m133
14795,"@Deprecated(""Use Kotlin compiler 1.4 to avoid deprecation warning."") @SinceKotlin(""1.3"") @DeprecatedSinceKotlin(hiddenSince = ""1.4"") @ExperimentalUnsignedTypes public infix fun UShortArray.contentEquals(other: UShortArray): Boolean","{
    return this.contentEquals(other)
}","/**

 * Checks if the two specified arrays are *structurally* equal to one another.

 * 

 * Two arrays are considered structurally equal if they have the same size, and elements at corresponding indices are equal.

 * 

 * @param other the array to compare with this array.

 * @return `true` if the two arrays are structurally equal, `false` otherwise.

 * 

 * @sample samples.collections.Arrays.ContentOperations.intArrayContentEquals

 */",f3828:m363
63622,"@SinceKotlin(""1.1"") @kotlin.internal.InlineOnly public actual inline fun maxOf(a: Int, b: Int): Int","{
    return if (a >= b) a else b
}","/**

 * Returns the greater of two values.

 */",f17406:m83
58039,@kotlin.internal.InlineOnly public inline operator fun rem(other: UByte): UInt,this.toUInt().rem(other.toUInt()),"/**

     * Calculates the remainder of truncating division of this value (dividend) by the other value (divisor).

     *

     * The result is always less than the divisor.

     */",f17058:m251
63414,public actual fun ByteArray.asList(): List<Byte>,"{
    return object : AbstractList<Byte>(), RandomAccess {
        override val size: Int get() = this@asList.size
    
        override fun isEmpty(): Boolean = this@asList.isEmpty()
    
        override fun contains(element: Byte): Boolean = this@asList.contains(element)
    
        override fun get(index: Int): Byte = this@asList[index]
    
        override fun indexOf(element: Byte): Int = this@asList.indexOf(element)
    
        override fun lastIndexOf(element: Byte): Int = this@asList.lastIndexOf(element)
    }
}","/**

 * Returns a [List] that wraps the original array.

 */",f17396:m239
56875,"@SinceKotlin(""1.6"") @WasExperimental(ExperimentalStdlibApi::class) @kotlin.internal.InlineOnly public actual inline fun Long.rotateLeft(bitCount: Int): Long","java.lang.Long.rotateLeft(this, bitCount)","/**

 * Rotates the binary representation of this [Long] number left by the specified [bitCount] number of bits.

 * The most significant bits pushed out from the left side reenter the number as the least significant bits on the right side.

 *

 * Rotating the number left by a negative bit count is the same as rotating it right by the negated bit count:

 * `number.rotateLeft(-n) == number.rotateRight(n)`

 *

 * Rotating by a multiple of [Long.SIZE_BITS] (64) returns the same number, or more generally

 * `number.rotateLeft(n) == number.rotateLeft(n % 64)`

 */",f16929:m405
57989,"@SinceKotlin(""1.5"") @WasExperimental(ExperimentalUnsignedTypes::class) @kotlin.internal.InlineOnly public inline fun max(a: UInt, b: UInt): UInt","{
    return maxOf(a, b)
}","/**

 * Returns the greater of two values.

 */",f17055:m55
58170,@kotlin.internal.InlineOnly public inline fun mod(other: UShort): UShort,this.mod(other.toUInt()).toUShort(),"/**

     * Calculates the remainder of flooring division of this value (dividend) by the other value (divisor).

     *

     * The result is always less than the divisor.

     *

     * For unsigned types, the remainders of flooring division and truncating division are the same.

     */",f17063:m385
54696,"@SinceKotlin(""1.3"") @kotlin.internal.InlineOnly @Suppress(""ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS"") public actual inline fun FloatArray.copyInto(destination: FloatArray, destinationOffset: Int = 0, startIndex: Int = 0, endIndex: Int = size): FloatArray","{
    arrayCopy(this.unsafeCast<Array<Float>>(), destination.unsafeCast<Array<Float>>(), destinationOffset, startIndex, endIndex)
    return destination
}","/**

 * Copies this array or its subrange into the [destination] array and returns that array.

 * 

 * It's allowed to pass the same array in the [destination] and even specify the subrange so that it overlaps with the destination range.

 * 

 * @param destination the array to copy to.

 * @param destinationOffset the position in the [destination] array to copy to, 0 by default.

 * @param startIndex the beginning (inclusive) of the subrange to copy, 0 by default.

 * @param endIndex the end (exclusive) of the subrange to copy, size of this array by default.

 * 

 * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of this array indices or when `startIndex > endIndex`.

 * @throws IndexOutOfBoundsException when the subrange doesn't fit into the [destination] array starting at the specified [destinationOffset],

 * or when that index is out of the [destination] array indices range.

 * 

 * @return the [destination] array.

 */",f16713:m1451
58871,"@SinceKotlin(""1.4"") public fun <T, R> Sequence<T>.scan(initial: R, operation: (acc: R, T) -> R): Sequence<R>","{
    return runningFold(initial, operation)
}","/**

 * Returns a sequence containing successive accumulation values generated by applying [operation] from left to right

 * to each element and current accumulator value that starts with [initial] value.

 * 

 * Note that `acc` value passed to [operation] function should not be mutated;

 * otherwise it would affect the previous value in resulting sequence.

 * The [initial] value should also be immutable (or should not be mutated)

 * as it may be passed to [operation] function later because of sequence's lazy nature.

 * 

 * @param [operation] function that takes current accumulator value and an element, and calculates the next accumulator value.

 *

 * The operation is _intermediate_ and _stateless_.

 * 

 * @sample samples.collections.Collections.Aggregates.scan

 */",f17096:m4813
56912,@kotlin.internal.InlineOnly public inline operator fun BigDecimal.div(other: BigDecimal): BigDecimal,"this.divide(other, RoundingMode.HALF_EVEN)","/**

 * Enables the use of the `/` operator for [BigDecimal] instances.

 *

 * The scale of the result is the same as the scale of `this` (divident), and for rounding the [RoundingMode.HALF_EVEN]

 * rounding mode is used.

 */",f16935:m65
34248,"private inline fun <T: DeclarationDescriptor> computeNonDeclaredDescriptors(name: Name, declaredDescriptors: List<T>, computeNonDeclared: (Name, MutableList<T>) -> Unit): List<T>","{
    val declaredDescriptorsWithSameName = declaredDescriptors.filterTo(mutableListOf()) { it.name == name }
    val nonDeclaredPropertiesStartIndex = declaredDescriptorsWithSameName.size
    computeNonDeclared(name, declaredDescriptorsWithSameName)
    return declaredDescriptorsWithSameName.subList(nonDeclaredPropertiesStartIndex, declaredDescriptorsWithSameName.size)
}","/**

         * We have to collect non-declared properties in such non-pretty way because we don't want to change the contract of the

         * [computeNonDeclaredProperties] and [computeNonDeclaredFunctions] methods, because we do not want any performance penalties.

         *

         * [computeNonDeclared] may only add elements to the end of [MutableList], otherwise this function would not work properly.

         */",f11261:m961
11469,"private fun saveAsArg(arg: String, argumentsQueue: ArgumentsQueue): Boolean","{
    val name = argumentsQueue.pop()
    name?.let {
        val argumentValue = arguments[name]!!
        argumentValue.descriptor.deprecatedWarning?.let { printWarning(it) }
        argumentValue.addValue(arg)
        return true
    }
    return false
}","/**

     * Save value as argument value.

     *

     * @param arg string with argument value.

     * @param argumentsQueue queue with active argument descriptors.

     */",f3554:m701
41005,"@Suppress(""SpellCheckingInspection"") fun File.createDirectory()","{
    when {
        isDirectory -> Unit
        isFile -> error(""A regular file already exists at this path: $path"")
        else -> {
            if (!mkdirs() && !isDirectory) {
                throw IOException(""Could not create directory '$path'"")
            }
        }
    }
}","/**

 * Creates this directory (if it does not yet exist).

 *

 * If a regular file already exists at this path, this method will throw an exception.

 */",f12982:m101
58716,"public fun Float.coerceIn(minimumValue: Float, maximumValue: Float): Float","{
    if (minimumValue > maximumValue) throw IllegalArgumentException(""Cannot coerce value to an empty range: maximum $maximumValue is less than minimum $minimumValue."")
    if (this < minimumValue) return minimumValue
    if (this > maximumValue) return maximumValue
    return this
}","/**

 * Ensures that this value lies in the specified range [minimumValue]..[maximumValue].

 * 

 * @return this value if it's in the range, or [minimumValue] if this value is less than [minimumValue], or [maximumValue] if this value is greater than [maximumValue].

 * 

 * @sample samples.comparisons.ComparableOps.coerceIn

 */",f17092:m2867
63425,"@SinceKotlin(""1.4"") public actual fun <T> Array<out T>?.contentDeepHashCode(): Int","{
    return contentDeepHashCodeImpl()
}","/**

 * Returns a hash code based on the contents of this array as if it is [List].

 * Nested arrays are treated as lists too.

 * 

 * If any of arrays contains itself on any nesting level the behavior is undefined.

 */",f17396:m573
21605,private fun KtFirPsiJavaClassSymbol.isVisibleByPsi(useSiteFile: KtFirFileSymbol): Boolean?,"{
    when (visibility) {
        Visibilities.Private -> return false
        Visibilities.Public -> return when (val outerClass = this.outerClass) {
            null -> true
            else -> outerClass.isVisibleByPsi(useSiteFile)
        }
        JavaVisibilities.PackageVisibility -> {
            val isSamePackage = classIdIfNonLocal.packageFqName == useSiteFile.firSymbol.fir.packageFqName
            if (!isSamePackage) return false
            return when (val outerClass = this.outerClass) {
                null -> true
                else -> outerClass.isVisibleByPsi(useSiteFile)
            }
        }
    }
    return null
}","/**

     * [isVisibleByPsi] is a heuristic that decides visibility for most [KtFirPsiJavaClassSymbol]s without deferring to its FIR symbol,

     * thereby avoiding lazy construction of the FIR class. The visibility rules are tailored specifically for Java classes accessed from

     * Kotlin. They cover the most popular visibilities `private`, `public`, and default (package) visibility for top-level and nested

     * classes.

     *

     * Returns `null` if visibility cannot be decided by the heuristic.

     */",f8607:m163
23501,private fun IrFunction.isTargetMethod(): Boolean,"{
    val fqName = fqNameWhenAvailable?.asString() ?: return false
    return fqName == ""kotlinx.serialization.SerializersKt.serializer"" || fqName == ""kotlinx.serialization.SerializersKt__SerializersKt.serializer""
}","/**

     * Method for intrinsification `kotlinx.serialization.serializer` is a top-level function.

     * For the rest of the world, it is located in the facade `kotlinx.serialization.SerializersKt`.

     * However, when we compile `kotlinx-serialization-core` itself, facade contains only synthetic bridges.

     * Real function is contained in IR class with `SerializersKt__SerializersKt` name.

     * (as we have `@file:JvmMultifileClass @file:JvmName(""SerializersKt"")` on both common Serializers.kt and a platform-specific SerializersJvm.kt files)

     */",f8983:m249
9658,"internal fun addTargetCpuAndFeaturesAttributes(context: Context, llvmFunction: LLVMValueRef)","{
    context.config.platform.targetCpu?.let { LLVMAddTargetDependentFunctionAttr(llvmFunction, ""target-cpu"", it) }
    context.config.platform.targetCpuFeatures?.let { LLVMAddTargetDependentFunctionAttr(llvmFunction, ""target-features"", it) }
}","/**

 * Set target cpu and its features to make LLVM generate correct machine code.

 */",f3378:m51
57297,@kotlin.internal.InlineOnly public actual inline fun ShortArray.copyOf(): ShortArray,"{
    return java.util.Arrays.copyOf(this, size)
}","/**

 * Returns new array which is a copy of the original array.

 * 

 * @sample samples.collections.Arrays.CopyOfOperations.copyOf

 */",f16970:m2279
59020,"@SinceKotlin(""1.4"") @OptIn(kotlin.experimental.ExperimentalTypeInference::class) @OverloadResolutionByLambdaReturnType @kotlin.internal.InlineOnly public inline fun CharSequence.maxOf(selector: (Char) -> Float): Float","{
    if (isEmpty()) throw NoSuchElementException()
    var maxValue = selector(this[0])
    for (i in 1 .. lastIndex) {
        val v = selector(this[i])
        maxValue = maxOf(maxValue, v)
    }
    return maxValue
}","/**

 * Returns the largest value among all values produced by [selector] function

 * applied to each character in the char sequence.

 * 

 * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.

 * 

 * @throws NoSuchElementException if the char sequence is empty.

 */",f17097:m2563
43610,fun BuildResult.assertAnyTaskHasBeenExecuted(taskPaths: Set<String>),"{
    val taskOutcomes = taskPaths.associateWith { taskPath -> task(taskPath)?.outcome }
    assert(taskOutcomes.values.any { it == TaskOutcome.SUCCESS }) {
        printBuildOutput()
        ""Expected at least one Task of $taskPaths had outcome 'SUCCESS', but none did. Actual outcomes: $taskOutcomes""
    }
}","/**

 * Asserts any of [taskPaths] has [TaskOutcome.SUCCESS] execution state.

 */",f13463:m87
58789,"@SinceKotlin(""1.4"") @OptIn(kotlin.experimental.ExperimentalTypeInference::class) @OverloadResolutionByLambdaReturnType @kotlin.jvm.JvmName(""flatMapIterable"") public fun <T, R> Sequence<T>.flatMap(transform: (T) -> Iterable<R>): Sequence<R>","{
    return FlatteningSequence(this, transform, Iterable<R>::iterator)
}","/**

 * Returns a single sequence of all elements from results of [transform] function being invoked on each element of original sequence.

 *

 * The operation is _intermediate_ and _stateless_.

 * 

 * @sample samples.collections.Collections.Transformations.flatMap

 */",f17096:m1705
43616,fun BuildResult.assertTasksFromCache(vararg taskPaths: String),"{
    assertTasksHaveOutcome(TaskOutcome.FROM_CACHE, taskPaths.asList())
}","/**

 * Asserts given [taskPaths] have [TaskOutcome.FROM_CACHE] execution state.

 */",f13463:m185
57163,"@SinceKotlin(""1.1"") @kotlin.internal.InlineOnly public actual inline fun minOf(a: Int, b: Int): Int","{
    return Math.min(a, b)
}","/**

 * Returns the smaller of two values.

 */",f16966:m513
49794,@ExternalKotlinTargetApi fun <T: DecoratedExternalKotlinTarget> ExternalKotlinTargetDescriptor(configure: ExternalKotlinTargetDescriptorBuilder<T>.() -> Unit): ExternalKotlinTargetDescriptor<T>,"{
    return ExternalKotlinTargetDescriptorBuilder<T>().also(configure).build()
}","/**

 * Creates a new [ExternalKotlinTargetDescriptor] using the builder pattern.

 * There are some required properties that have to be set.

 * Check [ExternalKotlinTargetDescriptorBuilder] for further details.

 *

 *  * The following properties have to be specified:

 *  * - [ExternalKotlinTargetDescriptorBuilder.targetName]

 *  * - [ExternalKotlinTargetDescriptorBuilder.platformType]

 *  * - [ExternalKotlinTargetDescriptorBuilder.targetFactory]

 *

 *  Not providing a required/necessary property will throw [IllegalStateException]

 */",f15961:m97
54788,public actual fun <T> Array<out T>.sortWith(comparator: Comparator<in T>): Unit,"{
    if (size > 1) sortArrayWith(this, comparator)
}","/**

 * Sorts the array in-place according to the order specified by the given [comparator].

 * 

 * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.

 */",f16713:m3697
17303,private fun findInheritableSimpleNames(typeElement: KtTypeElement): List<String>,"{
    return when (typeElement) {
        is KtUserType -> {
            val referenceName = typeElement.referencedName ?: return emptyList()
            buildList {
                add(referenceName)
                val ktFile = typeElement.containingKtFile
                if (!ktFile.isCompiled) {
                    addIfNotNull(getImportedSimpleNameByImportAlias(typeElement.containingKtFile, referenceName))
                }
            }
        }
        is KtNullableType -> typeElement.innerType?.let(::findInheritableSimpleNames) ?: emptyList()
        else -> emptyList()
    }
}","/**

     * This is a simplified version of `KtTypeElement.index()` from the IDE. If we need to move more indexing code to Standalone, we should

     * consider moving more code from the IDE to the Analysis API.

     *

     * @see KotlinStaticDeclarationIndex.inheritableTypeAliasesByAliasedName

     */",f5211:m571
48541,"@JvmOverloads fun sharedLib(namePrefix: String, buildTypes: Collection<NativeBuildType> = NativeBuildType.DEFAULT_BUILD_TYPES, configure: SharedLibrary.() -> Unit = {})","createBinaries(namePrefix, namePrefix, NativeOutputKind.DYNAMIC, buildTypes, ::SharedLibrary, configure)",/** Creates a shared library with the given [namePrefix] for each build type and configures it. */,f15652:m461
37289,@Test @TodoAnalysisApi fun `test - stringBuilder`(),"{
    doTest(dependenciesDir.resolve(""stringBuilder""))
}","/**

     * - Missing implementation of mangling

     */",f11808:m51
63738,public actual fun println(message: Any?),"{
    printImpl(message?.toString(), useErrorStream = false, newLine = true)
}",/** Prints the given [message] and the line separator to the standard output stream. */,f17418:m167
48535,"@JvmOverloads fun executable(namePrefix: String, buildTypes: Collection<NativeBuildType> = NativeBuildType.DEFAULT_BUILD_TYPES, configure: Action<Executable>)","executable(namePrefix, buildTypes) { configure.execute(this) }",/** Creates an executable with the given [namePrefix] for each build type and configures it. */,f15652:m371
54726,"public actual fun CharArray.copyOfRange(fromIndex: Int, toIndex: Int): CharArray","{
    AbstractList.checkRangeIndexes(fromIndex, toIndex, size)
    return withType(""CharArray"", this.asDynamic().slice(fromIndex, toIndex))
}","/**

 * Returns a new array which is a copy of the specified range of the original array.

 * 

 * @param fromIndex the start of the range (inclusive) to copy.

 * @param toIndex the end of the range (exclusive) to copy.

 * 

 * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.

 * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].

 */",f16713:m2297
63370,"@Suppress(""UNCHECKED_CAST"") public actual fun <T> (suspend () -> T).createCoroutineUnintercepted(completion: Continuation<T>): Continuation<Unit>","{
    return createCoroutineFromSuspendFunction(completion) { this.startCoroutineUninterceptedOrReturn(completion) }
}","/**

 * Creates unintercepted coroutine without receiver and with result type [T].

 * This function creates a new, fresh instance of suspendable computation every time it is invoked.

 *

 * To start executing the created coroutine, invoke `resume(Unit)` on the returned [Continuation] instance.

 * The [completion] continuation is invoked when coroutine completes with result or exception.

 *

 * This function returns unintercepted continuation.

 * Invocation of `resume(Unit)` starts coroutine immediately in the invoker's call stack without going through the

 * [ContinuationInterceptor] that might be present in the completion's [CoroutineContext].

 * It is the invoker's responsibility to ensure that a proper invocation context is established.

 * Note that [completion] of this function may get invoked in an arbitrary context.

 *

 * [Continuation.intercepted] can be used to acquire the intercepted continuation.

 * Invocation of `resume(Unit)` on intercepted continuation guarantees that execution of

 * both the coroutine and [completion] happens in the invocation context established by

 * [ContinuationInterceptor].

 *

 * Repeated invocation of any resume function on the resulting continuation corrupts the

 * state machine of the coroutine and may result in arbitrary behaviour or exception.

 */",f17386:m123
21964,"private fun KtAnalysisSession.canBeReferencedAsExtensionOn(symbol: KtCallableSymbol, actualReceiverType: KtType): Boolean","{
    val extensionReceiverType = symbol.receiverParameter?.type ?: return false
    return isPossiblySuperTypeOf(extensionReceiverType, actualReceiverType)
}","/**

     * Returns true if we consider that [this] extension function prefixed with [actualReceiverType] in

     * a KDoc reference should be considered as legal and resolved, and false otherwise.

     *

     * This is **not** an actual type check, it is just an opinionated approximation.

     * The main guideline was K1 KDoc resolve.

     *

     * This check might change in the future, as Dokka team advances with KDoc rules.

     */",f8670:m685
7795,fun buildSingleStageArgs(),"mutableListOf<String>().apply {
    addArg(""-output"", artifact.canonicalPath)
    addArg(""-produce"", produce.name.lowercase(Locale.getDefault()))
    addArgIfNotNull(""-entry"", entryPoint)
    addAll(buildCommonArgs())
    addFileArgs(""-native-library"", nativeLibraries)
    linkerOpts.forEach { addArg(""-linker-option"", it) }
    if (produce != CompilerOutputKind.LIBRARY) {
        add(""-Xpartial-linkage=enable"")
        add(""-Xpartial-linkage-loglevel=error"")
    }
    addAll(extraOpts)
    allSourceFiles.mapTo(this) { it.absolutePath }
    commonSrcFiles.flatMap { it.files }.mapTo(this) { ""-Xcommon-sources=${it.absolutePath}"" }
}",/** Args passed to the compiler if the two-stage compilation is disabled. */,f3138:m427
7603,fun klibFile(file: Any),"{
    klibFiles.add(project.files(file))
}",/** Absolute path */,f3130:m89
58730,public operator fun <T> Set<T>.plus(elements: Iterable<T>): Set<T>,"{
    val result = LinkedHashSet<T>(mapCapacity(elements.collectionSizeOrNull()?.let { this.size + it } ?: this.size * 2))
    result.addAll(this)
    result.addAll(elements)
    return result
}","/**

 * Returns a set containing all elements of the original set and the given [elements] collection,

 * which aren't already in this set.

 * The returned set preserves the element iteration order of the original set.

 */",f17095:m209
14977,public actual operator fun DoubleArray.plus(elements: DoubleArray): DoubleArray,"{
    val thisSize = size
    val arraySize = elements.size
    val result = copyOfUninitializedElements(thisSize + arraySize)
    elements.copyInto(result, thisSize)
    return result
}","/**

 * Returns an array containing all elements of the original array and then all elements of the given [elements] array.

 */",f3831:m4473
13972,"@Suppress(""ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS"") public actual fun String.endsWith(suffix: String, ignoreCase: Boolean = false): Boolean","regionMatches(length - suffix.length, suffix, 0, suffix.length, ignoreCase)","/**

 * Returns `true` if this string ends with the specified suffix.

 */",f3713:m295
43300,private fun TestProject.assertConsecutiveBuildsProduceSameBinaries(),"{
    fun File.relativeToProject() = this.relativeTo(projectPath.toFile())
    fun Diff.reportString(): String = when (this) {
        is Diff.DifferentContent -> ""Different File Contents: ${first.relativeToProject()} <-> ${second.relativeToProject()}""
        is Diff.MissingFile -> ""Missing File: ${file.relativeToProject()}""
        is Diff.TypeMismatch -> ""Expected directory, but is file: ${file.relativeToProject()}""
    }
    buildGradleKts.appendText(""""""
    
            val repo1 = buildDir.resolve(""repo1"")
    
            val repo2 = buildDir.resolve(""repo2"")
    
    
    
            publishing {
    
                repositories {
    
                    maven(repo1) { name = ""repo1"" }
    
                    maven(repo2) { name = ""repo2"" }
    
                }
    
            }
    
            """""".trimIndent())
    build(""publishAllPublicationsToRepo1Repository"")
    build(""publishAllPublicationsToRepo2Repository"", ""--rerun-tasks"") { tasks.forEach { task -> assertTrue(task.outcome in setOf(TaskOutcome.SUCCESS, TaskOutcome.SKIPPED, TaskOutcome.NO_SOURCE), ""Expected all tasks to be re-executed. Task ${task.path} was ${task.outcome}"") } }
    val repo1 = projectPath.resolve(""build/repo1"").toFile()
    val repo2 = projectPath.resolve(""build/repo2"").toFile()
    val diffs = diff(repo1, repo2).filter { diff -> ""maven-metadata"" !in diff.fileName }
    if (diffs.isNotEmpty()) { fail(buildString {
        appendLine(""${repo1.relativeToProject()} <-> ${repo2.relativeToProject()} are inconsistent!"")
        diffs.forEach { diff -> appendLine(diff.reportString()) }
    }) }
}","/**

 * This will test if building a project consecutively will result in the same binaries.

 * This method will inject code into the build.gradle.kts file to perform the following:

 *

 * - publish the project into a local repository (repo1)

 * - publish the project into a local repository (repo2) (whilst --rerun-tasks guarantees everything is re-built)

 * - Run the 'diff' tool to ensure that the published artifacts are equal in repo1 & repo2

 */",f13405:m63
7609,"fun artifact(libraryProject: Project, name: String, friend: Boolean)","{
    project.evaluationDependsOn(libraryProject)
    klibInternal(libraryProject.konanArtifactsContainer.getByName(name), friend)
}",/** Artifact in the specified project by name */,f3130:m143
54845,"@SinceKotlin(""1.3"") @ExperimentalUnsignedTypes public actual fun ULongArray.elementAt(index: Int): ULong","{
    return elementAtOrElse(index) { throw IndexOutOfBoundsException(""index: $index, size: $size}"") }
}","/**

 * Returns an element at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this array.

 * 

 * @sample samples.collections.Collections.Elements.elementAt

 */",f16716:m55
52628,"protected actual open fun removeRange(fromIndex: Int, toIndex: Int)","{
    val iterator = listIterator(fromIndex)
    repeat(toIndex - fromIndex) {
        iterator.next()
        iterator.remove()
    }
}","/**

     * Removes the range of elements from this list starting from [fromIndex] and ending with but not including [toIndex].

     */",f16553:m161
57257,"@SinceKotlin(""1.1"") @kotlin.internal.LowPriorityInOverloadResolution @JvmName(""contentDeepToStringInline"") @kotlin.internal.InlineOnly public actual inline fun <T> Array<out T>.contentDeepToString(): String","{
    return this.contentDeepToString()
}","/**

 * Returns a string representation of the contents of this array as if it is a [List].

 * Nested arrays are treated as lists too.

 * 

 * If any of arrays contains itself on any nesting level that reference

 * is rendered as `""[...]""` to prevent recursion.

 * 

 * @sample samples.collections.Arrays.ContentOperations.contentDeepToString

 */",f16970:m1053
13240,"inline fun <T> withExceptionPrettifier(disabled: Boolean = false, action: () -> T): T","{
    if (disabled) {
        return action()
    }
    return try {
        action()
    } catch (throwable: Throwable) {
        val prettifiers = listOf(ClangModulesDisabledPrettifier)
        throw prettifiers.firstOrNull { it.matches(throwable) }?.prettify(throwable) ?: throwable
    }
}","/**

 * Wraps invocation of [action] into exception handler and makes messages of supported exceptions more user-friendly.

 * Can be optionally [disabled] which is useful when one want to find the root cause of the prettified exception.

 */",f3651:m79
49795,fun configure(action: (T) -> Unit),"{
    val configure = this.configure
    if (configure == null) this.configure = action else this.configure = {
        configure(it)
        action(it)
    }
}","/**

     * Generic configuration that will be invoked when building the target.

     * This configuration is called right after creating the instance and before

     * publishing the target to all subscribers of `kotlin.targets.all {}`

     */",f15961:m213
13535,@kotlin.internal.IntrinsicConstEvaluation public inline operator fun compareTo(other: Byte): Int,this.compareTo(other.toShort()),"/**

     * Compares this value with the specified value for order.

     * Returns zero if this value is equal to the specified other value, a negative number if it's less than other,

     * or a positive number if it's greater than other.

     */",f3686:m949
52039,inline fun <R> ResultWithDiagnostics<R>.valueOr(body: (ResultWithDiagnostics.Failure) -> Nothing): R,"when (this) {
    is ResultWithDiagnostics.Success<R> -> value
    is ResultWithDiagnostics.Failure -> body(this)
}","/**

 * Extracts the result value from the receiver wrapper or run non-returning lambda if receiver represents a Failure

 */",f16426:m585
11117,fun addTo(queue: Packet?): Packet,"{
    this.link = null
    if (queue == null) return this
    var next: Packet = queue
    var peek = next.link
    while (peek != null) {
        next = peek
        peek = next.link
    }
    next.link = this
    return queue
}","/**

     * Add this packet to the end of a work list, and return the work list.

     * @param {Packet} queue the work list to add this packet to

     */",f3500:m1013
13577,public operator fun rangeTo(other: Int): IntRange,"IntRange(this.toInt(), other)",/** Creates a range from this value to the specified [other] value. */,f3686:m1485
52534,"private fun findBackLineTerminator(from: Int, to: Int, testString: CharSequence): Int",(from until to).lastOrNull { lineTerminator.isLineTerminator(testString[it]) } ?: from - 1,"/**

     * Find the first line terminator between [from] (inclusive) and [to] (exclusive) indices.

     * Returns [from - 1] if no terminator found.

     */",f16539:m187
67162,private fun parseValueWithFlags(str: String): ValueWithFlags,"{
    val parts = str.split(""["", limit = 2)
    return if (parts.size > 1) {
        val (value, flags) = parts
        ValueWithFlags(value = value.trim(), flags = flags.trim().removeSuffix(""]"").split("","").map { it.trim() }.filter { it.isNotEmpty() }.toSet())
    } else ValueWithFlags(str)
}","/**

     * `value [flag1, flag2, ...]`

     */",f19108:m429
24952,override fun equals(other: Any?): Boolean,"{
    val o = other as? Scheme ?: return false
    return this.alphaRename().simpleEquals(o.alphaRename())
}","/**

     * Compare to [Scheme] instances for equality. Two [Scheme]s are considered equal if they are

     * [alpha equivalent][https://en.wikipedia.org/wiki/Lambda_calculus#%CE%B1-conversion]. This

     * is accomplished by normalizing both schemes and then comparing them simply for equality.

     * See [alphaRename] for details.

     */",f9236:m207
58653,public infix fun Long.downTo(to: Long): LongProgression,"{
    return LongProgression.fromClosedRange(this, to, -1L)
}","/**

 * Returns a progression from this value down to the specified [to] value with the step -1.

 * 

 * The [to] value should be less than or equal to `this` value.

 * If the [to] value is greater than `this` value the returned progression is empty.

 */",f17092:m1731
64077,@kotlin.internal.IntrinsicConstEvaluation public override fun toShort(): Short,reinterpretAsInt().reinterpretAsShort(),"/**

     * Converts this [Byte] value to [Short].

     *

     * The resulting `Short` value represents the same numerical value as this `Byte`.

     *

     * The least significant 8 bits of the resulting `Short` value are the same as the bits of this `Byte` value,

     * whereas the most significant 8 bits are filled with the sign bit of this value.

     */",f17455:m753
52863,public actual fun Float.isInfinite(): Boolean,this == Float.POSITIVE_INFINITY || this == Float.NEGATIVE_INFINITY,"/**

 * Returns `true` if this value is infinitely large in magnitude.

 */",f16581:m49
20214,public fun <S: KtFunctionLikeSymbol> S.substitute(substitutor: KtSubstitutor): KtFunctionLikeSignature<S>,"withValidityAssertion { analysisSession.signatureSubstitutor.substitute(this, substitutor) }","/**

     * Applies a [substitutor] to the given symbol and return a signature with substituted types.

     *

     * @see KtSubstitutor.substitute

     */",f5793:m89
52651,actual override public fun removeAll(elements: Collection<E>): Boolean,(this as MutableIterable<E>).removeAll { it in elements },"/**

     * Removes all of this collection's elements that are also contained in the specified collection.

     *

     * @return `true` if any of the specified elements was removed from the collection, `false` if the collection was not modified.

     */",f16554:m91
63652,"@SinceKotlin(""1.1"") @kotlin.internal.InlineOnly public actual inline fun minOf(a: Float, b: Float, c: Float): Float","{
    return minOf(a, minOf(b, c))
}","/**

 * Returns the smaller of three values.

 * 

 * If any value is `NaN`, returns `NaN`.

 */",f17406:m695
32773,fun isVersionRequirementTableWrittenCorrectly(version: BinaryVersion): Boolean,isKotlin1Dot4OrLater(version),"/**

 * Before metadata version 1.4, version requirements for nested classes were deserialized incorrectly: the version requirement table was

 * loaded from the outermost class and passed to the nested classes and their members, even though indices of their version requirements

 * were pointing to the other table stored in the nested class (which was not read by deserialization). See KT-25120 for more information.

 */",f11087:m27
58810,public fun <T> Sequence<T>.withIndex(): Sequence<IndexedValue<T>>,"{
    return IndexingSequence(this)
}","/**

 * Returns a sequence that wraps each element of the original sequence

 * into an [IndexedValue] containing the index of that element and the element itself.

 *

 * The operation is _intermediate_ and _stateless_.

 */",f17096:m2327
68283,"private fun getCallExpressionTypeInfoWithoutFinalTypeCheck(callExpression: KtCallExpression, receiver: Receiver?, callOperationNode: ASTNode?, context: ExpressionTypingContext, initialDataFlowInfoForArguments: DataFlowInfo): KotlinTypeInfo","{
    val call = CallMaker.makeCall(receiver, callOperationNode, callExpression)
    val temporaryForFunction = TemporaryTraceAndCache.create(context, ""trace to resolve as function call"", callExpression)
    val (resolveResult, resolvedCall) = getResolvedCallForFunction(call, context.replaceTraceAndCache(temporaryForFunction), CheckArgumentTypesMode.CHECK_VALUE_ARGUMENTS, initialDataFlowInfoForArguments)
    if (resolveResult) {
        val functionDescriptor = resolvedCall?.resultingDescriptor
        temporaryForFunction.commit()
        if (callExpression.valueArgumentList == null && callExpression.lambdaArguments.isEmpty()) {
            val hasValueParameters = functionDescriptor == null || functionDescriptor.valueParameters.size > 0
            context.trace.report(FUNCTION_CALL_EXPECTED.on(callExpression, callExpression, hasValueParameters))
        }
        if (functionDescriptor == null) {
            return noTypeInfo(context)
        }
        if (functionDescriptor is ConstructorDescriptor) {
            val constructedClass = functionDescriptor.constructedClass
            if (DescriptorUtils.isAnnotationClass(constructedClass) && !canInstantiateAnnotationClass(callExpression, context.trace)) {
                val supported = context.languageVersionSettings.supportsFeature(LanguageFeature.InstantiationOfAnnotationClasses)
                if (!supported) context.trace.report(ANNOTATION_CLASS_CONSTRUCTOR_CALL.on(callExpression))
            }
            if (DescriptorUtils.isEnumClass(constructedClass)) {
                context.trace.report(ENUM_CLASS_CONSTRUCTOR_CALL.on(callExpression))
            }
            if (DescriptorUtils.isSealedClass(constructedClass)) {
                context.trace.report(SEALED_CLASS_CONSTRUCTOR_CALL.on(callExpression))
            }
        }
        val type = functionDescriptor.returnType
        val arguments = callExpression.valueArguments
        val resultFlowInfo = resolvedCall.dataFlowInfoForArguments.resultInfo
        var jumpFlowInfo = resultFlowInfo
        var jumpOutPossible = false
        for (argument in arguments) {
            val argTypeInfo = context.trace.get(BindingContext.EXPRESSION_TYPE_INFO, argument.getArgumentExpression())
            if (argTypeInfo != null && argTypeInfo.jumpOutPossible) {
                jumpOutPossible = true
                jumpFlowInfo = argTypeInfo.jumpFlowInfo
                break
            }
        }
        return createTypeInfo(type, resultFlowInfo, jumpOutPossible, jumpFlowInfo)
    }
    val calleeExpression = callExpression.calleeExpression
    if (calleeExpression is KtSimpleNameExpression && callExpression.typeArgumentList == null) {
        val temporaryForVariable = TemporaryTraceAndCache.create(context, ""trace to resolve as variable with 'invoke' call"", callExpression)
        val (notNothing, type) = getVariableType(calleeExpression, receiver, callOperationNode, context.replaceTraceAndCache(temporaryForVariable))
        val qualifier = temporaryForVariable.trace.get(BindingContext.QUALIFIER, calleeExpression)
        if (notNothing && (qualifier == null || qualifier !is PackageQualifier)) {
            callExpression.getResolvedCall(temporaryForVariable.trace.bindingContext).let { (it as? ResolvedCallImpl)?.addStatus(ResolutionStatus.OTHER_ERROR) }
            temporaryForVariable.commit()
            context.trace.report(FUNCTION_EXPECTED.on(calleeExpression, calleeExpression, type ?: ErrorUtils.createErrorType(ErrorTypeKind.ERROR_EXPECTED_TYPE)))
            argumentTypeResolver.analyzeArgumentsAndRecordTypes(BasicCallResolutionContext.create(context, call, CheckArgumentTypesMode.CHECK_VALUE_ARGUMENTS, DataFlowInfoForArgumentsImpl(initialDataFlowInfoForArguments, call)), ResolveArgumentsMode.RESOLVE_FUNCTION_ARGUMENTS)
            return noTypeInfo(context)
        }
    }
    temporaryForFunction.commit()
    return noTypeInfo(context)
}","/**

     * Visits a call expression and its arguments.

     * Determines the result type and data flow information after the call.

     */",f19307:m387
48499,fun findExecutable(buildType: NativeBuildType): Executable?,"findExecutable("""", buildType)",/** Returns an executable with the empty name prefix and the given build type. Returns null if there is no such binary. */,f15652:m121
63420,public actual fun BooleanArray.asList(): List<Boolean>,"{
    return object : AbstractList<Boolean>(), RandomAccess {
        override val size: Int get() = this@asList.size
    
        override fun isEmpty(): Boolean = this@asList.isEmpty()
    
        override fun contains(element: Boolean): Boolean = this@asList.contains(element)
    
        override fun get(index: Int): Boolean = this@asList[index]
    
        override fun indexOf(element: Boolean): Int = this@asList.indexOf(element)
    
        override fun lastIndexOf(element: Boolean): Int = this@asList.lastIndexOf(element)
    }
}","/**

 * Returns a [List] that wraps the original array.

 */",f17396:m407
54697,"@SinceKotlin(""1.3"") @kotlin.internal.InlineOnly @Suppress(""ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS"") public actual inline fun DoubleArray.copyInto(destination: DoubleArray, destinationOffset: Int = 0, startIndex: Int = 0, endIndex: Int = size): DoubleArray","{
    arrayCopy(this.unsafeCast<Array<Double>>(), destination.unsafeCast<Array<Double>>(), destinationOffset, startIndex, endIndex)
    return destination
}","/**

 * Copies this array or its subrange into the [destination] array and returns that array.

 * 

 * It's allowed to pass the same array in the [destination] and even specify the subrange so that it overlaps with the destination range.

 * 

 * @param destination the array to copy to.

 * @param destinationOffset the position in the [destination] array to copy to, 0 by default.

 * @param startIndex the beginning (inclusive) of the subrange to copy, 0 by default.

 * @param endIndex the end (exclusive) of the subrange to copy, size of this array by default.

 * 

 * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of this array indices or when `startIndex > endIndex`.

 * @throws IndexOutOfBoundsException when the subrange doesn't fit into the [destination] array starting at the specified [destinationOffset],

 * or when that index is out of the [destination] array indices range.

 * 

 * @return the [destination] array.

 */",f16713:m1499
63535,internal fun CharArray.copyOfUninitializedElements(newSize: Int): CharArray,"{
    return copyOfUninitializedElements(0, newSize)
}","/**

 * Returns new array which is a copy of the original array with new elements filled with **lateinit** _uninitialized_ values.

 * Attempts to read _uninitialized_ values from this array work in implementation-dependent manner,

 * either throwing exception or returning some kind of implementation-specific default value.

 */",f17396:m3745
9236,private fun buildArgForAppend(argument: IrExpression): IrExpression,"if (argument.type.isNullable()) {
    builder.irBlock { nullableArgToStringType(argument, context.irBuiltIns.stringType.makeNullable(), irNull()) }
} else {
    buildNonNullableArgToString(argument)
}","/** Builds snippet of type String?

     * - ""if(argument==null) null else argument.toString()"" (that is similar to ""argument?.toString()""), if argument's type is nullable.

     * - ""argument.toString()"", otherwise

     * Note: should side effects are possible, temporary val is introduced

     */",f3332:m195
58598,"@Deprecated(""This `contains` operation mixing integer and floating point arguments has ambiguous semantics and is going to be removed."") @DeprecatedSinceKotlin(warningSince = ""1.3"", errorSince = ""1.4"", hiddenSince = ""1.5"") @kotlin.jvm.JvmName(""floatRangeContains"") public operator fun ClosedRange<Float>.contains(value: Byte): Boolean","{
    return contains(value.toFloat())
}","/**

 * Checks if the specified [value] belongs to this range.

 */",f17092:m699
58591,"@SinceKotlin(""1.3"") @kotlin.internal.InlineOnly public inline operator fun IntRange.contains(element: Int?): Boolean","{
    return element != null && contains(element)
}","/**

 * Returns `true` if this range contains the specified [element].

 * 

 * Always returns `false` if the [element] is `null`.

 */",f17092:m565
20167,"public fun KtFile.calculateMetadata(mapping: Multimap<KtElement, PsiElement>): Metadata","withValidityAssertion { analysisSession.metadataCalculator.calculateMetadata(this, mapping) }","/**

     * Calculates metadata that would be generated by the compiler in case this file was compiled to the JVM class file.

     *

     * @param mapping map containing the light elements ([KtLightElement]) for each callable declaration in this file.

     */",f5781:m65
58737,@kotlin.internal.InlineOnly public inline fun <T> Sequence<T>.find(predicate: (T) -> Boolean): T?,"{
    return firstOrNull(predicate)
}","/**

 * Returns the first element matching the given [predicate], or `null` if no such element was found.

 *

 * The operation is _terminal_.

 * 

 * @sample samples.collections.Collections.Elements.find

 */",f17096:m163
58601,"@kotlin.jvm.JvmName(""shortRangeContains"") @SinceKotlin(""1.9"") @WasExperimental(ExperimentalStdlibApi::class) public operator fun OpenEndRange<Short>.contains(value: Byte): Boolean","{
    return contains(value.toShort())
}","/**

 * Checks if the specified [value] belongs to this range.

 */",f17092:m759
20121,"public fun substitution(typeParameter: KtTypeParameterSymbol, type: KtType)","{
    assertIsValidAndAccessible()
    _mapping[typeParameter] = type
}","/**

     * Adds a new [typeParameter] -> [type] substitution to the substitutor which is being built.

     * If there already was a substitution with a [typeParameter], replaces corresponding substitution with a new one.

     */",f5774:m89
57353,public actual operator fun LongArray.plus(elements: Collection<Long>): LongArray,"{
    var index = size
    val result = java.util.Arrays.copyOf(this, index + elements.size)
    for (element in elements) result[index++] = element
    return result
}","/**

 * Returns an array containing all elements of the original array and then all elements of the given [elements] collection.

 */",f16970:m3687
63492,public actual fun ByteArray.copyOf(): ByteArray,"{
    return this.copyOfUninitializedElements(size)
}","/**

 * Returns new array which is a copy of the original array.

 * 

 * @sample samples.collections.Arrays.CopyOfOperations.copyOf

 */",f17396:m2683
45758,fun kotlin(simpleModuleName: String): ExternalModuleDependency,"kotlin(simpleModuleName, null)","/**

     * Creates a dependency to an official Kotlin library with the same version that is configured

     * in [KotlinTopLevelExtensionConfig.coreLibrariesVersion].

     *

     * Note: The created dependency should be manually added to this entity using other methods from this DSL:

     * ```

     * kotlin.sourceSets[""jvmMain""].dependencies {

     *     implementation(kotlin(""stdlib""))

     * }

     * ```

     *

     * The official Kotlin dependencies are always part of the ""org.jetbrains.kotlin"" group and the module name always has prefix: ""kotlin-"".

     *

     * @param simpleModuleName The Kotlin module name that follows after the ""kotlin-"" prefix. For example, for ""kotlin-reflect"":

     * ```

     * implementation(kotlin(""reflect""))

     * // equivalent to

     * implementation(""org.jetbrains.kotlin:kotlin-reflect"")

     * ```

     */",f14927:m513
55715,"public fun Char.equals(other: Char, ignoreCase: Boolean = false): Boolean","{
    if (this == other) return true
    if (!ignoreCase) return false
    val thisUpper = this.uppercaseChar()
    val otherUpper = other.uppercaseChar()
    return thisUpper == otherUpper || thisUpper.lowercaseChar() == otherUpper.lowercaseChar()
}","/**

 * Returns `true` if this character is equal to the [other] character, optionally ignoring character case.

 *

 * Two characters are considered equal ignoring case if `Char.uppercaseChar().lowercaseChar()` on each character produces the same result.

 *

 * @param ignoreCase `true` to ignore character case when comparing characters. By default `false`.

 * @sample samples.text.Chars.equals

 */",f16785:m449
58633,"@kotlin.jvm.JvmName(""intRangeContains"") public operator fun ClosedRange<Int>.contains(value: Short): Boolean","{
    return contains(value.toInt())
}","/**

 * Checks if the specified [value] belongs to this range.

 */",f17092:m1351
63684,internal fun Char.isUpperCaseImpl(): Boolean,"{
    return getLetterType() == 2 || code.isOtherUppercase()
}","/**

 * Returns `true` if this character is an upper case letter, or it has contributory property `Other_Uppercase`.

 */",f17409:m147
59058,"@SinceKotlin(""1.4"") public inline fun CharSequence.runningReduce(operation: (acc: Char, Char) -> Char): List<Char>","{
    if (isEmpty()) return emptyList()
    var accumulator = this[0]
    val result = ArrayList<Char>(length).apply { add(accumulator) }
    for (index in 1 until length) {
        accumulator = operation(accumulator, this[index])
        result.add(accumulator)
    }
    return result
}","/**

 * Returns a list containing successive accumulation values generated by applying [operation] from left to right

 * to each character and current accumulator value that starts with the first character of this char sequence.

 * 

 * Note that `acc` value passed to [operation] function should not be mutated;

 * otherwise it would affect the previous value in resulting list.

 * 

 * @param [operation] function that takes current accumulator value and a character, and calculates the next accumulator value.

 * 

 * @sample samples.collections.Collections.Aggregates.runningReduce

 */",f17097:m4037
58259,@kotlin.internal.InlineOnly public inline infix fun or(other: ULong): ULong,ULong(this.data or other.data),/** Performs a bitwise OR operation between the two values. */,f17066:m543
63629,"@SinceKotlin(""1.1"") @kotlin.internal.InlineOnly public actual inline fun maxOf(a: Int, b: Int, c: Int): Int","{
    return maxOf(a, maxOf(b, c))
}","/**

 * Returns the greater of three values.

 */",f17406:m219
58482,"@kotlin.internal.HidesMembers public inline fun <K, V> Map<out K, V>.forEach(action: (Map.Entry<K, V>) -> Unit): Unit","{
    for (element in this) action(element)
}","/**

 * Performs the given [action] on each entry.

 */",f17089:m421
55747,"@ExperimentalStdlibApi @SinceKotlin(""1.9"") @InlineOnly public inline fun String.hexToUByte(format: HexFormat = HexFormat.Default): UByte",hexToByte(format).toUByte(),"/**

 * Parses an `UByte` value from this string using the specified [format].

 *

 * Note that only [HexFormat.NumberHexFormat] affects parsing,

 * and parsing is performed in case-insensitive manner.

 *

 * @param format the [HexFormat] to use for parsing, [HexFormat.Default] by default.

 *

 * @throws IllegalArgumentException if this string does not comply with the specified [format].

 */",f16790:m213
63432,"@Deprecated(""Use Kotlin compiler 1.4 to avoid deprecation warning."") @SinceKotlin(""1.1"") @DeprecatedSinceKotlin(hiddenSince = ""1.4"") public infix fun LongArray.contentEquals(other: LongArray): Boolean","{
    return this.contentEquals(other)
}","/**

 * Checks if the two specified arrays are *structurally* equal to one another.

 * 

 * Two arrays are considered structurally equal if they have the same size, and elements at corresponding indices are equal.

 * 

 * @param other the array to compare with this array.

 * @return `true` if the two arrays are structurally equal, `false` otherwise.

 * 

 * @sample samples.collections.Arrays.ContentOperations.intArrayContentEquals

 */",f17396:m797
58663,public infix fun IntProgression.step(step: Int): IntProgression,"{
    checkStepIsPositive(step > 0, step)
    return IntProgression.fromClosedRange(first, last, if (this.step > 0) step else -step)
}","/**

 * Returns a progression that goes over the same range with the given step.

 * 

 * @sample samples.ranges.Ranges.stepInt

 */",f17092:m1913
58001,"@SinceKotlin(""1.5"") @WasExperimental(ExperimentalUnsignedTypes::class, ExperimentalStdlibApi::class) @kotlin.internal.InlineOnly public inline fun ULong.takeHighestOneBit(): ULong",toLong().takeHighestOneBit().toULong(),"/**

 * Returns a number having a single bit set in the position of the most significant set bit of this [ULong] number,

 * or zero, if this number is zero.

 */",f17056:m213
54682,"@SinceKotlin(""1.4"") public actual fun <T> Array<out T>?.contentToString(): String","{
    return this?.joinToString("", "", ""["", ""]"") ?: ""null""
}","/**

 * Returns a string representation of the contents of the specified array as if it is [List].

 * 

 * @sample samples.collections.Arrays.ContentOperations.contentToString

 */",f16713:m1031
31049,fun mapKotlinToJava(kotlinFqName: FqNameUnsafe): ClassId?,"when {
    isKotlinFunctionWithBigArity(kotlinFqName, NUMBERED_FUNCTION_PREFIX) -> FUNCTION_N_CLASS_ID
    isKotlinFunctionWithBigArity(kotlinFqName, NUMBERED_SUSPEND_FUNCTION_PREFIX) -> FUNCTION_N_CLASS_ID
    isKotlinFunctionWithBigArity(kotlinFqName, NUMBERED_K_FUNCTION_PREFIX) -> K_FUNCTION_CLASS_ID
    isKotlinFunctionWithBigArity(kotlinFqName, NUMBERED_K_SUSPEND_FUNCTION_PREFIX) -> K_FUNCTION_CLASS_ID
    else -> kotlinToJava[kotlinFqName]
}","/**

     * E.g.

     * - kotlin.Throwable -> java.lang.Throwable

     * - kotlin.Int -> java.lang.Integer

     * - kotlin.Int.Companion -> kotlin.jvm.internal.IntCompanionObject

     * - kotlin.Nothing -> java.lang.Void

     * - kotlin.IntArray -> null

     * - kotlin.Function3 -> kotlin.jvm.functions.Function3

     * - kotlin.coroutines.SuspendFunction3 -> kotlin.jvm.functions.Function4

     * - kotlin.Function42 -> kotlin.jvm.functions.FunctionN

     * - kotlin.coroutines.SuspendFunction42 -> kotlin.jvm.functions.FunctionN

     * - kotlin.reflect.KFunction3 -> kotlin.reflect.KFunction

     * - kotlin.reflect.KSuspendFunction3 -> kotlin.reflect.KFunction

     * - kotlin.reflect.KFunction42 -> kotlin.reflect.KFunction

     * - kotlin.reflect.KSuspendFunction42 -> kotlin.reflect.KFunction

     */",f10819:m255
58997,"public inline fun <R> CharSequence.mapIndexed(transform: (index: Int, Char) -> R): List<R>","{
    return mapIndexedTo(ArrayList<R>(length), transform)
}","/**

 * Returns a list containing the results of applying the given [transform] function

 * to each character and its index in the original char sequence.

 * @param [transform] function that takes the index of a character and the character itself

 * and returns the result of the transform applied to the character.

 */",f17097:m1955
57048,@kotlin.internal.InlineOnly public inline fun print(message: Float),"{
    System.out.print(message)
}",/** Prints the given [message] to the standard output stream. */,f16953:m117
23506,"override fun rewritePluginDefinedOperationMarker(v: InstructionAdapter, reifiedInsn: AbstractInsnNode, instructions: InsnList, type: IrType): Boolean","{
    val operationTypeStr = (reifiedInsn.next as LdcInsnNode).cst as String
    if (!operationTypeStr.startsWith(magicMarkerStringPrefix)) return false
    val operationType = if (operationTypeStr.endsWith(""withModule"")) {
        val aload = reifiedInsn.next.next.next as VarInsnNode
        val storedVar = aload.`var`
        instructions.remove(aload.next)
        instructions.remove(aload)
        IntrinsicType.WithModule(storedVar)
    } else IntrinsicType.Simple
    instructions.remove(reifiedInsn.next.next.next)
    instructions.remove(reifiedInsn.next.next)
    instructions.remove(reifiedInsn.next)
    instructions.remove(reifiedInsn)
    generateSerializerForType(type, v, operationType)
    return true
}","/**

     * Instructions at the moment of call:

     *

     * -3: iconst(6) // TYPE_OF

     * -2: aconst(typeParamName) // TYPE_OF

     * -1: invokestatic(reifiedOperationMarker)

     * < instructions from instructionAdapter will be inserted here by inliner >

     *  0 (stubConstNull): aconst(null)

     * 1: aconst(kotlinx.serialization.serializer.<operationType>)

     * 2: invokestatic(voidMagicApiCall)

     * 3: aload(moduleVar) // if withModule

     * 4: swap // if withModule

     * 5: invokestatic(kotlinx.serialization.serializer(module?, kType)

     *

     * We need to remove instructions from 0 to 5

     * Instructions -1, -2 and -3 would be removed by inliner.

     */",f8983:m375
58932,public inline fun CharSequence.last(predicate: (Char) -> Boolean): Char,"{
    for (index in this.indices.reversed()) {
        val element = this[index]
        if (predicate(element)) return element
    }
    throw NoSuchElementException(""Char sequence contains no character matching the predicate."")
}","/**

 * Returns the last character matching the given [predicate].

 * 

 * @throws NoSuchElementException if no such character is found.

 * 

 * @sample samples.text.Strings.last

 */",f17097:m381
58224,@kotlin.internal.InlineOnly public inline operator fun plus(other: UByte): ULong,this.plus(other.toULong()),/** Adds the other value to this value. */,f17066:m147
56158,"@kotlin.internal.InlineOnly @SinceKotlin(""1.1"") public inline fun <T> T.also(block: (T) -> Unit): T","{
    contract { callsInPlace(block, InvocationKind.EXACTLY_ONCE) }
    block(this)
    return this
}","/**

 * Calls the specified function [block] with `this` value as its argument and returns `this` value.

 *

 * For detailed usage information see the documentation for [scope functions](https://kotlinlang.org/docs/reference/scope-functions.html#also).

 */",f16833:m173
56583,"public fun <T> sortedSetOf(comparator: Comparator<in T>, vararg elements: T): java.util.TreeSet<T>",elements.toCollection(java.util.TreeSet<T>(comparator)),"/**

 * Returns a new [java.util.SortedSet] with the given [comparator] and elements.

 */",f16911:m119
13480,@kotlin.internal.IntrinsicConstEvaluation public inline operator fun compareTo(other: Float): Int,this.toFloat().compareTo(other),"/**

     * Compares this value with the specified value for order.

     * Returns zero if this value is equal to the specified other value, a negative number if it's less than other,

     * or a positive number if it's greater than other.

     */",f3686:m155
14800,"@Deprecated(""Use Kotlin compiler 1.4 to avoid deprecation warning."") @SinceKotlin(""1.3"") @DeprecatedSinceKotlin(hiddenSince = ""1.4"") @ExperimentalUnsignedTypes public fun UIntArray.contentToString(): String","{
    return this.contentToString()
}","/**

 * Returns a string representation of the contents of the specified array as if it is [List].

 * 

 * @sample samples.collections.Arrays.ContentOperations.contentToString

 */",f3828:m487
58953,"public inline fun CharSequence.filterIndexed(predicate: (index: Int, Char) -> Boolean): CharSequence","{
    return filterIndexedTo(StringBuilder(), predicate)
}","/**

 * Returns a char sequence containing only those characters from the original char sequence that match the given [predicate].

 * @param [predicate] function that takes the index of a character and the character itself

 * and returns the result of predicate evaluation on the character.

 * 

 * @sample samples.collections.Collections.Filtering.filterIndexed

 */",f17097:m873
63591,public actual fun ByteArray.toTypedArray(): Array<Byte>,"{
    return Array(size) { index -> this[index] }
}","/**

 * Returns a *typed* object array containing all of the elements of this primitive array.

 */",f17396:m5153
54812,"@SinceKotlin(""1.4"") public actual fun <T: Comparable<T>> maxOf(a: T, vararg other: T): T","{
    var max = a
    for (e in other) max = maxOf(max, e)
    return max
}","/**

 * Returns the greater of the given values.

 * 

 * If there are multiple equal maximal values, returns the first of them.

 */",f16714:m301
54712,public actual fun LongArray.copyOf(newSize: Int): LongArray,"{
    require(newSize >= 0) { ""Invalid new array size: $newSize."" }
    return withType(""LongArray"", arrayCopyResize(this, newSize, 0L))
}","/**

 * Returns new array which is a copy of the original array, resized to the given [newSize].

 * The copy is either truncated or padded at the end with zero values if necessary.

 * 

 * - If [newSize] is less than the size of the original array, the copy array is truncated to the [newSize].

 * - If [newSize] is greater than the size of the original array, the extra elements in the copy array are filled with zero values.

 * 

 * @sample samples.collections.Arrays.CopyOfOperations.resizedPrimitiveCopyOf

 */",f16713:m1901
58057,@kotlin.internal.InlineOnly public inline infix fun xor(other: UShort): UShort,UShort(this.data xor other.data),/** Performs a bitwise XOR operation between the two values. */,f17058:m513
10015,"inline fun <T: PhaseContext, R> useContext(newContext: T, action: (PhaseEngine<T>) -> R): R","{
    val newEngine = PhaseEngine(phaseConfig, phaserState, newContext)
    try {
        return action(newEngine)
    } finally {
        newContext.dispose()
    }
}","/**

     * Switch to a more specific phase engine.

     */",f3404:m217
54785,"@Deprecated(""Use other sorting functions from the Standard Library"") @DeprecatedSinceKotlin(warningSince = ""1.6"") @kotlin.internal.InlineOnly public inline fun FloatArray.sort(noinline comparison: (a: Float, b: Float) -> Int): Unit","{
    nativeSort(comparison)
}","/**

 * Sorts the array in-place according to the order specified by the given [comparison] function.

 */",f16713:m3637
15806,"protected fun doTestByKtFile(ktFile: KtFile, testServices: TestServices)","{
    analyseForTest(ktFile) {
        val actualText = with(SymbolByFqName.getSymbolDataFromFile(testDataPath)) {
            val classSymbol = toSymbols(ktFile).singleOrNull() as? KtNamedClassOrObjectSymbol ?: error(""Expected a single named class to be specified."")
            classSymbol.getSealedClassInheritors().joinToString(""\n\n"") { inheritor ->
                val declarationRenderer = KtDeclarationRendererForSource.WITH_QUALIFIED_NAMES.with { typeRenderer = KtTypeRendererForSource.WITH_QUALIFIED_NAMES.with { usualClassTypeRenderer = KtUsualClassTypeRenderer.AS_FULLY_EXPANDED_CLASS_TYPE_WITH_TYPE_ARGUMENTS } }
                ""${inheritor.classIdIfNonLocal!!}\n${inheritor.render(declarationRenderer)}""
            }
        }
        testServices.assertions.assertEqualsToTestDataFileSibling(actualText)
    }
}","/**

     * [ktFile] may be a fake file for dangling module tests.

     */",f3986:m47
13355,fun String.quoteAsKotlinLiteral(): KotlinExpression,"buildString {
    append('""')
    this@quoteAsKotlinLiteral.forEach { c -> when (c) {
        in charactersAllowedInKotlinStringLiterals -> append(c)
        '$' -> append(""\\$"")
        else -> append(""\\u"" + ""%04X"".format(c.code))
    } }
    append('""')
}","/**

 * Returns the expression to be parsed by Kotlin as string literal with given contents,

 * i.e. transforms `foo$bar` to `""foo\$bar""`.

 */",f3663:m125
56547,"@kotlin.internal.InlineOnly public inline fun Timer.scheduleAtFixedRate(delay: Long, period: Long, crossinline action: TimerTask.() -> Unit): TimerTask","{
    val task = timerTask(action)
    scheduleAtFixedRate(task, delay, period)
    return task
}","/**

 * Schedules an [action] to be executed periodically, starting after the specified [delay] (expressed

 * in milliseconds) and with the interval of [period] milliseconds between the start of the previous task

 * and the start of the next one.

 */",f16894:m111
56494,"@SinceKotlin(""1.2"") public fun String.toBigIntegerOrNull(radix: Int): java.math.BigInteger?","{
    checkRadix(radix)
    val length = this.length
    when (length) {
        0 -> return null
        1 -> if (digitOf(this[0], radix) < 0) return null
        else -> {
            val start = if (this[0] == '-') 1 else 0
            for (index in start until length) {
                if (digitOf(this[index], radix) < 0) return null
            }
        }
    }
    return toBigInteger(radix)
}","/**

 * Parses the string as a [java.math.BigInteger] number and returns the result

 * or `null` if the string is not a valid representation of a number.

 *

 * @throws IllegalArgumentException when [radix] is not a valid radix for string to number conversion.

 */",f16885:m353
53097,"@SinceKotlin(""1.4"") @Suppress(""ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS"") public actual fun CharArray.concatToString(startIndex: Int = 0, endIndex: Int = this.size): String","{
    AbstractList.checkBoundsIndexes(startIndex, endIndex, this.size)
    var result = """"
    for (index in startIndex until endIndex) {
        result += this[index]
    }
    return result
}","/**

 * Concatenates characters in this [CharArray] or its subrange into a String.

 *

 * @param startIndex the beginning (inclusive) of the subrange of characters, 0 by default.

 * @param endIndex the end (exclusive) of the subrange of characters, size of this array by default.

 *

 * @throws IndexOutOfBoundsException if [startIndex] is less than zero or [endIndex] is greater than the size of this array.

 * @throws IllegalArgumentException if [startIndex] is greater than [endIndex].

 */",f16617:m109
63497,public actual fun DoubleArray.copyOf(): DoubleArray,"{
    return this.copyOfUninitializedElements(size)
}","/**

 * Returns new array which is a copy of the original array.

 * 

 * @sample samples.collections.Arrays.CopyOfOperations.copyOf

 */",f17396:m2773
58986,public fun CharSequence.toSet(): Set<Char>,"{
    return when (length) {
        0 -> emptySet()
        1 -> setOf(this[0])
        else -> toCollection(LinkedHashSet<Char>(mapCapacity(length.coerceAtMost(128))))
    }
}","/**

 * Returns a [Set] of all characters.

 * 

 * The returned set preserves the element iteration order of the original char sequence.

 */",f17097:m1655
54647,public actual fun BooleanArray.elementAt(index: Int): Boolean,"{
    return elementAtOrElse(index) { throw IndexOutOfBoundsException(""index: $index, size: $size}"") }
}","/**

 * Returns an element at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this array.

 * 

 * @sample samples.collections.Collections.Elements.elementAt

 */",f16713:m163
15389,@Test fun expm1_D(),"{
    assertTrue(""Should return NaN"", Double.isNaN(expm1(Double.NaN)))
    assertEquals(""Should return POSITIVE_INFINITY"", Double.POSITIVE_INFINITY, expm1(Double.POSITIVE_INFINITY), 0.0)
    assertEquals(""Should return -1.0"", -1.0, expm1(Double.NEGATIVE_INFINITY), 0.0)
    assertEquals(0.0.toBits(), expm1(0.0).toBits())
    assertEquals(+0.0.toBits(), expm1(+0.0).toBits())
    assertEquals((-0.0).toBits(), expm1(-0.0).toBits())
    assertEquals(""Should return -9.999950000166666E-6"", -9.999950000166666E-6, expm1(-0.00001))
    assertEquals(""Should return 1.0145103074469635E60"", 1.0145103074469635E60, expm1(138.16951162), 0.0)
    assertEquals(""Should return POSITIVE_INFINITY"", Double.POSITIVE_INFINITY, expm1(123456789123456789123456789.4521584223), 0.0)
    assertEquals(""Should return POSITIVE_INFINITY"", Double.POSITIVE_INFINITY, expm1(Double.MAX_VALUE), 0.0)
    assertEquals(""Should return MIN_VALUE"", Double.MIN_VALUE, expm1(Double.MIN_VALUE), 0.0)
}","/**

     * Tests kotlin.math.expm1(Double)

     */",f3868:m533
56032,"public fun <K, V> MutableMap<in K, in V>.putAll(pairs: Array<out Pair<K, V>>): Unit","{
    for ((key, value) in pairs) {
        put(key, value)
    }
}","/**

 * Puts all the given [pairs] into this [MutableMap] with the first component in the pair being the key and the second the value.

 */",f16823:m851
58655,public infix fun Short.downTo(to: Long): LongProgression,"{
    return LongProgression.fromClosedRange(this.toLong(), to, -1L)
}","/**

 * Returns a progression from this value down to the specified [to] value with the step -1.

 * 

 * The [to] value should be less than or equal to `this` value.

 * If the [to] value is greater than `this` value the returned progression is empty.

 */",f17092:m1771
46108,inline fun <reified T> T.closureSequence(crossinline edges: (T) -> Iterable<T>): Sequence<T>,"{
    val initialEdges = edges(this)
    val resolveDequeue = if (initialEdges is Collection && initialEdges.isEmpty()) return emptySequence() else createDequeue<T>()
    return sequence {
        val results = HashSet<T>()
        results.add(this@closureSequence)
        initialEdges.forEach { initialEdge -> if (results.add(initialEdge)) {
            yield(initialEdge)
            resolveDequeue.add(initialEdge)
        } }
        while (resolveDequeue.isNotEmpty()) { edges(resolveDequeue.removeAt(0)).forEach { edge -> if (results.add(edge)) {
            yield(edge)
            resolveDequeue.add(edge)
        } } }
    }
}","/**

 * Same as [closure], but returns a lazy sequence instead

 */",f15014:m73
58660,public fun IntProgression.reversed(): IntProgression,"{
    return IntProgression.fromClosedRange(last, first, -step)
}","/**

 * Returns a progression that goes over the same range in the opposite direction with the same step.

 */",f17092:m1871
64080,@kotlin.internal.IntrinsicConstEvaluation public override fun toFloat(): Float,wasm_f32_convert_i32_s(this.toInt()),"/**

     * Converts this [Byte] value to [Float].

     *

     * The resulting `Float` value represents the same numerical value as this `Byte`.

     */",f17455:m825
25000,"fun visitCall(call: Node, target: Node, arguments: List<Node>)","restartable(call) { bindings, currentApplier, callBindingsOf ->
    val targetCallBindings = callBindingsOf(target) ?: run {
        errorReporter.log(call, ""Cannot find target"")
        return@restartable
    }
    val parameters = arguments.map { callBindingsOf(it) }
    if (parameters.any { it == null }) {
        errorReporter.log(call, ""Cannot determine a parameter scheme"")
        return@restartable
    }
    val result = if (targetCallBindings.result != null) {
        callBindingsOf(call)
    } else null
    val callBinding = CallBindings(currentApplier, parameters = parameters.filterNotNull(), result, anyParameters = false)
    bindings.unify(call, callBinding, targetCallBindings)
    if (callBinding.parameters.size == arguments.size) { arguments.forEachIndexed { index, argument -> if (nodeAdapter.kindOf(argument) == NodeKind.Lambda) {
        val parameter = callBinding.parameters[index]
        val lambdaTarget = parameter.target
        if (lambdaTarget.token == null) {
            bindings.unify(lambdaTarget, currentApplier)
        }
    } } }
    for ((parameterBinding, argument) in callBinding.parameters.zip(arguments)) {
        if (nodeAdapter.kindOf(argument) == NodeKind.Lambda && parameterBinding.target.token != null) {
            val lambdaScheme = argument.toLazyScheme()
            if (lambdaScheme.target.token == null) {
                lambdaScheme.bindings.unify(lambdaScheme.target, parameterBinding.target)
            }
        }
    }
}","/**

     * Infer the scheme of the container the target and the arguments of the call. This also infers

     * a scheme for the call when it is used as an argument or variable initializer.

     */",f9239:m771
57020,public fun BufferedReader.lineSequence(): Sequence<String>,LinesSequence(this).constrainOnce(),"/**

 * Returns a sequence of corresponding file lines.

 *

 * *Note*: the caller must close the underlying `BufferedReader`

 * when the iteration is finished, as the user may not complete the iteration loop (e.g. using a method like find() or any() on the iterator

 * may terminate the iteration early).

 *

 * We suggest you try the method [useLines] instead which closes the stream when the processing is complete.

 *

 * @return a sequence of corresponding file lines. The sequence returned can be iterated only once.

 */",f16950:m127
53303,actual override fun add(element: E): Boolean,"{
    checkIsMutable()
    add(size, element)
    return true
}","/**

     * Adds the specified element to the end of this list.

     *

     * @return `true` because the list is always modified as the result of this operation.

     */",f16655:m73
10143,"@Suppress(""unused"") fun exec(stdout: Appendable, stderr: Appendable, args: Array<String>): Int","{
    return execImpl(KlibToolOutput(stdout, stderr), args)
}","/**

 * This entry point is used in various KLIB dumping tests: dumping IR, dumping metadata, dumping signatures, etc.

 */",f3435:m21
10442,override fun addToGraph(),"{
    v1.addConstraint(this)
    v2.addConstraint(this)
    direction = Direction.NONE
}","/**

   * Add this constraint to the constraint graph

   */",f3476:m643
15035,"@SinceKotlin(""1.4"") public actual fun maxOf(a: Double, vararg other: Double): Double","{
    var max = a
    for (e in other) max = maxOf(max, e)
    return max
}","/**

 * Returns the greater of the given values.

 * 

 * If any value is `NaN`, returns `NaN`.

 */",f3836:m427
57132,public inline fun measureTimeMillis(block: () -> Unit): Long,"{
    contract { callsInPlace(block, InvocationKind.EXACTLY_ONCE) }
    val start = System.currentTimeMillis()
    block()
    return System.currentTimeMillis() - start
}","/**

 * Executes the given [block] and returns elapsed time in milliseconds.

 *

 * @sample samples.system.Timing.measureBlockTimeMillis

 */",f16963:m21
58965,public fun String.take(n: Int): String,"{
    require(n >= 0) { ""Requested character count $n is less than zero."" }
    return substring(0, n.coerceAtMost(length))
}","/**

 * Returns a string containing the first [n] characters from this string, or the entire string if this string is shorter.

 * 

 * @throws IllegalArgumentException if [n] is negative.

 * 

 * @sample samples.text.Strings.take

 */",f17097:m1125
59040,"@SinceKotlin(""1.4"") @OptIn(kotlin.experimental.ExperimentalTypeInference::class) @OverloadResolutionByLambdaReturnType @kotlin.internal.InlineOnly public inline fun <R> CharSequence.minOfWithOrNull(comparator: Comparator<in R>, selector: (Char) -> R): R?","{
    if (isEmpty()) return null
    var minValue = selector(this[0])
    for (i in 1 .. lastIndex) {
        val v = selector(this[i])
        if (comparator.compare(minValue, v) > 0) {
            minValue = v
        }
    }
    return minValue
}","/**

 * Returns the smallest value according to the provided [comparator]

 * among all values produced by [selector] function applied to each character in the char sequence or `null` if there are no characters.

 */",f17097:m3379
16573,private fun FirElement.getFallbackCompoundCalleeName(): Name?,"{
    val psi = source.psi as? KtOperationExpression ?: return null
    val operationReference = psi.operationReference
    return operationReference.getAssignmentOperationName() ?: operationReference.getReferencedNameAsName()
}","/**

     * If the callee reference is not a [FirResolvedNamedReference], we can get the compound callee name from the source instead. For

     * example, if the callee reference is a [FirErrorNamedReference] with an unresolved name `plusAssign`, the operation element type from

     * the source will be `KtTokens.PLUSEQ`, which can be transformed to `plusAssign`.

     */",f4133:m377
56604,"internal actual fun <T> arrayOfNulls(reference: Array<T>, size: Int): Array<T>","{
    @Suppress(""UNCHECKED_CAST"") return java.lang.reflect.Array.newInstance(reference.javaClass.componentType, size) as Array<T>
}",/** Internal unsafe construction of array based on reference array type */,f16914:m81
58149,@kotlin.internal.InlineOnly public inline operator fun minus(other: UByte): UInt,this.minus(other.toUInt()),/** Subtracts the other value from this value. */,f17063:m173
63508,public actual fun <T> Array<T>.copyOf(newSize: Int): Array<T?>,"{
    return this.copyOfNulls(newSize)
}","/**

 * Returns new array which is a copy of the original array, resized to the given [newSize].

 * The copy is either truncated or padded at the end with `null` values if necessary.

 * 

 * - If [newSize] is less than the size of the original array, the copy array is truncated to the [newSize].

 * - If [newSize] is greater than the size of the original array, the extra elements in the copy array are filled with `null` values.

 * 

 * @sample samples.collections.Arrays.CopyOfOperations.resizingCopyOf

 */",f17396:m3035
55963,"@SinceKotlin(""1.1"") public fun <T, K, M: MutableMap<in K, Int>> Grouping<T, K>.eachCountTo(destination: M): M","foldTo(destination, 0) { acc, _ -> acc + 1 }","/**

 * Groups elements from the [Grouping] source by key and counts elements in each group to the given [destination] map.

 *

 * If the [destination] map already has a value corresponding to the key of some group,

 * that value is used as an initial value of the counter for that group.

 *

 * @return the [destination] map associating the key of each group with the count of elements in the group.

 *

 * @sample samples.collections.Grouping.groupingByEachCount

 */",f16820:m489
13547,@kotlin.internal.IntrinsicConstEvaluation public inline operator fun minus(other: Byte): Int,this.toInt() - other.toInt(),/** Subtracts the other value from this value. */,f3686:m1117
63737,public actual fun println(),"{
    printImpl(null, useErrorStream = false, newLine = true)
}",/** Prints the line separator to the standard output stream. */,f17418:m157
13495,@kotlin.internal.IntrinsicConstEvaluation public inline operator fun times(other: Short): Int,this.toInt() * other.toInt(),/** Multiplies this value by the other value. */,f3686:m321
59090,"@SinceKotlin(""1.5"") @WasExperimental(ExperimentalUnsignedTypes::class) @kotlin.internal.InlineOnly public inline fun maxOf(a: ULong, b: ULong, c: ULong): ULong","{
    return maxOf(a, maxOf(b, c))
}","/**

 * Returns the greater of three values.

 */",f17098:m129
13830,"@Suppress(""NOTHING_TO_INLINE"") @ExperimentalNativeApi public inline fun assert(value: Boolean)","{
    assert(value) { ""Assertion failed"" }
}","/**

 * Throws an [AssertionError] if the [value] is false

 * and runtime assertions have been enabled during compilation.

 */",f3687:m19
54690,"@SinceKotlin(""1.4"") public actual fun CharArray?.contentToString(): String","{
    return this?.joinToString("", "", ""["", ""]"") ?: ""null""
}","/**

 * Returns a string representation of the contents of the specified array as if it is [List].

 * 

 * @sample samples.collections.Arrays.ContentOperations.contentToString

 */",f16713:m1191
15046,"@SinceKotlin(""1.1"") @kotlin.internal.InlineOnly public actual inline fun minOf(a: Int, b: Int, c: Int): Int","{
    return minOf(a, minOf(b, c))
}","/**

 * Returns the smaller of three values.

 */",f3836:m659
56144,public fun <T: Comparable<T>> reverseOrder(): Comparator<T>,"@Suppress(""UNCHECKED_CAST"") (ReverseOrderComparator as Comparator<T>)","/**

 * Returns a comparator that compares [Comparable] objects in reversed natural order.

 *

 * The natural order of a `Comparable` type here means the order established by its `compareTo` function.

 *

 * @sample samples.comparisons.Comparisons.nullsFirstLastWithComparator

 */",f16832:m575
16472,"fun getTopLevelCallableSymbols(callableId: CallableId, callableFiles: Collection<KtFile>?): List<FirCallableSymbol<*>>","{
    if (!allowKotlinPackage && callableId.packageName.isKotlinPackage()) return emptyList()
    return callablesByCallableId.getValue(callableId, callableFiles)
}","/**

     * [callableFiles] are the [KtFile]s which contain callables of the given package and name. If already known, they can be provided to

     * avoid index accesses.

     */",f4120:m249
58917,"@kotlin.internal.InlineOnly public inline fun CharSequence.elementAtOrElse(index: Int, defaultValue: (Int) -> Char): Char","{
    contract { callsInPlace(defaultValue, InvocationKind.AT_MOST_ONCE) }
    return if (index in indices) get(index) else defaultValue(index)
}","/**

 * Returns a character at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this char sequence.

 * 

 * @sample samples.collections.Collections.Elements.elementAtOrElse

 */",f17097:m51
16484,private fun searchInheritors(firClass: FirClass): List<ClassId>,"{
    val ktClass = firClass.psi as? KtClass ?: return emptyList()
    val ktModule = when (val classKtModule = firClass.llFirModuleData.ktModule) {
        is KtDanglingFileModule -> classKtModule.contextModule
        else -> classKtModule
    }
    val scope = if (firClass.isExpect) {
        val refinementDependents = KotlinModuleDependentsProvider.getInstance(project).getRefinementDependents(ktModule)
        GlobalSearchScope.union(refinementDependents.map { it.contentScope } + ktModule.contentScope)
    } else {
        ktModule.contentScope
    }
    return searchInScope(ktClass, firClass.classId, scope)
}","/**

     * Some notes about the search:

     *

     *  - A Java class cannot legally extend a sealed Kotlin class (even in the same package), so we don't need to search for Java class

     *    inheritors.

     *  - Technically, we could use a package scope to narrow the search, but the search is already sufficiently narrow because it uses

     *    supertype indices and is confined to the current `KtModule` in most cases (except for 'expect' classes). Finding a `PsiPackage`

     *    for a `PackageScope` is not cheap, hence the decision to avoid it. If a `PackageScope` is needed in the future, it'd be best to

     *    extract a `PackageNameScope` which operates just with the qualified package name, to avoid `PsiPackage`. (At the time of writing,

     *    this is possible with the implementation of `PackageScope`.)

     *  - We ignore local classes to avoid lazy resolve contract violations.

     *    See KT-63795.

     *  - For `expect` declarations, the search scope includes all modules with a dependsOn dependency on the containing module.

     *    At the same time, `actual` declarations are restricted to the same module and require no special handling.

     *    See KT-45842.

     *  - KMP libraries are not yet supported.

     *    See KT-65591.

     */",f4122:m107
9523,fun createImmutableBlob(value: IrConst<String>): LLVMValueRef,"{
    val args = value.value.map { llvm.int8(it.code.toByte()) }
    return createConstKotlinArray(context.ir.symbols.immutableBlob.owner, args)
}","/**

     * Creates static instance of `konan.ImmutableByteArray` with given values of elements.

     *

     * @param args data for constant creation.

     */",f3365:m225
58075,@kotlin.internal.InlineOnly public inline operator fun compareTo(other: UShort): Int,this.toInt().compareTo(other.toInt()),"/**

     * Compares this value with the specified value for order.

     * Returns zero if this value is equal to the specified other value, a negative number if it's less than other,

     * or a positive number if it's greater than other.

     */",f17059:m99
63474,"@SinceKotlin(""1.4"") public actual fun ByteArray?.contentToString(): String","{
    return this?.joinToString("", "", ""["", ""]"") ?: ""null""
}","/**

 * Returns a string representation of the contents of the specified array as if it is [List].

 * 

 * @sample samples.collections.Arrays.ContentOperations.contentToString

 */",f17396:m2037
22027,private fun KtDotQualifiedExpression.fqNameSegments(): List<String>?,"{
    val qualifiers = generateSequence(this as KtExpression) { (it as? KtDotQualifiedExpression)?.receiverExpression }.map { (it as? KtDotQualifiedExpression)?.selectorExpression ?: it }.toList().asReversed()
    val qualifyingReferences = qualifiers.mapIndexed { index, qualifier ->
        if (qualifier is KtCallExpression && index != qualifiers.lastIndex) return null
        qualifier.referenceExpression() as? KtNameReferenceExpression ?: return null
    }
    return qualifyingReferences.map { it.getReferencedName() }
}","/**

     * Returns the segments of a qualified access PSI. For example, given `foo.bar.OuterClass.InnerClass`, this returns `[""foo"", ""bar"",

     * ""OuterClass"", ""InnerClass""]`.

     */",f8681:m1433
45641,fun arguments(action: Action<KaptArguments>),"{
    arguments { action.execute(this) }
}","/**

     * Configures the [KaptArguments] used for annotation processing.

     */",f14908:m243
55663,"@ExperimentalStdlibApi @SinceKotlin(""1.9"") public fun Byte.toHexString(format: HexFormat = HexFormat.Default): String","{
    val digits = if (format.upperCase) UPPER_CASE_HEX_DIGITS else LOWER_CASE_HEX_DIGITS
    val numberFormat = format.number
    if (numberFormat.isDigitsOnly) {
        val charArray = CharArray(2)
        val value = this.toInt()
        charArray[0] = digits[(value shr 4) and 0xF]
        charArray[1] = digits[value and 0xF]
        return if (numberFormat.removeLeadingZeros) charArray.concatToString(startIndex = (countLeadingZeroBits() shr 2).coerceAtMost(1)) else charArray.concatToString()
    }
    return toLong().toHexStringImpl(numberFormat, digits, bits = 8)
}","/**

 * Formats this `Byte` value using the specified [format].

 *

 * Note that only [HexFormat.upperCase] and [HexFormat.NumberHexFormat] affect formatting.

 *

 * @param format the [HexFormat] to use for formatting, [HexFormat.Default] by default.

 */",f16779:m1207
57252,"public fun CharArray.binarySearch(element: Char, fromIndex: Int = 0, toIndex: Int = size): Int","{
    return java.util.Arrays.binarySearch(this, fromIndex, toIndex, element)
}","/**

 * Searches the array or the range of the array for the provided [element] using the binary search algorithm.

 * The array is expected to be sorted, otherwise the result is undefined.

 * 

 * If the array contains multiple elements equal to the specified [element], there is no guarantee which one will be found.

 * 

 * @param element the to search for.

 * @param fromIndex the start of the range (inclusive) to search in, 0 by default.

 * @param toIndex the end of the range (exclusive) to search in, size of this array by default.

 * 

 * @return the index of the element, if it is contained in the array within the specified range;

 * otherwise, the inverted insertion point `(-insertion point - 1)`.

 * The insertion point is defined as the index at which the element should be inserted,

 * so that the array (or the specified subrange of array) still remains sorted.

 * 

 * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.

 * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].

 */",f16970:m849
55727,"@SinceKotlin(""1.1"") public fun String.toByteOrNull(radix: Int): Byte?","{
    val int = this.toIntOrNull(radix) ?: return null
    if (int < Byte.MIN_VALUE || int > Byte.MAX_VALUE) return null
    return int.toByte()
}","/**

 * Parses the string as a signed [Byte] number and returns the result

 * or `null` if the string is not a valid representation of a number.

 *

 * @throws IllegalArgumentException when [radix] is not a valid radix for string to number conversion.

 */",f16787:m37
14052,public fun getAndIncrement(): Int,this::value.getAndAddField(1),"/**

     * Atomically increments the current value by one and returns the old value.

     */",f3718:m103
13929,"@SinceKotlin(""1.6"") @WasExperimental(ExperimentalStdlibApi::class) public actual fun Int.rotateRight(bitCount: Int): Int",shl(32 - bitCount) or ushr(bitCount),"/**

 * Rotates the binary representation of this [Int] number right by the specified [bitCount] number of bits.

 * The least significant bits pushed out from the right side reenter the number as the most significant bits on the left side.

 *

 * Rotating the number right by a negative bit count is the same as rotating it left by the negated bit count:

 * `number.rotateRight(-n) == number.rotateLeft(n)`

 *

 * Rotating by a multiple of [Int.SIZE_BITS] (32) returns the same number, or more generally

 * `number.rotateRight(n) == number.rotateRight(n % 32)`

 */",f3706:m349
15009,internal fun Char.getCategoryValue(): Int,"{
    val ch = this.code
    val index = binarySearchRange(rangeStart, ch)
    val start = rangeStart[index]
    val code = rangeCategory[index]
    val value = categoryValueFrom(code, ch - start)
    return if (value == 17) CharCategory.UNASSIGNED.value else value
}","/**

 * Returns the Unicode general category of this character as an Int.

 */",f3833:m339
61622,internal fun checkRadix(radix: Int): Int,"{
    if (radix !in 2 .. 36) {
        throw IllegalArgumentException(""radix $radix was not in valid range 2..36"")
    }
    return radix
}","/**

 * Checks whether the given [radix] is valid radix for string to number and number to string conversion.

 */",f17248:m91
58066,@kotlin.internal.InlineOnly public inline fun toULong(): ULong,ULong(data.toLong() and 0xFFFF),"/**

     * Converts this [UShort] value to [ULong].

     *

     * The resulting `ULong` value represents the same numerical value as this `UShort`.

     *

     * The least significant 16 bits of the resulting `ULong` value are the same as the bits of this `UShort` value,

     * whereas the most significant 48 bits are filled with zeros.

     */",f17058:m657
19988,"private fun areTypesTheSame(ktTypeRef: KtTypeReference, psiType: PsiType, varArgs: Boolean): Boolean","{
    val qualifiedName = getQualifiedName(ktTypeRef.typeElement, ktTypeRef.getAllModifierLists().any { it.hasSuspendModifier() }) ?: return false
    return if (psiType is PsiArrayType && psiType.componentType !is PsiPrimitiveType) {
        qualifiedName == StandardNames.FqNames.array.asString() || varArgs && areTypesTheSame(ktTypeRef, psiType.componentType, false)
    } else {
        psiType.isTheSame(psiType(qualifiedName, ktTypeRef))
    }
}","/**

     * Compare erased types

     */",f5723:m473
57484,"@SinceKotlin(""1.3"") @ExperimentalUnsignedTypes public actual fun UIntArray.asList(): List<UInt>","{
    return object : AbstractList<UInt>(), RandomAccess {
        override val size: Int get() = this@asList.size
    
        override fun isEmpty(): Boolean = this@asList.isEmpty()
    
        override fun contains(element: UInt): Boolean = this@asList.contains(element)
    
        override fun get(index: Int): UInt = this@asList[index]
    
        override fun indexOf(element: UInt): Int = this@asList.indexOf(element)
    
        override fun lastIndexOf(element: UInt): Int = this@asList.lastIndexOf(element)
    }
}","/**

 * Returns a [List] that wraps the original array.

 */",f16971:m135
54683,"@SinceKotlin(""1.4"") public actual fun ByteArray?.contentToString(): String","{
    return this?.joinToString("", "", ""["", ""]"") ?: ""null""
}","/**

 * Returns a string representation of the contents of the specified array as if it is [List].

 * 

 * @sample samples.collections.Arrays.ContentOperations.contentToString

 */",f16713:m1051
43588,"fun BuildResult.extractTaskCompilerArguments(taskPath: String, logLevel: LogLevel = LogLevel.INFO): String","{
    val taskOutput = getOutputForTask(taskPath, logLevel)
    return taskOutput.lines().first { it.contains(""Kotlin compiler args:"") }.substringAfter(""Kotlin compiler args:"")
}","/**

 * Extracts compiler arguments used in compilation for a given Kotlin task under [taskPath] path.

 *

 * @param logLevel [LogLevel] with which build was running, default to [LogLevel.INFO].

 */",f13457:m599
57134,@kotlin.internal.InlineOnly public inline fun exitProcess(status: Int): Nothing,"{
    System.exit(status)
    throw RuntimeException(""System.exit returned normally, while it was supposed to halt JVM."")
}","/**

 * Terminates the currently running process.

 *

 * @param status serves as a status code; by convention,

 * a nonzero status code indicates abnormal termination.

 *

 * @return This method never returns normally.

 */",f16964:m17
59093,"@SinceKotlin(""1.4"") @ExperimentalUnsignedTypes public fun maxOf(a: UInt, vararg other: UInt): UInt","{
    var max = a
    for (e in other) max = maxOf(max, e)
    return max
}","/**

 * Returns the greater of the given values.

 */",f17098:m189
59061,"@SinceKotlin(""1.4"") public inline fun <R> CharSequence.scanIndexed(initial: R, operation: (index: Int, acc: R, Char) -> R): List<R>","{
    return runningFoldIndexed(initial, operation)
}","/**

 * Returns a list containing successive accumulation values generated by applying [operation] from left to right

 * to each character, its index in the original char sequence and current accumulator value that starts with [initial] value.

 * 

 * Note that `acc` value passed to [operation] function should not be mutated;

 * otherwise it would affect the previous value in resulting list.

 * 

 * @param [operation] function that takes the index of a character, current accumulator value

 * and the character itself, and calculates the next accumulator value.

 * 

 * @sample samples.collections.Collections.Aggregates.scan

 */",f17097:m4163
14802,"@Deprecated(""Use Kotlin compiler 1.4 to avoid deprecation warning."") @SinceKotlin(""1.3"") @DeprecatedSinceKotlin(hiddenSince = ""1.4"") @ExperimentalUnsignedTypes public fun UByteArray.contentToString(): String","{
    return this.contentToString()
}","/**

 * Returns a string representation of the contents of the specified array as if it is [List].

 * 

 * @sample samples.collections.Arrays.ContentOperations.contentToString

 */",f3828:m539
58658,public infix fun Byte.downTo(to: Short): IntProgression,"{
    return IntProgression.fromClosedRange(this.toInt(), to.toInt(), -1)
}","/**

 * Returns a progression from this value down to the specified [to] value with the step -1.

 * 

 * The [to] value should be less than or equal to `this` value.

 * If the [to] value is greater than `this` value the returned progression is empty.

 */",f17092:m1831
64282,@kotlin.internal.IntrinsicConstEvaluation public inline operator fun compareTo(other: Long): Int,this.compareTo(other.toFloat()),"/**

     * Compares this value with the specified value for order.

     * Returns zero if this value is equal to the specified other value, a negative number if it's less than other,

     * or a positive number if it's greater than other.

     */",f17455:m3899
20238,public fun KtClassLikeSymbol.getSamConstructor(): KtSamConstructorSymbol?,withValidityAssertion { analysisSession.samResolver.getSamConstructor(this) },"/**

     * Returns [KtSamConstructorSymbol] if the given [KtClassLikeSymbol] is a functional interface type, a.k.a. SAM.

     */",f5800:m35
58615,"@kotlin.jvm.JvmName(""longRangeContains"") public operator fun ClosedRange<Long>.contains(value: Int): Boolean","{
    return contains(value.toLong())
}","/**

 * Checks if the specified [value] belongs to this range.

 */",f17092:m1023
64334,@kotlin.internal.IntrinsicConstEvaluation public override operator fun compareTo(other: Double): Int,"{
    if (this > other) return 1
    if (this < other) return -1
    val thisBits = this.toBits()
    val otherBits = other.toBits()
    return thisBits.compareTo(otherBits)
}","/**

     * Compares this value with the specified value for order.

     * Returns zero if this value is equal to the specified other value, a negative number if it's less than other,

     * or a positive number if it's greater than other.

     */",f17455:m4735
58944,public fun String.drop(n: Int): String,"{
    require(n >= 0) { ""Requested character count $n is less than zero."" }
    return substring(n.coerceAtMost(length))
}","/**

 * Returns a string with the first [n] characters removed.

 * 

 * @throws IllegalArgumentException if [n] is negative.

 * 

 * @sample samples.text.Strings.drop

 */",f17097:m669
56078,@kotlin.internal.InlineOnly public inline fun <@kotlin.internal.OnlyInputTypes T> MutableCollection<out T>.removeAll(elements: Collection<T>): Boolean,"@Suppress(""UNCHECKED_CAST"") (this as MutableCollection<T>).removeAll(elements)","/**

 * Removes all of this collection's elements that are also contained in the specified collection.



 * Allows to overcome type-safety restriction of `removeAll` that requires to pass a collection of type `Collection<E>`.

 *

 * @return `true` if any of the specified elements was removed from the collection, `false` if the collection was not modified.

 */",f16825:m45
68068,private fun DeclarationDescriptor.getOwnSinceKotlinVersion(): SinceKotlinValue?,"{
    var result: SinceKotlinValue? = null
    fun DeclarationDescriptor.consider() {
        val apiVersion = (annotations.findAnnotation(SINCE_KOTLIN_FQ_NAME)?.allValueArguments?.values?.singleOrNull()?.value as? String)?.let(ApiVersion.Companion::parse)
        if (apiVersion != null) {
            if (result == null || apiVersion > result!!.apiVersion) {
                result = SinceKotlinValue(apiVersion, loadWasExperimentalMarkerClasses())
            }
        }
    }
    this.consider()
    (this as? ConstructorDescriptor)?.containingDeclaration?.consider()
    (this as? PropertyAccessorDescriptor)?.correspondingProperty?.consider()
    val typeAlias = this as? TypeAliasDescriptor ?: (this as? TypeAliasConstructorDescriptor)?.typeAliasDescriptor ?: (this as? FakeCallableDescriptorForTypeAliasObject)?.typeAliasDescriptor
    typeAlias?.consider()
    typeAlias?.classDescriptor?.consider()
    (this as? TypeAliasConstructorDescriptor)?.underlyingConstructorDescriptor?.consider()
    (this as? FakeCallableDescriptorForTypeAliasObject)?.getReferencedObject()?.consider()
    return result
}","/**

 * @return the maximal value of API version required by the declaration or any of its ""associated"" declarations (class for constructor,

 *         property for accessor, underlying class for type alias) along with experimental marker FQ names mentioned in the @WasExperimental

 */",f19284:m131
52755,@Test fun test3360(),"{
    val str = ""!\""#%&'(),-./""
    val regex = Regex(""\\s"")
    assertFalse(regex.containsMatchIn(str))
}","/**

     * Inspired by HARMONY-3360

     */",f16571:m857
57518,"@SinceKotlin(""1.4"") @OptIn(kotlin.experimental.ExperimentalTypeInference::class) @OverloadResolutionByLambdaReturnType @Suppress(""INAPPLICABLE_JVM_NAME"") @kotlin.jvm.JvmName(""sumOfBigDecimal"") @ExperimentalUnsignedTypes @kotlin.internal.InlineOnly public inline fun UByteArray.sumOf(selector: (UByte) -> java.math.BigDecimal): java.math.BigDecimal","{
    var sum: java.math.BigDecimal = 0.toBigDecimal()
    for (element in this) {
        sum += selector(element)
    }
    return sum
}","/**

 * Returns the sum of all values produced by [selector] function applied to each element in the array.

 */",f16971:m1095
58962,public fun CharSequence.slice(indices: Iterable<Int>): CharSequence,"{
    val size = indices.collectionSizeOrDefault(10)
    if (size == 0) return """"
    val result = StringBuilder(size)
    for (i in indices) {
        result.append(get(i))
    }
    return result
}","/**

 * Returns a char sequence containing characters of the original char sequence at specified [indices].

 */",f17097:m1059
22976,fun Project.checkExpectedGradlePropertyValues(),"{
    val expectSuffix = "".kotlin_build.expected_value""
    val expectKeys = properties.keys.filter { it.endsWith(expectSuffix) }
    val issues = expectKeys.mapNotNull { expectKey ->
        val actualKey = expectKey.removeSuffix(expectSuffix)
        val expectedValue = properties[expectKey]?.toString() ?: return@mapNotNull null
        if (!properties.containsKey(actualKey)) return@mapNotNull MissingProperty(actualKey, expectedValue)
        val actualValue = properties[actualKey].toString()
        if (expectedValue != actualValue) return@mapNotNull UnexpectedPropertyValue(actualKey, expectedValue, actualValue)
        null
    }.toSet()
    if (issues.isEmpty()) {
        return
    }
    val unexpectedPropertyValues = issues.filterIsInstance<UnexpectedPropertyValue>()
    val missingProperties = issues.filterIsInstance<MissingProperty>()
    throw IllegalArgumentException(buildString {
        if (unexpectedPropertyValues.isNotEmpty()) {
            appendLine(""Unexpected Gradle property values found in ${project.displayName}:"")
            unexpectedPropertyValues.forEach { issue -> appendLine(""Expected ${issue.key} to be '${issue.expectedValue}', but found '${issue.actualValue}'"") }
        }
        if (missingProperties.isNotEmpty()) {
            if (unexpectedPropertyValues.isNotEmpty()) appendLine()
            appendLine(""Missing Gradle properties found in ${project.displayName}:"")
            missingProperties.forEach { issue -> appendLine(""Expected ${issue.key} to be '${issue.expectedValue}', but the property is missing"") }
        }
    })
}","/**

 * Mechanism to warn developers when a given Gradle property does not match the developer's expectation.

 *

 * There may be some Gradle properties, that are defined in the project and will change over time (e.g. defaultSnapshotVersion).

 * Some developers (and QA) will need to be very clear about the value of this property.

 *

 * In order to get notified about the value of the property changing, it is possible to define the same property in

 * ~/.gradle/gradle.properties with a given `.kotlin_build.expected_value` suffix to ensure the value.

 *

 * e.g. if a developer set's

 *

 * `defaultSnapshotVersion.kotlin_build.expected_value=1.6.255-SNAPSHOT` and the value gets bumped to `2.0.255-SNAPSHOT` after pulling from master,

 * the developer will notice this during project configuration phase.

 */",f8819:m19
15391,@Test fun hypot_DD(),"{
    assertEquals(""Should return POSITIVE_INFINITY"", Double.POSITIVE_INFINITY, hypot(Double.POSITIVE_INFINITY, 1.0), 0.0)
    assertEquals(""Should return POSITIVE_INFINITY"", Double.POSITIVE_INFINITY, hypot(Double.NEGATIVE_INFINITY, 123.324), 0.0)
    assertEquals(""Should return POSITIVE_INFINITY"", Double.POSITIVE_INFINITY, hypot(-758.2587, Double.POSITIVE_INFINITY), 0.0)
    assertEquals(""Should return POSITIVE_INFINITY"", Double.POSITIVE_INFINITY, hypot(5687.21, Double.NEGATIVE_INFINITY), 0.0)
    assertEquals(""Should return POSITIVE_INFINITY"", Double.POSITIVE_INFINITY, hypot(Double.POSITIVE_INFINITY, Double.NEGATIVE_INFINITY), 0.0)
    assertEquals(""Should return POSITIVE_INFINITY"", Double.POSITIVE_INFINITY, hypot(Double.NEGATIVE_INFINITY, Double.POSITIVE_INFINITY), 0.0)
    assertTrue(""Should be NaN"", Double.isNaN(hypot(Double.NaN, 2342301.89843)))
    assertTrue(""Should be NaN"", Double.isNaN(hypot(-345.2680, Double.NaN)))
    assertEquals(""Should return 2396424.905416697"", 2396424.905416697, hypot(12322.12, -2396393.2258), 0.0)
    assertEquals(""Should return 138.16958070558556"", 138.16958070558556, hypot(-138.16951162, 0.13817035864), 0.0)
    assertEquals(""Should return 1.7976931348623157E308"", 1.7976931348623157E308, hypot(Double.MAX_VALUE, 211370.35), 0.0)
    assertEquals(""Should return 5413.7185"", 5413.7185, hypot(-5413.7185, Double.MIN_VALUE), 0.0)
}","/**

     * Tests kotlin.math.hypot(Double, Double)

     */",f3868:m635
10435,override fun markUnsatisfied(),"{
    this.satisfied = false
}","/**

   * Records that this constraint is unsatisfied

   */",f3476:m461
16418,private inline fun FirDeclaration.forEachDirectChildDeclaration(crossinline action: (child: FirDeclaration) -> Unit),"{
    this.acceptChildren(object : FirDefaultVisitorVoid() {
        override fun visitElement(element: FirElement) { }
    
        override fun visitFile(file: FirFile) {
            action(file)
        }
    
        override fun visitCallableDeclaration(callableDeclaration: FirCallableDeclaration) {
            action(callableDeclaration)
        }
    
        override fun visitClassLikeDeclaration(classLikeDeclaration: FirClassLikeDeclaration) {
            action(classLikeDeclaration)
        }
    })
}","/**

 * Calls [action] on every direct child declaration of [this] declaration.

 */",f4113:m481
64202,@kotlin.internal.IntrinsicConstEvaluation public override fun toShort(): Short,((this shl 16) shr 16).reinterpretAsShort(),"/**

     * Converts this [Int] value to [Short].

     *

     * If this value is in [Short.MIN_VALUE]..[Short.MAX_VALUE], the resulting `Short` value represents

     * the same numerical value as this `Int`.

     *

     * The resulting `Short` value is represented by the least significant 16 bits of this `Int` value.

     */",f17455:m2615
59073,"public inline fun CharSequence.partition(predicate: (Char) -> Boolean): Pair<CharSequence, CharSequence>","{
    val first = StringBuilder()
    val second = StringBuilder()
    for (element in this) {
        if (predicate(element)) {
            first.append(element)
        } else {
            second.append(element)
        }
    }
    return Pair(first, second)
}","/**

 * Splits the original char sequence into pair of char sequences,

 * where *first* char sequence contains characters for which [predicate] yielded `true`,

 * while *second* char sequence contains characters for which [predicate] yielded `false`.

 * 

 * @sample samples.text.Strings.partition

 */",f17097:m4545
56487,@kotlin.internal.InlineOnly public actual inline fun String.toFloat(): Float,java.lang.Float.parseFloat(this),"/**

 * Parses the string as a [Float] number and returns the result.

 * @throws NumberFormatException if the string is not a valid representation of a number.

 */",f16885:m243
58691,public infix fun Byte.until(to: Long): LongRange,"{
    if (to <= Long.MIN_VALUE) return LongRange.EMPTY
    return this.toLong() .. (to - 1).toLong()
}","/**

 * Returns a range from this value up to but excluding the specified [to] value.

 * 

 * If the [to] value is less than or equal to `this` value, then the returned range is empty.

 */",f17092:m2295
24802,private fun IrFunction.externallyTransformed(): Boolean,decoysEnabled && valueParameters.firstOrNull { it.name == KtxNameConventions.COMPOSER_PARAMETER } != null,"/**

     * With klibs, composable functions are always deserialized from IR instead of being restored

     * into stubs.

     * In this case, we need to avoid transforming those functions twice (because synthetic

     * parameters are being added). We know however, that all the other modules were compiled

     * before, so if the function comes from other [IrModuleFragment], we must skip it.

     *

     * NOTE: [ModuleDescriptor] will not work here, as incremental compilation of the same module

     * can contain some functions that were transformed during previous compilation in a

     * different module fragment with the same [ModuleDescriptor]

     */",f9213:m1307
15409,@Test fun sqrt_D(),"{
    assertEquals(""Incorrect root returned2"", 7.0, sqrt(49.0), 0.0)
}","/**

     * Tests kotlin.math.sqrt(Double)

     */",f3868:m1327
56865,"@SinceKotlin(""1.4"") @kotlin.internal.InlineOnly public actual inline fun Int.countTrailingZeroBits(): Int",Integer.numberOfTrailingZeros(this),"/**

 * Counts the number of consecutive least significant bits that are zero in the binary representation of this [Int] number.

 */",f16929:m221
10444,override fun markInputs(mark: Int),"{
    input().mark = mark
}","/**

   * Mark the input variable with the given mark.

   */",f3476:m671
43612,fun BuildResult.assertTasksFailed(vararg taskPaths: String),"{
    assertTasksHaveOutcome(TaskOutcome.FAILED, taskPaths.asList())
}","/**

 * Asserts given [taskPaths] have [TaskOutcome.FAILED] execution state.

 */",f13463:m129
13700,public operator fun rangeTo(other: Byte): LongRange,"LongRange(this, other.toLong())",/** Creates a range from this value to the specified [other] value. */,f3686:m3299
14887,"@SinceKotlin(""1.4"") public actual fun DoubleArray?.contentToString(): String","{
    return this?.joinToString("", "", ""["", ""]"") ?: ""null""
}","/**

 * Returns a string representation of the contents of the specified array as if it is [List].

 * 

 * @sample samples.collections.Arrays.ContentOperations.contentToString

 */",f3831:m2137
58906,"@kotlin.jvm.JvmName(""averageOfInt"") public fun Sequence<Int>.average(): Double","{
    var sum: Double = 0.0
    var count: Int = 0
    for (element in this) {
        sum += element
        checkCountOverflow(++count)
    }
    return if (count == 0) Double.NaN else sum / count
}","/**

 * Returns an average value of elements in the sequence.

 *

 * The operation is _terminal_.

 */",f17096:m5927
55919,"@SinceKotlin(""1.6"") @WasExperimental(ExperimentalStdlibApi::class) @kotlin.internal.InlineOnly @Suppress(""DEPRECATION"") public inline fun <E> buildSet(capacity: Int, @BuilderInference builderAction: MutableSet<E>.() -> Unit): Set<E>","{
    contract { callsInPlace(builderAction, InvocationKind.EXACTLY_ONCE) }
    return buildSetInternal(capacity, builderAction)
}","/**

 * Builds a new read-only [Set] by populating a [MutableSet] using the given [builderAction]

 * and returning a read-only set with the same elements.

 *

 * The set passed as a receiver to the [builderAction] is valid only inside that function.

 * Using it outside of the function produces an unspecified behavior.

 *

 * [capacity] is used to hint the expected number of elements added in the [builderAction].

 *

 * Elements of the set are iterated in the order they were added by the [builderAction].

 *

 * The returned set is serializable (JVM).

 *

 * @throws IllegalArgumentException if the given [capacity] is negative.

 *

 * @sample samples.collections.Builders.Sets.buildSetSample

 */",f16817:m297
56104,"@SinceKotlin(""1.4"") public fun <T> MutableList<T>.removeFirstOrNull(): T?",if (isEmpty()) null else removeAt(0),"/**

 * Removes the first element from this mutable list and returns that removed element, or returns `null` if this list is empty.

 */",f16825:m493
43648,"fun TestProject.assertSimpleConfigurationCacheScenarioWorks(vararg buildArguments: String, buildOptions: BuildOptions, executedTaskNames: List<String>? = null, checkUpToDateOnRebuild: Boolean = true)","{
    val executedTask: List<String> = executedTaskNames ?: buildArguments.toList()
    build(*buildArguments, buildOptions = buildOptions) {
        assertTasksExecuted(*executedTask.toTypedArray())
        if (gradleVersion < GradleVersion.version(TestVersions.Gradle.G_8_5)) {
            assertOutputContains(""Calculating task graph as no configuration cache is available for tasks: ${buildArguments.joinToString(separator = "" "")}"")
        } else {
            assertOutputContains(""Calculating task graph as no cached configuration is available for tasks: ${buildArguments.joinToString(separator = "" "")}"")
        }
        assertConfigurationCacheStored()
    }
    build(""clean"", buildOptions = buildOptions)
    build(*buildArguments, buildOptions = buildOptions) {
        assertTasksExecuted(*executedTask.toTypedArray())
        assertConfigurationCacheReused()
    }
    if (checkUpToDateOnRebuild) {
        build(*buildArguments, buildOptions = buildOptions) { assertTasksUpToDate(*executedTask.toTypedArray()) }
    }
}","/**

 * Tests whether configuration cache for the tasks specified by [buildArguments] works on simple scenario when project is built twice non-incrementally.

 */",f13472:m23
55670,"@ExperimentalStdlibApi @SinceKotlin(""1.9"") public fun String.hexToInt(format: HexFormat = HexFormat.Default): Int","hexToInt(0, length, format)","/**

 * Parses an `Int` value from this string using the specified [format].

 *

 * Note that only [HexFormat.NumberHexFormat] affects parsing,

 * and parsing is performed in case-insensitive manner.

 *

 * @param format the [HexFormat] to use for parsing, [HexFormat.Default] by default.

 *

 * @throws IllegalArgumentException if this string does not comply with the specified [format].

 */",f16779:m1531
63539,"@SinceKotlin(""1.3"") @Suppress(""ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS"") public actual fun IntArray.fill(element: Int, fromIndex: Int = 0, toIndex: Int = size): Unit","{
    AbstractList.checkRangeIndexes(fromIndex, toIndex, size)
    for (index in fromIndex until toIndex) {
        this[index] = element
    }
}","/**

 * Fills this array or its subrange with the specified [element] value.

 * 

 * @param fromIndex the start of the range (inclusive) to fill, 0 by default.

 * @param toIndex the end of the range (exclusive) to fill, size of this array by default.

 * 

 * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.

 * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].

 */",f17396:m3871
14930,"internal fun LongArray.copyOfUninitializedElements(fromIndex: Int, toIndex: Int): LongArray","{
    val newSize = toIndex - fromIndex
    if (newSize < 0) {
        throw IllegalArgumentException(""$fromIndex > $toIndex"")
    }
    val result = LongArray(newSize)
    this.copyInto(result, 0, fromIndex, toIndex.coerceAtMost(size))
    return result
}","/**

 * Returns new array which is a copy of the original array's range between [fromIndex] (inclusive)

 * and [toIndex] (exclusive) with new elements filled with **lateinit** _uninitialized_ values.

 * Attempts to read _uninitialized_ values from this array work in implementation-dependent manner,

 * either throwing exception or returning some kind of implementation-specific default value.

 */",f3831:m3389
37761,@Test fun `test - simple class`(),"{
    val module = createModuleDescriptor(""class Foo"")
    val foo = module.findClassAcrossModuleDependencies(ClassId.fromString(""Foo""))!!
    assertNull(createObjCExportMapper().getCustomTypeMapper(foo))
}","/**

     * No 'type mapper' expected for a simple Kotlin class like 'Foo'.

     * Only well known standard types (List, ...) will get mapped to their corresponding

     * ObjC counterpart (NSArray, ...)

     */",f11840:m89
63553,public actual operator fun CharArray.plus(element: Char): CharArray,"{
    val index = size
    val result = copyOfUninitializedElements(index + 1)
    result[index] = element
    return result
}","/**

 * Returns an array containing all elements of the original array and then the given [element].

 */",f17396:m4247
14236,public fun addAndGet(delta: Int): Int,this::value.getAndAddField(delta) + delta,"/**

     * Atomically adds the [given value][delta] to the current value and returns the new value.

     */",f3762:m93
15896,"@Operation fun computeReplaceValue(key: Int, @Param(name = ""value"") newValue: ValueWithCleanup): ValueWithCleanup?","cache.compute(key) { _, _ -> newValue }","/**

     * Models a computation that replaces the cache's existing value for [key] with [newValue].

     */",f4020:m101
34352,"override fun testCase(testCase: XCTestCase, didRecordIssue: XCTIssue)","{
    if (testCase is XCTestCaseWrapper) {
        val duration = testCase.getTestDuration()
        val error = didRecordIssue.associatedError as NSError
        val throwable = if (error is NSErrorWithKotlinException) {
            error.kotlinException
        } else {
            Throwable(didRecordIssue.compactDescription)
        }
        sendToListeners { fail(testCase.testCase, throwable, duration.inWholeMilliseconds) }
    }
}","/**

     * Failed test case execution.

     *

     * Records test failures sending them to test listeners.

     */",f11292:m75
61685,public infix fun UByte.until(to: UByte): UIntRange,"{
    if (to <= UByte.MIN_VALUE) return UIntRange.EMPTY
    return this.toUInt() .. (to - 1u).toUInt()
}","/**

 * Returns a range from this value up to but excluding the specified [to] value.

 *

 * If the [to] value is less than or equal to `this` value, then the returned range is empty.

 */",f17250:m21
19052,internal fun CallableMemberDescriptor.mustNotBeWrittenToDecompiledText(): Boolean,"{
    return when (kind) {
        CallableMemberDescriptor.Kind.DECLARATION, CallableMemberDescriptor.Kind.DELEGATION -> false
        CallableMemberDescriptor.Kind.FAKE_OVERRIDE -> true
        CallableMemberDescriptor.Kind.SYNTHESIZED -> syntheticMemberMustNotBeWrittenToDecompiledText()
    }
}","/**

 * @see org.jetbrains.kotlin.analysis.decompiler.stub.mustNotBeWrittenToStubs

 */",f5606:m85
58643,public infix fun Int.downTo(to: Byte): IntProgression,"{
    return IntProgression.fromClosedRange(this, to.toInt(), -1)
}","/**

 * Returns a progression from this value down to the specified [to] value with the step -1.

 * 

 * The [to] value should be less than or equal to `this` value.

 * If the [to] value is greater than `this` value the returned progression is empty.

 */",f17092:m1531
14883,"@SinceKotlin(""1.4"") public actual fun ShortArray?.contentToString(): String","{
    return this?.joinToString("", "", ""["", ""]"") ?: ""null""
}","/**

 * Returns a string representation of the contents of the specified array as if it is [List].

 * 

 * @sample samples.collections.Arrays.ContentOperations.contentToString

 */",f3831:m2057
56065,"@SinceKotlin(""1.1"") public operator fun <K, V> Map<out K, V>.minus(keys: Sequence<K>): Map<K, V>",this.toMutableMap().apply { minusAssign(keys) }.optimizeReadOnlyMap(),"/**

 * Returns a map containing all entries of the original map except those entries

 * the keys of which are contained in the given [keys] sequence.

 *

 * The returned map preserves the entry iteration order of the original map.

 */",f16823:m1519
55625,"public inline fun <T> vetoable(initialValue: T, crossinline onChange: (property: KProperty<*>, oldValue: T, newValue: T) -> Boolean): ReadWriteProperty<Any?, T>","object : ObservableProperty<T>(initialValue) {
    override fun beforeChange(property: KProperty<*>, oldValue: T, newValue: T): Boolean = onChange(property, oldValue, newValue)
}","/**

     * Returns a property delegate for a read/write property that calls a specified callback function when changed,

     * allowing the callback to veto the modification.

     * @param initialValue the initial value of the property.

     * @param onChange the callback which is called before a change to the property value is attempted.

     *  The value of the property hasn't been changed yet, when this callback is invoked.

     *  If the callback returns `true` the value of the property is being set to the new value,

     *  and if the callback returns `false` the new value is discarded and the property remains its old value.

     *

     *  @sample samples.properties.Delegates.vetoableDelegate

     *  @sample samples.properties.Delegates.throwVetoableDelegate

     */",f16772:m73
13375,internal fun Type.isStret(target: KonanTarget): Boolean,"{
    val unwrappedType = this.unwrapTypedefs()
    val abiInfo: ObjCAbiInfo = when (target.architecture) {
        Architecture.ARM64 -> DarwinArm64AbiInfo()
        Architecture.X64 -> DarwinX64AbiInfo()
        Architecture.X86 -> DarwinX86AbiInfo()
        Architecture.ARM32 -> DarwinArm32AbiInfo(target)
        else -> error(""Cannot generate ObjC stubs for $target."")
    }
    return abiInfo.shouldUseStret(unwrappedType)
}","/**

 * objc_msgSend*_stret functions must be used when return value is returned through memory

 * pointed by implicit argument, which is passed on the register that would otherwise be used for receiver.

 *

 * The entire implementation is just the real ABI approximation which is enough for practical cases.

 */",f3666:m23
40863,fun checkAvailability(): Boolean,"{
    if (isAvailable == true) return true
    if (availability?.contains(""unavailable"") == true) return false
    return false
}","/**

     * Different Xcode/macOS combinations give different fields that checks

     * runtime availability. This method is an umbrella for these fields.

     */",f12940:m197
52022,"inline fun <R1, R2> ResultWithDiagnostics<R1>.onSuccess(body: (R1) -> ResultWithDiagnostics<R2>): ResultWithDiagnostics<R2>","when (this) {
    is ResultWithDiagnostics.Success -> this.reports + body(this.value)
    is ResultWithDiagnostics.Failure -> this
}","/**

 * Chains actions on successful result:

 * If receiver is success - executes [body] and merge diagnostic reports

 * otherwise returns the failure as is

 */",f16426:m265
56183,"@kotlin.internal.InlineOnly public inline fun require(value: Boolean, lazyMessage: () -> Any): Unit","{
    contract { returns() implies value }
    if (!value) {
        val message = lazyMessage()
        throw IllegalArgumentException(message.toString())
    }
}","/**

 * Throws an [IllegalArgumentException] with the result of calling [lazyMessage] if the [value] is false.

 *

 * @sample samples.misc.Preconditions.failRequireWithLazyMessage

 */",f16839:m51
9435,private fun tryGenerateInteropConstantRead(expression: IrCall): IrExpression?,"{
    val function = expression.symbol.owner
    if (!function.isFromInteropLibrary()) return null
    if (!function.isGetter) return null
    val constantProperty = function.correspondingPropertySymbol?.owner?.takeIf { it.isConst } ?: return null
    val initializer = constantProperty.backingField?.initializer?.expression
    require(initializer is IrConst<*>) { renderCompilerError(expression) }
    return initializer.shallowCopy()
}","/**

     * Handle `const val`s that come from interop libraries.

     *

     * We extract constant value from the backing field, and replace getter invocation with it.

     */",f3354:m2037
54695,"@SinceKotlin(""1.3"") @kotlin.internal.InlineOnly @Suppress(""ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS"") public actual inline fun LongArray.copyInto(destination: LongArray, destinationOffset: Int = 0, startIndex: Int = 0, endIndex: Int = size): LongArray","{
    arrayCopy(this.unsafeCast<Array<Long>>(), destination.unsafeCast<Array<Long>>(), destinationOffset, startIndex, endIndex)
    return destination
}","/**

 * Copies this array or its subrange into the [destination] array and returns that array.

 * 

 * It's allowed to pass the same array in the [destination] and even specify the subrange so that it overlaps with the destination range.

 * 

 * @param destination the array to copy to.

 * @param destinationOffset the position in the [destination] array to copy to, 0 by default.

 * @param startIndex the beginning (inclusive) of the subrange to copy, 0 by default.

 * @param endIndex the end (exclusive) of the subrange to copy, size of this array by default.

 * 

 * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of this array indices or when `startIndex > endIndex`.

 * @throws IndexOutOfBoundsException when the subrange doesn't fit into the [destination] array starting at the specified [destinationOffset],

 * or when that index is out of the [destination] array indices range.

 * 

 * @return the [destination] array.

 */",f16713:m1403
54654,@kotlin.internal.InlineOnly public actual inline fun FloatArray.asList(): List<Float>,"{
    return this.unsafeCast<Array<Float>>().asList()
}","/**

 * Returns a [List] that wraps the original array.

 */",f16713:m277
18050,fun inlineObjectDeclarations(): Set<KtObjectDeclaration>,"{
    val results = mutableSetOf<KtObjectDeclaration>()
    inlineFunctionsWithBody.forEach { inlineFunction ->
        val body = inlineFunction.bodyExpression ?: return@forEach
        body.accept(object : KtTreeVisitorVoid() {
            override fun visitObjectLiteralExpression(expression: KtObjectLiteralExpression) {
                super.visitObjectLiteralExpression(expression)
                results.add(expression.objectDeclaration)
            }
        })
    }
    return results
}","/**

     * Returns the set of [KtObjectDeclaration]s which are defined as an object literal in one of the reached inline functions.

     */",f5399:m199
43667,fun BuildResult.extractProjectsAndTheirDiagnostics(): String,"buildString {
    var diagnosticStarted = false
    var stacktraceStarted = false
    val currentDiagnostic = mutableListOf<String>()
    fun startDiagnostic(line: String, lineIndex: Int) {
        require(!diagnosticStarted) {
            printBuildOutput()
            ""Unexpected start of diagnostic $line on line ${lineIndex + 1}. The end of the previous diagnostic wasn't found yet""
        }
        currentDiagnostic += line
        diagnosticStarted = true
    }
    fun continueDiagnostic(line: String) {
        when {
            line == KOTLIN_DIAGNOSTIC_STACKTRACE_START -> {
                stacktraceStarted = true
                currentDiagnostic += line
                currentDiagnostic += DIAGNOSTIC_STACKTRACE_REPLACEMENT_STUB
            }
            line == KOTLIN_DIAGNOSTIC_STACKTRACE_END_SEPARATOR -> {
                stacktraceStarted = false
            }
            stacktraceStarted -> return
            else -> currentDiagnostic += line
        }
    }
    fun endDiagnostic(line: String, lineIndex: Int) {
        require(diagnosticStarted) {
            printBuildOutput()
            ""Unexpected end of diagnostic $line on line ${lineIndex + 1}""
        }
        currentDiagnostic += line
        if (KotlinToolingDiagnostics.InternalKotlinGradlePluginPropertiesUsed.id in currentDiagnostic.first()) {
            val cleanedDiagnostic = filterKgpUtilityPropertiesFromDiagnostic(currentDiagnostic)
            if (cleanedDiagnostic.isNotEmpty()) appendLine(cleanedDiagnostic.joinToString(separator = ""\n"", postfix = ""\n""))
        } else {
            appendLine(currentDiagnostic.joinToString(separator = ""\n"", postfix = ""\n""))
        }
        currentDiagnostic.clear()
        diagnosticStarted = false
    }
    for ((index, line) in output.lines().withIndex()) { when {
        line.trim() == VERBOSE_DIAGNOSTIC_SEPARATOR -> endDiagnostic(line, index)
        DIAGNOSTIC_START_REGEX.containsMatchIn(line) -> startDiagnostic(line, index)
        diagnosticStarted -> continueDiagnostic(line)
        line.startsWith(CONFIGURE_PROJECT_PREFIX) || (line.contains(ENSURE_NO_KOTLIN_GRADLE_PLUGIN_ERRORS_TASK_NAME) && line.startsWith(TASK_EXECUTION_PREFIX)) -> {
            appendLine()
            appendLine(line)
        }
    } }
}.trim()","/**

 * NB: Needs parsable formatting of diagnostics, see [org.jetbrains.kotlin.gradle.plugin.PropertiesProvider.internalDiagnosticsUseParsableFormat]

 * Because this mode is enabled by the 'kotlin.internal'-property, actual output will always contain

 * [org.jetbrains.kotlin.gradle.plugin.diagnostics.KotlinToolingDiagnostics.InternalKotlinGradlePluginPropertiesUsed].

 * For the sake of clarity, this diagnostic is filtered by default.

 */",f13475:m139
57213,"@SinceKotlin(""1.4"") @OptIn(kotlin.experimental.ExperimentalTypeInference::class) @OverloadResolutionByLambdaReturnType @kotlin.jvm.JvmName(""sumOfBigInteger"") @kotlin.internal.InlineOnly public inline fun <T> Sequence<T>.sumOf(selector: (T) -> java.math.BigInteger): java.math.BigInteger","{
    var sum: java.math.BigInteger = 0.toBigInteger()
    for (element in this) {
        sum += selector(element)
    }
    return sum
}","/**

 * Returns the sum of all values produced by [selector] function applied to each element in the sequence.

 *

 * The operation is _terminal_.

 */",f16968:m307
54836,"@SinceKotlin(""1.4"") public actual fun minOf(a: Int, vararg other: Int): Int","{
    var min = a
    for (e in other) min = minOf(min, e)
    return min
}","/**

 * Returns the smaller of the given values.

 */",f16714:m789
13316,private fun generateForwardStruct(s: StructDecl): List<StubIrElement>,"when (context.platform) {
    KotlinPlatform.JVM -> {
        val classifier = context.getKotlinClassForPointed(s)
        val superClass = context.platform.getRuntimeType(""COpaque"")
        val rawPtrConstructorParam = FunctionParameterStub(""rawPtr"", context.platform.getRuntimeType(""NativePtr""))
        val superClassInit = SuperClassInit(superClass, listOf(GetConstructorParameter(rawPtrConstructorParam)))
        val origin = StubOrigin.Struct(s)
        val primaryConstructor = ConstructorStub(listOf(rawPtrConstructorParam), emptyList(), isPrimary = true, origin = origin)
        listOf(ClassStub.Simple(classifier, ClassStubModality.NONE, constructors = listOf(primaryConstructor), superClassInit = superClassInit, origin = origin))
    }
    KotlinPlatform.NATIVE -> emptyList()
}","/**

     * Produces to [out] the definition of Kotlin class representing the reference to given forward (incomplete) struct.

     */",f3659:m761
57465,"@SinceKotlin(""1.4"") @OptIn(kotlin.experimental.ExperimentalTypeInference::class) @OverloadResolutionByLambdaReturnType @kotlin.jvm.JvmName(""sumOfBigDecimal"") @kotlin.internal.InlineOnly public inline fun IntArray.sumOf(selector: (Int) -> java.math.BigDecimal): java.math.BigDecimal","{
    var sum: java.math.BigDecimal = 0.toBigDecimal()
    for (element in this) {
        sum += selector(element)
    }
    return sum
}","/**

 * Returns the sum of all values produced by [selector] function applied to each element in the array.

 */",f16970:m5729
10460,fun incrementalAdd(c: Constraint),"{
    val mark = newMark()
    var overridden = c.satisfy(mark, this)
    while (overridden != null) overridden = overridden.satisfy(mark, this)
}","/**

   * Attempt to satisfy the given constraint and, if successful,

   * incrementally update the dataflow graph.  Details: If satifying

   * the constraint is successful, it may override a weaker constraint

   * on its output. The algorithm attempts to resatisfy that

   * constraint using some other method. This process is repeated

   * until either a) it reaches a variable that was not previously

   * determined by any constraint or b) it reaches a constraint that

   * is too weak to be satisfied using any of its methods. The

   * variables of constraints that have been processed are marked with

   * a unique mark value so that we know where we've been. This allows

   * the algorithm to avoid getting into an infinite loop even if the

   * constraint graph has an inadvertent cycle.

   */",f3476:m1023
58785,public fun <T> Sequence<T>.toHashSet(): HashSet<T>,"{
    return toCollection(HashSet<T>())
}","/**

 * Returns a new [HashSet] of all elements.

 *

 * The operation is _terminal_.

 */",f17096:m1593
64204,@kotlin.internal.IntrinsicConstEvaluation public override fun toLong(): Long,wasm_i64_extend_i32_s(this),"/**

     * Converts this [Int] value to [Long].

     *

     * The resulting `Long` value represents the same numerical value as this `Int`.

     *

     * The least significant 32 bits of the resulting `Long` value are the same as the bits of this `Int` value,

     * whereas the most significant 32 bits are filled with the sign bit of this value.

     */",f17455:m2649
23020,fun Configuration.excludeGradleCommonDependencies(),"{
    dependencies.withType<ModuleDependency>().configureEach {
        exclude(group = ""org.jetbrains.kotlin"", module = ""kotlin-stdlib"")
        exclude(group = ""org.jetbrains.kotlin"", module = ""kotlin-stdlib-jdk7"")
        exclude(group = ""org.jetbrains.kotlin"", module = ""kotlin-stdlib-jdk8"")
        exclude(group = ""org.jetbrains.kotlin"", module = ""kotlin-stdlib-common"")
        exclude(group = ""org.jetbrains.kotlin"", module = ""kotlin-reflect"")
        exclude(group = ""org.jetbrains.kotlin"", module = ""kotlin-script-runtime"")
    }
}","/**

 * These dependencies will be provided by Gradle, and we should prevent version conflict

 */",f8830:m207
59106,"@SinceKotlin(""1.4"") @ExperimentalUnsignedTypes public fun minOf(a: ULong, vararg other: ULong): ULong","{
    var min = a
    for (e in other) min = minOf(min, e)
    return min
}","/**

 * Returns the smaller of the given values.

 */",f17098:m451
58849,"@SinceKotlin(""1.4"") @OptIn(kotlin.experimental.ExperimentalTypeInference::class) @OverloadResolutionByLambdaReturnType @kotlin.internal.InlineOnly public inline fun <T> Sequence<T>.minOfOrNull(selector: (T) -> Double): Double?","{
    val iterator = iterator()
    if (!iterator.hasNext()) return null
    var minValue = selector(iterator.next())
    while (iterator.hasNext()) {
        val v = selector(iterator.next())
        minValue = minOf(minValue, v)
    }
    return minValue
}","/**

 * Returns the smallest value among all values produced by [selector] function

 * applied to each element in the sequence or `null` if there are no elements.

 * 

 * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.

 *

 * The operation is _terminal_.

 */",f17096:m3867
56900,public actual fun <T> lazy(initializer: () -> T): Lazy<T>,SynchronizedLazyImpl(initializer),"/**

 * Creates a new instance of the [Lazy] that uses the specified initialization function [initializer]

 * and the default thread-safety mode [LazyThreadSafetyMode.SYNCHRONIZED].

 *

 * If the initialization of a value throws an exception, it will attempt to reinitialize the value at next access.

 *

 * Note that the returned instance uses itself to synchronize on. Do not synchronize from external code on

 * the returned instance as it may cause accidental deadlock. Also this behavior can be changed in the future.

 */",f16934:m23
14881,"@SinceKotlin(""1.4"") public actual fun <T> Array<out T>?.contentToString(): String","{
    return this?.joinToString("", "", ""["", ""]"") ?: ""null""
}","/**

 * Returns a string representation of the contents of the specified array as if it is [List].

 * 

 * @sample samples.collections.Arrays.ContentOperations.contentToString

 */",f3831:m2017
57372,public actual fun DoubleArray.sort(): Unit,"{
    if (size > 1) java.util.Arrays.sort(this)
}","/**

 * Sorts the array in-place.

 * 

 * @sample samples.collections.Arrays.Sorting.sortArray

 */",f16970:m4073
55668,"@ExperimentalStdlibApi private fun String.hexToShort(startIndex: Int = 0, endIndex: Int = length, format: HexFormat = HexFormat.Default): Short","hexToIntImpl(startIndex, endIndex, format, maxDigits = 4).toShort()","/**

 * Parses a `Short` value from this string using the specified [format].

 *

 * Note that only [HexFormat.NumberHexFormat] affects parsing,

 * and parsing is performed in case-insensitive manner.

 *

 * @param startIndex the beginning (inclusive) of the substring to parse, 0 by default.

 * @param endIndex the end (exclusive) of the substring to parse, length of this string by default.

 * @param format the [HexFormat] to use for parsing, [HexFormat.Default] by default.

 *

 * @throws IndexOutOfBoundsException when [startIndex] or [endIndex] is out of range of this string indices.

 * @throws IllegalArgumentException when `startIndex > endIndex`.

 * @throws IllegalArgumentException if the substring does not comply with the specified [format].

 */",f16779:m1421
58245,@kotlin.internal.InlineOnly public inline fun floorDiv(other: UShort): ULong,this.floorDiv(other.toULong()),"/**

     * Divides this value by the other value, flooring the result to an integer that is closer to negative infinity.

     *

     * For unsigned types, the results of flooring division and truncating division are the same.

     */",f17066:m323
43534,"fun cocoaPodsEnvironmentVariables(): Map<String, String>","{
    if (!shouldInstallLocalCocoapods) {
        return emptyMap()
    }
    val path = cocoapodsBinPath.absolutePathString() + File.pathSeparator + System.getenv(""PATH"")
    val gemPath = System.getenv(""GEM_PATH"")?.let { cocoapodsInstallationRoot.absolutePathString() + File.pathSeparator + it } ?: cocoapodsInstallationRoot.absolutePathString()
    return mapOf(""PATH"" to path, ""GEM_PATH"" to gemPath)
}","/**

 * Method returns required environment variables for cocoapods tests with execution of [POD_INSTALL_TASK_NAME]

 */",f13455:m283
50442,private fun runInIdeSyncMode(block: () -> Unit),"synchronized(System.getProperties()) {
    val isIdeaSyncActiveKey = ""idea.sync.active""
    val previousValue = System.getProperty(isIdeaSyncActiveKey)
    try {
        System.setProperty(isIdeaSyncActiveKey, ""true"")
        block()
    } finally {
        if (previousValue != null) {
            System.setProperty(isIdeaSyncActiveKey, previousValue)
        } else {
            System.clearProperty(isIdeaSyncActiveKey)
        }
    }
}","/**

     * Will swap out the System property 'idea.sync.active' to emulate IDE sync.

     * This method will enter the 'System properties monitor' to block any other thread from reading

     * System properties while this [block] is executing

     */",f16109:m125
58233,@kotlin.internal.InlineOnly public inline operator fun times(other: UShort): ULong,this.times(other.toULong()),/** Multiplies this value by the other value. */,f17066:m205
26981,private fun IrMemberAccessExpression<*>.binaryOperatorLhs(): IrExpression?,"when (origin) {
    IrStatementOrigin.EXCLEQ -> {
        (dispatchReceiver as? IrCall)?.simpleBinaryOperatorLhs()
    }
    IrStatementOrigin.EXCLEQEQ -> {
        (dispatchReceiver as? IrCall)?.simpleBinaryOperatorLhs()
    }
    IrStatementOrigin.IN -> {
        getValueArgument(0)
    }
    IrStatementOrigin.NOT_IN -> {
        (dispatchReceiver as? IrCall)?.getValueArgument(0)
    }
    else -> simpleBinaryOperatorLhs()
}","/**

 * The left-hand side expression of an infix operator/function that takes into account special cases like `in`, `!in` and `!=` operators

 * that have a more complex structure than just a single call with two arguments.

 */",f9507:m423
56974,"@SinceKotlin(""1.3"") public fun Random.asJavaRandom(): java.util.Random",(this as? AbstractPlatformRandom)?.impl ?: KotlinRandom(this),"/**

 * Creates a [java.util.Random][java.util.Random] instance that uses the specified Kotlin [Random] generator as a randomness source.

 */",f16945:m21
20081,@KtAllowAnalysisFromWriteAction @KtAllowProhibitedAnalyzeFromWriteAction public inline fun <T> allowAnalysisFromWriteAction(action: () -> T): T,"{
    if (KtReadActionConfinementLifetimeToken.allowFromWriteAction.get()) return action()
    KtReadActionConfinementLifetimeToken.allowFromWriteAction.set(true)
    try {
        return action()
    } finally {
        KtReadActionConfinementLifetimeToken.allowFromWriteAction.set(false)
    }
}","/**

 * Analysis is not supposed to be called from write action.

 * Such actions can lead to IDE freezes and incorrect behavior in some cases.

 *

 * There is no guarantee that PSI changes will be reflected in an Analysis API world inside

 * one [analyze] session.

 * Example:

 * ```

 * // code to be analyzed

 * fun foo(): Int = 0

 *

 * // use case code

 * fun useCase() {

 *   analyse(function) {

 *    // 'getConstantFromExpressionBody' is an imaginary function

 *    val valueBefore = function.getConstantFromExpressionBody() // valueBefore is 0

 *

 *    changeExpressionBodyTo(1) // now function will looks like `fun foo(): Int = 1`

 *    val valueAfter = function.getConstantFromExpressionBody() // Wrong way: valueAfter is not guarantied to be '1'

 *   }

 *

 *   analyse(function) {

 *    val valueAfter = function.getConstantFromExpressionBody() // OK: valueAfter is guarantied to be '1'

 *   }

 * }

 * ```

 *

 * @see KtAnalysisSession

 * @see KtReadActionConfinementLifetimeToken

 */",f5760:m219
27503,internal fun getStructure(sourceFile: File),sourceCache[sourceFile.toURI()],/** Used for testing only. */,f9700:m191
54735,"@SinceKotlin(""1.3"") @Suppress(""ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS"") public actual fun CharArray.fill(element: Char, fromIndex: Int = 0, toIndex: Int = size): Unit","{
    AbstractList.checkRangeIndexes(fromIndex, toIndex, size)
    nativeFill(element.code, fromIndex, toIndex)
}","/**

 * Fills this array or its subrange with the specified [element] value.

 * 

 * @param fromIndex the start of the range (inclusive) to fill, 0 by default.

 * @param toIndex the end of the range (exclusive) to fill, size of this array by default.

 * 

 * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.

 * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].

 */",f16713:m2581
43572,fun BuildResult.assertOutputContainsAny(vararg expectedSubStrings: String),"{
    assert(expectedSubStrings.any { output.contains(it) }) {
        printBuildOutput()
        ""Build output does not contain any of \""${expectedSubStrings.toList()}\""""
    }
}","/**

 * Asserts Gradle output contains any of [expectedSubStrings] strings.

 */",f13457:m55
15397,@Test fun maxFF(),"{
    assertTrue(""Incorrect float max value"", max(-1908897.600f, 1908897.600f) == 1908897.600f)
    assertTrue(""Incorrect float max value"", max(2.0f, 1908897.600f) == 1908897.600f)
    assertTrue(""Incorrect float max value"", max(-2.0f, -1908897.600f) == -2.0f)
    assertEquals(Float.NaN.toString(), max(Float.NaN, 42.0f).toString(), ""Max failed for NaN"")
    assertEquals(Float.NaN.toString(), max(42.0f, Float.NaN).toString(), ""Max failed for NaN"")
    assertEquals((+0.0f).toString(), max(+0.0f, -0.0f).toString(), ""Max failed for 0.0"")
    assertEquals((+0.0f).toString(), max(-0.0f, +0.0f).toString(), ""Max failed for 0.0"")
    assertEquals((-0.0f).toString(), max(-0.0f, -0.0f).toString(), ""Max failed for -0.0f"")
    assertEquals((+0.0f).toString(), max(+0.0f, +0.0f).toString(), ""Max failed for 0.0"")
}","/**

     * Tests kotlin.math.max(float, float)

     */",f3868:m891
43613,fun BuildResult.assertTasksUpToDate(vararg taskPaths: String),"{
    assertTasksHaveOutcome(TaskOutcome.UP_TO_DATE, taskPaths.asList())
}","/**

 * Asserts given [taskPaths] have [TaskOutcome.UP_TO_DATE] execution state.

 */",f13463:m143
63486,"@SinceKotlin(""1.3"") @Suppress(""ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS"") public actual fun LongArray.copyInto(destination: LongArray, destinationOffset: Int = 0, startIndex: Int = 0, endIndex: Int = size): LongArray","{
    AbstractList.checkRangeIndexes(startIndex, endIndex, this.size)
    val rangeSize = endIndex - startIndex
    AbstractList.checkRangeIndexes(destinationOffset, destinationOffset + rangeSize, destination.size)
    kotlin.wasm.internal.copyWasmArray(this.storage, destination.storage, startIndex, destinationOffset, rangeSize)
    return destination
}","/**

 * Copies this array or its subrange into the [destination] array and returns that array.

 * 

 * It's allowed to pass the same array in the [destination] and even specify the subrange so that it overlaps with the destination range.

 * 

 * @param destination the array to copy to.

 * @param destinationOffset the position in the [destination] array to copy to, 0 by default.

 * @param startIndex the beginning (inclusive) of the subrange to copy, 0 by default.

 * @param endIndex the end (exclusive) of the subrange to copy, size of this array by default.

 * 

 * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of this array indices or when `startIndex > endIndex`.

 * @throws IndexOutOfBoundsException when the subrange doesn't fit into the [destination] array starting at the specified [destinationOffset],

 * or when that index is out of the [destination] array indices range.

 * 

 * @return the [destination] array.

 */",f17396:m2405
57080,public fun File.appendBytes(array: ByteArray): Unit,"FileOutputStream(this, true).use { it.write(array) }","/**

 * Appends an [array] of bytes to the content of this file.

 *

 * @param array byte array to append to this file.

 */",f16956:m231
15034,"@SinceKotlin(""1.4"") public actual fun maxOf(a: Float, vararg other: Float): Float","{
    var max = a
    for (e in other) max = maxOf(max, e)
    return max
}","/**

 * Returns the greater of the given values.

 * 

 * If any value is `NaN`, returns `NaN`.

 */",f3836:m403
9009,"private fun dfgNodeToConstraintNode(function: Function, node: DataFlowIR.Node): Node","{
    fun edgeToConstraintNode(edge: DataFlowIR.Edge): Node = edgeToConstraintNode(function, edge)
    fun doCall(callee: DataFlowIR.FunctionSymbol, arguments: List<Node>, returnType: DataFlowIR.Type.Declared) = doCall(function, callee, arguments, returnType)
    fun readField(field: DataFlowIR.Field, actualType: DataFlowIR.Type.Declared): Node {
        val fieldNode = fieldNode(field)
        val expectedType = field.type.resolved()
        return if (!useTypes || actualType == expectedType) fieldNode else doCast(function, fieldNode, actualType)
    }
    fun writeField(field: DataFlowIR.Field, value: Node) = addEdge(value, fieldNode(field))
    if (node is DataFlowIR.Node.Variable && node.kind != DataFlowIR.VariableKind.Temporary) {
        return variables.getOrPut(node) { ordinaryNode { ""Variable\$${function.symbol}"" } }
    }
    return functionNodesMap.getOrPut(node) { when (node) {
        is DataFlowIR.Node.Const -> {
            val type = node.type.resolved()
            addInstantiatingClass(type)
            sourceNode(concreteType(type)) { ""Const\$${function.symbol}"" }
        }
        DataFlowIR.Node.Null -> constraintGraph.voidNode
        is DataFlowIR.Node.Parameter -> function.parameters[node.index]
        is DataFlowIR.Node.StaticCall -> {
            val arguments = node.arguments.map(::edgeToConstraintNode)
            doCall(node.callee, arguments, node.returnType.resolved())
        }
        is DataFlowIR.Node.NewObject -> {
            val returnType = node.constructedType.resolved()
            addInstantiatingClass(returnType)
            val instanceNode = concreteClass(returnType)
            val arguments = listOf(instanceNode) + node.arguments.map(::edgeToConstraintNode)
            doCall(node.callee, arguments, returnType)
            instanceNode
        }
        is DataFlowIR.Node.VirtualCall -> {
            val callee = node.callee
            val receiverType = node.receiverType.resolved()
            context.logMultiple {
                +""Virtual call""
                +""Caller: ${function.symbol}""
                +""Callee: $callee""
                +""Receiver type: $receiverType""
                +""Possible callees:""
                forEachBitInBoth(typeHierarchy.inheritorsOf(receiverType), instantiatingClasses) { +allTypes[it].calleeAt(node).toString() }
                +""""
            }
            val returnType = node.returnType.resolved()
            val arguments = node.arguments.map(::edgeToConstraintNode)
            val receiverNode = arguments[0]
            if (receiverType == DataFlowIR.Type.Virtual) addEdge(constraintGraph.virtualNode, receiverNode)
            if (entryPoint == null && returnType.isFinal) {
                addInstantiatingClass(returnType)
            }
            val returnsNode = ordinaryNode { ""VirtualCallReturns\$${function.symbol}"" }
            if (receiverType != DataFlowIR.Type.Virtual) typesVirtualCallSites[receiverType.index].add(ConstraintGraphVirtualCall(function, node, arguments, returnsNode))
            forEachBitInBoth(typeHierarchy.inheritorsOf(receiverType), instantiatingClasses) {
                val actualCallee = allTypes[it].calleeAt(node)
                addEdge(doCall(actualCallee, arguments, actualCallee.returnParameter.type.resolved()), returnsNode)
            }
            if (entryPoint == null) {
                if (!returnType.isFinal) {
                    receiverNode.addCastEdge(Node.CastEdge(returnsNode, virtualTypeFilter))
                } else {
                    constraintGraph.externalVirtualCalls.add(ExternalVirtualCall(receiverNode, returnsNode, returnType))
                }
            }
            receiverNode.addCastEdge(Node.CastEdge(function.throws, virtualTypeFilter))
            constraintGraph.virtualCallSiteReceivers[node] = receiverNode
            castIfNeeded(function, returnsNode, node.callee.returnParameter.type.resolved(), returnType)
        }
        is DataFlowIR.Node.Singleton -> {
            val type = node.type.resolved()
            addInstantiatingClass(type)
            val instanceNode = concreteClass(type)
            node.constructor?.let { doCall(it, buildList {
                add(instanceNode)
                node.arguments?.forEach { add(edgeToConstraintNode(it)) }
            }, type) }
            instanceNode
        }
        is DataFlowIR.Node.AllocInstance -> {
            val type = node.type.resolved()
            addInstantiatingClass(type)
            concreteClass(type)
        }
        is DataFlowIR.Node.FunctionReference -> {
            concreteClass(node.type.resolved())
        }
        is DataFlowIR.Node.FieldRead -> {
            val type = node.field.type.resolved()
            if (entryPoint == null && type.isFinal) addInstantiatingClass(type)
            readField(node.field, node.type.resolved())
        }
        is DataFlowIR.Node.FieldWrite -> {
            val type = node.field.type.resolved()
            if (entryPoint == null && type.isFinal) addInstantiatingClass(type)
            writeField(node.field, edgeToConstraintNode(node.value))
            constraintGraph.voidNode
        }
        is DataFlowIR.Node.ArrayRead -> readField(constraintGraph.arrayItemField, node.type.resolved())
        is DataFlowIR.Node.ArrayWrite -> {
            writeField(constraintGraph.arrayItemField, edgeToConstraintNode(node.value))
            constraintGraph.voidNode
        }
        is DataFlowIR.Node.Variable -> node.values.map { edgeToConstraintNode(it) }.let { values -> ordinaryNode { ""TempVar\$${function.symbol}"" }.also { node -> values.forEach { addEdge(it, node) } } }
        else -> error(""Unreachable"")
    } }
}","/**

             * Takes a function DFG's node and creates a constraint graph node corresponding to it.

             * Also creates all necessary edges, except for variable nodes.

             * For variable nodes edges must be created separately, otherwise recursion can be too deep.

             */",f3309:m2293
15049,"@SinceKotlin(""1.1"") @kotlin.internal.InlineOnly public actual inline fun minOf(a: Double, b: Double, c: Double): Double","{
    return minOf(a, minOf(b, c))
}","/**

 * Returns the smaller of three values.

 * 

 * If any value is `NaN`, returns `NaN`.

 */",f3836:m717
41027,private fun revertChanges(),"{
    reporter.debug { ""Reverting changes"" }
    reporter.measure(GradleBuildTime.RESTORE_OUTPUT_FROM_BACKUP) { for ((originPath, relocatedPath) in fileRelocationRegistry) {
        if (relocatedPath == null) {
            if (Files.exists(originPath)) {
                Files.delete(originPath)
            }
            continue
        }
        Files.move(relocatedPath, originPath, StandardCopyOption.REPLACE_EXISTING)
    } }
}","/**

     * Reverts all the file changes registered in this transaction.

     * If the value for a key is null, then it's the file that was created during the transaction, so the file will be just removed.

     */",f12984:m433
65210,private fun ensureKotlinContextInitialized(context: CompileContext): KotlinCompileContext,"{
    val kotlinCompileContext = context.getUserData(kotlinCompileContextKey)
    if (kotlinCompileContext != null) return kotlinCompileContext
    synchronized(kotlinCompileContextKey) {
        val actualKotlinCompileContext = context.getUserData(kotlinCompileContextKey)
        if (actualKotlinCompileContext != null) return actualKotlinCompileContext
        try {
            return initializeKotlinContext(context)
        } catch (t: Throwable) {
            jpsReportInternalBuilderError(context, Error(""Cannot initialize Kotlin context: ${t.message}"", t))
            throw t
        }
    }
}","/**

     * Ensure Kotlin Context initialized.

     * Kotlin Context should be initialized only when required (before first kotlin chunk build).

     */",f17598:m249
48504,fun getStaticLib(buildType: String): StaticLibrary,"getStaticLib("""", buildType)",/** Returns a static library with the empty name prefix and the given build type. Throws an exception if there is no such binary.*/,f15652:m153
54740,"@Suppress(""NOTHING_TO_INLINE"") public actual inline operator fun LongArray.plus(element: Long): LongArray","{
    return plus(longArrayOf(element))
}","/**

 * Returns an array containing all elements of the original array and then the given [element].

 */",f16713:m2679
54810,"@SinceKotlin(""1.1"") @kotlin.internal.InlineOnly public actual inline fun maxOf(a: Float, b: Float, c: Float): Float","{
    return JsMath.max(a, b, c)
}","/**

 * Returns the greater of three values.

 * 

 * If any value is `NaN`, returns `NaN`.

 */",f16714:m257
44085,@Provides @Singleton @ForApplication fun provideApplicationContext(): Context,"{
    return application
}","/**

     * Allow the application context to be injected but require that it be annotated with

     * [@Annotation][ForApplication] to explicitly differentiate it from an activity context.

     */",f13546:m61
57152,"@SinceKotlin(""1.1"") @kotlin.internal.InlineOnly public actual inline fun maxOf(a: Double, b: Double, c: Double): Double","{
    return maxOf(a, maxOf(b, c))
}","/**

 * Returns the greater of three values.

 * 

 * If any value is `NaN`, returns `NaN`.

 */",f16966:m283
55700,"@SinceKotlin(""1.5"") @WasExperimental(ExperimentalStdlibApi::class) public fun Char.digitToInt(): Int","{
    return digitOf(this, 10).also { if (it < 0) throw IllegalArgumentException(""Char $this is not a decimal digit"") }
}","/**

 * Returns the numeric value of the decimal digit that this Char represents.

 * Throws an exception if this Char is not a valid decimal digit.

 *

 * A Char is considered to represent a decimal digit if [isDigit] is true for the Char.

 * In this case, the Unicode decimal digit value of the character is returned.

 *

 * @sample samples.text.Chars.digitToInt

 */",f16785:m21
14915,public actual fun CharArray.copyOf(newSize: Int): CharArray,"{
    return this.copyOfUninitializedElements(newSize)
}","/**

 * Returns new array which is a copy of the original array, resized to the given [newSize].

 * The copy is either truncated or padded at the end with null char (`\u0000`) values if necessary.

 * 

 * - If [newSize] is less than the size of the original array, the copy array is truncated to the [newSize].

 * - If [newSize] is greater than the size of the original array, the extra elements in the copy array are filled with null char (`\u0000`) values.

 * 

 * @sample samples.collections.Arrays.CopyOfOperations.resizedPrimitiveCopyOf

 */",f3831:m2957
12049,@BetaInteropApi public fun getOriginalKotlinClass(objCClass: ObjCClass): KClass<*>?,"{
    val typeInfo = getTypeInfoForClass(objCClass.objcPtr())
    if (typeInfo.isNull()) return null
    return KClassImpl<Any>(typeInfo)
}","/**

 * If [objCClass] is a class generated to Objective-C header for Kotlin class,

 * returns [KClass] for that original Kotlin class.

 *

 * Otherwise returns `null`.

 */",f3618:m23
13637,public operator fun rangeTo(other: Long): LongRange,"LongRange(this.toLong(), other)",/** Creates a range from this value to the specified [other] value. */,f3686:m2355
11468,fun printError(message: String): Nothing,"{
    error(""$message\n${makeUsage()}"")
}","/**

     * Outputs an error message adding the usage information after it.

     *

     * @param message error message.

     */",f3554:m683
54709,public actual fun ByteArray.copyOf(newSize: Int): ByteArray,"{
    require(newSize >= 0) { ""Invalid new array size: $newSize."" }
    return fillFrom(this, ByteArray(newSize))
}","/**

 * Returns new array which is a copy of the original array, resized to the given [newSize].

 * The copy is either truncated or padded at the end with zero values if necessary.

 * 

 * - If [newSize] is less than the size of the original array, the copy array is truncated to the [newSize].

 * - If [newSize] is greater than the size of the original array, the extra elements in the copy array are filled with zero values.

 * 

 * @sample samples.collections.Arrays.CopyOfOperations.resizedPrimitiveCopyOf

 */",f16713:m1817
16518,"inline fun withReadLock(target: FirElementWithResolveState, phase: FirResolvePhase, action: () -> Unit)","{
    checker.lazyResolveToPhaseInside(phase) { target.withLock(toPhase = phase, updatePhase = false, action = action) }
}","/**

     * Locks an a [FirElementWithResolveState] to read something required for [phase].

     * Does nothing if [target] already has at least [phase] phase.

     *

     * [action] will be executed once if [target] is not yet resolved to [phase] phase.

     *

     * @see withWriteLock

     */",f4129:m123
15021,"@SinceKotlin(""1.1"") @kotlin.internal.InlineOnly public actual inline fun maxOf(a: Double, b: Double): Double","{
    return if (a.compareTo(b) >= 0) a else b
}","/**

 * Returns the greater of two values.

 * 

 * If either value is `NaN`, returns `NaN`.

 */",f3836:m141
63471,"@Deprecated(""Use Kotlin compiler 1.4 to avoid deprecation warning."") @SinceKotlin(""1.1"") @DeprecatedSinceKotlin(hiddenSince = ""1.4"") public fun BooleanArray.contentToString(): String","{
    return this.contentToString()
}","/**

 * Returns a string representation of the contents of the specified array as if it is [List].

 * 

 * @sample samples.collections.Arrays.ContentOperations.contentToString

 */",f17396:m1969
64450,"@SinceKotlin(""1.5"") @WasExperimental(ExperimentalPathApi::class) @Throws(IOException::class) @kotlin.internal.InlineOnly public inline fun Path.writeBytes(array: ByteArray, vararg options: OpenOption): Unit","{
    Files.write(this, array, *options)
}","/**

 * Writes an [array] of bytes to this file.

 *

 * By default, the file will be overwritten if it already exists, but you can control this behavior

 * with [options].

 *

 * @param array byte array to write into this file.

 * @param options options to determine how the file is opened.

 */",f17469:m227
48828,"fun get(propertyName: String, project: Project): String?","{
    return property(propertyName, project).orNull
}",/** Returns the value of the property with the given [propertyName] in the given [project]. */,f15687:m85
58608,"@kotlin.jvm.JvmName(""floatRangeContains"") public operator fun ClosedRange<Float>.contains(value: Double): Boolean","{
    return contains(value.toFloat())
}","/**

 * Checks if the specified [value] belongs to this range.

 */",f17092:m891
16804,private fun invalidate(module: KtModule),"{
    ApplicationManager.getApplication().assertWriteAccessAllowed()
    sessionInvalidationEventPublisher.collectSessionsAndPublishInvalidationEvent {
        val didSessionExist = sessionCache.removeSession(module)
        if (!didSessionExist) return@collectSessionsAndPublishInvalidationEvent
        KotlinModuleDependentsProvider.getInstance(project).getTransitiveDependents(module).forEach(sessionCache::removeSession)
        if (module is KtScriptModule || module is KtScriptDependencyModule || module is KtLibraryModule) {
            sessionCache.removeAllScriptSessions()
        }
        if (module is KtDanglingFileModule) {
            sessionCache.removeContextualDanglingFileSessions(module)
        } else {
            sessionCache.removeAllDanglingFileSessions()
        }
    }
}","/**

     * Invalidates the session(s) associated with [module].

     *

     * Per the contract of [LLFirSessionInvalidationService], [invalidate] may only be called from a write action.

     */",f4173:m145
7514,"fun codesign(project: Project, path: String)","{
    check(HostManager.hostIsMac) { ""Apple specific code signing"" }
    val (stdOut, stdErr, exitCode) = runProcess(executor = localExecutor(project), executable = ""/usr/bin/codesign"", args = listOf(""--verbose"", ""-s"", ""-"", path))
    check(exitCode == 0) { """"""
    
            |Codesign failed with exitCode: $exitCode
    
            |stdout: $stdOut
    
            |stderr: $stdErr
    
            """""".trimMargin() }
}","/**

 * Ad-hoc signing of the specified path.

 */",f3111:m235
52034,"fun Throwable.asDiagnostics(code: Int = ScriptDiagnostic.unspecifiedException, customMessage: String? = null, path: String? = null, location: SourceCode.Location? = null, severity: ScriptDiagnostic.Severity = ScriptDiagnostic.Severity.ERROR): ScriptDiagnostic","ScriptDiagnostic(code, customMessage ?: message ?: ""$this"", severity, path, location, this)","/**

 * Converts the receiver Throwable to the Failure results wrapper with optional [customMessage], [path] and [location]

 */",f16426:m485
37461,private fun MemberScope.collectClasses(collector: MutableCollection<ClassDescriptor>),"{
    getContributedDescriptors().asSequence().filterIsInstance<ClassDescriptor>().forEach {
        collector += it
        if (mapper.shouldBeExposed(it)) {
            it.unsubstitutedMemberScope.collectClasses(collector)
        }
    }
}","/**

     * Recursively collect classes into [collector].

     * We need to do so because we want to make the order of declarations stable.

     */",f11824:m183
48550,"@JvmOverloads fun test(buildTypes: Collection<NativeBuildType> = NativeBuildType.DEFAULT_BUILD_TYPES, configure: TestExecutable.() -> Unit = {})","createBinaries("""", ""test"", NativeOutputKind.TEST, buildTypes, ::TestExecutable, configure)",/** Creates a test executable with the empty name prefix for each build type and configures it. */,f15652:m597
58804,"public fun <T, R: Any> Sequence<T>.mapIndexedNotNull(transform: (index: Int, T) -> R?): Sequence<R>","{
    return TransformingIndexedSequence(this, transform).filterNotNull()
}","/**

 * Returns a sequence containing only the non-null results of applying the given [transform] function

 * to each element and its index in the original sequence.

 * @param [transform] function that takes the index of an element and the element itself

 * and returns the result of the transform applied to the element.

 *

 * The operation is _intermediate_ and _stateless_.

 */",f17096:m2177
49798,@ExternalKotlinTargetApi fun <T: DecoratedExternalKotlinCompilation> DecoratedExternalKotlinTarget.createCompilation(descriptor: ExternalKotlinCompilationDescriptor<T>): T,"{
    val compilationImplFactory = KotlinCompilationImplFactory(compilerOptionsFactory = when (platformType) {
        KotlinPlatformType.common -> KotlinMultiplatformCommonCompilerOptionsFactory
        KotlinPlatformType.jvm -> KotlinJvmCompilerOptionsFactory
        KotlinPlatformType.androidJvm -> KotlinJvmCompilerOptionsFactory
        KotlinPlatformType.js -> KotlinJsCompilerOptionsFactory
        KotlinPlatformType.native -> KotlinNativeCompilerOptionsFactory
        KotlinPlatformType.wasm -> KotlinMultiplatformCommonCompilerOptionsFactory
    }, compilationSourceSetsContainerFactory = { _, _ -> KotlinCompilationSourceSetsContainer(descriptor.defaultSourceSet) }, compilationTaskNamesContainerFactory = { target, compilationName ->
        val default = DefaultKotlinCompilationTaskNamesContainerFactory.create(target, compilationName)
        default.copy(compileTaskName = descriptor.compileTaskName ?: default.compileTaskName, compileAllTaskName = descriptor.compileAllTaskName ?: default.compileAllTaskName)
    }, compilationAssociator = @Suppress(""unchecked_cast"") KotlinCompilationAssociator { _, first, second -> descriptor.compilationAssociator.associate(first.decoratedInstance as T, second.decoratedInstance as DecoratedExternalKotlinCompilation) }, compilationFriendPathsResolver = DefaultKotlinCompilationFriendPathsResolver(DefaultKotlinCompilationFriendPathsResolver.FriendArtifactResolver.composite(DefaultKotlinCompilationFriendPathsResolver.DefaultFriendArtifactResolver, descriptor.friendArtifactResolver?.let { declaredResolver -> DefaultKotlinCompilationFriendPathsResolver.FriendArtifactResolver { compilation -> @Suppress(""unchecked_cast"") declaredResolver.resolveFriendPaths(compilation.decoratedInstance as T) } })))
    val compilationImpl = compilationImplFactory.create(this, descriptor.compilationName)
    val decoratedCompilation = descriptor.compilationFactory.create(Delegate(compilationImpl))
    decoratedCompilation.sourceSetTreeClassifier = descriptor.sourceSetTreeClassifierV2 ?: @Suppress(""DEPRECATION"") SourceSetTreeClassifierWrapper(descriptor.sourceSetTreeClassifier)
    descriptor.configure?.invoke(decoratedCompilation)
    this.delegate.compilations.add(decoratedCompilation)
    setupCompileTask(decoratedCompilation)
    return decoratedCompilation
}","/**

 *  Creates a compilation for External Kotlin Targets adhering to the configuration provided in the [descriptor]

 *  - The _kind_ of compilation will be chosen automatically by the specified [DecoratedExternalKotlinTarget.platformType]

 *  - The compilation will use the [ExternalKotlinCompilationDescriptor.defaultSourceSet] as its (default) source set

 *  - The compilation wil reference the compile task using the [ExternalKotlinCompilationDescriptor.compileTaskName] if specified

 *  - The compilation will reference the compile all task name using the[ExternalKotlinCompilationDescriptor.compileAllTaskName] if specified

 *  - Compilations .associateWith calls will be handled by the [ExternalKotlinCompilationDescriptor.compilationAssociator] if specified

 *  - An additional friendArtifactResolver will be respected if the [ExternalKotlinCompilationDescriptor.friendArtifactResolver] is specified

 *  - The [ExternalKotlinCompilationDescriptor.configure] method will be called before the compilation is available in [KotlinTarget.compilations]

 *  container

 */",f15962:m39
58027,@kotlin.internal.InlineOnly public inline operator fun minus(other: UByte): UInt,this.toUInt().minus(other.toUInt()),/** Subtracts the other value from this value. */,f17058:m173
14969,public actual operator fun BooleanArray.plus(elements: Collection<Boolean>): BooleanArray,"{
    var index = size
    val result = copyOfUninitializedElements(index + elements.size)
    for (element in elements) result[index++] = element
    return result
}","/**

 * Returns an array containing all elements of the original array and then all elements of the given [elements] collection.

 */",f3831:m4301
14067,public fun getAndSet(newValue: T): T,this::value.getAndSetField(newValue),"/**

     * Atomically sets the value to the given [new value][newValue] and returns the old value.

     */",f3718:m295
15056,"@SinceKotlin(""1.4"") public actual fun minOf(a: Double, vararg other: Double): Double","{
    var min = a
    for (e in other) min = minOf(min, e)
    return min
}","/**

 * Returns the smaller of the given values.

 * 

 * If any value is `NaN`, returns `NaN`.

 */",f3836:m867
55951,protected fun setNext(value: T): Unit,"{
    nextValue = value
    state = State.READY
}","/**

     * Sets the next value in the iteration, called from the [computeNext] function

     */",f16819:m141
63434,"@Deprecated(""Use Kotlin compiler 1.4 to avoid deprecation warning."") @SinceKotlin(""1.1"") @DeprecatedSinceKotlin(hiddenSince = ""1.4"") public infix fun DoubleArray.contentEquals(other: DoubleArray): Boolean","{
    return this.contentEquals(other)
}","/**

 * Checks if the two specified arrays are *structurally* equal to one another.

 * 

 * Two arrays are considered structurally equal if they have the same size, and elements at corresponding indices are equal.

 * Elements are compared for equality using the [equals][Any.equals] function.

 * This means `NaN` is equal to itself and `-0.0` is not equal to `0.0`.

 * 

 * @param other the array to compare with this array.

 * @return `true` if the two arrays are structurally equal, `false` otherwise.

 * 

 * @sample samples.collections.Arrays.ContentOperations.doubleArrayContentEquals

 */",f17396:m869
58908,"@kotlin.jvm.JvmName(""averageOfFloat"") public fun Sequence<Float>.average(): Double","{
    var sum: Double = 0.0
    var count: Int = 0
    for (element in this) {
        sum += element
        checkCountOverflow(++count)
    }
    return if (count == 0) Double.NaN else sum / count
}","/**

 * Returns an average value of elements in the sequence.

 *

 * The operation is _terminal_.

 */",f17096:m5991
58863,"public inline fun <S, T: S> Sequence<T>.reduce(operation: (acc: S, T) -> S): S","{
    val iterator = this.iterator()
    if (!iterator.hasNext()) throw UnsupportedOperationException(""Empty sequence can't be reduced."")
    var accumulator: S = iterator.next()
    while (iterator.hasNext()) {
        accumulator = operation(accumulator, iterator.next())
    }
    return accumulator
}","/**

 * Accumulates value starting with the first element and applying [operation] from left to right

 * to current accumulator value and each element.

 * 

 * Throws an exception if this sequence is empty. If the sequence can be empty in an expected way,

 * please use [reduceOrNull] instead. It returns `null` when its receiver is empty.

 * 

 * @param [operation] function that takes current accumulator value and an element,

 * and calculates the next accumulator value.

 *

 * The operation is _terminal_.

 * 

 * @sample samples.collections.Collections.Aggregates.reduce

 */",f17096:m4389
58619,"@Deprecated(""This `contains` operation mixing integer and floating point arguments has ambiguous semantics and is going to be removed."") @DeprecatedSinceKotlin(warningSince = ""1.3"", errorSince = ""1.4"", hiddenSince = ""1.5"") @kotlin.jvm.JvmName(""floatRangeContains"") public operator fun ClosedRange<Float>.contains(value: Int): Boolean","{
    return contains(value.toFloat())
}","/**

 * Checks if the specified [value] belongs to this range.

 */",f17092:m1091
15380,@Test fun asinD(),"{
    val r = sin(asin(OPP / HYP))
    val lr = r.toBits()
    val t = (OPP / HYP).toBits()
    assertTrue(""Returned incorrect arc sine"", lr == t || lr + 1 == t || lr - 1 == t)
}","/**

     * Tests kotlin.math.asin(Double)

     */",f3868:m243
54653,@kotlin.internal.InlineOnly public actual inline fun LongArray.asList(): List<Long>,"{
    return this.unsafeCast<Array<Long>>().asList()
}","/**

 * Returns a [List] that wraps the original array.

 */",f16713:m261
63473,"@SinceKotlin(""1.4"") public actual fun <T> Array<out T>?.contentToString(): String","{
    return this?.joinToString("", "", ""["", ""]"") ?: ""null""
}","/**

 * Returns a string representation of the contents of the specified array as if it is [List].

 * 

 * @sample samples.collections.Arrays.ContentOperations.contentToString

 */",f17396:m2017
21699,"private fun toTypeArgumentsMapping(typeArguments: List<FirTypeProjection>, partiallyAppliedSymbol: KtPartiallyAppliedSymbol<*, *>): Map<KtTypeParameterSymbol, KtType>","{
    val typeParameters = partiallyAppliedSymbol.symbol.typeParameters
    if (typeParameters.isEmpty()) return emptyMap()
    if (typeArguments.size < typeParameters.size) return emptyMap()
    val result = mutableMapOf<KtTypeParameterSymbol, KtType>()
    for ((index, typeParameter) in typeParameters.withIndex()) {
        val typeArgument = typeArguments[index]
        if (typeArgument !is FirTypeProjectionWithVariance || typeArgument.variance != Variance.INVARIANT) return emptyMap()
        result[typeParameter] = typeArgument.typeRef.coneType.asKtType()
    }
    return result
}","/**

     * Maps [typeArguments] to the type parameters of [partiallyAppliedSymbol].

     *

     * If too many type arguments are provided, a mapping is still created. Extra type arguments are simply ignored. If this wasn't the

     * case, the resulting [KtCall] would contain no type arguments at all, which can cause problems later. If too few type arguments are

     * provided, an empty map is returned defensively so that [toTypeArgumentsMapping] doesn't conjure any error types. If you want to map

     * too few type arguments meaningfully, please provide filler types explicitly.

     */",f8624:m1831
56136,"@kotlin.internal.InlineOnly public inline fun <T> Comparator<T>.thenComparator(crossinline comparison: (a: T, b: T) -> Int): Comparator<T>","Comparator { a, b ->
    val previousCompare = this@thenComparator.compare(a, b)
    if (previousCompare != 0) previousCompare else comparison(a, b)
}","/**

 * Creates a comparator using the primary comparator and function to calculate a result of comparison.

 *

 * @sample samples.comparisons.Comparisons.thenComparator

 */",f16832:m375
56225,"@SinceKotlin(""1.5"") @kotlin.internal.InlineOnly @kotlin.internal.IntrinsicConstEvaluation public inline fun Byte.floorDiv(other: Long): Long",this.toLong().floorDiv(other),"/** Divides this value by the other value, flooring the result to an integer that is closer to negative infinity. */",f16842:m137
54802,"@SinceKotlin(""1.1"") @Suppress(""NOTHING_TO_INLINE"") public actual inline fun maxOf(a: Long, b: Long): Long","{
    return if (a >= b) a else b
}","/**

 * Returns the greater of two values.

 */",f16714:m103
13501,@kotlin.internal.IntrinsicConstEvaluation public inline operator fun div(other: Short): Int,this.toInt() / other.toInt(),"/** Divides this value by the other value, truncating the result to an integer that is closer to zero. */",f3686:m381
14523,"private inline fun <reified T: Number> parse(string: String, negativeInf: T, positiveInf: T, nan: T, zero: T, maxExp: Int, minExp: Int, parserImpl: (String, Int) -> T, hexParserImpl: (String) -> T): T","{
    val s = string.trim { it <= ' ' }
    val length = s.length
    if (length == 0) {
        throw NumberFormatException(s)
    }
    val last = s[length - 1]
    if (last == 'y' || last == 'N') {
        return parseNamed(s, length, negativeInf, positiveInf, nan)
    }
    if (parseAsHex(s)) {
        return hexParserImpl(s)
    }
    val info = initialParse(s)
    if (""0"" == info.s || info.e + info.s.length - 1 < minExp) {
        return if (info.negative) unaryMinus(zero) else zero
    }
    if (info.e > maxExp || info.e + info.s.length - 1 > maxExp) {
        return if (info.negative) negativeInf else positiveInf
    }
    val result = parserImpl(info.s, info.e)
    return if (info.negative) unaryMinus(result) else result
}","/**

     * Common method for parsing floating point number, unified for Double and Float.

     * Returns the closest Float or Double value to the real number in the string.

     *

     * @param string that will be parsed to a Float or a Double

     * @param negativeInf will be returned if the value is infinitesimal

     * @param positiveInf will be returned if the value is infinitely large

     * @param nan will be returned if the value is NaN

     * @param zero will be returned if the input value is 0.0

     * @param maxExp maximum exponent size that can be processed, in case the input string has bigger number

     *  will return Infinity

     * @param minExp minimum exponent size that can be processed, in case the input string has bigger number

     *  will return Minus Infinity

     * @param parserImpl - native method that implements parsing and processing of a float/double value

     * @param hexParserImpl - a method for parsing of the number in hex format

     * @return the Float or Double number closest to the real number

     * @exception NumberFormatException if the String doesn't represent a number of type T (Double or Float)

     */",f3789:m185
54743,"@Suppress(""NOTHING_TO_INLINE"") public actual inline operator fun BooleanArray.plus(element: Boolean): BooleanArray","{
    return plus(booleanArrayOf(element))
}","/**

 * Returns an array containing all elements of the original array and then the given [element].

 */",f16713:m2727
58620,"@kotlin.jvm.JvmName(""longRangeContains"") @SinceKotlin(""1.9"") @WasExperimental(ExperimentalStdlibApi::class) public operator fun OpenEndRange<Long>.contains(value: Int): Boolean","{
    return contains(value.toLong())
}","/**

 * Checks if the specified [value] belongs to this range.

 */",f17092:m1111
11105,fun run(): TaskControlBlock?,"{
    val packet: Packet?
    if (this.state == STATE_SUSPENDED_RUNNABLE) {
        packet = this.queue
        this.queue = packet?.link
        if (this.queue == null) {
            this.state = STATE_RUNNING
        } else {
            this.state = STATE_RUNNABLE
        }
    } else {
        packet = null
    }
    return this.task.run(packet)
}","/**

     * Runs this task, if it is ready to be run, and returns the next task to run.

     */",f3500:m579
56867,"@SinceKotlin(""1.4"") @kotlin.internal.InlineOnly public actual inline fun Int.takeLowestOneBit(): Int",Integer.lowestOneBit(this),"/**

 * Returns a number having a single bit set in the position of the least significant set bit of this [Int] number,

 * or zero, if this number is zero.

 */",f16929:m251
53170,"@LowPriorityInOverloadResolution @Deprecated(message = ""This API is moved to another package, use 'kotlinx.dom.removeClass' instead."", replaceWith = ReplaceWith(""this.removeClass(cssClasses)"", ""kotlinx.dom.removeClass"")) @DeprecatedSinceKotlin(warningSince = ""1.4"", errorSince = ""1.6"") @Suppress(""NOTHING_TO_INLINE"") public inline fun Element.removeClass(vararg cssClasses: String): Boolean",this.newRemoveClass(*cssClasses),"/**

 * Removes all [cssClasses] from element. Has no effect if all specified classes are missing in class attribute of the element

 *

 * @return true if at least one class has been removed

 */",f16628:m75
58581,"@SinceKotlin(""1.3"") @kotlin.internal.InlineOnly public inline fun CharRange.random(): Char","{
    return random(Random)
}","/**

 * Returns a random element from this range.

 * 

 * @throws IllegalArgumentException if this range is empty.

 */",f17092:m345
21946,"private fun KtAnalysisSession.findParentSymbol(resolveResult: ResolveResult, goBackSteps: Int, selectedFqName: FqName): KtSymbol?","{
    return if (resolveResult.receiverClassReference != null) {
        findParentSymbol(resolveResult.receiverClassReference, goBackSteps - 1, selectedFqName)
    } else {
        findParentSymbol(resolveResult.symbol, goBackSteps, selectedFqName)
    }
}","/**

     * Finds the parent symbol of the given [ResolveResult] by traversing back up the symbol hierarchy a [goBackSteps] steps,

     * or until the containing class or object symbol is found.

     *

     * Knows about the [ResolveResult.receiverClassReference] field and uses it in case it's not empty.

     */",f8670:m163
63250,public actual fun String.toByte(): Byte,toByteOrNull() ?: numberFormatError(this),"/**

 * Parses the string as a signed [Byte] number and returns the result.

 * @throws NumberFormatException if the string is not a valid representation of a number.

 */",f17352:m33
57369,public actual fun LongArray.sort(): Unit,"{
    if (size > 1) java.util.Arrays.sort(this)
}","/**

 * Sorts the array in-place.

 * 

 * @sample samples.collections.Arrays.Sorting.sortArray

 */",f16970:m4019
64201,"@Suppress(""OVERRIDE_DEPRECATION"") @kotlin.internal.IntrinsicConstEvaluation public override fun toChar(): Char",(this and 0xFFFF).reinterpretAsChar(),"/**

     * Converts this [Int] value to [Char].

     *

     * If this value is in the range of `Char` codes `Char.MIN_VALUE..Char.MAX_VALUE`,

     * the resulting `Char` code is equal to this value.

     *

     * The resulting `Char` code is represented by the least significant 16 bits of this `Int` value.

     */",f17455:m2589
21731,private fun findReceiverFirExpression(receiverExpression: KtExpression): FirExpression?,"{
    if (receiverExpression is KtStatementExpression) {
        return null
    }
    val parentCall = receiverExpression.getQualifiedExpressionForReceiver()
    if (parentCall !is KtSafeQualifiedExpression) {
        return receiverExpression.getOrBuildFirOfType<FirExpression>(firResolveSession)
    }
    val firSafeCall = parentCall.getOrBuildFirOfType<FirSafeCallExpression>(firResolveSession)
    return firSafeCall.checkedSubjectRef.value
}","/**

     * Returns a [FirExpression] matching the given PSI [receiverExpression].

     *

     * @param receiverExpression a qualified expression receiver (e.g., `foo` in `foo?.bar()`, or in `foo.bar`).

     *

     * The function unwraps certain receiver expressions. For instance, for safe calls direct counterpart to a [KtSafeQualifiedExpression]

     * is (FirCheckedSafeCallSubject)[org.jetbrains.kotlin.fir.expressions.FirCheckedSafeCallSubject] which requires additional unwrapping

     * to be used for call resolution.

     */",f8628:m315
14943,internal fun CharArray.copyOfUninitializedElements(newSize: Int): CharArray,"{
    return copyOfUninitializedElements(0, newSize)
}","/**

 * Returns new array which is a copy of the original array with new elements filled with **lateinit** _uninitialized_ values.

 * Attempts to read _uninitialized_ values from this array work in implementation-dependent manner,

 * either throwing exception or returning some kind of implementation-specific default value.

 */",f3831:m3693
14024,"@SinceKotlin(""1.4"") @kotlin.internal.InlineOnly public actual inline fun StringBuilder.appendLine(value: Byte): StringBuilder",append(value).appendLine(),"/** Appends [value] to this [StringBuilder], followed by a line feed character (`\n`). */",f3715:m19
16519,"private inline fun FirElementWithResolveState.withLock(toPhase: FirResolvePhase, updatePhase: Boolean, action: () -> Unit)","{
    while (true) {
        checkCanceled()
        @OptIn(ResolveStateAccess::class) val stateSnapshot = resolveState
        if (stateSnapshot.resolvePhase >= toPhase) {
            return
        }
        when (stateSnapshot) {
            is FirInProcessOfResolvingToPhaseStateWithoutBarrier -> {
                trySettingBarrier(toPhase, stateSnapshot)
                continue
            }
            is FirInProcessOfResolvingToPhaseStateWithBarrier -> {
                waitOnBarrier(stateSnapshot)
                continue
            }
            is FirResolvedToPhaseState -> {
                if (!tryLock(toPhase, stateSnapshot)) continue
                var exceptionOccurred = false
                try {
                    action()
                } catch (e: Throwable) {
                    exceptionOccurred = true
                    throw e
                } finally {
                    val newPhase = if (updatePhase && !exceptionOccurred) toPhase else stateSnapshot.resolvePhase
                    unlock(toPhase = newPhase)
                }
                return
            }
            is FirInProcessOfResolvingToJumpingPhaseState -> {
                errorWithFirSpecificEntries(""$stateSnapshot state are not allowed to be inside non-jumping lock"", fir = this)
            }
        }
    }
}","/**

     * Locks an a [FirElementWithResolveState] to resolve from `toPhase - 1` to [toPhase] and

     * then updates the [FirElementWithResolveState.resolveState] to a [toPhase] if [updatePhase] is **true**.

     *

     * [updatePhase] == false means that we want to read some data under a lock.

     *

     * If [FirElementWithResolveState] is already at least at [toPhase], does nothing.

     *

     * Otherwise:

     *  - Marks [FirElementWithResolveState] as in a process of resovle

     *  - performs the resolve by calling [action]

     *  - updates the resolve phase to [toPhase] if [updatePhase] is **true**.

     *  - notifies other threads waiting on the same lock that the declaration is already resolved by this thread, so other threads can continue its execution.

     *

     *

     *  Contention handling:

     *  - on lock acquisition, no real lock or barrier is created. Instead, the [FirElementWithResolveState.resolveState] is updated to indicate that the declaration is being resolved now.

     *  - If some other thread tries to resolve current [FirElementWithResolveState], it changes `resolveState` and puts the barrier there. Then it awaits on it until the initial thread which hold the lock finishes its job.

     *  - This way, no barrier is used in a case when no contention arise.

     */",f4129:m159
43410,fun normalizePath(path: String): String,"{
    var start = 0
    var separator = false
    if (isWindows) {
        if (path.startsWith(""//"")) {
            start = 2
            separator = true
        } else if (path.startsWith(""\\\\"")) {
            return normalizeTail(0, path, false)
        }
    }
    for (i in start until path.length) {
        val c = path[i]
        if (c == '/') {
            if (separator) {
                return normalizeTail(i, path, true)
            }
            separator = true
        } else if (c == '\\') {
            return normalizeTail(i, path, separator)
        } else {
            separator = false
        }
    }
    return path
}","/**

 * converts back slashes to forward slashes

 * removes double slashes inside the path, e.g. ""x/y//z"" => ""x/y/z""

 *

 * Converted from com.intellij.openapi.util.io.FileUtil.normalize

 */",f13426:m85
64464,"@ExperimentalPathApi @SinceKotlin(""1.8"") public fun Path.copyToRecursively(target: Path, onError: (source: Path, target: Path, exception: Exception) -> OnErrorResult = { _, _, exception -> throw exception }, followLinks: Boolean, overwrite: Boolean): Path","{
    return if (overwrite) { copyToRecursively(target, onError, followLinks) { src, dst ->
        val options = LinkFollowing.toLinkOptions(followLinks)
        val dstIsDirectory = dst.isDirectory(LinkOption.NOFOLLOW_LINKS)
        val srcIsDirectory = src.isDirectory(*options)
        if ((srcIsDirectory && dstIsDirectory).not()) {
            if (dstIsDirectory) dst.deleteRecursively()
            src.copyTo(dst, *options, StandardCopyOption.REPLACE_EXISTING)
        }
        CopyActionResult.CONTINUE
    } } else {
        copyToRecursively(target, onError, followLinks)
    }
}","/**

 * Recursively copies this directory and its content to the specified destination [target] path.

 * Note that if this function throws, partial copying may have taken place.

 *

 * Unlike `File.copyRecursively`, if some directories on the way to the [target] are missing, then they won't be created automatically.

 * You can use the [createParentDirectories] function to ensure that required intermediate directories are created:

 * ```

 * sourcePath.copyToRecursively(

 *     destinationPath.createParentDirectories(),

 *     followLinks = false

 * )

 * ```

 *

 * If the entry located by this path is a directory, this function recursively copies the directory itself and its content.

 * Otherwise, this function copies only the entry.

 *

 * If an exception occurs attempting to read, open or copy any entry under the source subtree,

 * further actions will depend on the result of the [onError] invoked with

 * the source and destination paths, that caused the error, and the exception itself as arguments.

 * If [onError] throws, this function ends immediately with the exception.

 * By default [onError] rethrows the exception. See [OnErrorResult] for available options.

 *

 * This function performs ""directory merge"" operation. If an entry in the source subtree is a directory

 * and the corresponding entry in the target subtree already exists and is also a directory, it does nothing.

 * Otherwise, [overwrite] determines whether to overwrite existing destination entries.

 * Attributes of a source entry, such as creation/modification date, are not copied.

 *

 * [followLinks] impacts only symbolic links in the source subtree and

 * determines whether to copy a symbolic link itself or the entry it points to.

 * Symbolic links in the target subtree are not followed, i.e.,

 * no entry is copied to the location a symbolic link points to.

 * If a copy destination is a symbolic link, it is overwritten or an exception is thrown depending on [overwrite].

 * Note that symbolic links on the way to the roots of the source and target subtrees are always followed.

 *

 * To provide a custom logic for copying use the overload that takes a `copyAction` lambda.

 *

 * @param target the destination path to copy recursively this entry to.

 * @param onError the function that determines further actions if an error occurs. By default, rethrows the exception.

 * @param followLinks `false` to copy a symbolic link itself, not its target.

 *   `true` to recursively copy the target of a symbolic link.

 * @param overwrite `false` to throw if a destination entry already exists.

 *   `true` to overwrite existing destination entries.

 * @throws NoSuchFileException if the entry located by this path does not exist.

 * @throws FileSystemException if [target] is an entry inside the source subtree.

 * @throws FileAlreadyExistsException if a destination entry already exists and [overwrite] is `false`.

 *   This exception is passed to [onError] for handling.

 * @throws IOException if any errors occur while copying.

 *   This exception is passed to [onError] for handling.

 * @throws FileSystemException if the source subtree contains an entry with an illegal name such as ""."" or "".."".

 *   This exception is passed to [onError] for handling.

 * @throws FileSystemLoopException if the recursive copy reaches a cycle.

 *   This exception is passed to [onError] for handling.

 * @throws SecurityException if a security manager is installed and access is not permitted to an entry in the source or target subtree.

 *   This exception is passed to [onError] for handling.

 */",f17471:m33
53402,"@Suppress(""UNUSED_PARAMETER"", ""unused"") @PublishedApi internal fun <T> (suspend () -> T).invokeSuspendSuperType(completion: Continuation<T>): Any?","{
    throw NotImplementedError(""It is intrinsic method"")
}","/**

 * Invoke 'invoke' method of suspend super type

 * Because callable references translated with local classes,

 * necessary to call it in special way, not in synamic way

 */",f16673:m27
13938,"@SinceKotlin(""1.6"") @WasExperimental(ExperimentalStdlibApi::class) @kotlin.internal.InlineOnly public actual inline fun Long.rotateRight(bitCount: Int): Long",shl(64 - bitCount) or ushr(bitCount),"/**

 * Rotates the binary representation of this [Long] number right by the specified [bitCount] number of bits.

 * The least significant bits pushed out from the right side reenter the number as the most significant bits on the left side.

 *

 * Rotating the number right by a negative bit count is the same as rotating it left by the negated bit count:

 * `number.rotateRight(-n) == number.rotateLeft(n)`

 *

 * Rotating by a multiple of [Long.SIZE_BITS] (64) returns the same number, or more generally

 * `number.rotateRight(n) == number.rotateRight(n % 64)`

 */",f3706:m513
63196,"@SinceKotlin(""1.2"") public actual fun Double.toRawBits(): Long",wasm_i64_reinterpret_f64(this),"/**

 * Returns a bit representation of the specified floating-point value as [Long]

 * according to the IEEE 754 floating-point ""double format"" bit layout,

 * preserving `NaN` values exact layout.

 */",f17314:m355
16577,fun invalidateElement(element: KtElement),"{
    val container = getContainerKtElement(element)
    structureElements.remove(container)
}","/**

     * Must be called only under write-lock.

     *

     * This method is responsible for ""invalidation"" of re-analyzable declarations.

     *

     * @see LLFirDeclarationModificationService

     * @see getNonLocalReanalyzableContainingDeclaration

     */",f4135:m143
56008,"@SinceKotlin(""1.6"") @WasExperimental(ExperimentalStdlibApi::class) @kotlin.internal.InlineOnly @Suppress(""DEPRECATION"") public inline fun <K, V> buildMap(capacity: Int, @BuilderInference builderAction: MutableMap<K, V>.() -> Unit): Map<K, V>","{
    contract { callsInPlace(builderAction, InvocationKind.EXACTLY_ONCE) }
    return buildMapInternal(capacity, builderAction)
}","/**

 * Builds a new read-only [Map] by populating a [MutableMap] using the given [builderAction]

 * and returning a read-only map with the same key-value pairs.

 *

 * The map passed as a receiver to the [builderAction] is valid only inside that function.

 * Using it outside of the function produces an unspecified behavior.

 *

 * [capacity] is used to hint the expected number of pairs added in the [builderAction].

 *

 * Entries of the map are iterated in the order they were added by the [builderAction].

 *

 * The returned map is serializable (JVM).

 *

 * @throws IllegalArgumentException if the given [capacity] is negative.

 *

 * @sample samples.collections.Builders.Maps.buildMapSample

 */",f16823:m327
58820,"public inline fun <T, R> Sequence<T>.foldIndexed(initial: R, operation: (index: Int, acc: R, T) -> R): R","{
    var index = 0
    var accumulator = initial
    for (element in this) accumulator = operation(checkIndexOverflow(index++), accumulator, element)
    return accumulator
}","/**

 * Accumulates value starting with [initial] value and applying [operation] from left to right

 * to current accumulator value and each element with its index in the original sequence.

 * 

 * Returns the specified [initial] value if the sequence is empty.

 * 

 * @param [operation] function that takes the index of an element, current accumulator value

 * and the element itself, and calculates the next accumulator value.

 *

 * The operation is _terminal_.

 */",f17096:m2585
14863,"@SinceKotlin(""1.4"") public actual fun <T> Array<out T>?.contentHashCode(): Int","{
    if (this === null) return 0
    var result = 1
    for (element in this) result = 31 * result + element.hashCode()
    return result
}","/**

 * Returns a hash code based on the contents of this array as if it is [List].

 */",f3831:m1585
54702,"@Suppress(""NOTHING_TO_INLINE"") public actual inline fun ShortArray.copyOf(): ShortArray","{
    return this.asDynamic().slice()
}","/**

 * Returns new array which is a copy of the original array.

 * 

 * @sample samples.collections.Arrays.CopyOfOperations.copyOf

 */",f16713:m1683
51956,"open fun eval(script: SourceCode, compilationConfiguration: ScriptCompilationConfiguration, evaluationConfiguration: ScriptEvaluationConfiguration?): ResultWithDiagnostics<EvaluationResult>","runInCoroutineContext { compiler(script, compilationConfiguration).onSuccess { evaluator(it, evaluationConfiguration ?: ScriptEvaluationConfiguration.Default) } }","/**

     * The default implementation of the evaluation function

     */",f16418:m75
56608,"@SinceKotlin(""1.1"") public actual fun <T, K> Grouping<T, K>.eachCount(): Map<K, Int>","foldTo(destination = mutableMapOf(), initialValueSelector = { _, _ -> kotlin.jvm.internal.Ref.IntRef() }, operation = { _, acc, _ -> acc.apply { element += 1 } }).mapValuesInPlace { it.value.element }","/**

 * Groups elements from the [Grouping] source by key and counts elements in each group.

 *

 * @return a [Map] associating the key of each group with the count of elements in the group.

 *

 * @sample samples.collections.Grouping.groupingByEachCount

 */",f16917:m23
13856,"@OptIn(kotlin.ExperimentalStdlibApi::class, FreezingIsDeprecated::class) public actual fun <T> lazy(initializer: () -> T): Lazy<T>",SynchronizedLazyImpl(initializer),"/**

 * Creates a new instance of the [Lazy] that uses the specified initialization function [initializer]

 * and the default thread-safety mode [LazyThreadSafetyMode.SYNCHRONIZED].

 *

 * If the initialization of a value throws an exception, it will attempt to reinitialize the value at next access.

 *

 * Note that the returned instance uses itself to synchronize on. Do not synchronize from external code on

 * the returned instance as it may cause accidental deadlock. Also this behavior can be changed in the future.

 */",f3698:m23
58486,"@SinceKotlin(""1.4"") @OptIn(kotlin.experimental.ExperimentalTypeInference::class) @OverloadResolutionByLambdaReturnType @kotlin.internal.InlineOnly public inline fun <K, V> Map<out K, V>.maxOf(selector: (Map.Entry<K, V>) -> Float): Float","{
    return entries.maxOf(selector)
}","/**

 * Returns the largest value among all values produced by [selector] function

 * applied to each entry in the map.

 * 

 * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.

 * 

 * @throws NoSuchElementException if the map is empty.

 */",f17089:m521
29354,fun kotlinxImmutable(name: String? = null): String,"{
    return listOfNotNull(""kotlinx"", ""collections"", ""immutable"", name).joinToString(""."")
}","/**

 * Required because :kotlin-compiler-embeddable performs package relocation

 * If there's a ""kotlinx.collections.immutable"" string literal in bytecode

 * it becomes ""org.jetbrains.kotlin.kotlinx.collections.immutable"" thus

 * breaking target project class name matching

 */",f10293:m15
16795,inline fun collectSessionsAndPublishInvalidationEvent(action: () -> Unit),"{
    require(invalidatedModules == null) { ""The set of invalidated modules should be `null` when `collectSessionsAndPublishInvalidationEvent` has just been called."" }
    invalidatedModules = mutableSetOf()
    try {
        action()
        if (invalidatedModules?.isNotEmpty() == true) {
            project.analysisMessageBus.syncPublisher(LLFirSessionInvalidationTopics.SESSION_INVALIDATION).afterInvalidation(invalidatedModules!!)
        }
    } finally {
        invalidatedModules = null
    }
}","/**

     * Invokes [action] and collects all sessions which were invalidated during its execution. At the end, publishes a session invalidation

     * event if at least one session was invalidated.

     *

     * Invalidated sessions are tracked via [collectSession].

     *

     * Must be called in a write action.

     */",f4172:m51
58559,"@SinceKotlin(""1.5"") @WasExperimental(ExperimentalUnsignedTypes::class) public fun UByte.coerceIn(minimumValue: UByte, maximumValue: UByte): UByte","{
    if (minimumValue > maximumValue) throw IllegalArgumentException(""Cannot coerce value to an empty range: maximum $maximumValue is less than minimum $minimumValue."")
    if (this < minimumValue) return minimumValue
    if (this > maximumValue) return maximumValue
    return this
}","/**

 * Ensures that this value lies in the specified range [minimumValue]..[maximumValue].

 * 

 * @return this value if it's in the range, or [minimumValue] if this value is less than [minimumValue], or [maximumValue] if this value is greater than [maximumValue].

 * 

 * @sample samples.comparisons.ComparableOps.coerceInUnsigned

 */",f17090:m1109
14834,"@SinceKotlin(""1.1"") @kotlin.internal.LowPriorityInOverloadResolution public actual fun <T> Array<out T>.contentDeepToString(): String","{
    return this.contentDeepToString()
}","/**

 * Returns a string representation of the contents of this array as if it is a [List].

 * Nested arrays are treated as lists too.

 * 

 * If any of arrays contains itself on any nesting level that reference

 * is rendered as `""[...]""` to prevent recursion.

 * 

 * @sample samples.collections.Arrays.ContentOperations.contentDeepToString

 */",f3831:m595
58551,"@SinceKotlin(""1.5"") @WasExperimental(ExperimentalUnsignedTypes::class) public fun UByte.coerceAtLeast(minimumValue: UByte): UByte","{
    return if (this < minimumValue) minimumValue else this
}","/**

 * Ensures that this value is not less than the specified [minimumValue].

 * 

 * @return this value if it's greater than or equal to the [minimumValue] or the [minimumValue] otherwise.

 * 

 * @sample samples.comparisons.ComparableOps.coerceAtLeastUnsigned

 */",f17090:m889
56586,"public actual fun <K, V> mapOf(pair: Pair<K, V>): Map<K, V>","java.util.Collections.singletonMap(pair.first, pair.second)","/**

 * Returns a new read-only map, mapping only the specified key to the

 * specified value.

 *

 * The returned map is serializable.

 *

 * @sample samples.collections.Maps.Instantiation.mapFromPairs

 */",f16913:m35
53317,override fun hashCode(): Int,AbstractList.orderedHashCode(this),"/**

     * Returns the hash code value for this list.

     */",f16655:m237
57095,"@SinceKotlin(""1.8"") @ExperimentalEncodingApi public fun OutputStream.encodingWith(base64: Base64): OutputStream","{
    return EncodeOutputStream(this, base64)
}","/**

 * Returns an output stream that encodes bytes using the specified [base64] encoding

 * and writes the result to this output stream.

 *

 * The byte data written to the returned output stream is encoded using the specified [base64] encoding

 * and the resulting symbols are written to the underlying output stream.

 * Bytes are encoded in 3-byte blocks.

 *

 * The returned output stream should be closed in a timely manner. We suggest you try the [use] function,

 * which closes the resource after a given block of code is executed.

 * The close operation writes properly padded leftover symbols to the underlying output stream.

 * Closing the returned output stream will close the underlying output stream.

 */",f16958:m85
10118,protected fun libraryInDefaultRepoOrCurrentDir(name: String): KotlinLibrary,"resolverByName(listOf(DependencyDirectories.localKonanDir.resolve(""klib"").absolutePath), logger = KlibToolLogger(output)).resolve(name)",/** TODO: unify with [libraryInCurrentDir] */,f3431:m143
59026,"@SinceKotlin(""1.4"") @OptIn(kotlin.experimental.ExperimentalTypeInference::class) @OverloadResolutionByLambdaReturnType @kotlin.internal.InlineOnly public inline fun <R> CharSequence.maxOfWithOrNull(comparator: Comparator<in R>, selector: (Char) -> R): R?","{
    if (isEmpty()) return null
    var maxValue = selector(this[0])
    for (i in 1 .. lastIndex) {
        val v = selector(this[i])
        if (comparator.compare(maxValue, v) < 0) {
            maxValue = v
        }
    }
    return maxValue
}","/**

 * Returns the largest value according to the provided [comparator]

 * among all values produced by [selector] function applied to each character in the char sequence or `null` if there are no characters.

 */",f17097:m2815
22384,private fun classDeclaredInUnexpectedPosition(classOrObject: KtClassOrObject): Boolean,"{
    if (classOrObject is KtObjectDeclaration) return false
    val classParent = classOrObject.parent
    return classParent !is KtBlockExpression && classParent !is KtDeclarationContainer
}","/**

 * If class is declared in some strange context (for example, in expression like `10 < class A`),

 * we don't want to try to build a light class for it.

 *

 * The expression itself is incorrect and won't compile, but the parser is able the parse the class nonetheless.

 *

 * This does not concern objects, since object literals are expressions and can be used almost anywhere.

 */",f8736:m469
57491,"@SinceKotlin(""1.3"") @ExperimentalUnsignedTypes public fun UShortArray.binarySearch(element: UShort, fromIndex: Int = 0, toIndex: Int = size): Int","{
    AbstractList.checkRangeIndexes(fromIndex, toIndex, size)
    val signedElement = element.toInt()
    var low = fromIndex
    var high = toIndex - 1
    while (low <= high) {
        val mid = (low + high).ushr(1)
        val midVal = storage[mid]
        val cmp = uintCompare(midVal.toInt(), signedElement)
        if (cmp < 0) low = mid + 1 else if (cmp > 0) high = mid - 1 else return mid
    }
    return -(low + 1)
}","/**

 * Searches the array or the range of the array for the provided [element] using the binary search algorithm.

 * The array is expected to be sorted, otherwise the result is undefined.

 * 

 * If the array contains multiple elements equal to the specified [element], there is no guarantee which one will be found.

 * 

 * @param element the to search for.

 * @param fromIndex the start of the range (inclusive) to search in, 0 by default.

 * @param toIndex the end of the range (exclusive) to search in, size of this array by default.

 * 

 * @return the index of the element, if it is contained in the array within the specified range;

 * otherwise, the inverted insertion point `(-insertion point - 1)`.

 * The insertion point is defined as the index at which the element should be inserted,

 * so that the array (or the specified subrange of array) still remains sorted.

 * 

 * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.

 * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].

 */",f16971:m497
55111,@kotlin.internal.IntrinsicConstEvaluation public inline operator fun compareTo(other: Int): Int,this.compareTo(other.toLong()),"/**

     * Compares this value with the specified value for order.

     * Returns zero if this value is equal to the specified other value, a negative number if it's less than other,

     * or a positive number if it's greater than other.

     */",f16727:m2437
9657,"internal fun addDefaultLlvmFunctionAttributes(context: Context, llvmFunction: LLVMValueRef)","{
    if (shouldEnforceFramePointer(context)) {
        enforceFramePointer(llvmFunction, context)
    }
}","/**

 * Mimics parts of clang's `CodeGenModule::getDefaultFunctionAttributes`

 * that are required for Kotlin/Native compiler.

 */",f3378:m29
10456,override fun execute(),"{
    output().value = input().value
}","/**

   * Enforce this constraint. Assume that it is satisfied.

   */",f3476:m907
34414,internal fun CommonizerParameters.commonModuleNames(targetProvider: TargetProvider): Set<String>,"{
    return outputTargets.filter { target -> (target.allLeaves() intersect targetProvider.target.allLeaves()).isNotEmpty() }.map { target -> commonModuleNames(target) }.fold(emptySet()) { acc, names -> acc + names }
}","/**

 * @return Set of module names that this [targetProvider] shares with *at least* one other target

 */",f11298:m43
56006,"@SinceKotlin(""1.6"") @WasExperimental(ExperimentalStdlibApi::class) @kotlin.internal.InlineOnly @Suppress(""DEPRECATION"") public inline fun <K, V> buildMap(@BuilderInference builderAction: MutableMap<K, V>.() -> Unit): Map<K, V>","{
    contract { callsInPlace(builderAction, InvocationKind.EXACTLY_ONCE) }
    return buildMapInternal(builderAction)
}","/**

 * Builds a new read-only [Map] by populating a [MutableMap] using the given [builderAction]

 * and returning a read-only map with the same key-value pairs.

 *

 * The map passed as a receiver to the [builderAction] is valid only inside that function.

 * Using it outside of the function produces an unspecified behavior.

 *

 * Entries of the map are iterated in the order they were added by the [builderAction].

 *

 * The returned map is serializable (JVM).

 *

 * @sample samples.collections.Builders.Maps.buildMapSample

 */",f16823:m273
54650,@kotlin.internal.InlineOnly public actual inline fun ByteArray.asList(): List<Byte>,"{
    return this.unsafeCast<Array<Byte>>().asList()
}","/**

 * Returns a [List] that wraps the original array.

 */",f16713:m213
58696,public infix fun Short.until(to: Short): IntRange,"{
    return this.toInt() .. (to.toInt() - 1).toInt()
}","/**

 * Returns a range from this value up to but excluding the specified [to] value.

 * 

 * If the [to] value is less than or equal to `this` value, then the returned range is empty.

 */",f17092:m2389
58853,"@SinceKotlin(""1.4"") @OptIn(kotlin.experimental.ExperimentalTypeInference::class) @OverloadResolutionByLambdaReturnType @kotlin.internal.InlineOnly public inline fun <T, R> Sequence<T>.minOfWithOrNull(comparator: Comparator<in R>, selector: (T) -> R): R?","{
    val iterator = iterator()
    if (!iterator.hasNext()) return null
    var minValue = selector(iterator.next())
    while (iterator.hasNext()) {
        val v = selector(iterator.next())
        if (comparator.compare(minValue, v) > 0) {
            minValue = v
        }
    }
    return minValue
}","/**

 * Returns the smallest value according to the provided [comparator]

 * among all values produced by [selector] function applied to each element in the sequence or `null` if there are no elements.

 *

 * The operation is _terminal_.

 */",f17096:m4055
43622,private fun BuildResult.getActualTasksAsString(): String,"{
    return tasks.joinToString(""\n"") { ""${it.path} - ${it.outcome}"" }
}","/**

 * Returns printable list of task paths that are in the task graph.

 */",f13463:m379
52994,public actual fun print(message: Any?),"{
    output.print(message)
}",/** Prints the given [message] to the standard output stream. */,f16600:m205
20195,public fun KtExpression.getKtType(): KtType?,withValidityAssertion { analysisSession.expressionTypeProvider.getKtExpressionType(this) },"/**

     * Get type of given expression.

     *

     * Return:

     * - [KtExpression] type if given [KtExpression] is real expression;

     * - `null` for [KtExpression] inside pacakges and import declarations;

     * - `Unit` type for statements;

     */",f5788:m51
58828,"@SinceKotlin(""1.4"") @OptIn(kotlin.experimental.ExperimentalTypeInference::class) @OverloadResolutionByLambdaReturnType @kotlin.internal.InlineOnly public inline fun <T> Sequence<T>.maxOf(selector: (T) -> Double): Double","{
    val iterator = iterator()
    if (!iterator.hasNext()) throw NoSuchElementException()
    var maxValue = selector(iterator.next())
    while (iterator.hasNext()) {
        val v = selector(iterator.next())
        maxValue = maxOf(maxValue, v)
    }
    return maxValue
}","/**

 * Returns the largest value among all values produced by [selector] function

 * applied to each element in the sequence.

 * 

 * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.

 *

 * The operation is _terminal_.

 * 

 * @throws NoSuchElementException if the sequence is empty.

 */",f17096:m2905
64034,@kotlin.internal.IntrinsicConstEvaluation public inline operator fun plus(other: Short): Int,this.toInt() + other.toInt(),/** Adds the other value to this value. */,f17455:m201
48109,internal inline fun <reified T: Task> TaskContainer.locateTask(name: String): TaskProvider<T>?,"if (names.contains(name)) named(name, T::class.java) else null","/**

 * Locates a task by [name] and [type], without triggering its creation or configuration.

 */",f15539:m139
57128,public fun maxDepth(depth: Int): FileTreeWalk,"{
    if (depth <= 0) throw IllegalArgumentException(""depth must be positive, but was $depth."")
    return FileTreeWalk(start, direction, onEnter, onLeave, onFail, depth)
}","/**

     * Sets the maximum [depth] of a directory tree to traverse. By default there is no limit.

     *

     * The value must be positive and [Int.MAX_VALUE] is used to specify an unlimited depth.

     *

     * With a value of 1, walker visits only the origin directory and all its immediate children,

     * with a value of 2 also grandchildren, etc.

     */",f16960:m477
30851,fun String.decapitalizeSmartForCompiler(asciiOnly: Boolean = false): String,"{
    if (isEmpty() || !isUpperCaseCharAt(0, asciiOnly)) return this
    if (length == 1 || !isUpperCaseCharAt(1, asciiOnly)) {
        return if (asciiOnly) decapitalizeAsciiOnly() else replaceFirstChar(Char::lowercaseChar)
    }
    val secondWordStart = (indices.firstOrNull { !isUpperCaseCharAt(it, asciiOnly) } ?: return toLowerCase(this, asciiOnly)) - 1
    return toLowerCase(substring(0, secondWordStart), asciiOnly) + substring(secondWordStart)
}","/**

 * ""FooBar"" -> ""fooBar""

 * ""FOOBar"" -> ""fooBar""

 * ""FOO"" -> ""foo""

 * ""FOO_BAR"" -> ""foO_BAR""

 */",f10787:m41
58923,"@SinceKotlin(""1.5"") @kotlin.internal.InlineOnly public inline fun <R: Any> CharSequence.firstNotNullOf(transform: (Char) -> R?): R","{
    return firstNotNullOfOrNull(transform) ?: throw NoSuchElementException(""No element of the char sequence was transformed to a non-null value."")
}","/**

 * Returns the first non-null value produced by [transform] function being applied to characters of this char sequence in iteration order,

 * or throws [NoSuchElementException] if no non-null value was produced.

 * 

 * @sample samples.collections.Collections.Transformations.firstNotNullOf

 */",f17097:m177
63431,"@Deprecated(""Use Kotlin compiler 1.4 to avoid deprecation warning."") @SinceKotlin(""1.1"") @DeprecatedSinceKotlin(hiddenSince = ""1.4"") public infix fun IntArray.contentEquals(other: IntArray): Boolean","{
    return this.contentEquals(other)
}","/**

 * Checks if the two specified arrays are *structurally* equal to one another.

 * 

 * Two arrays are considered structurally equal if they have the same size, and elements at corresponding indices are equal.

 * 

 * @param other the array to compare with this array.

 * @return `true` if the two arrays are structurally equal, `false` otherwise.

 * 

 * @sample samples.collections.Arrays.ContentOperations.intArrayContentEquals

 */",f17396:m763
34322,private fun FunctionDescriptor.hasDifferentParameterNames(other: FunctionDescriptor): Boolean,"{
    return valueParameters.drop(1).map { it.name } != other.valueParameters.drop(1).map { it.name }
}","/**

 * This function basically checks that these two functions have different objective-C signature.

 *

 * This signature consists of function name and parameter names except first.

 *

 * So we ignore the first parameter name, but check others

 */",f11283:m35
52476,"override fun matches(startIndex: Int, testString: CharSequence, matchResult: MatchResultImpl): Int","{
    matchResult.saveState()
    return tryToMatch(startIndex, testString, matchResult).also { if (it < 0) matchResult.rollbackState() }
}","/** Returns startIndex+shift, the next position to match */",f16519:m29
54693,"@SinceKotlin(""1.3"") @kotlin.internal.InlineOnly @Suppress(""ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS"") public actual inline fun ShortArray.copyInto(destination: ShortArray, destinationOffset: Int = 0, startIndex: Int = 0, endIndex: Int = size): ShortArray","{
    arrayCopy(this.unsafeCast<Array<Short>>(), destination.unsafeCast<Array<Short>>(), destinationOffset, startIndex, endIndex)
    return destination
}","/**

 * Copies this array or its subrange into the [destination] array and returns that array.

 * 

 * It's allowed to pass the same array in the [destination] and even specify the subrange so that it overlaps with the destination range.

 * 

 * @param destination the array to copy to.

 * @param destinationOffset the position in the [destination] array to copy to, 0 by default.

 * @param startIndex the beginning (inclusive) of the subrange to copy, 0 by default.

 * @param endIndex the end (exclusive) of the subrange to copy, size of this array by default.

 * 

 * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of this array indices or when `startIndex > endIndex`.

 * @throws IndexOutOfBoundsException when the subrange doesn't fit into the [destination] array starting at the specified [destinationOffset],

 * or when that index is out of the [destination] array indices range.

 * 

 * @return the [destination] array.

 */",f16713:m1307
52652,actual override public fun retainAll(elements: Collection<E>): Boolean,(this as MutableIterable<E>).retainAll { it in elements },"/**

     * Retains only the elements in this collection that are contained in the specified collection.

     *

     * @return `true` if any element was removed from the collection, `false` if the collection was not modified.

     */",f16554:m105
58928,public fun CharSequence.getOrNull(index: Int): Char?,"{
    return if (index in indices) get(index) else null
}","/**

 * Returns a character at the given [index] or `null` if the [index] is out of bounds of this char sequence.

 * 

 * @sample samples.collections.Collections.Elements.getOrNull

 */",f17097:m289
49128,fun registerServices(project: Project),"{
    val mbs: MBeanServer = ManagementFactory.getPlatformMBeanServer()
    registerStatsService(mbs, DefaultKotlinBuildStatsBeanService(project, getBeanName(DEFAULT_SERVICE_QUALIFIER)), KotlinBuildStatsMXBean::class.java, DEFAULT_SERVICE_QUALIFIER)
    registerStatsService(mbs, Pre232IdeaKotlinBuildStatsBeanService(project, getBeanName(LEGACY_SERVICE_QUALIFIER)), Pre232IdeaKotlinBuildStatsMXBean::class.java, LEGACY_SERVICE_QUALIFIER)
}","/**

     * Registers the Kotlin build stats services for the given project.

     *

     * The registry must be closed at the end of the usage.

     */",f15767:m59
57247,"public fun ShortArray.binarySearch(element: Short, fromIndex: Int = 0, toIndex: Int = size): Int","{
    return java.util.Arrays.binarySearch(this, fromIndex, toIndex, element)
}","/**

 * Searches the array or the range of the array for the provided [element] using the binary search algorithm.

 * The array is expected to be sorted, otherwise the result is undefined.

 * 

 * If the array contains multiple elements equal to the specified [element], there is no guarantee which one will be found.

 * 

 * @param element the to search for.

 * @param fromIndex the start of the range (inclusive) to search in, 0 by default.

 * @param toIndex the end of the range (exclusive) to search in, size of this array by default.

 * 

 * @return the index of the element, if it is contained in the array within the specified range;

 * otherwise, the inverted insertion point `(-insertion point - 1)`.

 * The insertion point is defined as the index at which the element should be inserted,

 * so that the array (or the specified subrange of array) still remains sorted.

 * 

 * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.

 * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].

 */",f16970:m629
57035,@kotlin.internal.InlineOnly public inline fun OutputStream.buffered(bufferSize: Int = DEFAULT_BUFFER_SIZE): BufferedOutputStream,"if (this is BufferedOutputStream) this else BufferedOutputStream(this, bufferSize)","/**

 * Creates a buffered output stream wrapping this stream.

 * @param bufferSize the buffer size to use.

 */",f16952:m163
8714,fun IrSimpleFunction.getLoweredVersion(),"when {
    isSuspend -> this.getOrCreateFunctionWithContinuationStub(context)
    else -> this
}","/**

     * Normally, function should be already replaced. But if the function come from LazyIr, it can be not replaced.

     */",f3286:m1057
56097,public fun <T> MutableCollection<in T>.retainAll(elements: Sequence<T>): Boolean,"{
    val list = elements.toList()
    if (list.isNotEmpty()) return retainAll(list) else return retainNothing()
}","/**

 * Retains only elements of this [MutableCollection] that are contained in the given [elements] sequence.

 */",f16825:m375
55109,@kotlin.internal.IntrinsicConstEvaluation public inline operator fun compareTo(other: Byte): Int,this.compareTo(other.toLong()),"/**

     * Compares this value with the specified value for order.

     * Returns zero if this value is equal to the specified other value, a negative number if it's less than other,

     * or a positive number if it's greater than other.

     */",f16727:m2401
15408,@Test fun sinh_D(),"{
    assertTrue(""Should return NaN"", Double.isNaN(sinh(Double.NaN)))
    assertEquals(""Should return POSITIVE_INFINITY"", Double.POSITIVE_INFINITY, sinh(Double.POSITIVE_INFINITY), 0.0)
    assertEquals(""Should return NEGATIVE_INFINITY"", Double.NEGATIVE_INFINITY, sinh(Double.NEGATIVE_INFINITY), 0.0)
    assertEquals(0.0.toBits(), sinh(0.0).toBits())
    assertEquals(+0.0.toBits(), sinh(+0.0).toBits())
    assertEquals((-0.0).toBits(), sinh(-0.0).toBits())
    assertEquals(""Should return POSITIVE_INFINITY"", Double.POSITIVE_INFINITY, sinh(1234.56), 0.0)
    assertEquals(""Should return NEGATIVE_INFINITY"", Double.NEGATIVE_INFINITY, sinh(-1234.56), 0.0)
    assertEquals(""Should return 1.0000000000001666E-6"", 1.0000000000001666E-6, sinh(0.000001), 0.0)
    assertEquals(""Should return -1.0000000000001666E-6"", -1.0000000000001666E-6, sinh(-0.000001), 0.0)
    assertEquals(""Should return 5.115386441963859"", 5.115386441963859, sinh(2.33482))
    assertEquals(""Should return POSITIVE_INFINITY"", Double.POSITIVE_INFINITY, sinh(Double.MAX_VALUE), 0.0)
    assertEquals(""Should return 4.9E-324"", 4.9E-324, sinh(Double.MIN_VALUE), 0.0)
}","/**

     * Tests kotlin.math.sinh(Double)

     */",f3868:m1271
20273,"public fun collectPossibleReferenceShorteningsInElement(element: KtElement, shortenOptions: ShortenOptions = ShortenOptions.DEFAULT, classShortenStrategy: (KtClassLikeSymbol) -> ShortenStrategy = defaultClassShortenStrategy, callableShortenStrategy: (KtCallableSymbol) -> ShortenStrategy = defaultCallableShortenStrategy): ShortenCommand","withValidityAssertion { analysisSession.referenceShortener.collectShortenings(element.containingKtFile, element.textRange, shortenOptions, classShortenStrategy, callableShortenStrategy) }","/**

     * Collects possible references to shorten in [element]s text range. By default, it shortens a fully-qualified members to the outermost

     * class and does not shorten enum entries.

     *

     * N.B. This API is not implemented for the FE10 implementation!

     * For a K1- and K2-compatible API, use [org.jetbrains.kotlin.idea.base.codeInsight.ShortenReferencesFacility].

     *

     * Also see [org.jetbrains.kotlin.idea.base.analysis.api.utils.shortenReferences] and functions around it.

     */",f5810:m309
14867,"@SinceKotlin(""1.4"") public actual fun LongArray?.contentHashCode(): Int","{
    if (this === null) return 0
    var result = 1
    for (element in this) result = 31 * result + element.hashCode()
    return result
}","/**

 * Returns a hash code based on the contents of this array as if it is [List].

 */",f3831:m1681
57176,"@SinceKotlin(""1.4"") public actual fun minOf(a: Short, vararg other: Short): Short","{
    var min = a
    for (e in other) min = minOf(min, e)
    return min
}","/**

 * Returns the smaller of the given values.

 */",f16966:m773
48536,"@JvmOverloads fun executable(buildTypes: Collection<NativeBuildType> = NativeBuildType.DEFAULT_BUILD_TYPES, configure: Action<Executable>)",executable(buildTypes) { configure.execute(this) },/** Creates an executable with the default name prefix for each build type and configures it. */,f15652:m387
43600,"fun BuildResult.getOutputForTask(taskPath: String, logLevel: LogLevel = LogLevel.DEBUG): String","getOutputForTask(taskPath, output, logLevel)","/**

 * Gets the output produced by a specific task during a Gradle build.

 *

 * @param taskPath The path of the task whose output should be retrieved.

 * @param logLevel The given output contains no more than the [logLevel] logs.

 *

 * @return The output produced by the specified task during the build.

 *

 * @throws IllegalStateException if the specified task path does not match any tasks in the build.

 */",f13459:m69
9460,"fun placeGlobal(name: String, initializer: ConstValue, isExported: Boolean = false): Global","{
    val global = createGlobal(initializer.llvmType, name, isExported)
    global.setInitializer(initializer)
    return global
}","/**

     * Creates [Global] with given name and value.

     */",f3357:m225
20205,public fun KtDeclarationSymbol.render(renderer: KtDeclarationRenderer = KtDeclarationRendererForSource.WITH_QUALIFIED_NAMES): String,"withValidityAssertion { analysisSession.symbolDeclarationRendererProvider.renderDeclaration(this, renderer) }","/**

     * Render symbol into the representable Kotlin string

     */",f5792:m55
10446,override fun output(),if (direction == Direction.FORWARD) v2 else v1,"/**

   * Returns the current output variable

   */",f3476:m695
13937,"@SinceKotlin(""1.6"") @WasExperimental(ExperimentalStdlibApi::class) public actual fun Long.rotateLeft(bitCount: Int): Long",shl(bitCount) or ushr(64 - bitCount),"/**

 * Rotates the binary representation of this [Long] number left by the specified [bitCount] number of bits.

 * The most significant bits pushed out from the left side reenter the number as the least significant bits on the right side.

 *

 * Rotating the number left by a negative bit count is the same as rotating it right by the negated bit count:

 * `number.rotateLeft(-n) == number.rotateRight(n)`

 *

 * Rotating by a multiple of [Long.SIZE_BITS] (64) returns the same number, or more generally

 * `number.rotateLeft(n) == number.rotateLeft(n % 64)`

 */",f3706:m483
13701,public operator fun rangeTo(other: Short): LongRange,"LongRange(this, other.toLong())",/** Creates a range from this value to the specified [other] value. */,f3686:m3307
54685,"@SinceKotlin(""1.4"") public actual fun IntArray?.contentToString(): String","{
    return this?.joinToString("", "", ""["", ""]"") ?: ""null""
}","/**

 * Returns a string representation of the contents of the specified array as if it is [List].

 * 

 * @sample samples.collections.Arrays.ContentOperations.contentToString

 */",f16713:m1091
58795,"@SinceKotlin(""1.4"") @OptIn(kotlin.experimental.ExperimentalTypeInference::class) @OverloadResolutionByLambdaReturnType @kotlin.jvm.JvmName(""flatMapIterableTo"") public inline fun <T, R, C: MutableCollection<in R>> Sequence<T>.flatMapTo(destination: C, transform: (T) -> Iterable<R>): C","{
    for (element in this) {
        val list = transform(element)
        destination.addAll(list)
    }
    return destination
}","/**

 * Appends all elements yielded from results of [transform] function being invoked on each element of original sequence, to the given [destination].

 *

 * The operation is _terminal_.

 */",f17096:m1901
14934,"internal fun CharArray.copyOfUninitializedElements(fromIndex: Int, toIndex: Int): CharArray","{
    val newSize = toIndex - fromIndex
    if (newSize < 0) {
        throw IllegalArgumentException(""$fromIndex > $toIndex"")
    }
    val result = CharArray(newSize)
    this.copyInto(result, 0, fromIndex, toIndex.coerceAtMost(size))
    return result
}","/**

 * Returns new array which is a copy of the original array's range between [fromIndex] (inclusive)

 * and [toIndex] (exclusive) with new elements filled with **lateinit** _uninitialized_ values.

 * Attempts to read _uninitialized_ values from this array work in implementation-dependent manner,

 * either throwing exception or returning some kind of implementation-specific default value.

 */",f3831:m3517
58152,@kotlin.internal.InlineOnly public inline operator fun minus(other: ULong): ULong,this.toULong().minus(other),/** Subtracts the other value from this value. */,f17063:m191
58091,@kotlin.internal.InlineOnly public inline operator fun div(other: UShort): UInt,this.toUInt().div(other.toUInt()),"/** Divides this value by the other value, truncating the result to an integer that is closer to zero. */",f17059:m231
14927,"internal fun ByteArray.copyOfUninitializedElements(fromIndex: Int, toIndex: Int): ByteArray","{
    val newSize = toIndex - fromIndex
    if (newSize < 0) {
        throw IllegalArgumentException(""$fromIndex > $toIndex"")
    }
    val result = ByteArray(newSize)
    this.copyInto(result, 0, fromIndex, toIndex.coerceAtMost(size))
    return result
}","/**

 * Returns new array which is a copy of the original array's range between [fromIndex] (inclusive)

 * and [toIndex] (exclusive) with new elements filled with **lateinit** _uninitialized_ values.

 * Attempts to read _uninitialized_ values from this array work in implementation-dependent manner,

 * either throwing exception or returning some kind of implementation-specific default value.

 */",f3831:m3293
14839,"@Deprecated(""Use Kotlin compiler 1.4 to avoid deprecation warning."") @SinceKotlin(""1.1"") @DeprecatedSinceKotlin(hiddenSince = ""1.4"") public infix fun IntArray.contentEquals(other: IntArray): Boolean","{
    return this.contentEquals(other)
}","/**

 * Checks if the two specified arrays are *structurally* equal to one another.

 * 

 * Two arrays are considered structurally equal if they have the same size, and elements at corresponding indices are equal.

 * 

 * @param other the array to compare with this array.

 * @return `true` if the two arrays are structurally equal, `false` otherwise.

 * 

 * @sample samples.collections.Arrays.ContentOperations.intArrayContentEquals

 */",f3831:m763
20202,"public fun createInheritanceTypeSubstitutor(subClass: KtClassOrObjectSymbol, superClass: KtClassOrObjectSymbol): KtSubstitutor?","withValidityAssertion { analysisSession.substitutorProvider.createSubstitutor(subClass, superClass) }","/**

     * Creates a [KtSubstitutor] based on the inheritance relationship between [subClass] and [superClass].

     *

     * The semantic of resulted [KtSubstitutor] is the substitutor that should be applied to a member of [superClass],

     * so it can be called on an instance of [subClass].

     *

     * Basically, it's a composition of inheritance-based substitutions for all the inheritance chain.

     *

     * On the following code:

     * ```

     * class A : B<String>

     * class B<T> : C<T, Int>

     * class C<X, Y>

     * ```

     *

     * * `createInheritanceTypeSubstitutor(A, B)` returns `KtSubstitutor {T -> String}`

     * * `createInheritanceTypeSubstitutor(B, C)` returns `KtSubstitutor {X -> T, Y -> Int}`

     * * `createInheritanceTypeSubstitutor(A, C)` returns `KtSubstitutor {X -> T, Y -> Int} andThen KtSubstitutor {T -> String}`

     *

     * @param subClass the subClass or object symbol.

     * @param superClass the super class symbol.

     * @return [KtSubstitutor] if [subClass] inherits [superClass] and there are no error types in the inheritance path. Returns `null` otherwise.

     */",f5791:m39
57463,"@SinceKotlin(""1.4"") @OptIn(kotlin.experimental.ExperimentalTypeInference::class) @OverloadResolutionByLambdaReturnType @kotlin.jvm.JvmName(""sumOfBigDecimal"") @kotlin.internal.InlineOnly public inline fun ByteArray.sumOf(selector: (Byte) -> java.math.BigDecimal): java.math.BigDecimal","{
    var sum: java.math.BigDecimal = 0.toBigDecimal()
    for (element in this) {
        sum += selector(element)
    }
    return sum
}","/**

 * Returns the sum of all values produced by [selector] function applied to each element in the array.

 */",f16970:m5665
56073,@PublishedApi internal fun <T> Iterable<T>.collectionSizeOrNull(): Int?,if (this is Collection<*>) this.size else null,"/**

 * Returns the size of this iterable if it is known, or `null` otherwise.

 */",f16824:m57
59554,"@SinceKotlin(""1.6"") @WasExperimental(ExperimentalTime::class) @kotlin.internal.InlineOnly public inline fun java.time.Duration.toKotlinDuration(): Duration",this.seconds.toDuration(DurationUnit.SECONDS) + this.nano.toDuration(DurationUnit.NANOSECONDS),"/**

 * Converts [java.time.Duration][java.time.Duration] value to [kotlin.time.Duration][Duration] value.

 *

 * Accuracy of conversion:

 * - Durations in range of ±146 years are converted exactly.

 * - Durations out of that range, but in range of ±146 million years can be rounded to millisecond precision.

 * - Durations greater than that are converted to a positive or negative infinite Duration (see [Duration.INFINITE]).

 */",f17133:m21
11613,fun String.toBooleanStrict(): Boolean,"toBooleanStrictOrNull() ?: throw IllegalStateException(""$this does not represent a Boolean"")","/**

 * Returns `true` if the contents of this string is equal to the word ""true"", ignoring case, `false` if content equals ""false"",

 * and throws [IllegalStateException] otherwise.

 */",f3576:m119
56122,"public fun <T> compareValuesBy(a: T, b: T, vararg selectors: (T) -> Comparable<*>?): Int","{
    require(selectors.size > 0)
    return compareValuesByImpl(a, b, selectors)
}","/**

 * Compares two values using the specified functions [selectors] to calculate the result of the comparison.

 * The functions are called sequentially, receive the given values [a] and [b] and return [Comparable]

 * objects. As soon as the [Comparable] instances returned by a function for [a] and [b] values do not

 * compare as equal, the result of that comparison is returned.

 *

 * @sample samples.comparisons.Comparisons.compareValuesByWithSelectors

 */",f16832:m19
61754,"@SinceKotlin(""1.4"") public fun Element.removeClass(vararg cssClasses: String): Boolean","{
    if (cssClasses.any { hasClass(it) }) {
        val toBeRemoved = cssClasses.toSet()
        className = className.trim().split(""\\s+"".toRegex()).filter { it !in toBeRemoved }.joinToString("" "")
        return true
    }
    return false
}","/**

 * Removes all [cssClasses] from element. Has no effect if all specified classes are missing in class attribute of the element

 *

 * @return true if at least one class has been removed

 */",f17275:m73
63517,"public actual fun CharArray.copyOfRange(fromIndex: Int, toIndex: Int): CharArray","{
    checkCopyOfRangeArguments(fromIndex, toIndex, size)
    return copyOfUninitializedElements(fromIndex, toIndex)
}","/**

 * Returns a new array which is a copy of the specified range of the original array.

 * 

 * @param fromIndex the start of the range (inclusive) to copy.

 * @param toIndex the end of the range (exclusive) to copy.

 * 

 * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.

 * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].

 */",f17396:m3285
34712,inline fun <T> Array<T>.fastForEach(action: (T) -> Unit),"{
    for (index in 0 until size) {
        action(this[index])
    }
}","/**

 * Allocation Free 'forEach' implementation that won't use any underlying iterator.

 * Note: This implementation therefore is unsafe when mutating the collection at the same time!!!

 */",f11390:m233
43511,fun BuildResult.assertNonIncrementalCompilation(reason: BuildAttribute? = null),"{
    if (reason != null) {
        assertOutputContains(""$NON_INCREMENTAL_COMPILATION_WILL_BE_PERFORMED: ${reason.name}"")
    } else {
        assertOutputContains(NON_INCREMENTAL_COMPILATION_WILL_BE_PERFORMED)
    }
    assertOutputDoesNotContain(INCREMENTAL_COMPILATION_COMPLETED)
    assertOutputDoesNotContain(FALLING_BACK_TO_NON_INCREMENTAL_COMPILATION)
}","/**

 * Asserts that compilation was non-incremental.

 *

 * Note: Log level of output must be set to [LogLevel.DEBUG].

 */",f13451:m147
13730,@kotlin.internal.IntrinsicConstEvaluation public override operator fun compareTo(other: Float): Int,"{
    if (this > other) return 1
    if (this < other) return -1
    val thisBits = this.toBits()
    val otherBits = other.toBits()
    return thisBits.compareTo(otherBits)
}","/**

     * Compares this value with the specified value for order.

     * Returns zero if this value is equal to the specified other value, a negative number if it's less than other,

     * or a positive number if it's greater than other.

     */",f3686:m3859
57403,public fun BooleanArray.toSortedSet(): java.util.SortedSet<Boolean>,"{
    return toCollection(java.util.TreeSet<Boolean>())
}","/**

 * Returns a new [SortedSet][java.util.SortedSet] of all elements.

 */",f16970:m4795
64274,@kotlin.internal.IntrinsicConstEvaluation public override fun toFloat(): Float,wasm_f32_convert_i64_s(this),"/**

     * Converts this [Long] value to [Float].

     *

     * The resulting value is the closest `Float` to this `Long` value.

     * In case when this `Long` value is exactly between two `Float`s,

     * the one with zero at least significant bit of mantissa is selected.

     */",f17455:m3687
53173,"@LowPriorityInOverloadResolution @Deprecated(message = ""This API is moved to another package, use 'kotlinx.dom.createElement' instead."", replaceWith = ReplaceWith(""this.createElement(name, init)"", ""kotlinx.dom.createElement"")) @DeprecatedSinceKotlin(warningSince = ""1.4"", errorSince = ""1.6"") @Suppress(""NOTHING_TO_INLINE"") public inline fun Document.createElement(name: String, noinline init: Element.() -> Unit): Element","this.newCreateElement(name, init)","/**

 * Creates a new element with the specified [name].

 *

 * The element is initialized with the specified [init] function.

 */",f16630:m27
63630,"@SinceKotlin(""1.1"") @kotlin.internal.InlineOnly public actual inline fun maxOf(a: Long, b: Long, c: Long): Long","{
    return maxOf(a, maxOf(b, c))
}","/**

 * Returns the greater of three values.

 */",f17406:m237
20213,public fun <S: KtCallableSymbol> S.substitute(substitutor: KtSubstitutor): KtCallableSignature<S>,"withValidityAssertion { analysisSession.signatureSubstitutor.substitute(this, substitutor) }","/**

     * Applies a [substitutor] to the given symbol and return a signature with substituted types.

     *

     * @see KtSubstitutor.substitute

     */",f5793:m73
57356,public actual operator fun BooleanArray.plus(elements: Collection<Boolean>): BooleanArray,"{
    var index = size
    val result = java.util.Arrays.copyOf(this, index + elements.size)
    for (element in elements) result[index++] = element
    return result
}","/**

 * Returns an array containing all elements of the original array and then all elements of the given [elements] collection.

 */",f16970:m3747
48283,internal fun <T> ProviderFactory.changing(code: () -> T): Provider<T>,"{
    @Suppress(""UNCHECKED_CAST"") val adhocValueSourceClass = AdhocValueSource::class.java as Class<AdhocValueSource<T>>
    return of(adhocValueSourceClass) { valueSourceSpec -> valueSourceSpec.parameters { it.producingLambda.set(code) } }
}","/**

 * Changing Provider will be evaluated every time it accessed.

 *

 * And its producing [code] will be serilalised to Configuration Cache as is

 * So that it still will be evaluated during Task Execution phase.

 * It is very convenient for Configuration Cache compatibility.

 *

 * It is recommended to use Task Output's and map/flatMap them to other Task Inputs but in cases when TaskOutput's is not available

 * as Gradle's Properties or Providers then this [changing] provider can be used.

 *

 * name `changing` and overall concept is borrowed from Gradle internal API [org.gradle.api.internal.provider.Providers.changing]

 *

 * @see org.gradle.api.internal.provider.ChangingProvider

 */",f15584:m293
14138,"@Suppress(""UNCHECKED_CAST"") @kotlin.internal.InlineOnly public actual inline fun <T> (suspend () -> T).startCoroutineUninterceptedOrReturn(completion: Continuation<T>): Any?","{
    val wrappedCompletion = wrapWithContinuationImpl(completion)
    val function = this as? Function1<Continuation<T>, Any?>
    return if (function == null) startCoroutineUninterceptedOrReturnFallback(this, wrappedCompletion) else function.invoke(wrappedCompletion)
}","/**

 * Starts an unintercepted coroutine without a receiver and with result type [T] and executes it until its first suspension.

 * Returns the result of the coroutine or throws its exception if it does not suspend or [COROUTINE_SUSPENDED] if it suspends.

 * In the latter case, the [completion] continuation is invoked when the coroutine completes with a result or an exception.

 *

 * The coroutine is started directly in the invoker's thread without going through the [ContinuationInterceptor] that might

 * be present in the completion's [CoroutineContext]. It is the invoker's responsibility to ensure that a proper invocation

 * context is established.

 *

 * This function is designed to be used from inside of [suspendCoroutineUninterceptedOrReturn] to resume the execution of the suspended

 * coroutine using a reference to the suspending function.

 */",f3737:m23
54701,"@Suppress(""NOTHING_TO_INLINE"") public actual inline fun ByteArray.copyOf(): ByteArray","{
    return this.asDynamic().slice()
}","/**

 * Returns new array which is a copy of the original array.

 * 

 * @sample samples.collections.Arrays.CopyOfOperations.copyOf

 */",f16713:m1663
48514,"fun findSharedLib(namePrefix: String, buildType: String): SharedLibrary?","findSharedLib(namePrefix, NativeBuildType.valueOf(buildType.toUpperCaseAsciiOnly()))",/** Returns a shared library with the given [namePrefix] and the given build type. Returns null if there is no such binary. */,f15652:m217
63256,public actual fun String.toLong(): Long,toLongOrNull() ?: numberFormatError(this),"/**

 * Parses the string as a [Long] number and returns the result.

 * @throws NumberFormatException if the string is not a valid representation of a number.

 */",f17352:m111
58911,"@kotlin.jvm.JvmName(""sumOfShort"") public fun Sequence<Short>.sum(): Int","{
    var sum: Int = 0
    for (element in this) {
        sum += element
    }
    return sum
}","/**

 * Returns the sum of all elements in the sequence.

 *

 * The operation is _terminal_.

 */",f17096:m6083
56043,"public fun <K, V> Iterable<Pair<K, V>>.toMap(): Map<K, V>","{
    if (this is Collection) { return when (size) {
        0 -> emptyMap()
        1 -> mapOf(if (this is List) this[0] else iterator().next())
        else -> toMap(LinkedHashMap<K, V>(mapCapacity(size)))
    } }
    return toMap(LinkedHashMap<K, V>()).optimizeReadOnlyMap()
}","/**

 * Returns a new map containing all key-value pairs from the given collection of pairs.

 *

 * The returned map preserves the entry iteration order of the original collection.

 * If any of two pairs would have the same key the last one gets added to the map.

 */",f16823:m1125
58101,@kotlin.internal.InlineOnly public inline fun floorDiv(other: ULong): ULong,this.toULong().floorDiv(other),"/**

     * Divides this value by the other value, flooring the result to an integer that is closer to negative infinity.

     *

     * For unsigned types, the results of flooring division and truncating division are the same.

     */",f17059:m351
64399,public operator fun String?.plus(other: Any?): String,"(this ?: ""null"") + other.toString()","/**

 * Concatenates this string with the string representation of the given [other] object. If either the receiver

 * or the [other] object are null, they are represented as the string ""null"".

 */",f17462:m41
57258,"@SinceKotlin(""1.4"") @JvmName(""contentDeepToStringNullable"") @kotlin.internal.InlineOnly public actual inline fun <T> Array<out T>?.contentDeepToString(): String","{
    if (kotlin.internal.apiVersionIsAtLeast(1, 3, 0)) return contentDeepToStringImpl() else return java.util.Arrays.deepToString(this)
}","/**

 * Returns a string representation of the contents of this array as if it is a [List].

 * Nested arrays are treated as lists too.

 * 

 * If any of arrays contains itself on any nesting level that reference

 * is rendered as `""[...]""` to prevent recursion.

 * 

 * @sample samples.collections.Arrays.ContentOperations.contentDeepToString

 */",f16970:m1087
48500,fun findExecutable(buildType: String): Executable?,"findExecutable("""", buildType)",/** Returns an executable with the empty name prefix and the given build type. Returns null if there is no such binary. */,f15652:m127
63579,public actual fun CharArray.sort(): Unit,"{
    if (size > 1) sortArray(this, 0, size)
}","/**

 * Sorts the array in-place.

 * 

 * @sample samples.collections.Arrays.Sorting.sortArray

 */",f17396:m4769
14788,"@SinceKotlin(""1.3"") @ExperimentalUnsignedTypes public actual fun UIntArray.asList(): List<UInt>","{
    return object : AbstractList<UInt>(), RandomAccess {
        override val size: Int get() = this@asList.size
    
        override fun isEmpty(): Boolean = this@asList.isEmpty()
    
        override fun contains(element: UInt): Boolean = this@asList.contains(element)
    
        override fun get(index: Int): UInt = this@asList[index]
    
        override fun indexOf(element: UInt): Int = this@asList.indexOf(element)
    
        override fun lastIndexOf(element: UInt): Int = this@asList.lastIndexOf(element)
    }
}","/**

 * Returns a [List] that wraps the original array.

 */",f3828:m127
21768,private fun FirNamedReference.getCorrespondingTypeIfPossible(): ConeKotlinType?,findOuterPropertyAccessExpression()?.resolvedType,"/**

     * It only makes sense to provide type for the references which reference some actual properties/variables.

     *

     * In cases when the name reference references a function (a REAL function, not a functional type variable), it does not

     * make sense to provide any type for it.

     *

     * ---

     *

     * Why not just always provide null for name references? In such case, the following case would be a problem:

     *

     * ```kt

     * fun usage(action: String.(Int) -> String) {

     *   ""hello"".<expr>action</expr>(10)

     * }

     * ```

     *

     * The user might want to know the type of the `action` callback. If we always return null for the named references,

     * we won't be able to handle this request, and just return null. So the user will only be able to see the type

     * of the whole expression instead, and that is not what he wants.

     */",f8638:m213
13662,@kotlin.internal.IntrinsicConstEvaluation public inline operator fun compareTo(other: Int): Int,this.compareTo(other.toLong()),"/**

     * Compares this value with the specified value for order.

     * Returns zero if this value is equal to the specified other value, a negative number if it's less than other,

     * or a positive number if it's greater than other.

     */",f3686:m2815
58864,"public inline fun <S, T: S> Sequence<T>.reduceIndexed(operation: (index: Int, acc: S, T) -> S): S","{
    val iterator = this.iterator()
    if (!iterator.hasNext()) throw UnsupportedOperationException(""Empty sequence can't be reduced."")
    var index = 1
    var accumulator: S = iterator.next()
    while (iterator.hasNext()) {
        accumulator = operation(checkIndexOverflow(index++), accumulator, iterator.next())
    }
    return accumulator
}","/**

 * Accumulates value starting with the first element and applying [operation] from left to right

 * to current accumulator value and each element with its index in the original sequence.

 * 

 * Throws an exception if this sequence is empty. If the sequence can be empty in an expected way,

 * please use [reduceIndexedOrNull] instead. It returns `null` when its receiver is empty.

 * 

 * @param [operation] function that takes the index of an element, current accumulator value and the element itself,

 * and calculates the next accumulator value.

 *

 * The operation is _terminal_.

 * 

 * @sample samples.collections.Collections.Aggregates.reduce

 */",f17096:m4437
63644,"@SinceKotlin(""1.1"") @kotlin.internal.InlineOnly public actual inline fun minOf(a: Long, b: Long): Long","{
    return if (a <= b) a else b
}","/**

 * Returns the smaller of two values.

 */",f17406:m525
52025,"inline fun <T, R> Iterable<T>.flatMapSuccess(body: (T) -> ResultWithDiagnostics<Collection<R>>): ResultWithDiagnostics<List<R>>","mapSuccessImpl(body) { results, r -> results.addAll(r) }","/**

 * maps transformation ([body]) over iterable merging diagnostics and flatten the results

 * return failure with merged diagnostics after first failed transformation

 * and success with merged diagnostics and list of results if all transformations succeeded

 */",f16426:m329
54821,"@SinceKotlin(""1.1"") @kotlin.internal.InlineOnly public actual inline fun minOf(a: Short, b: Short): Short","{
    return minOf(a.toInt(), b.toInt()).unsafeCast<Short>()
}","/**

 * Returns the smaller of two values.

 */",f16714:m491
57198,public fun <R> Sequence<*>.filterIsInstance(klass: Class<R>): Sequence<R>,"{
    @Suppress(""UNCHECKED_CAST"") return filter { klass.isInstance(it) } as Sequence<R>
}","/**

 * Returns a sequence containing all elements that are instances of specified class.

 *

 * The operation is _intermediate_ and _stateless_.

 * 

 * @sample samples.collections.Collections.Filtering.filterIsInstanceJVM

 */",f16968:m33
64412,@kotlin.internal.IntrinsicConstEvaluation public override fun compareTo(other: Char): Int,"wasm_i32_compareTo(this.code, other.code)","/**

     * Compares this value with the specified value for order.

     *

     * Returns zero if this value is equal to the specified other value, a negative number if it's less than other,

     * or a positive number if it's greater than other.

     */",f17463:m33
22890,"@Test @DisplayName(""sync shouldn't override properties if they already manually set"") fun testSyncingDoesNotOverrideValues()","{
    val initialContent = mapOf(""oldProperty1"" to PropertyValue.Configured(""oldValue1""), ""oldProperty2"" to PropertyValue.Configured(""oldValue2""), ""alreadySetProperty"" to PropertyValue.Configured(""oldValue3""))
    fillInitialLocalPropertiesFile(initialContent)
    modifier.applySetup(setupFile)
    localPropertiesFile.propertiesFileContentAssertions { fileContents, properties ->
        assertContainsMarkersOnce(fileContents)
        val expectedProperties = setupFile.properties + initialContent.mapValues { it.value.value }
        assertEquals(expectedProperties.size, properties.size)
        for ((key, value) in expectedProperties) {
            assertEquals(value, properties[key])
        }
        assertContainsExactTimes(fileContents, ""#alreadySetProperty=newValue the property is overridden by 'oldValue3'"", 1)
    }
}","/**

     * Checks that a file like

     * ```

     * a=1

     * b=2

     * f=3

     * ```

     * is being transformed into

     * ```

     * a=1

     * b=2

     * c=3

     * #header

     * d=4

     * #footer

     * ```

     */",f8809:m213
59091,"@SinceKotlin(""1.5"") @WasExperimental(ExperimentalUnsignedTypes::class) @kotlin.internal.InlineOnly public inline fun maxOf(a: UByte, b: UByte, c: UByte): UByte","{
    return maxOf(a, maxOf(b, c))
}","/**

 * Returns the greater of three values.

 */",f17098:m149
18679,"fun addSimpleAnnotationIfMissing(qualifier: String, currentRawAnnotations: MutableList<in PsiAnnotation>, foundQualifiers: MutableSet<String>, owner: PsiElement)","{
    val isNewQualifier = foundQualifiers.add(qualifier)
    if (!isNewQualifier) return
    currentRawAnnotations += SymbolLightSimpleAnnotation(qualifier, owner)
}","/**

     * Adds a new annotation with [qualifier] name to [currentRawAnnotations] and [foundQualifiers] if not already present

     */",f5487:m97
57164,"@SinceKotlin(""1.1"") @kotlin.internal.InlineOnly public actual inline fun minOf(a: Long, b: Long): Long","{
    return Math.min(a, b)
}","/**

 * Returns the smaller of two values.

 */",f16966:m531
29090,"override fun Pair<F, S>.write(parcel: Parcel, flags: Int)","{
    with(firstParceler) { this@write.first.write(parcel, 0) }
    with(secondParceler) { this@write.second.write(parcel, 0) }
}","/**

     * Writes the [T] instance state to the [parcel].

     */",f10233:m43
19588,"fun isKotlinJvmCompiledFile(file: VirtualFile, fileContent: ByteArray? = null): Boolean","{
    if (file.extension != JavaClassFileType.INSTANCE!!.defaultExtension) {
        return false
    }
    val binaryFromCache = getKotlinBinaryFromCache(file)
    binaryFromCache?.let { return it.isKotlinBinary }
    return kotlinJvmBinaryClass(file, fileContent, JvmMetadataVersion.INSTANCE, binaryFromCache?.isKotlinBinary) != null
}","/**

     * Checks if this file is a compiled Kotlin class file (not necessarily ABI-compatible with the current plugin)

     */",f5618:m71
58803,"public fun <T, R> Sequence<T>.mapIndexed(transform: (index: Int, T) -> R): Sequence<R>","{
    return TransformingIndexedSequence(this, transform)
}","/**

 * Returns a sequence containing the results of applying the given [transform] function

 * to each element and its index in the original sequence.

 * @param [transform] function that takes the index of an element and the element itself

 * and returns the result of the transform applied to the element.

 *

 * The operation is _intermediate_ and _stateless_.

 */",f17096:m2153
14525,private fun initialParse(string: String): StringExponentPair,"{
    var s = string
    var length = s.length
    var negative = false
    val decimal: Int
    var shift: Int
    var e = 0
    var start = 0
    var c: Char = s[length - 1]
    if (c == 'D' || c == 'd' || c == 'F' || c == 'f') {
        length--
        if (length == 0) throw NumberFormatException(s)
    }
    var end = maxOf(s.indexOf('E'), s.indexOf('e'))
    if (end > -1) {
        if (end + 1 == length) throw NumberFormatException(s)
        var exponentOffset = end + 1
        if (s[exponentOffset] == '+') {
            if (s[exponentOffset + 1] == '-') {
                throw NumberFormatException(s)
            }
            exponentOffset++
            if (exponentOffset == length) throw NumberFormatException(s)
        }
        val strExp = s.substring(exponentOffset, length)
        try {
            e = strExp.toInt()
        } catch (ex: NumberFormatException) {
            var ch: Char
            for (i in strExp.indices) {
                ch = strExp[i]
                if (ch < '0' || ch > '9') {
                    if (i == 0 && ch == '-') continue
                    throw NumberFormatException(s)
                }
            }
            e = if (strExp[0] == '-') Int.MIN_VALUE else Int.MAX_VALUE
        }
    } else {
        end = length
    }
    if (length == 0) throw NumberFormatException(s)
    c = s[start]
    if (c == '-') {
        ++start
        --length
        negative = true
    } else if (c == '+') {
        ++start
        --length
    }
    if (length == 0) throw NumberFormatException(s)
    decimal = s.indexOf('.')
    s = if (decimal > -1) {
        shift = end - decimal - 1
        if (e >= 0 || e - Int.MIN_VALUE > shift) {
            e -= shift
        }
        s.substring(start, decimal) + s.substring(decimal + 1, end)
    } else {
        s.substring(start, end)
    }
    s.forEach { if (it < '0' || it > '9') {
        throw NumberFormatException()
    } }
    length = s.length
    if (length == 0) throw NumberFormatException()
    end = length
    while (end > 1 && s[end - 1] == '0') --end
    start = 0
    while (start < end - 1 && s[start] == '0') start++
    if (end != length || start != 0) {
        shift = length - end
        if (e <= 0 || Int.MAX_VALUE - e > shift) {
            e += shift
        }
        s = s.substring(start, end)
    }
    val APPROX_MIN_MAGNITUDE = -359
    val MAX_DIGITS = 52
    length = s.length
    if (length > MAX_DIGITS && e < APPROX_MIN_MAGNITUDE) {
        val d = minOf(APPROX_MIN_MAGNITUDE - e, length - 1)
        s = s.substring(0, length - d)
        e += d
    }
    return StringExponentPair(s, e, negative)
}","/**

     * Takes a String and does some initial parsing. Should return a

     * StringExponentPair containing a String with no leading or trailing white

     * space and trailing zeroes eliminated. The exponent of the

     * StringExponentPair will be used to calculate the floating point number by

     * taking the positive integer the String represents and multiplying by 10

     * raised to the power of the exponent.

     *

     * This method is not optimal, can cause performance issues. This logic can be done in one single run.

     * It also violates Kotlin coding practices and should be refactored in the future after stabilizing the logic.

     *

     * @param string the String that will be parsed to a floating point

     * @return a StringExponentPair with necessary values

     * @exception NumberFormatException if the String doesn't pass basic tests

     */",f3789:m329
56081,@kotlin.internal.InlineOnly public inline operator fun <T> MutableCollection<in T>.plusAssign(elements: Iterable<T>),"{
    this.addAll(elements)
}","/**

 * Adds all elements of the given [elements] collection to this mutable collection.

 */",f16825:m105
56107,public fun <T> MutableList<T>.removeAll(predicate: (T) -> Boolean): Boolean,"filterInPlace(predicate, true)","/**

 * Removes all elements from this [MutableList] that match the given [predicate].

 *

 * @return `true` if any element was removed from this collection, or `false` when no elements were removed and collection was not modified.

 */",f16825:m529
54694,"@SinceKotlin(""1.3"") @kotlin.internal.InlineOnly @Suppress(""ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS"") public actual inline fun IntArray.copyInto(destination: IntArray, destinationOffset: Int = 0, startIndex: Int = 0, endIndex: Int = size): IntArray","{
    arrayCopy(this.unsafeCast<Array<Int>>(), destination.unsafeCast<Array<Int>>(), destinationOffset, startIndex, endIndex)
    return destination
}","/**

 * Copies this array or its subrange into the [destination] array and returns that array.

 * 

 * It's allowed to pass the same array in the [destination] and even specify the subrange so that it overlaps with the destination range.

 * 

 * @param destination the array to copy to.

 * @param destinationOffset the position in the [destination] array to copy to, 0 by default.

 * @param startIndex the beginning (inclusive) of the subrange to copy, 0 by default.

 * @param endIndex the end (exclusive) of the subrange to copy, size of this array by default.

 * 

 * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of this array indices or when `startIndex > endIndex`.

 * @throws IndexOutOfBoundsException when the subrange doesn't fit into the [destination] array starting at the specified [destinationOffset],

 * or when that index is out of the [destination] array indices range.

 * 

 * @return the [destination] array.

 */",f16713:m1355
54849,"@SinceKotlin(""1.3"") @ExperimentalUnsignedTypes public actual fun ULongArray.asList(): List<ULong>","{
    return object : AbstractList<ULong>(), RandomAccess {
        override val size: Int get() = this@asList.size
    
        override fun isEmpty(): Boolean = this@asList.isEmpty()
    
        override fun contains(element: ULong): Boolean = this@asList.contains(element)
    
        override fun get(index: Int): ULong {
            AbstractList.checkElementIndex(index, size)
            return this@asList[index]
        }
    
        override fun indexOf(element: ULong): Int {
            @Suppress(""USELESS_CAST"") if ((element as Any?) !is ULong) return -1
            return this@asList.indexOf(element)
        }
    
        override fun lastIndexOf(element: ULong): Int {
            @Suppress(""USELESS_CAST"") if ((element as Any?) !is ULong) return -1
            return this@asList.lastIndexOf(element)
        }
    }
}","/**

 * Returns a [List] that wraps the original array.

 */",f16716:m175
14801,"@Deprecated(""Use Kotlin compiler 1.4 to avoid deprecation warning."") @SinceKotlin(""1.3"") @DeprecatedSinceKotlin(hiddenSince = ""1.4"") @ExperimentalUnsignedTypes public fun ULongArray.contentToString(): String","{
    return this.contentToString()
}","/**

 * Returns a string representation of the contents of the specified array as if it is [List].

 * 

 * @sample samples.collections.Arrays.ContentOperations.contentToString

 */",f3828:m513
55736,"public fun String.replaceIndentByMargin(newIndent: String = """", marginPrefix: String = ""|""): String","{
    require(marginPrefix.isNotBlank()) { ""marginPrefix must be non-blank string."" }
    val lines = lines()
    return lines.reindent(length + newIndent.length * lines.size, getIndentFunction(newIndent), { line ->
        val firstNonWhitespaceIndex = line.indexOfFirst { !it.isWhitespace() }
        when {
            firstNonWhitespaceIndex == -1 -> null
            line.startsWith(marginPrefix, firstNonWhitespaceIndex) -> line.substring(firstNonWhitespaceIndex + marginPrefix.length)
            else -> null
        }
    })
}","/**

 * Detects indent by [marginPrefix] as it does [trimMargin] and replace it with [newIndent].

 *

 * @param marginPrefix non-blank string, which is used as a margin delimiter. Default is `|` (pipe character).

 */",f16789:m57
48380,internal inline fun <reified T> Any.castIsolatedKotlinPluginClassLoaderAware(): T,"{
    if (this is T) return this
    val targetClassFromReceiverClassLoader = try {
        this::class.java.classLoader.loadClass(T::class.java.name)
    } catch (_: ClassNotFoundException) {
        null
    }
    if (targetClassFromReceiverClassLoader != null && targetClassFromReceiverClassLoader != T::class.java) {
        if (null is T && !targetClassFromReceiverClassLoader.isInstance(this)) return null as T
        throw IsolatedKotlinClasspathClassCastException()
    }
    return if (null is T) null as T else this as T
}","/**

 * Behaves like a regular cast function, but will be able to detect cast failures because

 * of an isolated classpath. In this case a more detailed error message will be emitted.

 *

 * ```

 * """".castIsolatedKotlinPluginClassLoaderAware<Int>() // fails like """" as Int

 * """".castIsolatedKotlinPluginClassLoaderAware<Int?>() // returns null like """" as? Int

 * ```

 * @return [this] as T if possible (regular cast)

 * @throws ClassCastException is not castable

 * @throws IsolatedKotlinClasspathClassCastException when a separated classpath is detected. See [MULTIPLE_KOTLIN_PLUGINS_LOADED_WARNING]

 */",f15615:m23
56522,"@SinceKotlin(""1.4"") @kotlin.internal.InlineOnly public actual inline fun StringBuilder.appendLine(value: Double): StringBuilder",append(value).appendLine(),"/** Appends [value] to this [StringBuilder], followed by a line feed character (`\n`). */",f16890:m467
59029,"@SinceKotlin(""1.4"") public fun CharSequence.maxWithOrNull(comparator: Comparator<in Char>): Char?","{
    if (isEmpty()) return null
    var max = this[0]
    for (i in 1 .. lastIndex) {
        val e = this[i]
        if (comparator.compare(max, e) < 0) max = e
    }
    return max
}","/**

 * Returns the first character having the largest value according to the provided [comparator] or `null` if there are no characters.

 */",f17097:m2919
53465,"@SinceKotlin(""1.4"") public fun Element.addClass(vararg cssClasses: String): Boolean","{
    val missingClasses = cssClasses.filterNot { hasClass(it) }
    if (missingClasses.isNotEmpty()) {
        val presentClasses = className.trim()
        className = buildString {
            append(presentClasses)
            if (!presentClasses.isEmpty()) {
                append("" "")
            }
            missingClasses.joinTo(this, "" "")
        }
        return true
    }
    return false
}","/**

 * Adds CSS class to element. Has no effect if all specified classes are already in class attribute of the element

 *

 * @return true if at least one class has been added

 */",f16680:m27
63392,@UnsafeWasmMemoryApi public inline fun <T> withScopedMemoryAllocator(block: (allocator: MemoryAllocator) -> T): T,"{
    contract { callsInPlace(block, InvocationKind.EXACTLY_ONCE) }
    val allocator = createAllocatorInTheNewScope()
    val result = try {
        block(allocator)
    } finally {
        allocator.destroy()
        currentAllocator = allocator.parent
    }
    return result
}","/**

 * Runs the [block] of code, providing it a temporary [MemoryAllocator] as an argument, and returns the result of this block.

 *

 * Frees all memory allocated with the provided allocator after running the [block].

 *

 * This function is intened to facilitate the exchange of values with outside world through linear memory.

 * For example:

 *

 * ```

 * val buffer_size = ...

 * withScopedMemoryAllocator { allocator ->

 *     val buffer_address = allocator.allocate(buffer_size)

 *     importedWasmFunctionThatWritesToBuffer(buffer_address, buffer_size)

 *     return readDataFromBufferIntoManagedKotlinMemory(buffer_address, buffer_size)

 * }

 * ```

 *

 * WARNING! Addresses allocated inside the [block] function become invalid after exiting the function.

 *

 * WARNING! A nested call to [withScopedMemoryAllocator] will temporarily disable the allocator from the outer scope

 *   for the duration of the call. Calling [MemoryAllocator.allocate] on a disabled allocator

 *   will throw [IllegalStateException].

 *

 * WARNING! Accessing the allocator outside of the [block] scope will throw [IllegalStateException].

 */",f17393:m51
48542,"@JvmOverloads fun sharedLib(buildTypes: Collection<NativeBuildType> = NativeBuildType.DEFAULT_BUILD_TYPES, configure: SharedLibrary.() -> Unit = {})","createBinaries("""", project.name, NativeOutputKind.DYNAMIC, buildTypes, ::SharedLibrary, configure)",/** Creates a shared library with the empty name prefix for each build type and configures it. */,f15652:m477
58748,public fun <T> Sequence<T>.last(): T,"{
    val iterator = iterator()
    if (!iterator.hasNext()) throw NoSuchElementException(""Sequence is empty."")
    var last = iterator.next()
    while (iterator.hasNext()) last = iterator.next()
    return last
}","/**

 * Returns the last element.

 *

 * The operation is _terminal_.

 * 

 * @throws NoSuchElementException if the sequence is empty.

 * 

 * @sample samples.collections.Collections.Elements.last

 */",f17096:m471
56206,"@SinceKotlin(""1.4"") @kotlin.internal.InlineOnly public inline fun Byte.countLeadingZeroBits(): Int",(toInt() and 0xFF).countLeadingZeroBits() - (Int.SIZE_BITS - Byte.SIZE_BITS),"/**

 * Counts the number of consecutive most significant bits that are zero in the binary representation of this [Byte] number.

 */",f16841:m277
48407,"internal fun Task.onlyIfCompat(onlyIfReason: String, onlyIfSpec: Spec<in Task>)","{
    if (GradleVersion.current() < GradleVersion.version(""7.6"")) {
        onlyIf(onlyIfSpec)
    } else {
        onlyIf(onlyIfReason, onlyIfSpec)
    }
}","/**

 * According to [Gradle 7.6 release notes](https://docs.gradle.org/7.6/release-notes.html#introduced-ability-to-explain-why-a-task-was-skipped-with-a-message)

 * [Task.onlyIf] has reason message`

 */",f15623:m153
63637,"@SinceKotlin(""1.4"") public actual fun maxOf(a: Long, vararg other: Long): Long","{
    var max = a
    for (e in other) max = maxOf(max, e)
    return max
}","/**

 * Returns the greater of the given values.

 */",f17406:m383
54827,"@SinceKotlin(""1.1"") @kotlin.internal.InlineOnly public actual inline fun minOf(a: Byte, b: Byte, c: Byte): Byte","{
    return JsMath.min(a.toInt(), b.toInt(), c.toInt()).unsafeCast<Byte>()
}","/**

 * Returns the smaller of three values.

 */",f16714:m609
56054,"public operator fun <K, V> Map<out K, V>.plus(pairs: Array<out Pair<K, V>>): Map<K, V>",if (this.isEmpty()) pairs.toMap() else LinkedHashMap(this).apply { putAll(pairs) },"/**

 * Creates a new read-only map by replacing or adding entries to this map from a given array of key-value [pairs].

 *

 * The returned map preserves the entry iteration order of the original map.

 * Those [pairs] with unique keys are iterated in the end in the order of [pairs] array.

 */",f16823:m1325
57156,"@SinceKotlin(""1.4"") public actual fun maxOf(a: Int, vararg other: Int): Int","{
    var max = a
    for (e in other) max = maxOf(max, e)
    return max
}","/**

 * Returns the greater of the given values.

 */",f16966:m369
54746,public actual operator fun ByteArray.plus(elements: Collection<Byte>): ByteArray,"{
    var index = size
    val result = this.copyOf(size + elements.size)
    for (element in elements) result[index++] = element
    return result
}","/**

 * Returns an array containing all elements of the original array and then all elements of the given [elements] collection.

 */",f16713:m2775
58475,"public inline fun <K, V, R: Any, C: MutableCollection<in R>> Map<out K, V>.mapNotNullTo(destination: C, transform: (Map.Entry<K, V>) -> R?): C","{
    forEach { element -> transform(element)?.let { destination.add(it) } }
    return destination
}","/**

 * Applies the given [transform] function to each entry in the original map

 * and appends only the non-null results to the given [destination].

 */",f17089:m277
43651,fun Path.modify(transform: (currentContent: String) -> String),"{
    assert(Files.isRegularFile(this)) { ""$this is not a regular file!"" }
    val file = toFile()
    file.writeText(transform(file.readText()))
}","/**

 * Modify file content under [Path].

 *

 * @param transform function receiving current file content and outputting new file content

 */",f13473:m21
58081,@kotlin.internal.InlineOnly public inline operator fun plus(other: ULong): ULong,this.toULong().plus(other),/** Adds the other value to this value. */,f17059:m165
57058,@kotlin.internal.InlineOnly public inline fun println(message: Float),"{
    System.out.println(message)
}",/** Prints the given [message] and the line separator to the standard output stream. */,f16953:m237
30907,infix fun <T> List<T>.memoryOptimizedPlus(element: T): List<T>,"when (size) {
    0 -> Collections.singletonList(element)
    else -> ArrayList<T>(size + 1).also {
        it.addAll(this)
        it.add(element)
    }
}","/**

 * A memory-optimized version of [Iterable.plus].

 * @see Iterable.plus

 */",f10791:m161
58652,public infix fun Int.downTo(to: Long): LongProgression,"{
    return LongProgression.fromClosedRange(this.toLong(), to, -1L)
}","/**

 * Returns a progression from this value down to the specified [to] value with the step -1.

 * 

 * The [to] value should be less than or equal to `this` value.

 * If the [to] value is greater than `this` value the returned progression is empty.

 */",f17092:m1711
58593,"@SinceKotlin(""1.3"") @kotlin.internal.InlineOnly public inline operator fun CharRange.contains(element: Char?): Boolean","{
    return element != null && contains(element)
}","/**

 * Returns `true` if this range contains the specified [element].

 * 

 * Always returns `false` if the [element] is `null`.

 */",f17092:m609
7528,fun Task.sameDependenciesAs(task: Task),"{
    val dependencies = task.dependsOn.toList()
    this.dependsOn(dependencies)
}","/**

 * Sets the same dependencies for the receiver task from the given [task]

 */",f3111:m515
36929,"fun download(source: URL, destination: File, replace: ReplacingMode = ReplacingMode.RETURN_EXISTING): File","{
    if (destination.exists()) { when (replace) {
        ReplacingMode.RETURN_EXISTING -> return destination
        ReplacingMode.THROW -> throw FileAlreadyExistsException(destination)
        ReplacingMode.REPLACE -> Unit
    } }
    val tmpFile = File(""${destination.canonicalPath}.$TMP_SUFFIX"")
    check(!tmpFile.isDirectory) { ""A temporary file is a directory: ${tmpFile.canonicalPath}. Remove it and try again."" }
    check(!destination.isDirectory) { ""The destination file is a directory: ${destination.canonicalPath}. Remove it and try again."" }
    var attempt = 1
    var waitTime = 0L
    val handleException = { e: Exception ->
        if (attempt >= maxAttempts) {
            throw e
        }
        attempt++
        waitTime += attemptIntervalMs
        println(""Cannot download a dependency: $e\n"" + ""Waiting ${waitTime.toDouble() / 1000} sec and trying again (attempt: $attempt/$maxAttempts)."")
        Thread.sleep(waitTime)
    }
    while (true) {
        try {
            tryDownload(source, tmpFile)
            break
        } catch (e: HTTPResponseException) {
            if (e.responseCode >= 500) {
                handleException(e)
            } else {
                throw e
            }
        } catch (e: IOException) {
            handleException(e)
        }
    }
    Files.move(tmpFile.toPath(), destination.toPath(), StandardCopyOption.REPLACE_EXISTING)
    println(""Done."")
    return destination
}",/** Downloads a file from [source] url to [destination]. Returns [destination]. */,f11657:m309
58597,"@Deprecated(""This `contains` operation mixing integer and floating point arguments has ambiguous semantics and is going to be removed."") @DeprecatedSinceKotlin(warningSince = ""1.3"", errorSince = ""1.4"", hiddenSince = ""1.5"") @kotlin.jvm.JvmName(""doubleRangeContains"") public operator fun ClosedRange<Double>.contains(value: Byte): Boolean","{
    return contains(value.toDouble())
}","/**

 * Checks if the specified [value] belongs to this range.

 */",f17092:m679
51008,"fun assertSourceSetDependenciesResolution(expectedFilePath: String, withProject: ProjectInternal? = null, configure: SourceSetDependenciesDsl.(Project) -> Unit)","{
    val repoRoot = tempFolder.newFolder()
    val project = withProject ?: buildProject { applyMultiplatformPlugin() }
    project.allprojects {
        it.enableDefaultStdlibDependency(false)
        it.enableDependencyVerification(false)
        it.repositories.maven(repoRoot)
    }
    val dsl = SourceSetDependenciesDsl(project)
    dsl.configure(project)
    dsl.declaredDependencies.forEach { project.multiplatformExtension.publishAsMockedLibrary(repoRoot, it.first, it.second) }
    project.evaluate()
    val actualResult = project.resolveAllSourceSetDependencies()
    val expectedFile = resourcesRoot.resolve(""dependenciesResolution"").resolve(expectedFilePath)
    KotlinTestUtils.assertEqualsToFile(expectedFile, actualResult)
}","/**

     * If [withProject] is not null then dependencies of source sets in this projects will be verified against [expectedFilePath]

     *

     */",f16229:m89
54664,"@SinceKotlin(""1.4"") public actual infix fun <T> Array<out T>?.contentEquals(other: Array<out T>?): Boolean","{
    return contentEqualsInternal(other)
}","/**

 * Checks if the two specified arrays are *structurally* equal to one another.

 * 

 * Two arrays are considered structurally equal if they have the same size, and elements at corresponding indices are equal.

 * Elements are compared for equality using the [equals][Any.equals] function.

 * For floating point numbers, this means `NaN` is equal to itself and `-0.0` is not equal to `0.0`.

 * 

 * The arrays are also considered structurally equal if both are `null`.

 * 

 * If the arrays contain nested arrays, use [contentDeepEquals] to recursively compare their elements.

 * 

 * @param other the array to compare with this array.

 * @return `true` if the two arrays are structurally equal, `false` otherwise.

 * 

 * @sample samples.collections.Arrays.ContentOperations.arrayContentEquals

 */",f16713:m565
58141,@kotlin.internal.InlineOnly public inline operator fun compareTo(other: UByte): Int,this.compareTo(other.toUInt()),"/**

     * Compares this value with the specified value for order.

     * Returns zero if this value is equal to the specified other value, a negative number if it's less than other,

     * or a positive number if it's greater than other.

     */",f17063:m81
55636,"@SinceKotlin(""1.1"") @kotlin.internal.InlineOnly public inline fun Byte.inv(): Byte",(this.toInt().inv()).toByte(),/** Inverts the bits in this value. */,f16775:m45
52212,suspend fun ExternalDependenciesResolver.resolveFromScriptSourceAnnotations(annotations: Iterable<ScriptSourceAnnotation<*>>): ResultWithDiagnostics<List<File>>,"{
    val reports = mutableListOf<ScriptDiagnostic>()
    annotations.forEach { (annotation, locationWithId) -> when (annotation) {
        is Repository -> {
            val options = SimpleExternalDependenciesResolverOptionsParser(*annotation.options, locationWithId = locationWithId).valueOr { return it }
            for (coordinates in annotation.repositoriesCoordinates) {
                val added = addRepository(coordinates, options, locationWithId).also { reports.addAll(it.reports) }.valueOr { return it }
                if (!added) return reports + makeFailureResult(""Unrecognized repository coordinates: $coordinates"", locationWithId = locationWithId)
            }
        }
        is DependsOn -> {}
        else -> return reports + makeFailureResult(""Unknown annotation ${annotation.javaClass}"", locationWithId = locationWithId)
    } }
    return reports + annotations.filterByAnnotationType<DependsOn>().flatMapSuccess { (annotation, locationWithId) -> SimpleExternalDependenciesResolverOptionsParser(*annotation.options, locationWithId = locationWithId).onSuccess { options -> annotation.artifactsCoordinates.asIterable().flatMapSuccess { artifactCoordinates -> resolve(artifactCoordinates, options, locationWithId) } } }
}","/**

 * An extension function that configures repositories and resolves artifacts denoted by the [Repository] and [DependsOn] annotations

 */",f16455:m65
56223,"@SinceKotlin(""1.5"") @kotlin.internal.InlineOnly @kotlin.internal.IntrinsicConstEvaluation public inline fun Byte.floorDiv(other: Int): Int",this.toInt().floorDiv(other),"/** Divides this value by the other value, flooring the result to an integer that is closer to negative infinity. */",f16842:m101
37765,internal fun KtObjCExportSession.isExported(module: KtModule): Boolean,cached(IsExportedCacheKey(module)) { internal.moduleClassifier.isExported(module) },"/**

 * See [KtObjCExportDefaultModuleClassifier.isExported]:

 * Note: This method will be cached.

 */",f11851:m55
53124,public actual fun String.toShort(): Short,toShortOrNull() ?: numberFormatError(this),"/**

 * Parses the string as a [Short] number and returns the result.

 * @throws NumberFormatException if the string is not a valid representation of a number.

 */",f16618:m61
57139,"@SinceKotlin(""1.1"") public actual fun <T: Comparable<T>> maxOf(a: T, b: T): T","{
    return if (a >= b) a else b
}","/**

 * Returns the greater of two values.

 * 

 * If values are equal, returns the first one.

 */",f16966:m33
59081,"@SinceKotlin(""1.2"") public fun CharSequence.zipWithNext(): List<Pair<Char, Char>>","{
    return zipWithNext { a, b -> a to b }
}","/**

 * Returns a list of pairs of each two adjacent characters in this char sequence.

 * 

 * The returned list is empty if this char sequence contains less than two characters.

 * 

 * @sample samples.collections.Collections.Transformations.zipWithNext

 */",f17097:m4879
14909,public actual fun ShortArray.copyOf(newSize: Int): ShortArray,"{
    return this.copyOfUninitializedElements(newSize)
}","/**

 * Returns new array which is a copy of the original array, resized to the given [newSize].

 * The copy is either truncated or padded at the end with zero values if necessary.

 * 

 * - If [newSize] is less than the size of the original array, the copy array is truncated to the [newSize].

 * - If [newSize] is greater than the size of the original array, the extra elements in the copy array are filled with zero values.

 * 

 * @sample samples.collections.Arrays.CopyOfOperations.resizedPrimitiveCopyOf

 */",f3831:m2801
63506,public actual fun BooleanArray.copyOf(newSize: Int): BooleanArray,"{
    return this.copyOfUninitializedElements(newSize)
}","/**

 * Returns new array which is a copy of the original array, resized to the given [newSize].

 * The copy is either truncated or padded at the end with `false` values if necessary.

 * 

 * - If [newSize] is less than the size of the original array, the copy array is truncated to the [newSize].

 * - If [newSize] is greater than the size of the original array, the extra elements in the copy array are filled with `false` values.

 * 

 * @sample samples.collections.Arrays.CopyOfOperations.resizedPrimitiveCopyOf

 */",f17396:m2983
58109,"@SinceKotlin(""1.9"") @WasExperimental(ExperimentalStdlibApi::class) @kotlin.internal.InlineOnly public inline operator fun rangeUntil(other: UByte): UIntRange",this.toUInt() until other.toUInt(),"/**

     * Creates a range from this value up to but excluding the specified [other] value.

     *

     * If the [other] value is less than or equal to `this` value, then the returned range is empty.

     */",f17059:m481
14997,public actual fun <T> Array<out T>.sortWith(comparator: Comparator<in T>): Unit,"{
    if (size > 1) sortArrayWith(this, 0, size, comparator)
}","/**

 * Sorts the array in-place according to the order specified by the given [comparator].

 * 

 * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.

 */",f3831:m4995
56592,"public inline fun <K, V> ConcurrentMap<K, V>.getOrPut(key: K, defaultValue: () -> V): V","{
    return this.get(key) ?: defaultValue().let { default -> this.putIfAbsent(key, default) ?: default }
}","/**

 * Concurrent getOrPut, that is safe for concurrent maps.

 *

 * Returns the value for the given [key]. If the key is not found in the map, calls the [defaultValue] function,

 * puts its result into the map under the given key and returns it.

 *

 * This method guarantees not to put the value into the map if the key is already there,

 * but the [defaultValue] function may be invoked even if the key is already in the map.

 */",f16913:m121
58935,"@SinceKotlin(""1.3"") @kotlin.internal.InlineOnly public inline fun CharSequence.random(): Char","{
    return random(Random)
}","/**

 * Returns a random character from this char sequence.

 * 

 * @throws NoSuchElementException if this char sequence is empty.

 */",f17097:m455
56137,public infix fun <T> Comparator<T>.then(comparator: Comparator<in T>): Comparator<T>,"Comparator { a, b ->
    val previousCompare = this@then.compare(a, b)
    if (previousCompare != 0) previousCompare else comparator.compare(a, b)
}","/**

 * Combines this comparator and the given [comparator] such that the latter is applied only

 * when the former considered values equal.

 *

 * @sample samples.comparisons.Comparisons.then

 */",f16832:m399
52213,suspend fun ExternalDependenciesResolver.resolveFromAnnotations(annotations: Iterable<Annotation>): ResultWithDiagnostics<List<File>>,"{
    val scriptSourceAnnotations = annotations.map { ScriptSourceAnnotation(it, null) }
    return resolveFromScriptSourceAnnotations(scriptSourceAnnotations)
}","/**

 * An extension function that configures repositories and resolves artifacts denoted by the [Repository] and [DependsOn] annotations

 */",f16455:m151
58119,@kotlin.internal.InlineOnly public inline fun toUShort(): UShort,UShort(data.toShort() and 0xFF),"/**

     * Converts this [UByte] value to [UShort].

     *

     * The resulting `UShort` value represents the same numerical value as this `UByte`.

     *

     * The least significant 8 bits of the resulting `UShort` value are the same as the bits of this `UByte` value,

     * whereas the most significant 8 bits are filled with zeros.

     */",f17059:m615
13780,@kotlin.internal.IntrinsicConstEvaluation public operator fun compareTo(other: Int): Int,this.compareTo(other.toDouble()),"/**

     * Compares this value with the specified value for order.

     * Returns zero if this value is equal to the specified other value, a negative number if it's less than other,

     * or a positive number if it's greater than other.

     */",f3686:m4645
56502,"@Suppress(""EXTENSION_SHADOWED_BY_MEMBER"") @SinceKotlin(""1.9"") @kotlin.internal.InlineOnly public actual inline fun StringBuilder.append(value: Short): StringBuilder",this.append(value.toInt()),"/**

 * Appends the string representation of the specified short [value] to this string builder and returns this instance.

 *

 * The overall effect is exactly as if the [value] were converted to a string by the `value.toString()` method,

 * and then that string was appended to this string builder.

 */",f16890:m43
58968,public inline fun CharSequence.takeLastWhile(predicate: (Char) -> Boolean): CharSequence,"{
    for (index in lastIndex downTo 0) {
        if (!predicate(this[index])) {
            return subSequence(index + 1, length)
        }
    }
    return subSequence(0, length)
}","/**

 * Returns a subsequence of this char sequence containing last characters that satisfy the given [predicate].

 * 

 * @sample samples.text.Strings.take

 */",f17097:m1201
63588,"@SinceKotlin(""1.4"") @Suppress(""ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS"") public actual fun CharArray.sort(fromIndex: Int = 0, toIndex: Int = size): Unit","{
    AbstractList.checkRangeIndexes(fromIndex, toIndex, size)
    sortArray(this, fromIndex, toIndex)
}","/**

 * Sorts a range in the array in-place.

 * 

 * @param fromIndex the start of the range (inclusive) to sort, 0 by default.

 * @param toIndex the end of the range (exclusive) to sort, size of this array by default.

 * 

 * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.

 * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].

 * 

 * @sample samples.collections.Arrays.Sorting.sortRangeOfArray

 */",f17396:m5065
30881,inline fun IndentingPrinter.withIndent(block: () -> Unit),"{
    pushIndent()
    block()
    popIndent()
}","/**

 * The text printed within [block] will be indented.

 */",f10789:m121
63272,public actual fun Char.isHighSurrogate(): Boolean,this in Char.MIN_HIGH_SURROGATE .. Char.MAX_HIGH_SURROGATE,"/**

 * Returns `true` if this character is a Unicode high-surrogate code unit (also known as leading-surrogate code unit).

 */",f17357:m39
14826,public actual fun FloatArray.asList(): List<Float>,"{
    return object : AbstractList<Float>(), RandomAccess {
        override val size: Int get() = this@asList.size
    
        override fun isEmpty(): Boolean = this@asList.isEmpty()
    
        override fun contains(element: Float): Boolean = this@asList.any { it.toBits() == element.toBits() }
    
        override fun get(index: Int): Float = this@asList[index]
    
        override fun indexOf(element: Float): Int = this@asList.indexOfFirst { it.toBits() == element.toBits() }
    
        override fun lastIndexOf(element: Float): Int = this@asList.indexOfLast { it.toBits() == element.toBits() }
    }
}","/**

 * Returns a [List] that wraps the original array.

 */",f3831:m351
58687,public infix fun Byte.until(to: Int): IntRange,"{
    if (to <= Int.MIN_VALUE) return IntRange.EMPTY
    return this.toInt() .. (to - 1).toInt()
}","/**

 * Returns a range from this value up to but excluding the specified [to] value.

 * 

 * If the [to] value is less than or equal to `this` value, then the returned range is empty.

 */",f17092:m2215
58515,"@SinceKotlin(""1.7"") public fun UIntProgression.firstOrNull(): UInt?","{
    return if (isEmpty()) null else this.first
}","/**

 * Returns the first element, or `null` if the progression is empty.

 */",f17090:m85
52027,inline fun <R> ResultWithDiagnostics<R>.onFailure(body: (ResultWithDiagnostics<R>) -> Unit): ResultWithDiagnostics<R>,"{
    if (this is ResultWithDiagnostics.Failure) {
        body(this)
    }
    return this
}","/**

 * Chains actions on failure:

 * If receiver is failure - executed [body]

 * otherwise returns the receiver as is

 */",f16426:m385
57289,"@SinceKotlin(""1.3"") @Suppress(""ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS"") public actual fun IntArray.copyInto(destination: IntArray, destinationOffset: Int = 0, startIndex: Int = 0, endIndex: Int = size): IntArray","{
    System.arraycopy(this, startIndex, destination, destinationOffset, endIndex - startIndex)
    return destination
}","/**

 * Copies this array or its subrange into the [destination] array and returns that array.

 * 

 * It's allowed to pass the same array in the [destination] and even specify the subrange so that it overlaps with the destination range.

 * 

 * @param destination the array to copy to.

 * @param destinationOffset the position in the [destination] array to copy to, 0 by default.

 * @param startIndex the beginning (inclusive) of the subrange to copy, 0 by default.

 * @param endIndex the end (exclusive) of the subrange to copy, size of this array by default.

 * 

 * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of this array indices or when `startIndex > endIndex`.

 * @throws IndexOutOfBoundsException when the subrange doesn't fit into the [destination] array starting at the specified [destinationOffset],

 * or when that index is out of the [destination] array indices range.

 * 

 * @return the [destination] array.

 */",f16970:m1963
43668,private fun filterKgpUtilityPropertiesFromDiagnostic(diagnosticLines: List<String>): List<String>,"{
    val diagnosticWithUtilityPropertiesFiltered = diagnosticLines.filter { line -> !utilityInternalProperties.any { line.startsWith(it) } }
    return if (diagnosticWithUtilityPropertiesFiltered.none { it.startsWith(""kotlin.internal"") }) {
        emptyList()
    } else {
        diagnosticWithUtilityPropertiesFiltered
    }
}","/**

 * Filters from the report all internal utility-properties that KGP uses in tests.

 * If no properties aside from utility-properties were reported, the whole report is hidden

 */",f13475:m291
57312,@kotlin.internal.InlineOnly public actual inline fun <T> Array<T>.copyOf(newSize: Int): Array<T?>,"{
    return java.util.Arrays.copyOf(this, newSize)
}","/**

 * Returns new array which is a copy of the original array, resized to the given [newSize].

 * The copy is either truncated or padded at the end with `null` values if necessary.

 * 

 * - If [newSize] is less than the size of the original array, the copy array is truncated to the [newSize].

 * - If [newSize] is greater than the size of the original array, the extra elements in the copy array are filled with `null` values.

 * 

 * @sample samples.collections.Arrays.CopyOfOperations.resizingCopyOf

 */",f16970:m2643
57212,"@SinceKotlin(""1.4"") @OptIn(kotlin.experimental.ExperimentalTypeInference::class) @OverloadResolutionByLambdaReturnType @kotlin.jvm.JvmName(""sumOfBigDecimal"") @kotlin.internal.InlineOnly public inline fun <T> Sequence<T>.sumOf(selector: (T) -> java.math.BigDecimal): java.math.BigDecimal","{
    var sum: java.math.BigDecimal = 0.toBigDecimal()
    for (element in this) {
        sum += selector(element)
    }
    return sum
}","/**

 * Returns the sum of all values produced by [selector] function applied to each element in the sequence.

 *

 * The operation is _terminal_.

 */",f16968:m271
55961,"@SinceKotlin(""1.1"") public inline fun <S, T: S, K> Grouping<T, K>.reduce(operation: (key: K, accumulator: S, element: T) -> S): Map<K, S>","aggregate { key, acc, e, first -> @Suppress(""UNCHECKED_CAST"") if (first) e else operation(key, acc as S, e) }","/**

 * Groups elements from the [Grouping] source by key and applies the reducing [operation] to the elements of each group

 * sequentially starting from the second element of the group,

 * passing the previously accumulated value and the current element as arguments,

 * and stores the results in a new map.

 * An initial value of accumulator is the first element of the group.

 *

 * @param operation a function that is invoked on each subsequent element of the group with the following parameters:

 *  - `key`: the key of the group this element belongs to;

 *  - `accumulator`: the current value of the accumulator of the group;

 *  - `element`: the element from the source being accumulated.

 *

 * @return a [Map] associating the key of each group with the result of accumulating the group elements.

 * @sample samples.collections.Grouping.reduceByMaxVowels

 */",f16820:m383
458,"private fun jumpWithFinally(targetTryDepth: Int, successor: CoroutineBlock, fromNode: JsNode)","{
    if (targetTryDepth < tryStack.size) {
        val tryBlock = tryStack[targetTryDepth]
        currentStatements += exceptionState(tryBlock.catchBlock, fromNode)
    }
    val relativeFinallyPath = relativeFinallyPath(targetTryDepth)
    val fullPath = relativeFinallyPath + successor
    if (fullPath.size > 1) {
        currentStatements += updateFinallyPath(fullPath.drop(1))
    }
    currentStatements += state(fullPath[0], fromNode)
}","/**

     * When we perform break, continue or return, we can leave try blocks, so we should update $exceptionHandler correspondingly.

     * Also, these try blocks can contain finally clauses, therefore we need to update $finallyPath as well.

     */",f156:m445
56333,"@SinceKotlin(""1.3"") @kotlin.internal.InlineOnly public inline operator fun <T, R> R.contains(element: T?): Boolean where T : Any, R : ClosedRange<T>, R : Iterable<T>",element != null && contains(element),"/**

 * Returns `true` if this iterable range contains the specified [element].

 *

 * Always returns `false` if the [element] is `null`.

 */",f16848:m503
54754,"@Suppress(""ACTUAL_WITHOUT_EXPECT"", ""NOTHING_TO_INLINE"") public actual inline operator fun <T> Array<out T>.plus(elements: Array<out T>): Array<T>","{
    return this.asDynamic().concat(elements)
}","/**

 * Returns an array containing all elements of the original array and then all elements of the given [elements] array.

 */",f16713:m2923
58985,public fun CharSequence.toMutableList(): MutableList<Char>,"{
    return toCollection(ArrayList<Char>(length))
}","/**

 * Returns a new [MutableList] filled with all characters of this char sequence.

 */",f17097:m1641
64820,internal fun setAdapter(adapter: dynamic),"{
    if (js(""typeof adapter === 'string'"")) {
        NAME_TO_ADAPTER[adapter]?.let { setAdapter(it.invoke()) } ?: throw IllegalArgumentException(""Unsupported test framework adapter: '$adapter'"")
    } else {
        currentAdapter = adapter
    }
}","/**

 * Overrides current framework adapter with a provided instance of [FrameworkAdapter]. Use in order to support custom test frameworks.

 *

 * Also some string arguments are supported. Use ""qunit"" to set the adapter to [QUnit](https://qunitjs.com/), ""mocha"" for

 * [Mocha](https://mochajs.org/), ""jest"" for [Jest](https://facebook.github.io/jest/),

 * ""jasmine"" for [Jasmine](https://github.com/jasmine/jasmine), and ""auto"" to detect one of those frameworks automatically.

 *

 * If this function is not called, the test framework will be detected automatically (as if ""auto"" was passed).

 *

 */",f17517:m19
7793,protected fun buildSecondStageArgs(klibPath: String),"mutableListOf<String>().apply {
    addArg(""-output"", artifact.canonicalPath)
    addArg(""-produce"", produce.name.lowercase(Locale.getDefault()))
    addArgIfNotNull(""-entry"", entryPoint)
    addAll(buildCommonArgs())
    addFileArgs(""-native-library"", nativeLibraries)
    linkerOpts.forEach { addArg(""-linker-option"", it) }
    addAll(secondStageExtraOpts())
    add(""-Xinclude=${klibPath}"")
}",/** Args passed to the compiler at the second stage of two-stage compilation (producing a final binary from the klib).  */,f3138:m329
54668,"@SinceKotlin(""1.4"") public actual infix fun LongArray?.contentEquals(other: LongArray?): Boolean","{
    return contentEqualsInternal(other)
}","/**

 * Checks if the two specified arrays are *structurally* equal to one another.

 * 

 * Two arrays are considered structurally equal if they have the same size, and elements at corresponding indices are equal.

 * 

 * The arrays are also considered structurally equal if both are `null`.

 * 

 * @param other the array to compare with this array.

 * @return `true` if the two arrays are structurally equal, `false` otherwise.

 * 

 * @sample samples.collections.Arrays.ContentOperations.intArrayContentEquals

 */",f16713:m709
58761,"public inline fun <T, C: MutableCollection<in T>> Sequence<T>.filterIndexedTo(destination: C, predicate: (index: Int, T) -> Boolean): C","{
    forEachIndexed { index, element -> if (predicate(index, element)) destination.add(element) }
    return destination
}","/**

 * Appends all elements matching the given [predicate] to the given [destination].

 * @param [predicate] function that takes the index of an element and the element itself

 * and returns the result of predicate evaluation on the element.

 *

 * The operation is _terminal_.

 * 

 * @sample samples.collections.Collections.Filtering.filterIndexedTo

 */",f17096:m903
16639,internal fun LLFirResolveTarget.resolve(phase: FirResolvePhase),"{
    val session = target.llFirResolvableSession ?: errorWithAttachment(""Resolvable session expected, got '${target.llFirSession::class.java}'"") { withEntry(""firSession"", target.llFirSession) { it.toString() } }
    val lazyDeclarationResolver = session.moduleComponents.firModuleLazyDeclarationResolver
    lazyDeclarationResolver.lazyResolveTarget(this, phase)
}","/**

 * Resolves the target to the specified [phase].

 * The owning session must be a resolvable one.

 */",f4154:m33
10461,fun incrementalRemove(c: Constraint),"{
    val out = c.output()
    c.markUnsatisfied()
    c.removeFromGraph()
    var unsatisfied = removePropagateFrom(out)
    var strength = Strength.REQUIRED
    do {
        for (u in unsatisfied) {
            if (u.strength == strength) this.incrementalAdd(u)
        }
        strength = strength.nextWeaker()
    } while (strength != Strength.WEAKEST)
}","/**

   * Entry point for retracting a constraint. Remove the given

   * constraint and incrementally update the dataflow graph.

   * Details: Retracting the given constraint may allow some currently

   * unsatisfiable downstream constraint to be satisfied. We therefore collect

   * a list of unsatisfied downstream constraints and attempt to

   * satisfy each one in turn. This list is traversed by constraint

   * strength, strongest first, as a heuristic for avoiding

   * unnecessarily adding and then overriding weak constraints.

   * Assume: c is satisfied.

   */",f3476:m1065
14925,"public actual fun CharArray.copyOfRange(fromIndex: Int, toIndex: Int): CharArray","{
    checkCopyOfRangeArguments(fromIndex, toIndex, size)
    return copyOfUninitializedElements(fromIndex, toIndex)
}","/**

 * Returns a new array which is a copy of the specified range of the original array.

 * 

 * @param fromIndex the start of the range (inclusive) to copy.

 * @param toIndex the end of the range (exclusive) to copy.

 * 

 * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.

 * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].

 */",f3831:m3233
57245,"public fun <T> Array<out T>.binarySearch(element: T, fromIndex: Int = 0, toIndex: Int = size): Int","{
    return java.util.Arrays.binarySearch(this, fromIndex, toIndex, element)
}","/**

 * Searches the array or the range of the array for the provided [element] using the binary search algorithm.

 * The array is expected to be sorted, otherwise the result is undefined.

 * 

 * If the array contains multiple elements equal to the specified [element], there is no guarantee which one will be found.

 * 

 * @param element the to search for.

 * @param fromIndex the start of the range (inclusive) to search in, 0 by default.

 * @param toIndex the end of the range (exclusive) to search in, size of this array by default.

 * 

 * @return the index of the element, if it is contained in the array within the specified range;

 * otherwise, the inverted insertion point `(-insertion point - 1)`.

 * The insertion point is defined as the index at which the element should be inserted,

 * so that the array (or the specified subrange of array) still remains sorted.

 * 

 * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.

 * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].

 */",f16970:m541
10036,"private fun <Data, Context: PhaseContext> createLlvmDumperAction(): Action<Data, Context>","fun(state: ActionState, data: Data, context: Context) {
    if (state.phase.name in context.config.configuration.getList(KonanConfigKeys.SAVE_LLVM_IR)) {
        val llvmModule = findLlvmModule(data, context)
        if (llvmModule == null) {
            context.messageCollector.report(CompilerMessageSeverity.WARNING, ""Cannot dump LLVM IR ${state.beforeOrAfter.name.lowercase()} ${state.phase.name}"")
            return
        }
        val moduleName: String = llvmModule.getName()
        val output = File(context.config.saveLlvmIrDirectory, ""$moduleName.${state.phase.name}.ll"")
        if (LLVMPrintModuleToFile(llvmModule, output.absolutePath, null) != 0) {
            error(""Can't dump LLVM IR to ${output.absolutePath}"")
        }
    }
}","/**

 * Create action that searches context and data for LLVM IR and dumps it.

 */",f3408:m55
58467,"@SinceKotlin(""1.5"") @kotlin.internal.InlineOnly public inline fun <K, V, R: Any> Map<out K, V>.firstNotNullOfOrNull(transform: (Map.Entry<K, V>) -> R?): R?","{
    for (element in this) {
        val result = transform(element)
        if (result != null) {
            return result
        }
    }
    return null
}","/**

 * Returns the first non-null value produced by [transform] function being applied to entries of this map in iteration order,

 * or `null` if no non-null value was produced.

 * 

 * @sample samples.collections.Collections.Transformations.firstNotNullOf

 */",f17089:m65
52473,"override fun tryToMatch(startIndex: Int, testString: CharSequence, matchResult: MatchResultImpl): Int","{
    children.forEach { if (it.matches(startIndex, testString, matchResult) >= 0) {
        return -1
    } }
    return next.matches(startIndex, testString, matchResult)
}","/** Returns startIndex+shift, the next position to match */",f16517:m101
15405,@Test fun sign_D(),"{
    assertTrue(Double.isNaN(sign(Double.NaN)))
    assertTrue(Double.isNaN(sign(Double.NaN)))
    assertEquals(0.0.toBits(), sign(0.0).toBits())
    assertEquals(+0.0.toBits(), sign(+0.0).toBits())
    assertEquals((-0.0).toBits(), sign(-0.0).toBits())
    assertEquals(1.0, sign(253681.2187962), 0.0)
    assertEquals(-1.0, sign(-125874693.56), 0.0)
    assertEquals(1.0, sign(1.2587E-308), 0.0)
    assertEquals(-1.0, sign(-1.2587E-308), 0.0)
    assertEquals(1.0, sign(Double.MAX_VALUE), 0.0)
    assertEquals(1.0, sign(Double.MIN_VALUE), 0.0)
    assertEquals(-1.0, sign(-Double.MAX_VALUE), 0.0)
    assertEquals(-1.0, sign(-Double.MIN_VALUE), 0.0)
    assertEquals(1.0, sign(Double.POSITIVE_INFINITY), 0.0)
    assertEquals(-1.0, sign(Double.NEGATIVE_INFINITY), 0.0)
}","/**

     * Tests kotlin.math.sign(Double)

     */",f3868:m1163
56231,"@SinceKotlin(""1.5"") @kotlin.internal.InlineOnly @kotlin.internal.IntrinsicConstEvaluation public inline fun Short.floorDiv(other: Int): Int",this.toInt().floorDiv(other),"/** Divides this value by the other value, flooring the result to an integer that is closer to negative infinity. */",f16842:m245
14879,"@Deprecated(""Use Kotlin compiler 1.4 to avoid deprecation warning."") @SinceKotlin(""1.1"") @DeprecatedSinceKotlin(hiddenSince = ""1.4"") public fun BooleanArray.contentToString(): String","{
    return this.contentToString()
}","/**

 * Returns a string representation of the contents of the specified array as if it is [List].

 * 

 * @sample samples.collections.Arrays.ContentOperations.contentToString

 */",f3831:m1969
56236,"@SinceKotlin(""1.5"") @kotlin.internal.InlineOnly @kotlin.internal.IntrinsicConstEvaluation public inline fun Int.mod(other: Byte): Byte",this.mod(other.toInt()).toByte(),"/**

 * Calculates the remainder of flooring division of this value (dividend) by the other value (divisor).

 *

 * The result is either zero or has the same sign as the _divisor_ and has the absolute value less than the absolute value of the divisor.

 */",f16842:m331
63596,public actual fun DoubleArray.toTypedArray(): Array<Double>,"{
    return Array(size) { index -> this[index] }
}","/**

 * Returns a *typed* object array containing all of the elements of this primitive array.

 */",f17396:m5223
59019,"@SinceKotlin(""1.4"") @OptIn(kotlin.experimental.ExperimentalTypeInference::class) @OverloadResolutionByLambdaReturnType @kotlin.internal.InlineOnly public inline fun CharSequence.maxOf(selector: (Char) -> Double): Double","{
    if (isEmpty()) throw NoSuchElementException()
    var maxValue = selector(this[0])
    for (i in 1 .. lastIndex) {
        val v = selector(this[i])
        maxValue = maxOf(maxValue, v)
    }
    return maxValue
}","/**

 * Returns the largest value among all values produced by [selector] function

 * applied to each character in the char sequence.

 * 

 * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.

 * 

 * @throws NoSuchElementException if the char sequence is empty.

 */",f17097:m2519
57305,@kotlin.internal.InlineOnly public actual inline fun ShortArray.copyOf(newSize: Int): ShortArray,"{
    return java.util.Arrays.copyOf(this, newSize)
}","/**

 * Returns new array which is a copy of the original array, resized to the given [newSize].

 * The copy is either truncated or padded at the end with zero values if necessary.

 * 

 * - If [newSize] is less than the size of the original array, the copy array is truncated to the [newSize].

 * - If [newSize] is greater than the size of the original array, the extra elements in the copy array are filled with zero values.

 * 

 * @sample samples.collections.Arrays.CopyOfOperations.resizedPrimitiveCopyOf

 */",f16970:m2447
16588,internal fun invalidateAfterInBlockModification(declaration: FirDeclaration): Boolean,"when (declaration) {
    is FirSimpleFunction -> declaration.inBodyInvalidation()
    is FirPropertyAccessor -> declaration.inBodyInvalidation()
    is FirProperty -> declaration.inBodyInvalidation()
    is FirCodeFragment -> declaration.inBodyInvalidation()
    else -> errorWithFirSpecificEntries(""Unknown declaration with body"", fir = declaration, psi = declaration.psi)
}","/**

 * Must be called in a write action.

 * @return **false** if it is not in-block modification

 */",f4136:m37
56918,"@SinceKotlin(""1.2"") @kotlin.internal.InlineOnly public inline fun Int.toBigDecimal(mathContext: MathContext): BigDecimal","BigDecimal(this, mathContext)","/**

 * Returns the value of this [Int] number as a [BigDecimal].

 * @param mathContext specifies the precision and the rounding mode.

 */",f16935:m151
64051,@kotlin.internal.IntrinsicConstEvaluation public inline operator fun div(other: Byte): Int,this.toInt() / other.toInt(),"/** Divides this value by the other value, truncating the result to an integer that is closer to zero. */",f17455:m371
58232,@kotlin.internal.InlineOnly public inline operator fun times(other: UByte): ULong,this.times(other.toULong()),/** Multiplies this value by the other value. */,f17066:m199
14888,"@SinceKotlin(""1.4"") public actual fun BooleanArray?.contentToString(): String","{
    return this?.joinToString("", "", ""["", ""]"") ?: ""null""
}","/**

 * Returns a string representation of the contents of the specified array as if it is [List].

 * 

 * @sample samples.collections.Arrays.ContentOperations.contentToString

 */",f3831:m2157
58165,@kotlin.internal.InlineOnly public inline fun floorDiv(other: UByte): UInt,this.floorDiv(other.toUInt()),"/**

     * Divides this value by the other value, flooring the result to an integer that is closer to negative infinity.

     *

     * For unsigned types, the results of flooring division and truncating division are the same.

     */",f17063:m309
64057,"@SinceKotlin(""1.1"") @kotlin.internal.IntrinsicConstEvaluation public inline operator fun rem(other: Byte): Int",this.toInt() % other.toInt(),"/**

     * Calculates the remainder of truncating division of this value (dividend) by the other value (divisor).

     *

     * The result is either zero or has the same sign as the _dividend_ and has the absolute value less than the absolute value of the divisor.

     */",f17455:m431
53137,"@SinceKotlin(""1.2"") public actual fun Long.toString(radix: Int): String",this.toStringImpl(checkRadix(radix)),"/**

 * Returns a string representation of this [Long] value in the specified [radix].

 *

 * @throws IllegalArgumentException when [radix] is not a valid radix for number to string conversion.

 */",f16618:m253
29184,"fun get(irType: IrType, scope: IrParcelerScope?, parcelizeType: IrType, strict: Boolean = false, toplevel: Boolean = false): IrParcelSerializer","{
    fun strict() = strict && !irType.hasAnyAnnotation(RAW_VALUE_ANNOTATION_FQ_NAMES)
    scope.getCustomSerializer(irType)?.let { parceler -> return IrCustomParcelSerializer(parceler) }
    val classifier = irType.erasedUpperBound
    val classifierFqName = classifier.fqNameWhenAvailable?.asString()
    when (classifierFqName) {
        ""kotlin.String"", ""java.lang.String"" -> return stringSerializer
        ""kotlin.CharSequence"", ""java.lang.CharSequence"" -> return charSequenceSerializer
        ""android.os.Bundle"" -> return IrParcelSerializerWithClassLoader(parcelizeType, symbols.parcelReadBundle, symbols.parcelWriteBundle)
        ""android.os.PersistableBundle"" -> return IrParcelSerializerWithClassLoader(parcelizeType, symbols.parcelReadPersistableBundle, symbols.parcelWritePersistableBundle)
        ""kotlin.Byte"", ""java.lang.Byte"" -> return wrapNullableSerializerIfNeeded(irType, byteSerializer)
        ""kotlin.Boolean"", ""java.lang.Boolean"" -> return wrapNullableSerializerIfNeeded(irType, booleanSerializer)
        ""kotlin.Char"", ""java.lang.Character"" -> return wrapNullableSerializerIfNeeded(irType, charSerializer)
        ""kotlin.Short"", ""java.lang.Short"" -> return wrapNullableSerializerIfNeeded(irType, shortSerializer)
        ""kotlin.Int"", ""java.lang.Integer"" -> return wrapNullableSerializerIfNeeded(irType, intSerializer)
        ""kotlin.Long"", ""java.lang.Long"" -> return wrapNullableSerializerIfNeeded(irType, longSerializer)
        ""kotlin.Float"", ""java.lang.Float"" -> return wrapNullableSerializerIfNeeded(irType, floatSerializer)
        ""kotlin.Double"", ""java.lang.Double"" -> return wrapNullableSerializerIfNeeded(irType, doubleSerializer)
        ""java.io.FileDescriptor"" -> return wrapNullableSerializerIfNeeded(irType, fileDescriptorSerializer)
        ""android.util.Size"" -> return wrapNullableSerializerIfNeeded(irType, sizeSerializer)
        ""android.util.SizeF"" -> return wrapNullableSerializerIfNeeded(irType, sizeFSerializer)
        ""kotlin.UByte"" -> return wrapNullableSerializerIfNeeded(irType, ubyteSerializer)
        ""kotlin.UShort"" -> return wrapNullableSerializerIfNeeded(irType, ushortSerializer)
        ""kotlin.UInt"" -> return wrapNullableSerializerIfNeeded(irType, uintSerializer)
        ""kotlin.ULong"" -> return wrapNullableSerializerIfNeeded(irType, ulongSerializer)
        ""kotlin.IntArray"" -> if (!scope.hasCustomSerializer(irBuiltIns.intType)) return intArraySerializer
        ""kotlin.BooleanArray"" -> if (!scope.hasCustomSerializer(irBuiltIns.booleanType)) return booleanArraySerializer
        ""kotlin.ByteArray"" -> if (!scope.hasCustomSerializer(irBuiltIns.byteType)) return byteArraySerializer
        ""kotlin.CharArray"" -> if (!scope.hasCustomSerializer(irBuiltIns.charType)) return charArraySerializer
        ""kotlin.FloatArray"" -> if (!scope.hasCustomSerializer(irBuiltIns.floatType)) return floatArraySerializer
        ""kotlin.DoubleArray"" -> if (!scope.hasCustomSerializer(irBuiltIns.doubleType)) return doubleArraySerializer
        ""kotlin.LongArray"" -> if (!scope.hasCustomSerializer(irBuiltIns.longType)) return longArraySerializer
        ""android.util.SparseBooleanArray"" -> if (!scope.hasCustomSerializer(irBuiltIns.booleanType)) return sparseBooleanArraySerializer
        ""kotlin.UByteArray"" -> return ubyteArraySerializer
        ""kotlin.UShortArray"" -> return wrapNullableSerializerIfNeeded(irType, ushortArraySerializer)
        ""kotlin.UIntArray"" -> return uintArraySerializer
        ""kotlin.ULongArray"" -> return ulongArraySerializer
        ""kotlin.time.Duration"" -> return wrapNullableSerializerIfNeeded(irType, durationSerializer)
    }
    when (classifierFqName) {
        ""kotlin.Array"", ""kotlin.ShortArray"", ""kotlin.IntArray"", ""kotlin.BooleanArray"", ""kotlin.ByteArray"", ""kotlin.CharArray"", ""kotlin.FloatArray"", ""kotlin.DoubleArray"", ""kotlin.LongArray"" -> {
            val elementType = irType.getArrayElementType(irBuiltIns)
            if (!scope.hasCustomSerializer(elementType)) { when (elementType.erasedUpperBound.fqNameWhenAvailable?.asString()) {
                ""java.lang.String"", ""kotlin.String"" -> return stringArraySerializer
                ""android.os.IBinder"" -> return iBinderArraySerializer
            } }
            val arrayType = if (classifier.defaultType.isPrimitiveArray()) classifier.defaultType else irBuiltIns.arrayClass.typeWith(elementType)
            return wrapNullableSerializerIfNeeded(irType, IrArrayParcelSerializer(arrayType, elementType, get(elementType, scope, parcelizeType, strict())))
        }
        ""android.util.SparseBooleanArray"" -> return wrapNullableSerializerIfNeeded(irType, IrSparseArrayParcelSerializer(classifier, irBuiltIns.booleanType, get(irBuiltIns.booleanType, scope, parcelizeType, strict())))
        ""android.util.SparseIntArray"" -> return wrapNullableSerializerIfNeeded(irType, IrSparseArrayParcelSerializer(classifier, irBuiltIns.intType, get(irBuiltIns.intType, scope, parcelizeType, strict())))
        ""android.util.SparseLongArray"" -> return wrapNullableSerializerIfNeeded(irType, IrSparseArrayParcelSerializer(classifier, irBuiltIns.longType, get(irBuiltIns.longType, scope, parcelizeType, strict())))
        ""android.util.SparseArray"" -> {
            val elementType = (irType as IrSimpleType).arguments.single().upperBound(irBuiltIns)
            return wrapNullableSerializerIfNeeded(irType, IrSparseArrayParcelSerializer(classifier, elementType, get(elementType, scope, parcelizeType, strict())))
        }
        in supportedByListSerializer -> {
            val elementType = (irType as IrSimpleType).arguments.single().upperBound(irBuiltIns)
            if (!scope.hasCustomSerializer(elementType) && classifierFqName in supportedBySimpleListSerializer) {
                val elementTypeAsString = elementType.erasedUpperBound.fqNameWhenAvailable?.asString()
                val simpleSerializer = if (classifierFqName in BuiltinParcelableTypes.IMMUTABLE_LIST_FQNAMES) { when (elementTypeAsString) {
                    ""android.os.IBinder"" -> iBinderPersistentListSerializer
                    ""kotlin.String"", ""java.lang.String"" -> stringPersistentListSerializer
                    else -> null
                } } else { when (elementTypeAsString) {
                    ""android.os.IBinder"" -> iBinderListSerializer
                    ""kotlin.String"", ""java.lang.String"" -> stringListSerializer
                    else -> null
                } }
                if (simpleSerializer != null) {
                    return simpleSerializer
                }
            }
            val listSerializer = IrListParcelSerializer(classifier, elementType, get(elementType, scope, parcelizeType, strict()))
            val actualSerializer = when (classifierFqName) {
                in BuiltinParcelableTypes.IMMUTABLE_LIST_FQNAMES -> IrExtensionFunctionOnReadCallingSerializer(delegated = listSerializer, converterExtensionFunction = symbols.kotlinIterableToPersistentListExtension)
                in BuiltinParcelableTypes.IMMUTABLE_SET_FQNAMES -> IrExtensionFunctionOnReadCallingSerializer(delegated = listSerializer, converterExtensionFunction = symbols.kotlinIterableToPersistentSetExtension)
                else -> listSerializer
            }
            return wrapNullableSerializerIfNeeded(irType, actualSerializer)
        }
        in supportedByMapSerializer -> {
            val keyType = (irType as IrSimpleType).arguments[0].upperBound(irBuiltIns)
            val valueType = irType.arguments[1].upperBound(irBuiltIns)
            val mapSerializer = IrMapParcelSerializer(classifier, keyType, valueType, get(keyType, scope, parcelizeType, strict()), get(valueType, scope, parcelizeType, strict()))
            val actualSerializer = if (classifierFqName in BuiltinParcelableTypes.IMMUTABLE_MAP_FQNAMES) {
                IrExtensionFunctionOnReadCallingSerializer(mapSerializer, symbols.kotlinMapToPersistentMapExtension)
            } else {
                mapSerializer
            }
            return wrapNullableSerializerIfNeeded(irType, actualSerializer)
        }
    }
    when {
        classifier.isSubclassOfFqName(""android.os.Parcelable"") && !(toplevel && (classifier.isObject || classifier.isEnumClass)) -> {
            return if (classifier.modality == Modality.FINAL && classifier.metadata != null && (classifier.isParcelize(parcelizeAnnotations) || classifier.hasCreatorField)) {
                wrapNullableSerializerIfNeeded(irType, IrEfficientParcelableParcelSerializer(classifier))
            } else {
                IrGenericParcelableParcelSerializer(parcelizeType)
            }
        }
        classifier.isSubclassOfFqName(""android.os.IBinder"") -> return iBinderSerializer
        classifier.isObject -> return IrObjectParcelSerializer(classifier)
        classifier.isEnumClass -> return wrapNullableSerializerIfNeeded(irType, IrEnumParcelSerializer(classifier))
        classifier.isSubclassOfFqName(""java.io.Serializable"") || irType.isFunctionTypeOrSubtype() || irType.isSuspendFunctionTypeOrSubtype() -> return serializableSerializer
        strict() -> throw IllegalArgumentException(""Illegal type, could not find a specific serializer for ${irType.render()}"")
        else -> return IrParcelSerializerWithClassLoader(parcelizeType, symbols.parcelReadValue, symbols.parcelWriteValue)
    }
}","/**

     * Resolve the given [irType] to a corresponding [IrParcelSerializer]. This depends on the TypeParcelers which

     * are currently in [scope], as well as the type of the enclosing Parceleable class [parcelizeType], which is needed

     * to get a class loader for reflection based serialization. Beyond this, we need to know whether to allow

     * using read/writeValue for serialization (if [strict] is false). Beyond this, we need to know whether we are

     * producing parcelers for properties of a Parcelable (if [toplevel] is true), or for a complete Parcelable.

     */",f10266:m95
48516,fun findSharedLib(buildType: String): SharedLibrary?,"findSharedLib("""", buildType)",/** Returns a shared library with the empty name prefix and the given build type. Returns null if there is no such binary. */,f15652:m231
58243,@kotlin.internal.InlineOnly public inline operator fun rem(other: ULong): ULong,"ulongRemainder(this, other)","/**

     * Calculates the remainder of truncating division of this value (dividend) by the other value (divisor).

     *

     * The result is always less than the divisor.

     */",f17066:m293
63476,"@SinceKotlin(""1.4"") public actual fun IntArray?.contentToString(): String","{
    return this?.joinToString("", "", ""["", ""]"") ?: ""null""
}","/**

 * Returns a string representation of the contents of the specified array as if it is [List].

 * 

 * @sample samples.collections.Arrays.ContentOperations.contentToString

 */",f17396:m2077
7886,"fun DependencyHandler.moduleTest(dependency: ProjectDependency, moduleName: String): ProjectDependency","dependency.copy().apply { capabilities { requireCapability(CppConsumerPlugin.moduleTestCapability(dependencyProject, moduleName)) } }","/**

 * Depend on [CompileToBitcodePlugin]'s module (test part) named [moduleName] defined in [dependency].

 */",f3152:m61
56536,"@Suppress(""DEPRECATION"") @Deprecated(""Use appendLine instead. Note that the new method always appends the line feed character '\\n' regardless of the system line separator."", ReplaceWith(""appendLine(value)""), level = DeprecationLevel.WARNING) @kotlin.internal.InlineOnly public inline fun StringBuilder.appendln(value: Short): StringBuilder",append(value.toInt()).appendln(),"/** Appends [value] to this [StringBuilder], followed by a line separator. */",f16890:m743
17110,@Test fun testTheSameValueIsComputedFromDifferentThreads(),"{
    val valueWithPostCompute = ValueWithPostCompute(key = 1, calculate = { Thread.currentThread().name to Unit }, postCompute = { _, _, _ ->})
    val results = ConcurrentLinkedQueue<String>()
    val threads = (0 .. 9).map { threadIndex -> thread(name = ""t${threadIndex}"", start = false) { results.offer(valueWithPostCompute.getValue()) } }
    threads.forEach { it.start() }
    threads.forEach { it.join() }
    val resultsList = results.toList()
    Assertions.assertEquals(threads.size, results.size)
    Assertions.assertTrue(resultsList.all { it == resultsList[0] }, ""All results got from ValueWithPostCompute should be equal, but was $resultsList"")
}","/**

     * Tests the following scenario:

     *  - thread `t1` access the cache and executes `calculate()` and then `postCompute()` under a lock hold

     *  - while the lock hold  by `t1`, `t2` tries to also access the value and waits for the lock to be released by `t1`

     *  - t1: during the post compute, some recoverable (e.g., PCE) exception happens inside the `postCompute()` and exception is not saved in the cache and rethrown

     *  - t1 releases the lock with the `value` set to `ValueIsNotComputed`

     *  - t2 acquires the lock and should try to recalculate the value in this case

     */",f5152:m35
20257,public fun KtDeclaration.getOriginalDeclaration(): KtDeclaration?,withValidityAssertion { analysisSession.originalPsiProvider.getOriginalDeclaration(this) },"/**

     * If [KtDeclaration] is a non-local declaration in a fake file analyzed in dependent session, returns the original declaration

     * for [this]. Otherwise, returns `null`.

     */",f5806:m41
63582,"@SinceKotlin(""1.4"") @Suppress(""ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS"") public actual fun ByteArray.sort(fromIndex: Int = 0, toIndex: Int = size): Unit","{
    AbstractList.checkRangeIndexes(fromIndex, toIndex, size)
    sortArray(this, fromIndex, toIndex)
}","/**

 * Sorts a range in the array in-place.

 * 

 * @param fromIndex the start of the range (inclusive) to sort, 0 by default.

 * @param toIndex the end of the range (exclusive) to sort, size of this array by default.

 * 

 * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.

 * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].

 * 

 * @sample samples.collections.Arrays.Sorting.sortRangeOfArray

 */",f17396:m4849
63538,"@SinceKotlin(""1.3"") @Suppress(""ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS"") public actual fun ShortArray.fill(element: Short, fromIndex: Int = 0, toIndex: Int = size): Unit","{
    AbstractList.checkRangeIndexes(fromIndex, toIndex, size)
    for (index in fromIndex until toIndex) {
        this[index] = element
    }
}","/**

 * Fills this array or its subrange with the specified [element] value.

 * 

 * @param fromIndex the start of the range (inclusive) to fill, 0 by default.

 * @param toIndex the end of the range (exclusive) to fill, size of this array by default.

 * 

 * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.

 * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].

 */",f17396:m3835
56391,"@SinceKotlin(""1.3"") @ExperimentalUnsignedTypes public fun Random.nextUBytes(array: UByteArray): UByteArray","{
    nextBytes(array.asByteArray())
    return array
}","/**

 * Fills the specified unsigned byte [array] with random bytes and returns it.

 *

 * @return [array] filled with random bytes.

 */",f16860:m241
64460,"@SinceKotlin(""1.5"") @WasExperimental(ExperimentalPathApi::class) @Throws(IOException::class) @kotlin.internal.InlineOnly public inline fun Path.writeLines(lines: Iterable<CharSequence>, charset: Charset = Charsets.UTF_8, vararg options: OpenOption): Path","{
    return Files.write(this, lines, charset, *options)
}","/**

 * Write the specified collection of char sequences [lines] to a file terminating each one with the platform's line separator.

 *

 * By default, the file will be overwritten if it already exists, but you can control this behavior

 * with [options].

 *

 * @param charset character set to use for writing text, UTF-8 by default.

 */",f17469:m573
56876,"@SinceKotlin(""1.6"") @WasExperimental(ExperimentalStdlibApi::class) @kotlin.internal.InlineOnly public actual inline fun Long.rotateRight(bitCount: Int): Long","java.lang.Long.rotateRight(this, bitCount)","/**

 * Rotates the binary representation of this [Long] number right by the specified [bitCount] number of bits.

 * The least significant bits pushed out from the right side reenter the number as the most significant bits on the left side.

 *

 * Rotating the number right by a negative bit count is the same as rotating it left by the negated bit count:

 * `number.rotateRight(-n) == number.rotateLeft(n)`

 *

 * Rotating by a multiple of [Long.SIZE_BITS] (64) returns the same number, or more generally

 * `number.rotateRight(n) == number.rotateRight(n % 64)`

 */",f16929:m435
56091,internal fun <T> Iterable<T>.convertToListIfNotCollection(): Collection<T>,if (this is Collection) this else toList(),"/**

 * Converts this [Iterable] to a list if it is not a [Collection].

 * Otherwise, returns this.

 */",f16825:m283
57478,"@SinceKotlin(""1.4"") @OptIn(kotlin.experimental.ExperimentalTypeInference::class) @OverloadResolutionByLambdaReturnType @kotlin.jvm.JvmName(""sumOfBigInteger"") @kotlin.internal.InlineOnly public inline fun BooleanArray.sumOf(selector: (Boolean) -> java.math.BigInteger): java.math.BigInteger","{
    var sum: java.math.BigInteger = 0.toBigInteger()
    for (element in this) {
        sum += selector(element)
    }
    return sum
}","/**

 * Returns the sum of all values produced by [selector] function applied to each element in the array.

 */",f16970:m6145
63635,"@SinceKotlin(""1.4"") public actual fun maxOf(a: Short, vararg other: Short): Short","{
    var max = a
    for (e in other) max = maxOf(max, e)
    return max
}","/**

 * Returns the greater of the given values.

 */",f17406:m343
13519,public operator fun rangeTo(other: Long): LongRange,"LongRange(this.toLong(), other)",/** Creates a range from this value to the specified [other] value. */,f3686:m627
63545,public actual operator fun <T> Array<T>.plus(element: T): Array<T>,"{
    val index = size
    val result = copyOfUninitializedElements(index + 1)
    result[index] = element
    return result
}","/**

 * Returns an array containing all elements of the original array and then the given [element].

 */",f17396:m4087
61617,"public inline fun <T, R> Array<out T>.fold(initial: R, operation: (acc: R, T) -> R): R","{
    var accumulator = initial
    for (element in this) accumulator = operation(accumulator, element)
    return accumulator
}","/**

 * Accumulates value starting with [initial] value and applying [operation] from left to right to current accumulator value and each element.

 */",f17248:m27
63458,"@SinceKotlin(""1.4"") public actual fun IntArray?.contentHashCode(): Int","{
    if (this === null) return 0
    var result = 1
    for (element in this) result = 31 * result + element.hashCode()
    return result
}","/**

 * Returns a hash code based on the contents of this array as if it is [List].

 */",f17396:m1657
63479,"@SinceKotlin(""1.4"") public actual fun DoubleArray?.contentToString(): String","{
    return this?.joinToString("", "", ""["", ""]"") ?: ""null""
}","/**

 * Returns a string representation of the contents of the specified array as if it is [List].

 * 

 * @sample samples.collections.Arrays.ContentOperations.contentToString

 */",f17396:m2137
51957,"fun createScriptDefinitionFromTemplate(baseClassType: KotlinType, baseHostConfiguration: ScriptingHostConfiguration, contextClass: KClass<*> = ScriptDefinition::class, compilation: ScriptCompilationConfiguration.Builder.() -> Unit = {}, evaluation: ScriptEvaluationConfiguration.Builder.() -> Unit = {}): ScriptDefinition","{
    val templateClass: KClass<*> = baseClassType.getTemplateClass(baseHostConfiguration, contextClass)
    val mainAnnotation = templateClass.kotlinScriptAnnotation
    val hostConfiguration = constructHostConfiguration(mainAnnotation.hostConfiguration, baseHostConfiguration) {}
    val compilationConfiguration = constructCompilationConfiguration(mainAnnotation, hostConfiguration, templateClass, baseClassType, compilation)
    val evaluationConfiguration = constructEvaluationConfiguration(mainAnnotation, hostConfiguration, evaluation)
    return ScriptDefinition(compilationConfiguration, evaluationConfiguration)
}","/**

 * Creates script compilation and evaluation configuration from annotated script base class

 * @param baseClassType the annotated script base class to construct the configuration from

 * @param baseHostConfiguration base scripting host configuration properties

 * @param contextClass optional context class to extract classloading strategy from

 * @param compilation optional configuration function to add more properties to the compilation configuration

 * @param evaluation optional configuration function to add more properties to the evaluation configuration

 */",f16419:m41
59082,"@SinceKotlin(""1.2"") public inline fun <R> CharSequence.zipWithNext(transform: (a: Char, b: Char) -> R): List<R>","{
    val size = length - 1
    if (size < 1) return emptyList()
    val result = ArrayList<R>(size)
    for (index in 0 until size) {
        result.add(transform(this[index], this[index + 1]))
    }
    return result
}","/**

 * Returns a list containing the results of applying the given [transform] function

 * to an each pair of two adjacent characters in this char sequence.

 * 

 * The returned list is empty if this char sequence contains less than two characters.

 * 

 * @sample samples.collections.Collections.Transformations.zipWithNextToFindDeltas

 */",f17097:m4903
54842,internal fun Char.isUpperCaseImpl(): Boolean,"{
    return getLetterType() == 2 || code.isOtherUppercase()
}","/**

 * Returns `true` if this character is an upper case letter, or it has contributory property `Other_Uppercase`.

 */",f16715:m119
14992,"@SinceKotlin(""1.4"") @Suppress(""ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS"") public actual fun IntArray.sort(fromIndex: Int = 0, toIndex: Int = size): Unit","{
    AbstractList.checkRangeIndexes(fromIndex, toIndex, size)
    sortArray(this, fromIndex, toIndex)
}","/**

 * Sorts a range in the array in-place.

 * 

 * @param fromIndex the start of the range (inclusive) to sort, 0 by default.

 * @param toIndex the end of the range (exclusive) to sort, size of this array by default.

 * 

 * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.

 * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].

 * 

 * @sample samples.collections.Arrays.Sorting.sortRangeOfArray

 */",f3831:m4815
52545,"@SinceKotlin(""1.2"") public actual fun <T> MutableList<T>.shuffle(): Unit","{
    for (i in lastIndex downTo 1) {
        val j = Random.nextInt(i + 1)
        val copy = this[i]
        this[i] = this[j]
        this[j] = copy
    }
}","/**

 * Randomly shuffles elements in this list.

 *

 * See: https://en.wikipedia.org/wiki/Fisher%E2%80%93Yates_shuffle#The_modern_algorithm

 */",f16542:m165
54757,"@Suppress(""NOTHING_TO_INLINE"") public actual inline operator fun IntArray.plus(elements: IntArray): IntArray","{
    return primitiveArrayConcat(this, elements)
}","/**

 * Returns an array containing all elements of the original array and then all elements of the given [elements] array.

 */",f16713:m2971
15016,"@SinceKotlin(""1.1"") @kotlin.internal.InlineOnly public actual inline fun maxOf(a: Byte, b: Byte): Byte","{
    return maxOf(a.toInt(), b.toInt()).toByte()
}","/**

 * Returns the greater of two values.

 */",f3836:m47
14262,"public fun compareAndSet(expected: NativePtr, newValue: NativePtr): Boolean","this::value.compareAndSetField(expected, newValue)","/**

     * Atomically sets the value to the given [new value][newValue] if the current value equals the [expected value][expected],

     * returns true if the operation was successful and false only if the current value was not equal to the expected value.

     *

     * Provides sequential consistent ordering guarantees and cannot fail spuriously.

     *

     * Comparison of values is done by value.

     */",f3762:m479
13478,@kotlin.internal.IntrinsicConstEvaluation public inline operator fun compareTo(other: Int): Int,this.toInt().compareTo(other),"/**

     * Compares this value with the specified value for order.

     * Returns zero if this value is equal to the specified other value, a negative number if it's less than other,

     * or a positive number if it's greater than other.

     */",f3686:m119
7713,private fun Project.getOrRegisterTask(name: String): TaskProvider<out Task>,"if (tasks.names.contains(name)) {
    tasks.named(name)
} else {
    tasks.register(name, DefaultTask::class.java)
}","/**

 * Looks for task with given name in the given project.

 * If such task isn't found, will register it. Returns registered/found task.

 */",f3134:m277
15400,@Test fun minDD(),"{
    assertEquals(""Incorrect Double min value"", -1908897.6000089, min(-1908897.6000089, 1908897.6000089), 0.0)
    assertEquals(""Incorrect Double min value"", 2.0, min(2.0, 1908897.6000089), 0.0)
    assertEquals(""Incorrect Double min value"", -1908897.6000089, min(-2.0, -1908897.6000089), 0.0)
    assertEquals(""Incorrect Double min value"", 1.0, min(1.0, 1.0))
    assertEquals(Double.NaN.toString(), min(Double.NaN, 42.0).toString(), ""Min failed for NaN"")
    assertEquals(Double.NaN.toString(), min(42.0, Double.NaN).toString(), ""Min failed for NaN"")
    assertEquals((-0.0).toString(), min(+0.0, -0.0).toString(), ""Min failed for -0.0"")
    assertEquals((-0.0).toString(), min(-0.0, +0.0).toString(), ""Min failed for -0.0"")
    assertEquals((-0.0).toString(), min(-0.0, -0.0).toString(), ""Min failed for -0.0d"")
    assertEquals((+0.0).toString(), min(+0.0, +0.0).toString(), ""Min failed for 0.0"")
}","/**

     * Tests kotlin.math.min(Double, Double)

     */",f3868:m985
57359,public actual operator fun ByteArray.plus(elements: ByteArray): ByteArray,"{
    val thisSize = size
    val arraySize = elements.size
    val result = java.util.Arrays.copyOf(this, thisSize + arraySize)
    System.arraycopy(elements, 0, result, thisSize, arraySize)
    return result
}","/**

 * Returns an array containing all elements of the original array and then all elements of the given [elements] array.

 */",f16970:m3809
16528,fun push(newState: FirInProcessOfResolvingToJumpingPhaseState),"{
    val states = stateStackHolder.get()
    val currentState = states.lastOrNull()
    currentState?.waitingFor = newState
    states += newState
}","/**

     * Adds [newState] to the stack and set [waitingFor][FirInProcessOfResolvingToJumpingPhaseState.waitingFor]

     * for the previous state if needed

     */",f4129:m755
56623,public actual fun <T> listOf(element: T): List<T>,java.util.Collections.singletonList(element),"/**

 * Returns a new read-only list containing only the specified object [element].

 *

 * The returned list is serializable.

 *

 * @sample samples.collections.Collections.Lists.singletonReadOnlyList

 */",f16923:m29
63170,"@SinceKotlin(""1.5"") @WasExperimental(ExperimentalStdlibApi::class) @kotlin.internal.InlineOnly public actual inline fun Char(code: UShort): Char","{
    return code.toInt().toChar()
}","/**

 * Creates a Char with the specified [code].

 *

 * @sample samples.text.Chars.charFromCode

 */",f17309:m15
43575,"fun BuildResult.assertOutputContains(expected: Regex, message: String = ""Build output does not contain any line matching '$expected' regex."")","{
    assert(output.contains(expected)) {
        printBuildOutput()
        message
    }
}","/**

 * Assert build output contains one or more strings matching [expected] regex.

 */",f13457:m209
57466,"@SinceKotlin(""1.4"") @OptIn(kotlin.experimental.ExperimentalTypeInference::class) @OverloadResolutionByLambdaReturnType @kotlin.jvm.JvmName(""sumOfBigDecimal"") @kotlin.internal.InlineOnly public inline fun LongArray.sumOf(selector: (Long) -> java.math.BigDecimal): java.math.BigDecimal","{
    var sum: java.math.BigDecimal = 0.toBigDecimal()
    for (element in this) {
        sum += selector(element)
    }
    return sum
}","/**

 * Returns the sum of all values produced by [selector] function applied to each element in the array.

 */",f16970:m5761
55637,"@SinceKotlin(""1.1"") @kotlin.internal.InlineOnly public inline infix fun Short.and(other: Short): Short",(this.toInt() and other.toInt()).toShort(),/** Performs a bitwise AND operation between the two values. */,f16775:m57
58250,@kotlin.internal.InlineOnly public inline fun mod(other: UInt): UInt,this.mod(other.toULong()).toUInt(),"/**

     * Calculates the remainder of flooring division of this value (dividend) by the other value (divisor).

     *

     * The result is always less than the divisor.

     *

     * For unsigned types, the remainders of flooring division and truncating division are the same.

     */",f17066:m403
30087,"override fun Pair<F, S>.write(parcel: Parcel, flags: Int)","{
    with(firstParceler) { this@write.first.write(parcel, 0) }
    with(secondParceler) { this@write.second.write(parcel, 0) }
}","/**

     * Writes the [T] instance state to the [parcel].

     */",f10639:m43
14999,public actual fun ByteArray.toTypedArray(): Array<Byte>,"{
    return Array(size) { index -> this[index] }
}","/**

 * Returns a *typed* object array containing all of the elements of this primitive array.

 */",f3831:m5047
63643,"@SinceKotlin(""1.1"") @kotlin.internal.InlineOnly public actual inline fun minOf(a: Int, b: Int): Int","{
    return if (a <= b) a else b
}","/**

 * Returns the smaller of two values.

 */",f17406:m507
57314,"@JvmName(""copyOfRangeInline"") @kotlin.internal.InlineOnly public actual inline fun ByteArray.copyOfRange(fromIndex: Int, toIndex: Int): ByteArray","{
    return if (kotlin.internal.apiVersionIsAtLeast(1, 3, 0)) {
        copyOfRangeImpl(fromIndex, toIndex)
    } else {
        if (toIndex > size) throw IndexOutOfBoundsException(""toIndex: $toIndex, size: $size"")
        java.util.Arrays.copyOfRange(this, fromIndex, toIndex)
    }
}","/**

 * Returns a new array which is a copy of the specified range of the original array.

 * 

 * @param fromIndex the start of the range (inclusive) to copy.

 * @param toIndex the end of the range (exclusive) to copy.

 * 

 * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.

 * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].

 */",f16970:m2711
58987,public inline fun <R> CharSequence.flatMap(transform: (Char) -> Iterable<R>): List<R>,"{
    return flatMapTo(ArrayList<R>(), transform)
}","/**

 * Returns a single list of all elements yielded from results of [transform] function being invoked on each character of original char sequence.

 * 

 * @sample samples.collections.Collections.Transformations.flatMap

 */",f17097:m1681
11474,"private fun saveStandardOptionForm(argValue: ParsingValue<*, *>, argIterator: Iterator<String>)","{
    if (argValue.descriptor.type.hasParameter) {
        if (argIterator.hasNext()) {
            saveAsOption(argValue, argIterator.next())
        } else {
            printError(""No value for ${argValue.descriptor.textDescription}"")
        }
    } else {
        saveOptionWithoutParameter(argValue)
    }
}","/**

     * Save option described with standard separated form `--name value`.

     *

     * @param argValue argument value with all information about option.

     * @param argIterator iterator over command line arguments.

     */",f3554:m895
14248,public fun addAndGet(delta: Long): Long,this::value.getAndAddField(delta) + delta,"/**

     * Atomically adds the [given value][delta] to the current value and returns the new value.

     */",f3762:m251
63438,"@SinceKotlin(""1.4"") public actual infix fun ByteArray?.contentEquals(other: ByteArray?): Boolean","{
    if (this === other) return true
    if (this === null || other === null) return false
    if (size != other.size) return false
    for (i in indices) {
        if (this[i] != other[i]) return false
    }
    return true
}","/**

 * Checks if the two specified arrays are *structurally* equal to one another.

 * 

 * Two arrays are considered structurally equal if they have the same size, and elements at corresponding indices are equal.

 * 

 * The arrays are also considered structurally equal if both are `null`.

 * 

 * @param other the array to compare with this array.

 * @return `true` if the two arrays are structurally equal, `false` otherwise.

 * 

 * @sample samples.collections.Arrays.ContentOperations.intArrayContentEquals

 */",f17396:m1029
13779,@kotlin.internal.IntrinsicConstEvaluation public operator fun compareTo(other: Short): Int,this.compareTo(other.toDouble()),"/**

     * Compares this value with the specified value for order.

     * Returns zero if this value is equal to the specified other value, a negative number if it's less than other,

     * or a positive number if it's greater than other.

     */",f3686:m4627
40917,"fun ChangesCollector.getChangedAndImpactedSymbols(caches: Iterable<IncrementalCacheCommon>, reporter: ICReporter): DirtyData","{
    return changes().getChangedAndImpactedSymbols(caches, reporter)
}","/**

 * Returns changed and impacted symbols from the changes collected by this [ChangesCollector].

 *

 * For example, if `Subclass` extends `Superclass` and `Superclass` has changed, `Subclass` will be impacted.

 */",f12967:m305
58229,@kotlin.internal.InlineOnly public inline operator fun minus(other: UShort): ULong,this.minus(other.toULong()),/** Subtracts the other value from this value. */,f17066:m179
56418,public operator fun plusAssign(duration: Duration),"{
    val longDelta = duration.toLong(unit)
    if (!longDelta.isSaturated()) {
        val newReading = reading + longDelta
        if (reading xor longDelta >= 0 && reading xor newReading < 0) overflow(duration)
        reading = newReading
    } else {
        val half = duration / 2
        if (!half.toLong(unit).isSaturated()) {
            val readingBefore = reading
            try {
                plusAssign(half)
                plusAssign(duration - half)
            } catch (e: IllegalStateException) {
                reading = readingBefore
                throw e
            }
        } else {
            overflow(duration)
        }
    }
}","/**

     * Advances the current reading value of this time source by the specified [duration].

     *

     * [duration] value is rounded down towards zero when converting it to a [Long] number of nanoseconds.

     * For example, if the duration being added is `0.6.nanoseconds`, the reading doesn't advance because

     * the duration value is rounded to zero nanoseconds.

     *

     * @throws IllegalStateException when the reading value overflows as the result of this operation.

     */",f16861:m323
53154,"@Deprecated(""Use replaceFirstChar instead."", ReplaceWith(""replaceFirstChar { if (it.isLowerCase()) it.titlecase() else it.toString() }"")) @DeprecatedSinceKotlin(warningSince = ""1.5"") public actual fun String.capitalize(): String","{
    return if (isNotEmpty()) substring(0, 1).uppercase() + substring(1) else this
}","/**

 * Returns a copy of this string having its first letter titlecased using the rules of the default locale,

 * or the original string if it's empty or already starts with a title case letter.

 *

 * The title case of a character is usually the same as its upper case with several exceptions.

 * The particular list of characters with the special title case form depends on the underlying platform.

 *

 * @sample samples.text.Strings.capitalize

 */",f16624:m237
14848,"@SinceKotlin(""1.4"") public actual infix fun IntArray?.contentEquals(other: IntArray?): Boolean","{
    if (this === other) return true
    if (this === null || other === null) return false
    if (size != other.size) return false
    for (i in indices) {
        if (this[i] != other[i]) return false
    }
    return true
}","/**

 * Checks if the two specified arrays are *structurally* equal to one another.

 * 

 * Two arrays are considered structurally equal if they have the same size, and elements at corresponding indices are equal.

 * 

 * The arrays are also considered structurally equal if both are `null`.

 * 

 * @param other the array to compare with this array.

 * @return `true` if the two arrays are structurally equal, `false` otherwise.

 * 

 * @sample samples.collections.Arrays.ContentOperations.intArrayContentEquals

 */",f3831:m1121
14968,public actual operator fun DoubleArray.plus(elements: Collection<Double>): DoubleArray,"{
    var index = size
    val result = copyOfUninitializedElements(index + elements.size)
    for (element in elements) result[index++] = element
    return result
}","/**

 * Returns an array containing all elements of the original array and then all elements of the given [elements] collection.

 */",f3831:m4281
58006,"@SinceKotlin(""1.5"") @WasExperimental(ExperimentalUnsignedTypes::class, ExperimentalStdlibApi::class) @kotlin.internal.InlineOnly public inline fun UByte.countLeadingZeroBits(): Int",toByte().countLeadingZeroBits(),"/**

 * Counts the number of consecutive most significant bits that are zero in the binary representation of this [UByte] number.

 */",f17056:m325
63472,"@Deprecated(""Use Kotlin compiler 1.4 to avoid deprecation warning."") @SinceKotlin(""1.1"") @DeprecatedSinceKotlin(hiddenSince = ""1.4"") public fun CharArray.contentToString(): String","{
    return this.contentToString()
}","/**

 * Returns a string representation of the contents of the specified array as if it is [List].

 * 

 * @sample samples.collections.Arrays.ContentOperations.contentToString

 */",f17396:m1993
54765,public actual fun LongArray.sort(): Unit,"{
    @Suppress(""DEPRECATION"") if (size > 1) sort { a: Long, b: Long -> a.compareTo(b) }
}","/**

 * Sorts the array in-place.

 * 

 * @sample samples.collections.Arrays.Sorting.sortArray

 */",f16713:m3101
7884,"fun DependencyHandler.module(dependency: ProjectDependency, moduleName: String): ProjectDependency","dependency.copy().apply { capabilities { requireCapability(CppConsumerPlugin.moduleCapability(dependencyProject, moduleName)) } }","/**

 * Depend on [CompileToBitcodePlugin]'s module named [moduleName] defined in [dependency].

 */",f3152:m25
14854,"@Deprecated(""Use Kotlin compiler 1.4 to avoid deprecation warning."") @SinceKotlin(""1.1"") @DeprecatedSinceKotlin(hiddenSince = ""1.4"") public fun <T> Array<out T>.contentHashCode(): Int","{
    return this.contentHashCode()
}","/**

 * Returns a hash code based on the contents of this array as if it is [List].

 */",f3831:m1405
58015,"@SinceKotlin(""1.5"") @WasExperimental(ExperimentalUnsignedTypes::class, ExperimentalStdlibApi::class) @kotlin.internal.InlineOnly public inline fun UShort.takeHighestOneBit(): UShort",toInt().takeHighestOneBit().toUShort(),"/**

 * Returns a number having a single bit set in the position of the most significant set bit of this [UShort] number,

 * or zero, if this number is zero.

 */",f17056:m503
58897,"public fun <T, R, V> Sequence<T>.zip(other: Sequence<R>, transform: (a: T, b: R) -> V): Sequence<V>","{
    return MergingSequence(this, other, transform)
}","/**

 * Returns a sequence of values built from the elements of `this` sequence and the [other] sequence with the same index

 * using the provided [transform] function applied to each pair of elements.

 * The resulting sequence ends as soon as the shortest input sequence ends.

 *

 * The operation is _intermediate_ and _stateless_.

 * 

 * @sample samples.collections.Sequences.Transformations.zipWithTransform

 */",f17096:m5655
57148,"@SinceKotlin(""1.1"") @kotlin.internal.InlineOnly public actual inline fun maxOf(a: Short, b: Short, c: Short): Short","{
    return Math.max(a.toInt(), Math.max(b.toInt(), c.toInt())).toShort()
}","/**

 * Returns the greater of three values.

 */",f16966:m207
17446,"fun RegisteredDirectives.ignoreExceptionIfIgnoreDirectivePresent(ignoreDirective: Directive, action: () -> Unit)","{
    var exception: Throwable? = null
    try {
        action()
    } catch (e: Throwable) {
        exception = e
    }
    if (ignoreDirective in this) {
        if (exception != null) return
        error(""$ignoreDirective is redundant"")
    }
    if (exception != null) {
        throw exception
    }
}","/**

 * [AfterAnalysisChecker][org.jetbrains.kotlin.test.model.AfterAnalysisChecker] should be the preferred option

 */",f5234:m171
49697,private fun Project.appleFrameworkDir(frameworkTaskName: String): Provider<File>,"{
    return if (project.kotlinPropertiesProvider.appleCopyFrameworkToBuiltProductsDir) {
        project.provider { XcodeEnvironment.builtProductsDir ?: fireEnvException(frameworkTaskName) }
    } else {
        layout.buildDirectory.dir(""xcode-frameworks"").map { it.asFile.resolve(XcodeEnvironment.frameworkSearchDir ?: fireEnvException(frameworkTaskName)) }
    }
}","/**

 * [XcodeEnvironment.builtProductsDir] if not disabled.

 *

 * Or if [XcodeEnvironment.frameworkSearchDir] is absolute use it, otherwise make it relative to buildDir/xcode-frameworks

 */",f15923:m619
45768,"@Deprecated(""Dukat integration is in redesigning process. Now it does not work."") fun npm(name: String, directory: File, generateExternals: Boolean): Dependency","{
    @Suppress(""deprecation_error"") (warnNpmGenerateExternals(project.logger))
    return npm(name, directory)
}","/**

     * @suppress

     */",f14927:m809
52030,fun makeFailureResult(reports: List<ScriptDiagnostic>): ResultWithDiagnostics.Failure,ResultWithDiagnostics.Failure(reports),"/**

 * Makes Failure result with optional diagnostic [reports]

 */",f16426:m437
55160,@kotlin.internal.IntrinsicConstEvaluation public infix fun and(other: Long): Long,"Long(this.low and other.low, this.high and other.high)",/** Performs a bitwise AND operation between the two values. */,f16727:m3093
8460,internal fun createLTOPipelineConfigForRuntime(generationState: NativeGenerationState): LlvmPipelineConfig,"{
    val config = generationState.config
    val configurables: Configurables = config.platform.configurables
    return LlvmPipelineConfig(generationState.llvm.targetTriple, getCpuModel(generationState), getCpuFeatures(generationState), LlvmOptimizationLevel.AGGRESSIVE, LlvmSizeLevel.NONE, LLVMCodeGenOptLevel.LLVMCodeGenLevelAggressive, configurables.currentRelocationMode(generationState).translateToLlvmRelocMode(), LLVMCodeModel.LLVMCodeModelDefault, globalDce = false, internalize = false, objCPasses = configurables is AppleConfigurables, makeDeclarationsHidden = false, inlineThreshold = tryGetInlineThreshold(generationState))
}","/**

 * Creates [LlvmPipelineConfig] that is used for [RuntimeLinkageStrategy.LinkAndOptimize].

 * There is no DCE or internalization here because optimized module will be linked later.

 * Still, runtime is not intended to be debugged by user, and we can optimize it pretty aggressively

 * even in debug compilation.

 */",f3263:m133
68067,private fun getSinceKotlinVersionByOverridden(descriptor: CallableMemberDescriptor): SinceKotlinValue?,"{
    return DescriptorUtils.getAllOverriddenDeclarations(descriptor).map { it.getOwnSinceKotlinVersion() ?: return null }.minByOrNull { it.apiVersion }
}","/**

 * @return null if there are no overridden members or if there's at least one declaration in the hierarchy not annotated with [SinceKotlin],

 *         or the minimal value of the version from all declarations annotated with [SinceKotlin] otherwise.

 */",f19284:m111
63200,"@SinceKotlin(""1.2"") public actual fun Float.Companion.fromBits(bits: Int): Float",wasm_f32_reinterpret_i32(bits),"/**

 * Returns the [Float] value corresponding to a given bit representation.

 */",f17314:m413
15402,@Test fun minII(),"{
    assertEquals(""Incorrect int min value"", -19088976, min(-19088976, 19088976))
    assertEquals(""Incorrect int min value"", 20, min(20, 19088976))
    assertEquals(""Incorrect int min value"", -19088976, min(-20, -19088976))
}","/**

     * Tests kotlin.math.min(int, int)

     */",f3868:m1077
9069,fun IrFunctionSymbol.findAnnotatedFunction(testAnnotation: FqName): IrFunctionSymbol?,"{
    val owner = this.owner
    val parent = owner.parent
    if (parent is IrClass && parent.isInterface) {
        return null
    }
    if (hasAnnotation(testAnnotation)) {
        return this
    }
    return (owner as? IrSimpleFunction)?.overriddenSymbols?.firstNotNullOfOrNull { it.findAnnotatedFunction(testAnnotation) }
}","/**

         * Checks if [this] or any of its parent functions has the annotation with the given [testAnnotation].

         * If [this] contains the given annotation, returns [this].

         * If one of the parent functions contains the given annotation, returns the [IrFunctionSymbol] for it.

         * If the annotation isn't found or found only in interface methods, returns null.

         */",f3318:m369
58904,"@kotlin.jvm.JvmName(""averageOfByte"") public fun Sequence<Byte>.average(): Double","{
    var sum: Double = 0.0
    var count: Int = 0
    for (element in this) {
        sum += element
        checkCountOverflow(++count)
    }
    return if (count == 0) Double.NaN else sum / count
}","/**

 * Returns an average value of elements in the sequence.

 *

 * The operation is _terminal_.

 */",f17096:m5863
57287,"@SinceKotlin(""1.3"") @Suppress(""ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS"") public actual fun ByteArray.copyInto(destination: ByteArray, destinationOffset: Int = 0, startIndex: Int = 0, endIndex: Int = size): ByteArray","{
    System.arraycopy(this, startIndex, destination, destinationOffset, endIndex - startIndex)
    return destination
}","/**

 * Copies this array or its subrange into the [destination] array and returns that array.

 * 

 * It's allowed to pass the same array in the [destination] and even specify the subrange so that it overlaps with the destination range.

 * 

 * @param destination the array to copy to.

 * @param destinationOffset the position in the [destination] array to copy to, 0 by default.

 * @param startIndex the beginning (inclusive) of the subrange to copy, 0 by default.

 * @param endIndex the end (exclusive) of the subrange to copy, size of this array by default.

 * 

 * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of this array indices or when `startIndex > endIndex`.

 * @throws IndexOutOfBoundsException when the subrange doesn't fit into the [destination] array starting at the specified [destinationOffset],

 * or when that index is out of the [destination] array indices range.

 * 

 * @return the [destination] array.

 */",f16970:m1871
56603,"@Suppress(""UNCHECKED_CAST"") public actual inline fun <reified T> Collection<T>.toTypedArray(): Array<T>","{
    @Suppress(""PLATFORM_CLASS_MAPPED_TO_KOTLIN"") val thisCollection = this as java.util.Collection<T>
    return thisCollection.toArray(arrayOfNulls<T>(0)) as Array<T>
}","/**

 * Returns a *typed* array containing all the elements of this collection.

 *

 * Allocates an array of runtime type `T` having its size equal to the size of this collection

 * and populates the array with the elements of this collection.

 * @sample samples.collections.Collections.Collections.collectionToTypedArray

 */",f16914:m53
40943,"protected fun addToClassStorage(classProtoData: ClassProtoData, srcFile: File?)","{
    val (proto, nameResolver) = classProtoData
    val supertypes = proto.supertypes(TypeTable(proto.typeTable))
    val parents = supertypes.map { nameResolver.getClassId(it.className).asSingleFqName() }.filter { it.asString() != ""kotlin.Any"" }.toSet()
    val child = nameResolver.getClassId(proto.fqName).asSingleFqName()
    parents.forEach { subtypesMap.append(it, child) }
    val removedSupertypes = supertypesMap[child].orEmpty().filter { it !in parents }
    removedSupertypes.forEach { subtypesMap.removeValues(it, setOf(child)) }
    supertypesMap[child] = parents
    srcFile?.let { classFqNameToSourceMap[child] = it }
    classAttributesMap[child] = ICClassesAttributes(ProtoBuf.Modality.SEALED == Flags.MODALITY.get(proto.flags))
}","/**

     * Updates class storage based on the given class proto.

     *

     * The `srcFile` argument may be `null` (e.g., if we are processing .class files in jars where source files are not available).

     */",f12971:m247
14008,"@SinceKotlin(""1.1"") @kotlin.internal.InlineOnly public actual inline fun Int.toString(radix: Int): String","intToString(this, checkRadix(radix))","/**

 * Returns a string representation of this [Int] value in the specified [radix].

 *

 * @throws IllegalArgumentException when [radix] is not a valid radix for number to string conversion.

 */",f3714:m65
9497,fun makeVisibilityHiddenLikeLlvmInternalizePass(module: LLVMModuleRef),"{
    val alwaysPreserved = getLlvmUsed(module)
    (getFunctions(module) + getGlobals(module) + getGlobalAliases(module)).filter { when (LLVMGetLinkage(it)) {
        LLVMLinkage.LLVMInternalLinkage, LLVMLinkage.LLVMPrivateLinkage -> false
        else -> true
    } }.filter { LLVMIsDeclaration(it) == 0 }.minus(alwaysPreserved).forEach { LLVMSetVisibility(it, LLVMVisibility.LLVMHiddenVisibility) }
}","/**

 * Applies hidden visibility to symbols similarly to LLVM's internalize pass:

 * it makes hidden the symbols that are made internal by internalize.

 */",f3360:m21
41235,fun clear(),"{
    synchronized(this) { keys.forEach { remove(it) } }
}",/** Removes all entries. */,f12998:m59
14005,"@SinceKotlin(""1.1"") @kotlin.internal.InlineOnly public actual inline fun Byte.toString(radix: Int): String",this.toInt().toString(checkRadix(radix)),"/**

 * Returns a string representation of this [Byte] value in the specified [radix].

 *

 * @throws IllegalArgumentException when [radix] is not a valid radix for number to string conversion.

 */",f3714:m21
9301,"internal fun tryGenerateInteropMemberAccess(callSite: IrCall, symbols: KonanSymbols, builder: IrBuilderWithScope, failCompilation: (String) -> Nothing): IrExpression?","when {
    callSite.symbol.owner.isCEnumVarValueAccessor(symbols) -> generateInteropCall(symbols, builder, failCompilation) { generateEnumVarValueAccess(callSite) }
    callSite.symbol.owner.isCStructMemberAtAccessor() -> generateInteropCall(symbols, builder, failCompilation) { generateMemberAtAccess(callSite) }
    callSite.symbol.owner.isCStructBitFieldAccessor() -> generateInteropCall(symbols, builder, failCompilation) { generateBitFieldAccess(callSite) }
    callSite.symbol.owner.isCStructArrayMemberAtAccessor() -> generateInteropCall(symbols, builder, failCompilation) { generateArrayMemberAtAccess(callSite) }
    else -> null
}","/** Returns non-null result if [callSite] is accessor to:

 *  1. T.value, T : CEnumVar

 *  2. T.<field-name>, T : CStructVar and accessor is annotated with

 *      [kotlinx.cinterop.internal.CStruct.MemberAt] or [kotlinx.cinterop.internal.CStruct.BitField]

 */",f3339:m581
58774,public fun <T: Comparable<T>> Sequence<T>.sortedDescending(): Sequence<T>,"{
    return sortedWith(reverseOrder())
}","/**

 * Returns a sequence that yields elements of this sequence sorted descending according to their natural sort order.

 * 

 * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.

 *

 * The operation is _intermediate_ and _stateful_.

 */",f17096:m1241
47389,"internal fun prepareInstallation(logger: Logger, nodeJsEnvironment: NodeJsEnvironment, packageManagerEnvironment: PackageManagerEnvironment, npmResolutionManager: KotlinNpmResolutionManager): Installation","{
    synchronized(projects) {
        npmResolutionManager.parameters.gradleNodeModulesProvider.get().close()
        val projectResolutions: List<PreparedKotlinCompilationNpmResolution> = projects.values.flatMap { it.npmProjects }.map { it.close(npmResolutionManager, logger) }
        nodeJsEnvironment.packageManager.prepareRootProject(nodeJsEnvironment, packageManagerEnvironment, rootProjectName, rootProjectVersion, projectResolutions)
        return Installation(projectResolutions)
    }
}","/**

     * Don't use directly, use [KotlinNpmResolutionManager.installIfNeeded] instead.

     */",f15317:m43
56359,"@SinceKotlin(""1.3"") @ExperimentalStdlibApi public fun <E: Element> Element.getPolymorphicElement(key: Key<E>): E?","{
    if (key is AbstractCoroutineContextKey<*, *>) {
        @Suppress(""UNCHECKED_CAST"") return if (key.isSubKey(this.key)) key.tryCast(this) as? E else null
    }
    @Suppress(""UNCHECKED_CAST"") return if (this.key === key) this as E else null
}","/**

 * Returns the current element if it is associated with the given [key] in a polymorphic manner or `null` otherwise.

 * This method returns non-null value if either [Element.key] is equal to the given [key] or if the [key] is associated

 * with [Element.key] via [AbstractCoroutineContextKey].

 * See [AbstractCoroutineContextKey] for the example of usage.

 */",f16855:m115
63593,public actual fun IntArray.toTypedArray(): Array<Int>,"{
    return Array(size) { index -> this[index] }
}","/**

 * Returns a *typed* object array containing all of the elements of this primitive array.

 */",f17396:m5181
63623,"@SinceKotlin(""1.1"") @kotlin.internal.InlineOnly public actual inline fun maxOf(a: Long, b: Long): Long","{
    return if (a >= b) a else b
}","/**

 * Returns the greater of two values.

 */",f17406:m101
57041,@kotlin.internal.InlineOnly public actual inline fun print(message: Any?),"{
    System.out.print(message)
}",/** Prints the given [message] to the standard output stream. */,f16953:m33
14982,public actual fun LongArray.sort(): Unit,"{
    if (size > 1) sortArray(this, 0, size)
}","/**

 * Sorts the array in-place.

 * 

 * @sample samples.collections.Arrays.Sorting.sortArray

 */",f3831:m4573
57033,@kotlin.internal.InlineOnly public inline fun InputStream.reader(charset: Charset = Charsets.UTF_8): InputStreamReader,"InputStreamReader(this, charset)",/** Creates a reader on this input stream using UTF-8 or the specified [charset]. */,f16952:m147
56187,"@kotlin.internal.InlineOnly public inline fun check(value: Boolean, lazyMessage: () -> Any): Unit","{
    contract { returns() implies value }
    if (!value) {
        val message = lazyMessage()
        throw IllegalStateException(message.toString())
    }
}","/**

 * Throws an [IllegalStateException] with the result of calling [lazyMessage] if the [value] is false.

 *

 * @sample samples.misc.Preconditions.failCheckWithLazyMessage

 */",f16839:m171
56069,"@SinceKotlin(""1.1"") @kotlin.internal.InlineOnly public inline operator fun <K, V> MutableMap<K, V>.minusAssign(keys: Sequence<K>)","{
    this.keys.removeAll(keys)
}","/**

 * Removes all entries from the keys of which are contained in the given [keys] sequence from this mutable map.

 */",f16823:m1593
57374,public actual fun CharArray.sort(): Unit,"{
    if (size > 1) java.util.Arrays.sort(this)
}","/**

 * Sorts the array in-place.

 * 

 * @sample samples.collections.Arrays.Sorting.sortArray

 */",f16970:m4109
55639,"@SinceKotlin(""1.1"") @kotlin.internal.InlineOnly public inline infix fun Short.xor(other: Short): Short",(this.toInt() xor other.toInt()).toShort(),/** Performs a bitwise XOR operation between the two values. */,f16775:m77
57029,@kotlin.internal.InlineOnly public inline fun String.byteInputStream(charset: Charset = Charsets.UTF_8): ByteArrayInputStream,ByteArrayInputStream(toByteArray(charset)),/** Creates a new byte input stream for the string. */,f16952:m95
58290,"@SinceKotlin(""1.5"") @WasExperimental(ExperimentalUnsignedTypes::class) public fun String.toULong(radix: Int): ULong",toULongOrNull(radix) ?: numberFormatError(this),"/**

 * Parses the string as a [ULong] number and returns the result.

 * @throws NumberFormatException if the string is not a valid representation of a number.

 * @throws IllegalArgumentException when [radix] is not a valid radix for string to number conversion.

 */",f17067:m221
43563,"fun assertFilesContentEquals(expected: Path, actual: Path)","{
    assertFileExists(expected)
    assertFileExists(actual)
    assertContentEquals(expected.readLines().asSequence(), actual.readLines().asSequence(), ""Files content not equal"")
}","/**

 * Asserts that the content of two files is equal.

 * @param expected The path to the expected file.

 * @param actual The path to the actual file.

 * @throws AssertionError if the contents of the two files are not equal.

 */",f13456:m605
54674,"@SinceKotlin(""1.4"") public actual fun ByteArray?.contentHashCode(): Int","{
    return contentHashCodeInternal()
}","/**

 * Returns a hash code based on the contents of this array as if it is [List].

 */",f16713:m903
58960,public fun CharSequence.slice(indices: IntRange): CharSequence,"{
    if (indices.isEmpty()) return """"
    return subSequence(indices)
}","/**

 * Returns a char sequence containing characters of the original char sequence at the specified range of [indices].

 */",f17097:m1027
58943,public fun CharSequence.drop(n: Int): CharSequence,"{
    require(n >= 0) { ""Requested character count $n is less than zero."" }
    return subSequence(n.coerceAtMost(length), length)
}","/**

 * Returns a subsequence of this char sequence with the first [n] characters removed.

 * 

 * @throws IllegalArgumentException if [n] is negative.

 * 

 * @sample samples.text.Strings.drop

 */",f17097:m645
10159,"fun dumpLibrary(library: KotlinLibrary, testMode: Boolean)","{
    val moduleMetadata = loadModuleMetadata(library).let { originalModuleMetadata -> if (testMode) preprocessMetadataForTests(originalModuleMetadata) else originalModuleMetadata }
    val signatureComputer = prepareSignatureComputer(library, moduleMetadata)
    KlibKotlinp(Settings(isVerbose = true, sortDeclarations = testMode), signatureComputer).renderModule(moduleMetadata, printer)
}","/**

     * @param testMode if `true` then a special pre-processing is performed towards the metadata before rendering:

     *        - empty package fragments are removed

     *        - package fragments with the same package FQN are merged

     *        - classes are sorted in alphabetical order

     */",f3438:m75
27736,"private fun convertClass(clazz: ClassNode, lineMappings: KaptLineMappingCollector, packageFqName: String, isTopLevel: Boolean): JCClassDecl?","{
    if (isSynthetic(clazz.access)) return null
    if (!checkIfValidTypeName(clazz, Type.getObjectType(clazz.name))) return null
    val descriptor = kaptContext.origins[clazz]?.descriptor ?: return null
    val isNested: Boolean
    val isInner: Boolean
    if (descriptor is ClassDescriptor) {
        isNested = descriptor.isNested
        isInner = isNested && descriptor.isInner
    } else {
        isNested = false
        isInner = false
    }
    val flags = getClassAccessFlags(clazz, descriptor, isInner, isNested)
    val isEnum = clazz.isEnum()
    val isAnnotation = clazz.isAnnotation()
    val modifiers = convertModifiers(clazz, flags, if (isEnum) ElementKind.ENUM else ElementKind.CLASS, packageFqName, clazz.visibleAnnotations, clazz.invisibleAnnotations, descriptor.annotations)
    val isDefaultImpls = clazz.name.endsWith(""${descriptor.name.asString()}\$DefaultImpls"") && isPublic(clazz.access) && isFinal(clazz.access) && descriptor is ClassDescriptor && descriptor.kind == ClassKind.INTERFACE
    if (isDefaultImpls && (isTopLevel || (clazz.fields.isNullOrEmpty() && clazz.methods.isNullOrEmpty()))) {
        return null
    }
    val simpleName = getClassName(clazz, descriptor, isDefaultImpls, packageFqName)
    if (!isValidIdentifier(simpleName)) return null
    val interfaces = mapJList(clazz.interfaces) {
        if (isAnnotation && it == ""java/lang/annotation/Annotation"") return@mapJList null
        treeMaker.FqName(treeMaker.getQualifiedName(it))
    }
    val superClass = treeMaker.FqName(treeMaker.getQualifiedName(clazz.superName))
    val genericType = signatureParser.parseClassSignature(clazz.signature, superClass, interfaces)
    class EnumValueData(val field: FieldNode, val innerClass: InnerClassNode?, val correspondingClass: ClassNode?)
    val enumValuesData = clazz.fields.filter { it.isEnumValue() }.map { field ->
        var foundInnerClass: InnerClassNode? = null
        var correspondingClass: ClassNode? = null
        for (innerClass in clazz.innerClasses) {
            if (innerClass.innerName != field.name) continue
            val classNode = compiledClassByName[innerClass.name] ?: continue
            if (classNode.superName != clazz.name) continue
            correspondingClass = classNode
            foundInnerClass = innerClass
            break
        }
        EnumValueData(field, foundInnerClass, correspondingClass)
    }
    val enumValues: JavacList<JCTree> = mapJList(enumValuesData) { data ->
        val constructorArguments = Type.getArgumentTypes(clazz.methods.firstOrNull { it.name == ""<init>"" && Type.getArgumentsAndReturnSizes(it.desc).shr(2) >= 2 }?.desc ?: ""()Z"")
        val args = mapJList(constructorArguments.drop(2)) { convertLiteralExpression(clazz, getDefaultValue(it)) }
        val def = data.correspondingClass?.let { convertClass(it, lineMappings, packageFqName, false) }
        convertField(data.field, clazz, lineMappings, packageFqName, treeMaker.NewClass(null, JavacList.nil(), treeMaker.Ident(treeMaker.name(data.field.name)), args, def))
    }
    val fieldsPositions = mutableMapOf<JCTree, MemberData>()
    val fields = mapJList<FieldNode, JCTree>(clazz.fields) { fieldNode -> if (fieldNode.isEnumValue()) {
        null
    } else {
        convertField(fieldNode, clazz, lineMappings, packageFqName)?.also { fieldsPositions[it] = MemberData(fieldNode.name, fieldNode.desc, lineMappings.getPosition(clazz, fieldNode)) }
    } }
    val methodsPositions = mutableMapOf<JCTree, MemberData>()
    val methods = mapJList<MethodNode, JCTree>(clazz.methods) { methodNode ->
        if (isEnum) {
            if (methodNode.name == ""values"" && methodNode.desc == ""()[L${clazz.name};"") return@mapJList null
            if (methodNode.name == ""valueOf"" && methodNode.desc == ""(Ljava/lang/String;)L${clazz.name};"") return@mapJList null
        }
        convertMethod(methodNode, clazz, lineMappings, packageFqName, isInner)?.also { methodsPositions[it] = MemberData(methodNode.name, methodNode.desc, lineMappings.getPosition(clazz, methodNode)) }
    }
    val nestedClasses = mapJList<InnerClassNode, JCTree>(clazz.innerClasses) { innerClass ->
        if (enumValuesData.any { it.innerClass == innerClass }) return@mapJList null
        if (innerClass.outerName != clazz.name) return@mapJList null
        val innerClassNode = compiledClassByName[innerClass.name] ?: return@mapJList null
        convertClass(innerClassNode, lineMappings, packageFqName, false)
    }
    lineMappings.registerClass(clazz)
    val superTypes = calculateSuperTypes(clazz, genericType)
    val classPosition = lineMappings.getPosition(clazz)
    val sortedFields = JavacList.from(fields.sortedWith(MembersPositionComparator(classPosition, fieldsPositions)))
    val sortedMethods = JavacList.from(methods.sortedWith(MembersPositionComparator(classPosition, methodsPositions)))
    return treeMaker.ClassDef(modifiers, treeMaker.name(simpleName), genericType.typeParameters, superTypes.superClass, superTypes.interfaces, enumValues + sortedFields + sortedMethods + nestedClasses).keepKdocCommentsIfNecessary(clazz)
}","/**

     * Returns false for the inner classes or if the origin for the class was not found.

     */",f9738:m661
64413,@kotlin.internal.IntrinsicConstEvaluation public inline operator fun plus(other: Int): Char,(this.code + other).toChar(),/** Adds the other Int value to this value resulting a Char. */,f17463:m53
56031,"public inline fun <K, V, R, M: MutableMap<in R, in V>> Map<out K, V>.mapKeysTo(destination: M, transform: (Map.Entry<K, V>) -> R): M","{
    return entries.associateByTo(destination, transform, { it.value })
}","/**

 * Populates the given [destination] map with entries having the keys obtained

 * by applying the [transform] function to each entry in this [Map] and the values of this map.

 *

 * In case if any two entries are mapped to the equal keys, the value of the latter one will overwrite

 * the value associated with the former one.

 */",f16823:m829
56020,"@kotlin.internal.InlineOnly public inline fun <@kotlin.internal.OnlyInputTypes K, V> MutableMap<out K, V>.remove(key: K): V?","@Suppress(""UNCHECKED_CAST"") (this as MutableMap<K, V>).remove(key)","/**

 * Removes the specified key and its corresponding value from this map.

 *

 * @return the previous value associated with the key, or `null` if the key was not present in the map.



 * Allows to overcome type-safety restriction of `remove` that requires to pass a key of type `K`.

 */",f16823:m581
57015,@kotlin.internal.InlineOnly public inline fun Writer.buffered(bufferSize: Int = DEFAULT_BUFFER_SIZE): BufferedWriter,"if (this is BufferedWriter) this else BufferedWriter(this, bufferSize)","/** Returns a buffered writer wrapping this Writer, or this Writer itself if it is already buffered. */",f16950:m47
64087,@kotlin.internal.IntrinsicConstEvaluation public override inline operator fun compareTo(other: Short): Int,this.toInt().compareTo(other.toInt()),"/**

     * Compares this value with the specified value for order.

     * Returns zero if this value is equal to the specified other value, a negative number if it's less than other,

     * or a positive number if it's greater than other.

     */",f17455:m967
58477,"public inline fun <K, V> Map<out K, V>.all(predicate: (Map.Entry<K, V>) -> Boolean): Boolean","{
    if (isEmpty()) return true
    for (element in this) if (!predicate(element)) return false
    return true
}","/**

 * Returns `true` if all entries match the given [predicate].

 * 

 * Note that if the map contains no entries, the function returns `true`

 * because there are no entries in it that _do not_ match the predicate.

 * See a more detailed explanation of this logic concept in [""Vacuous truth""](https://en.wikipedia.org/wiki/Vacuous_truth) article.

 * 

 * @sample samples.collections.Collections.Aggregates.all

 */",f17089:m315
48921,"internal suspend fun <T> withRestrictedStages(allowed: Set<KotlinPluginLifecycle.Stage>, block: suspend () -> T): T","{
    val newCoroutineContext = coroutineContext + KotlinPluginLifecycleStageRestriction(currentKotlinPluginLifecycle(), allowed)
    return suspendCoroutine { continuation ->
        val newContinuation = object : Continuation<T> {
            override val context: CoroutineContext get() = newCoroutineContext
        
            override fun resumeWith(result: Result<T>) {
                continuation.resumeWith(result)
            }
        }
        block.startCoroutine(newContinuation)
    }
}","/**

 * Will ensure that the given [block] cannot leave the specified allowed stages [allowed]

 * e.g.

 *

 * ```kotlin

 * project.launchInStage(Stage.BeforeFinaliseDsl) {

 *     withRestrictedStages(Stage.upTo(Stage.FinaliseDsl)) {

 *        await(Stage.FinaliseDsl) // <- OK, since still in allowed stages

 *        await(Stage.AfterFinaliseDsl) // <- fails, since not in allowed stages!

 *     }

 * }

 * ```

 */",f15708:m21
58048,@kotlin.internal.InlineOnly public inline fun mod(other: UShort): UShort,this.toUInt().mod(other.toUInt()).toUShort(),"/**

     * Calculates the remainder of flooring division of this value (dividend) by the other value (divisor).

     *

     * The result is always less than the divisor.

     *

     * For unsigned types, the remainders of flooring division and truncating division are the same.

     */",f17058:m385
58883,public operator fun <T> Sequence<T>.minus(element: T): Sequence<T>,"{
    return object : Sequence<T> {
        override fun iterator(): Iterator<T> {
            var removed = false
            return this@minus.filter { if (!removed && it == element) {
                removed = true
                false
            } else true }.iterator()
        }
    }
}","/**

 * Returns a sequence containing all elements of the original sequence without the first occurrence of the given [element].

 *

 * The operation is _intermediate_ and _stateless_.

 */",f17096:m5231
58222,@kotlin.internal.InlineOnly public inline operator fun compareTo(other: UInt): Int,this.compareTo(other.toULong()),"/**

     * Compares this value with the specified value for order.

     * Returns zero if this value is equal to the specified other value, a negative number if it's less than other,

     * or a positive number if it's greater than other.

     */",f17066:m113
7617,fun allInteropLibrariesFrom(vararg libraryProjects: Project),allArtifactsFromInternal(libraryProjects) { it is KonanInteropLibrary },/** All interop libraries from the projects by direct references */,f3130:m207
43584,"fun findParameterInOutput(name: String, output: String): String?","output.lineSequence().mapNotNull { line ->
    val (key, value) = line.split('=', limit = 2).takeIf { it.size == 2 } ?: return@mapNotNull null
    if (key.endsWith(name)) value else null
}.firstOrNull()","/**

 * This function searches for a given parameter in a multi-line output string and returns its value.

 *

 * The output string is assumed to be in the form of key-value pairs separated by an equal sign (‘=’) on each line.

 *

 * If the specified parameter name is found at the end of a key, the corresponding value is returned.

 * If the parameter is not found, the function returns null.

 */",f13457:m475
57371,public actual fun ShortArray.sort(): Unit,"{
    if (size > 1) java.util.Arrays.sort(this)
}","/**

 * Sorts the array in-place.

 * 

 * @sample samples.collections.Arrays.Sorting.sortArray

 */",f16970:m4055
59560,"@SinceKotlin(""1.2"") public fun <T> Sequence<T>.asStream(): Stream<T>","StreamSupport.stream({ Spliterators.spliteratorUnknownSize(iterator(), Spliterator.ORDERED) }, Spliterator.ORDERED, false)","/**

 * Creates a sequential [Stream] instance that produces elements from the original sequence.

 *

 * @sample samples.streams.Streams.sequenceAsStream

 */",f17134:m113
63577,public actual fun DoubleArray.sort(): Unit,"{
    if (size > 1) sortArray(this, 0, size)
}","/**

 * Sorts the array in-place.

 * 

 * @sample samples.collections.Arrays.Sorting.sortArray

 */",f17396:m4733
24962,fun deserializeScheme(value: String): Scheme?,"{
    val reader = SchemeStringSerializationReader(value)
    fun item(): Item = when (reader.kind) {
        ItemKind.Token -> Token(reader.token())
        ItemKind.Number -> Open(reader.number())
        else -> schemeParseError()
    }
    fun <T> list(content: () -> T): List<T> {
        if (reader.kind != ItemKind.Open) return emptyList()
        val result = mutableListOf<T>()
        while (reader.kind == ItemKind.Open) {
            result.add(content())
        }
        return result
    }
    fun <T> delimited(prefix: ItemKind, postfix: ItemKind, content: () -> T) = run {
        reader.expect(prefix)
        content().also { reader.expect(postfix) }
    }
    fun <T> optional(prefix: ItemKind, postfix: ItemKind = ItemKind.Invalid, content: () -> T): T? = if (reader.kind == prefix) {
        delimited(prefix, postfix, content)
    } else null
    fun isItem(kind: ItemKind): Boolean = if (reader.kind == kind) {
        reader.expect(kind)
        true
    } else false
    fun scheme(): Scheme = delimited(ItemKind.Open, ItemKind.Close) {
        val target = item()
        val anyParameters = isItem(ItemKind.AnyParameters)
        val parameters = if (anyParameters) emptyList() else list { scheme() }
        val result = optional(ItemKind.ResultPrefix) { scheme() }
        Scheme(target, parameters, result, anyParameters)
    }
    return try {
        scheme().also { reader.end() }
    } catch (_: SchemeParseError) {
        null
    }
}","/**

 * Given a string produce a [Scheme] if the string is a valid serialization of a [Scheme] or null

 * otherwise.

 */",f9236:m427
20196,public fun KtDeclaration.getReturnKtType(): KtType,withValidityAssertion { analysisSession.expressionTypeProvider.getReturnTypeForKtDeclaration(this) },"/**

     * Returns the return type of the given [KtDeclaration] as [KtType].

     *

     * IMPORTANT: For `vararg foo: T` parameter returns full `Array<out T>` type (unlike

     * [KtValueParameterSymbol.returnType][org.jetbrains.kotlin.analysis.api.symbols.KtValueParameterSymbol.returnType],

     * which returns `T`).

     */",f5788:m73
14862,"@Deprecated(""Use Kotlin compiler 1.4 to avoid deprecation warning."") @SinceKotlin(""1.1"") @DeprecatedSinceKotlin(hiddenSince = ""1.4"") public fun CharArray.contentHashCode(): Int","{
    return this.contentHashCode()
}","/**

 * Returns a hash code based on the contents of this array as if it is [List].

 */",f3831:m1565
58596,"@kotlin.jvm.JvmName(""shortRangeContains"") public operator fun ClosedRange<Short>.contains(value: Byte): Boolean","{
    return contains(value.toShort())
}","/**

 * Checks if the specified [value] belongs to this range.

 */",f17092:m663
58661,public fun LongProgression.reversed(): LongProgression,"{
    return LongProgression.fromClosedRange(last, first, -step)
}","/**

 * Returns a progression that goes over the same range in the opposite direction with the same step.

 */",f17092:m1885
59053,"public inline fun CharSequence.reduceRightIndexed(operation: (index: Int, Char, acc: Char) -> Char): Char","{
    var index = lastIndex
    if (index < 0) throw UnsupportedOperationException(""Empty char sequence can't be reduced."")
    var accumulator = get(index--)
    while (index >= 0) {
        accumulator = operation(index, get(index), accumulator)
        --index
    }
    return accumulator
}","/**

 * Accumulates value starting with the last character and applying [operation] from right to left

 * to each character with its index in the original char sequence and current accumulator value.

 * 

 * Throws an exception if this char sequence is empty. If the char sequence can be empty in an expected way,

 * please use [reduceRightIndexedOrNull] instead. It returns `null` when its receiver is empty.

 * 

 * @param [operation] function that takes the index of a character, the character itself and current accumulator value,

 * and calculates the next accumulator value.

 * 

 * @sample samples.collections.Collections.Aggregates.reduceRight

 */",f17097:m3807
48327,internal fun LazyResolvedConfiguration.dependencyArtifactsOrNull(dependency: ResolvedDependencyResult): List<ResolvedArtifactResult>?,"try {
    getArtifacts(dependency)
} catch (_: ResolveException) {
    null
}","/**

 * Same as [LazyResolvedConfiguration.getArtifacts] except it returns null for cases when dependency is resolved

 * but artifact is not available. For example when host-specific part of the library is not yet published

 */",f15602:m153
1283,fun <T> run(body: suspend Context.() -> T),"inspector.run {
    debugger.enable()
    debugger.setSkipAllPauses(false)
    runtime.runIfWaitingForDebugger()
    with(Context(this)) {
        waitForPauseEvent { it.reason == Debugger.PauseReason.BREAK_ON_START }
        withTimeout(30000) { body() }
    }
}","/**

     * By the time [body] is called, the execution is paused, no code is executed yet.

     */",f324:m451
14984,public actual fun ShortArray.sort(): Unit,"{
    if (size > 1) sortArray(this, 0, size)
}","/**

 * Sorts the array in-place.

 * 

 * @sample samples.collections.Arrays.Sorting.sortArray

 */",f3831:m4609
13974,"@Suppress(""ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS"") public actual fun String.regionMatches(thisOffset: Int, other: String, otherOffset: Int, length: Int, ignoreCase: Boolean = false): Boolean","{
    if (length < 0 || thisOffset < 0 || otherOffset < 0 || thisOffset + length > this.length || otherOffset + length > other.length) {
        return false
    }
    return if (!ignoreCase) unsafeRangeEquals(thisOffset, other, otherOffset, length) else unsafeRangeEqualsIgnoreCase(thisOffset, other, otherOffset, length)
}","/**

 * Returns `true` if the specified range in this string is equal to the specified range in another string.

 * @param thisOffset the start offset in this string of the substring to compare.

 * @param other the string against a substring of which the comparison is performed.

 * @param otherOffset the start offset in the other string of the substring to compare.

 * @param length the length of the substring to compare.

 */",f3713:m345
59000,"public inline fun <R, C: MutableCollection<in R>> CharSequence.mapIndexedTo(destination: C, transform: (index: Int, Char) -> R): C","{
    var index = 0
    for (item in this) destination.add(transform(index++, item))
    return destination
}","/**

 * Applies the given [transform] function to each character and its index in the original char sequence

 * and appends the results to the given [destination].

 * @param [transform] function that takes the index of a character and the character itself

 * and returns the result of the transform applied to the character.

 */",f17097:m2017
54789,"@SinceKotlin(""1.4"") @Suppress(""ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS"") public actual fun <T> Array<out T>.sortWith(comparator: Comparator<in T>, fromIndex: Int = 0, toIndex: Int = size): Unit","{
    AbstractList.checkRangeIndexes(fromIndex, toIndex, size)
    sortArrayWith(this, fromIndex, toIndex, comparator)
}","/**

 * Sorts a range in the array in-place with the given [comparator].

 * 

 * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.

 * 

 * @param fromIndex the start of the range (inclusive) to sort, 0 by default.

 * @param toIndex the end of the range (exclusive) to sort, size of this array by default.

 * 

 * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.

 * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].

 */",f16713:m3715
54758,"@Suppress(""NOTHING_TO_INLINE"") public actual inline operator fun LongArray.plus(elements: LongArray): LongArray","{
    return primitiveArrayConcat(this, elements)
}","/**

 * Returns an array containing all elements of the original array and then all elements of the given [elements] array.

 */",f16713:m2987
14059,"public fun compareAndExchange(expected: Long, newValue: Long): Long","this::value.compareAndExchangeField(expected, newValue)","/**

     * Atomically sets the value to the given [new value][newValue] if the current value equals the [expected value][expected]

     * and returns the old value in any case.

     *

     * Provides sequential consistent ordering guarantees and cannot fail spuriously.

     */",f3718:m195
52866,"@SinceKotlin(""1.2"") public actual fun Double.toBits(): Long",doubleToRawBits(if (this.isNaN()) Double.NaN else this),"/**

 * Returns a bit representation of the specified floating-point value as [Long]

 * according to the IEEE 754 floating-point ""double format"" bit layout.

 */",f16581:m81
8711,fun getFields(llvm: CodegenLlvmHelpers): List<FieldInfo>,"getFieldsInternal(llvm).map { fieldInfo ->
    val mappedField = fieldInfo.irField?.let { context.mapping.lateInitFieldToNullableField[it] ?: it }
    if (mappedField == fieldInfo.irField) fieldInfo else mappedField!!.toFieldInfo(llvm)
}","/**

     * All fields of the class instance.

     * The order respects the class hierarchy, i.e. a class [fields] contains superclass [fields] as a prefix.

     */",f3286:m869
56558,@kotlin.internal.InlineOnly public inline fun <T> ReentrantReadWriteLock.read(action: () -> T): T,"{
    contract { callsInPlace(action, InvocationKind.EXACTLY_ONCE) }
    val rl = readLock()
    rl.lock()
    try {
        return action()
    } finally {
        rl.unlock()
    }
}","/**

 * Executes the given [action] under the read lock of this lock.

 * @return the return value of the action.

 */",f16896:m55
26980,"private fun binaryOperatorOffset(lhs: IrExpression, wholeOperatorSourceRangeInfo: SourceRangeInfo, wholeOperatorSource: String): Int","{
    val offset = lhs.endOffset - wholeOperatorSourceRangeInfo.startOffset
    if (offset < 0 || offset >= wholeOperatorSource.length) return 0
    KotlinLexer().run {
        start(wholeOperatorSource, offset, wholeOperatorSource.length)
        while (tokenType != null && tokenType != KtTokens.EOF && (tokenType == KtTokens.DOT || tokenType !in KtTokens.OPERATIONS)) {
            advance()
        }
        if (tokenStart >= wholeOperatorSource.length) return 0
        return tokenStart
    }
}","/**

 * The offset of the infix operator/function token itself.

 *

 * @param lhs The left-hand side expression of the operator.

 * @param wholeOperatorSourceRangeInfo The source range of the whole operator expression.

 * @param wholeOperatorSource The source text of the whole operator expression.

 */",f9507:m381
14953,public actual operator fun <T> Array<T>.plus(element: T): Array<T>,"{
    val index = size
    val result = copyOfUninitializedElements(index + 1)
    result[index] = element
    return result
}","/**

 * Returns an array containing all elements of the original array and then the given [element].

 */",f3831:m3981
56858,"@SinceKotlin(""1.2"") @kotlin.internal.InlineOnly public actual inline fun Double.toRawBits(): Long",java.lang.Double.doubleToRawLongBits(this),"/**

 * Returns a bit representation of the specified floating-point value as [Long]

 * according to the IEEE 754 floating-point ""double format"" bit layout,

 * preserving `NaN` values exact layout.

 */",f16929:m111
52649,actual override public fun addAll(elements: Collection<E>): Boolean,"{
    var changed = false
    for (v in elements) {
        if (add(v)) changed = true
    }
    return changed
}","/**

     * Adds all of the elements of the specified collection to this collection.

     *

     * @return `true` if any of the specified elements was added to the collection, `false` if the collection was not modified.

     */",f16554:m31
57400,public fun LongArray.toSortedSet(): java.util.SortedSet<Long>,"{
    return toCollection(java.util.TreeSet<Long>())
}","/**

 * Returns a new [SortedSet][java.util.SortedSet] of all elements.

 */",f16970:m4753
24998,"private fun restartable(node: Node, block: (Bindings, Binding, (Node) -> CallBindings?) -> Unit): Boolean","{
    if (node in inProgress) return false
    inProgress.add(node)
    try {
        val container = nodeAdapter.containerOf(node)
        val containerLazyScheme = container.toLazyScheme()
        val bindings = containerLazyScheme.bindings
        fun observed(lazyScheme: LazyScheme): LazyScheme {
            if (lazyScheme.bindings != bindings && !lazyScheme.closed) {
                var remove = {}
                val result: () -> Unit = { if (node !in inProgress) {
                    remove()
                    pending.add { restartable(node, block) }
                } }
                remove = lazyScheme.onChange(result)
            }
            return lazyScheme
        }
        fun schemeOf(node: Node): Scheme = observed(node.toLazyScheme()).toScheme()
        fun callBindingsOf(node: Node): CallBindings? {
            return when (nodeAdapter.kindOf(node)) {
                NodeKind.ParameterReference -> {
                    val parameterContainer = nodeAdapter.containerOf(node)
                    val parameterContainerLazyScheme = parameterContainer.toLazyScheme()
                    val parameterContainerScheme = nodeAdapter.schemeParameterIndexOf(node, parameterContainer)
                    if (parameterContainerScheme !in parameterContainerLazyScheme.parameters.indices) {
                        return null
                    }
                    parameterContainerLazyScheme.parameters[parameterContainerScheme].toCallBindings()
                }
                NodeKind.Lambda, NodeKind.Variable, NodeKind.Expression -> observed(node.toLazyScheme(bindings)).toCallBindings()
                NodeKind.Function -> {
                    schemeOf(node).toCallBindings(bindings)
                }
            }
        }
        block(bindings, containerLazyScheme.target, ::callBindingsOf)
        if (pending.isNotEmpty()) {
            val skipped = mutableListOf<() -> Boolean>()
            while (pending.isNotEmpty()) {
                val pendingCall = pending.removeAt(pending.lastIndex)
                if (!pendingCall()) skipped.add(pendingCall)
            }
            skipped.forEach { pending.add(it) }
        }
    } finally {
        inProgress.remove(node)
    }
    return true
}","/**

     * Restart [block] if a [LazyScheme] used to produce a [CallBindings] changes. This also

     * informs the [TypeAdapter] when the inferencer infers a refinement of the scheme for the type

     * of the container of [node].

     */",f9239:m559
57335,"@Suppress(""ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS"") public actual fun LongArray.fill(element: Long, fromIndex: Int = 0, toIndex: Int = size): Unit","{
    java.util.Arrays.fill(this, fromIndex, toIndex, element)
}","/**

 * Fills this array or its subrange with the specified [element] value.

 * 

 * @param fromIndex the start of the range (inclusive) to fill, 0 by default.

 * @param toIndex the end of the range (exclusive) to fill, size of this array by default.

 * 

 * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.

 * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].

 */",f16970:m3287
58546,"@SinceKotlin(""1.5"") @WasExperimental(ExperimentalUnsignedTypes::class) public infix fun UInt.until(to: UInt): UIntRange","{
    if (to <= UInt.MIN_VALUE) return UIntRange.EMPTY
    return this .. (to - 1u).toUInt()
}","/**

 * Returns a range from this value up to but excluding the specified [to] value.

 * 

 * If the [to] value is less than or equal to `this` value, then the returned range is empty.

 */",f17090:m765
56056,"public operator fun <K, V> Map<out K, V>.plus(map: Map<out K, V>): Map<K, V>",LinkedHashMap(this).apply { putAll(map) },"/**

 * Creates a new read-only map by replacing or adding entries to this map from another [map].

 *

 * The returned map preserves the entry iteration order of the original map.

 * Those entries of another [map] that are missing in this map are iterated in the end in the order of that [map].

 */",f16823:m1361
59078,"@SinceKotlin(""1.2"") public fun <R> CharSequence.windowedSequence(size: Int, step: Int = 1, partialWindows: Boolean = false, transform: (CharSequence) -> R): Sequence<R>","{
    checkWindowSizeStep(size, step)
    val windows = (if (partialWindows) indices else 0 until length - size + 1) step step
    return windows.asSequence().map { index ->
        val end = index + size
        val coercedEnd = if (end < 0 || end > length) length else end
        transform(subSequence(index, coercedEnd))
    }
}","/**

 * Returns a sequence of results of applying the given [transform] function to

 * an each char sequence representing a view over the window of the given [size]

 * sliding along this char sequence with the given [step].

 * 

 * Note that the char sequence passed to the [transform] function is ephemeral and is valid only inside that function.

 * You should not store it or allow it to escape in some way, unless you made a snapshot of it.

 * Several last char sequences may have fewer characters than the given [size].

 * 

 * Both [size] and [step] must be positive and can be greater than the number of elements in this char sequence.

 * @param size the number of elements to take in each window

 * @param step the number of elements to move the window forward by on an each step, by default 1

 * @param partialWindows controls whether or not to keep partial windows in the end if any,

 * by default `false` which means partial windows won't be preserved

 * 

 * @sample samples.collections.Sequences.Transformations.averageWindows

 */",f17097:m4771
63489,"@SinceKotlin(""1.3"") @Suppress(""ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS"") public actual fun BooleanArray.copyInto(destination: BooleanArray, destinationOffset: Int = 0, startIndex: Int = 0, endIndex: Int = size): BooleanArray","{
    AbstractList.checkRangeIndexes(startIndex, endIndex, this.size)
    val rangeSize = endIndex - startIndex
    AbstractList.checkRangeIndexes(destinationOffset, destinationOffset + rangeSize, destination.size)
    kotlin.wasm.internal.copyWasmArray(this.storage, destination.storage, startIndex, destinationOffset, rangeSize)
    return destination
}","/**

 * Copies this array or its subrange into the [destination] array and returns that array.

 * 

 * It's allowed to pass the same array in the [destination] and even specify the subrange so that it overlaps with the destination range.

 * 

 * @param destination the array to copy to.

 * @param destinationOffset the position in the [destination] array to copy to, 0 by default.

 * @param startIndex the beginning (inclusive) of the subrange to copy, 0 by default.

 * @param endIndex the end (exclusive) of the subrange to copy, size of this array by default.

 * 

 * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of this array indices or when `startIndex > endIndex`.

 * @throws IndexOutOfBoundsException when the subrange doesn't fit into the [destination] array starting at the specified [destinationOffset],

 * or when that index is out of the [destination] array indices range.

 * 

 * @return the [destination] array.

 */",f17396:m2561
54816,"@SinceKotlin(""1.4"") public actual fun maxOf(a: Long, vararg other: Long): Long","{
    var max = a
    for (e in other) max = maxOf(max, e)
    return max
}","/**

 * Returns the greater of the given values.

 */",f16714:m385
16591,private fun FirProperty.inBodyInvalidation(): Boolean,"{
    val initializerState = invalidateInitializer()
    val delegateState = invalidateDelegate()
    when {
        initializerState == PropertyExpressionState.ABSENT && delegateState == PropertyExpressionState.ABSENT -> return false
        initializerState == PropertyExpressionState.LAZY || delegateState == PropertyExpressionState.LAZY -> return true
    }
    decreasePhase(phaseWithoutBody)
    replaceControlFlowGraphReference(null)
    replaceBodyResolveState(FirPropertyBodyResolveState.NOTHING_RESOLVED)
    return true
}","/**

 * Drop body and all related stuff.

 * We should drop:

 * * initializer or delegate expression

 * * control flow graph reference, because it depends on the initializer or delegate

 * * body resolution state

 * * reduce phase if needed

 *

 * Depends on the body, but we shouldn't drop:

 * * implicit type, because the change mustn't change the resulting type

 *

 * Also, we shouldn't update the property accessors because they don't depend on the initializer or delegate.

 * So it is fine to leave the phase of setter/getter/backing field as it is.

 *

 * @return **false** if it is an out-of-block change

 */",f4136:m137
64081,@kotlin.internal.IntrinsicConstEvaluation public override fun toDouble(): Double,wasm_f64_convert_i32_s(this.toInt()),"/**

     * Converts this [Byte] value to [Double].

     *

     * The resulting `Double` value represents the same numerical value as this `Byte`.

     */",f17455:m843
58284,"@SinceKotlin(""1.5"") @WasExperimental(ExperimentalUnsignedTypes::class) public fun String.toUByte(radix: Int): UByte",toUByteOrNull(radix) ?: numberFormatError(this),"/**

 * Parses the string as a signed [UByte] number and returns the result.

 * @throws NumberFormatException if the string is not a valid representation of a number.

 * @throws IllegalArgumentException when [radix] is not a valid radix for string to number conversion.

 */",f17067:m117
64098,@kotlin.internal.IntrinsicConstEvaluation public inline operator fun minus(other: Byte): Int,this.toInt() - other.toInt(),/** Subtracts the other value from this value. */,f17455:m1117
58499,"@SinceKotlin(""1.4"") @OptIn(kotlin.experimental.ExperimentalTypeInference::class) @OverloadResolutionByLambdaReturnType @kotlin.internal.InlineOnly public inline fun <K, V, R: Comparable<R>> Map<out K, V>.minOf(selector: (Map.Entry<K, V>) -> R): R","{
    return entries.minOf(selector)
}","/**

 * Returns the smallest value among all values produced by [selector] function

 * applied to each entry in the map.

 * 

 * @throws NoSuchElementException if the map is empty.

 */",f17089:m873
58223,"@kotlin.internal.InlineOnly @Suppress(""OVERRIDE_BY_INLINE"") public override inline operator fun compareTo(other: ULong): Int","ulongCompare(this.data, other.data)","/**

     * Compares this value with the specified value for order.

     * Returns zero if this value is equal to the specified other value, a negative number if it's less than other,

     * or a positive number if it's greater than other.

     */",f17066:m129
8748,@OptIn(ObsoleteDescriptorBasedAPI::class) internal fun IrSymbol.findCEnumDescriptor(): ClassDescriptor?,descriptor.findCEnumDescriptor(),"/**

 * All enums that come from interop library implement CEnum interface.

 * This function checks that given symbol located in subtree of

 * CEnum inheritor.

 */",f3292:m335
56110,"@kotlin.internal.InlineOnly public inline operator fun <V, V1: V> Map<in String, @Exact V>.getValue(thisRef: Any?, property: KProperty<*>): V1","@Suppress(""UNCHECKED_CAST"") (getOrImplicitDefault(property.name) as V1)","/**

 * Returns the value of the property for the given object from this read-only map.

 * @param thisRef the object for which the value is requested (not used).

 * @param property the metadata for the property, used to get the name of property and lookup the value corresponding to this name in the map.

 * @return the property value.

 *

 * @throws NoSuchElementException when the map doesn't contain value for the property name and doesn't provide an implicit default (see [withDefault]).

 */",f16828:m25
59111,"@SinceKotlin(""1.3"") @ExperimentalUnsignedTypes public fun Collection<ULong>.toULongArray(): ULongArray","{
    val result = ULongArray(size)
    var index = 0
    for (element in this) result[index++] = element
    return result
}","/**

 * Returns an array of ULong containing all of the elements of this collection.

 */",f17099:m93
40856,private fun Xcode.getSimulatorRuntimeDescriptors(): List<SimulatorRuntimeDescriptor>,"gson.fromJson(simulatorRuntimes, ListRuntimesReport::class.java).runtimes","/**

 * Returns parsed output of `xcrun simctl list runtimes -j`.

 */",f12940:m81
55739,"public fun String.prependIndent(indent: String = ""    ""): String","lineSequence().map { when {
    it.isBlank() -> { when {
        it.length < indent.length -> indent
        else -> it
    } }
    else -> indent + it
} }.joinToString(""\n"")","/**

 * Prepends [indent] to every line of the original string.

 *

 * Doesn't preserve the original line endings.

 */",f16789:m161
58283,"@SinceKotlin(""1.5"") @WasExperimental(ExperimentalUnsignedTypes::class) public fun String.toUByte(): UByte",toUByteOrNull() ?: numberFormatError(this),"/**

 * Parses the string as a signed [UByte] number and returns the result.

 * @throws NumberFormatException if the string is not a valid representation of a number.

 */",f17067:m101
58988,"@SinceKotlin(""1.4"") @OptIn(kotlin.experimental.ExperimentalTypeInference::class) @OverloadResolutionByLambdaReturnType @kotlin.jvm.JvmName(""flatMapIndexedIterable"") @kotlin.internal.InlineOnly public inline fun <R> CharSequence.flatMapIndexed(transform: (index: Int, Char) -> Iterable<R>): List<R>","{
    return flatMapIndexedTo(ArrayList<R>(), transform)
}","/**

 * Returns a single list of all elements yielded from results of [transform] function being invoked on each character

 * and its index in the original char sequence.

 * 

 * @sample samples.collections.Collections.Transformations.flatMapIndexed

 */",f17097:m1699
57038,"public fun InputStream.copyTo(out: OutputStream, bufferSize: Int = DEFAULT_BUFFER_SIZE): Long","{
    var bytesCopied: Long = 0
    val buffer = ByteArray(bufferSize)
    var bytes = read(buffer)
    while (bytes >= 0) {
        out.write(buffer, 0, bytes)
        bytesCopied += bytes
        bytes = read(buffer)
    }
    return bytesCopied
}","/**

 * Copies this stream to the given output stream, returning the number of bytes copied

 *

 * **Note** It is the caller's responsibility to close both of these resources.

 */",f16952:m195
63429,"@Deprecated(""Use Kotlin compiler 1.4 to avoid deprecation warning."") @SinceKotlin(""1.1"") @DeprecatedSinceKotlin(hiddenSince = ""1.4"") public infix fun ByteArray.contentEquals(other: ByteArray): Boolean","{
    return this.contentEquals(other)
}","/**

 * Checks if the two specified arrays are *structurally* equal to one another.

 * 

 * Two arrays are considered structurally equal if they have the same size, and elements at corresponding indices are equal.

 * 

 * @param other the array to compare with this array.

 * @return `true` if the two arrays are structurally equal, `false` otherwise.

 * 

 * @sample samples.collections.Arrays.ContentOperations.intArrayContentEquals

 */",f17396:m695
58007,"@SinceKotlin(""1.5"") @WasExperimental(ExperimentalUnsignedTypes::class, ExperimentalStdlibApi::class) @kotlin.internal.InlineOnly public inline fun UByte.countTrailingZeroBits(): Int",toByte().countTrailingZeroBits(),"/**

 * Counts the number of consecutive least significant bits that are zero in the binary representation of this [UByte] number.

 */",f17056:m341
58939,public fun CharSequence.single(): Char,"{
    return when (length) {
        0 -> throw NoSuchElementException(""Char sequence is empty."")
        1 -> this[0]
        else -> throw IllegalArgumentException(""Char sequence has more than one element."")
    }
}","/**

 * Returns the single character, or throws an exception if the char sequence is empty or has more than one character.

 */",f17097:m539
52074,"private fun initFragmentedScript(charSeq: CharSequence = ""abc"", randomCharPool: Boolean, lines: Int = charSeq.length): FragmentedText","{
    val generateFragment: FragmentedText.(Int) -> FragmentedText = when {
        randomCharPool -> { _ -> addRandomFragment() }
        else -> { line: Int ->
            val index = line % charSeq.length
            addFragment(charSeq[index].toString().repeat(3))
        }
    }
    return (1 .. lines).fold(FragmentedText()) { frag, line -> frag.generateFragment(line) }
}","/**

     * Generates text

     * if randomCharPool is false from charSequence

     *  - for each char in [charSeq] it adds line of length of 3 to the generated text

     * if  randomCharPool is true

     *  - picks characters randomly, line count is [lines], line length is 28, some number bigger than alphabet size

     */",f16437:m269
49293,private fun KotlinGradleProjectCheckerContext.compileOnlyDependencies(target: KotlinTarget): List<CompilationDependenciesPair>,"{
    val apiElementsDependencies = project.configurations.findByName(target.apiElementsConfigurationName)?.allDependencies.orEmpty()
    fun Dependency.isInApiElements(): Boolean = apiElementsDependencies.any { it.contentEquals(this) }
    val compilationsIncompatibleWithCompileOnly = target.compilations.filter { it.isPublished() }.filter { !isAllowedCompileOnlyDependencies(it.target.platformType) }
    return compilationsIncompatibleWithCompileOnly.map { compilation ->
        val compileOnlyDependencies = project.configurations.findByName(compilation.compileOnlyConfigurationName)?.allDependencies.orEmpty()
        val nonApiCompileOnlyDependencies = compileOnlyDependencies.filter { !it.isInApiElements() }
        CompilationDependenciesPair(compilation, nonApiCompileOnlyDependencies.map { it.stringCoordinates() })
    }
}","/**

     * Extract all dependencies of [target], satisfying:

     * 1. they are `compileOnly`

     * 2. they are not exposed as api elements.

     *

     * Fetches Configurations leniently, just in case a plugin (e.g. AGP) isn't configured correctly.

     */",f15794:m65
27000,"private fun IrBuilderWithScope.add(sourceFile: SourceFile, node: ExpressionNode, variables: List<IrTemporaryVariable>, call: IrBuilderWithScope.(IrExpression, List<IrTemporaryVariable>) -> IrExpression): IrExpression","{
    return irBlock {
        val head = node.expressions.first().deepCopyWithSymbols(scope.getLocalDeclarationParent())
        val expressions = (buildTree(head) as ExpressionNode).expressions
        val transformer = IrTemporaryExtractionTransformer(this@irBlock, expressions.toSet(), sourceFile)
        val transformed = expressions.first().transform(transformer, null)
        +call(transformed, variables + transformer.variables)
    }
}","/**

 * ```

 * val result = call(1 + 2 + 3)

 * ```

 * Transforms to

 * ```

 * val result = run {

 *   val tmp0 = 1 + 2

 *   val tmp1 = tmp0 + 3

 *   call(tmp1, <diagram>)

 * }

 * ```

 */",f9511:m115
55776,override fun equals(other: Any?): Boolean,"{
    if (other === this) return true
    if (other !is Set<*>) return false
    return setEquals(this, other)
}","/**

     * Compares this set with other set instance with the unordered structural equality.

     *

     * @return true, if [other] instance is a [Set] of the same size, all elements of which are contained in this set.

     */",f16807:m33
57053,@kotlin.internal.InlineOnly public inline fun println(message: Long),"{
    System.out.println(message)
}",/** Prints the given [message] and the line separator to the standard output stream. */,f16953:m177
11088,"fun addIdleTask(id: Int, priority: Int, queue: Packet?, count: Int)","{
    this.addRunningTask(id, priority, queue, IdleTask(this, 1, count))
}","/**

     * Add an idle task to this scheduler.

     * @param {int} id the identity of the task

     * @param {int} priority the task's priority

     * @param {Packet} queue the queue of work to be processed by the task

     * @param {int} count the number of times to schedule the task

     */",f3500:m205
31661,private fun KotlinType.needsRefinementHackForKtij24195(): Boolean,"{
    if (this !is AbbreviatedType) return false
    if (abbreviation.constructor.declarationDescriptor !is TypeAliasDescriptor) return false
    val expansionDescriptorClassId = expandedType.constructor.declarationDescriptor.classId ?: return false
    return moduleDescriptor.findClassifierAcrossModuleDependencies(expansionDescriptorClassId) == null
}","/**

     *  This is a hack for https://youtrack.jetbrains.com/issue/KTIJ-24195

     *

     *  The rough idea is that if:

     *  - we see a typealias pointing to a classifier

     *    - ideally, we'd consider only `actual typealias`es, but we don't write `actual`-flag in metadata :(

     *  - and that classifier isn't visible from our module

     *  - then we should re-refine the abbreviation

     *

     *  Read KTIJ-24195 comments for detailed explanation and reasoning why this hack is sufficient.

     *

     *  Performance note: this hack amounts to running an additional `findClassAcrossModuleDependencies` on all `typealias`

     *  abbreviations. In most cases, the resolution of abbreviation should've happened before, so this call will just hit the cache.

     *  It is possible to construct a case where this call will actually have to do some non-trivial work, but:

     *  a) it's quite hard to write such case even knowing how our caches work, so the probability of a real-life user' code hitting that

     *     case is minuscule

     *  b) even if we somehow manage to hit that case in real code, this is just one more `getContributedClassifier` per used

     *     `typealias`, as all subsequent calls will be cached.

     */",f10915:m241
58898,"@SinceKotlin(""1.2"") public fun <T> Sequence<T>.zipWithNext(): Sequence<Pair<T, T>>","{
    return zipWithNext { a, b -> a to b }
}","/**

 * Returns a sequence of pairs of each two adjacent elements in this sequence.

 * 

 * The returned sequence is empty if this sequence contains less than two elements.

 *

 * The operation is _intermediate_ and _stateless_.

 * 

 * @sample samples.collections.Collections.Transformations.zipWithNext

 */",f17096:m5681
17569,fun TestServices.getKtModuleFactoryForTestModule(testModule: TestModule): KtTestModuleFactory,"when (testModule.explicitTestModuleKind) {
    TestModuleKind.Source -> KtSourceTestModuleFactory
    TestModuleKind.LibraryBinary -> KtLibraryBinaryTestModuleFactory
    TestModuleKind.LibraryBinaryDecompiled -> KtLibraryBinaryDecompiledTestModuleFactory
    TestModuleKind.LibrarySource -> KtLibrarySourceTestModuleFactory
    TestModuleKind.ScriptSource -> KtScriptTestModuleFactory
    TestModuleKind.CodeFragment -> KtCodeFragmentTestModuleFactory
    TestModuleKind.NotUnderContentRoot -> error(""Unsupported test module kind: ${TestModuleKind.NotUnderContentRoot}"")
    else -> ktTestModuleFactory
}","/**

 * Returns the appropriate [KtTestModuleFactory] to build a [KtModule][org.jetbrains.kotlin.analysis.project.structure.KtModule] for the given

 * [testModule].

 *

 * By default, the [KtTestModuleFactory] registered with these [TestServices] is returned. It may be overruled by the

 * [MODULE_KIND][org.jetbrains.kotlin.analysis.test.framework.AnalysisApiTestDirectives.MODULE_KIND] directive for a specific test module.

 *

 * [DependencyKindModuleStructureTransformer][org.jetbrains.kotlin.analysis.test.framework.services.DependencyKindModuleStructureTransformer]

 * should be used to properly set up the [DependencyKind][org.jetbrains.kotlin.test.model.DependencyKind] for module dependencies.

 *

 * @see org.jetbrains.kotlin.analysis.test.framework.services.DependencyKindModuleStructureTransformer

 */",f5270:m73
58926,public inline fun CharSequence.firstOrNull(predicate: (Char) -> Boolean): Char?,"{
    for (element in this) if (predicate(element)) return element
    return null
}","/**

 * Returns the first character matching the given [predicate], or `null` if character was not found.

 */",f17097:m251
57332,"@Suppress(""ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS"") public actual fun ByteArray.fill(element: Byte, fromIndex: Int = 0, toIndex: Int = size): Unit","{
    java.util.Arrays.fill(this, fromIndex, toIndex, element)
}","/**

 * Fills this array or its subrange with the specified [element] value.

 * 

 * @param fromIndex the start of the range (inclusive) to fill, 0 by default.

 * @param toIndex the end of the range (exclusive) to fill, size of this array by default.

 * 

 * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.

 * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].

 */",f16970:m3203
57373,public actual fun FloatArray.sort(): Unit,"{
    if (size > 1) java.util.Arrays.sort(this)
}","/**

 * Sorts the array in-place.

 * 

 * @sample samples.collections.Arrays.Sorting.sortArray

 */",f16970:m4091
58616,"@kotlin.jvm.JvmName(""byteRangeContains"") public operator fun ClosedRange<Byte>.contains(value: Int): Boolean","{
    return value.toByteExactOrNull().let { if (it != null) contains(it) else false }
}","/**

 * Checks if the specified [value] belongs to this range.

 */",f17092:m1039
55893,public fun <T> Sequence<T>.constrainOnce(): Sequence<T>,"{
    return if (this is ConstrainedOnceSequence<T>) this else ConstrainedOnceSequence(this)
}","/**

 * Returns a wrapper sequence that provides values of this sequence, but ensures it can be iterated only one time.

 *

 * The operation is _intermediate_ and _stateless_.

 *

 * [IllegalStateException] is thrown on iterating the returned sequence for the second time and the following times.

 *

 */",f16815:m1265
14057,public fun getAndSet(newValue: Long): Long,this::value.getAndSetField(newValue),"/**

     * Atomically sets the value to the given [new value][newValue] and returns the old value.

     */",f3718:m169
53120,"@SinceKotlin(""1.5"") public actual fun CharSequence?.contentEquals(other: CharSequence?, ignoreCase: Boolean): Boolean","{
    return if (ignoreCase) this.contentEqualsIgnoreCaseImpl(other) else this.contentEqualsImpl(other)
}","/**

 * Returns `true` if the contents of this char sequence are equal to the contents of the specified [other], optionally ignoring case difference.

 *

 * @param ignoreCase `true` to ignore character case when comparing contents.

 *

 * @sample samples.text.Strings.contentEquals

 */",f16617:m677
56215,"@SinceKotlin(""1.4"") @kotlin.internal.InlineOnly public inline fun Short.takeHighestOneBit(): Short",(toInt() and 0xFFFF).takeHighestOneBit().toShort(),"/**

 * Returns a number having a single bit set in the position of the most significant set bit of this [Short] number,

 * or zero, if this number is zero.

 */",f16841:m443
33533,"@SinceKotlin(""1.1"") fun KType.isSubtypeOf(other: KType): Boolean","{
    return (this as KTypeImpl).type.isSubtypeOf((other as KTypeImpl).type)
}","/**

 * Returns `true` if `this` type is the same or is a subtype of [other], `false` otherwise.

 */",f11200:m67
45770,"@Deprecated(""Dukat integration is in redesigning process. Now it does not work."") fun npm(directory: File, generateExternals: Boolean): Dependency","{
    @Suppress(""deprecation_error"") (warnNpmGenerateExternals(project.logger))
    return npm(directory)
}","/**

     * @suppress

     */",f14927:m879
9454,fun setUnnamedAddr(value: Boolean),"{
    LLVMSetUnnamedAddr(llvmGlobal, if (value) 1 else 0)
}","/**

         * Globals that are marked with unnamed_addr might be merged by LLVM's ConstantMerge pass.

         */",f3357:m155
11453,"fun <T: Any, OptionType: MultipleOptionType> MultipleOption<T, OptionType, DefaultRequiredType.None>.default(value: Collection<T>): MultipleOption<T, OptionType, DefaultRequiredType.Default>","{
    val newOption = with((delegate.cast<ParsingValue<T, List<T>>>()).descriptor as OptionDescriptor) {
        require(value.isNotEmpty()) { ""Default value for option can't be empty collection."" }
        MultipleOption<T, OptionType, DefaultRequiredType.Default>(OptionDescriptor(optionFullFormPrefix, optionShortFromPrefix, type, fullName, shortName, description, value.toList(), required, multiple, delimiter, deprecatedWarning), owner)
    }
    owner.entity = newOption
    return newOption
}","/**

 * Specifies the default value for the option with multiple values, that will be used when no values are provided

 * for it in command line string.

 *

 * @param value the default value, must be a non-empty collection.

 * @throws IllegalArgumentException if provided default value is empty collection.

 */",f3549:m319
63453,"@Deprecated(""Use Kotlin compiler 1.4 to avoid deprecation warning."") @SinceKotlin(""1.1"") @DeprecatedSinceKotlin(hiddenSince = ""1.4"") public fun BooleanArray.contentHashCode(): Int","{
    return this.contentHashCode()
}","/**

 * Returns a hash code based on the contents of this array as if it is [List].

 */",f17396:m1545
8739,"fun createClass(descriptor: ClassDescriptor, builder: (IrClass) -> Unit): IrClass","symbolTable.descriptorExtension.declareClass(descriptor) { symbolTable.irFactory.createIrClassFromDescriptor(SYNTHETIC_OFFSET, SYNTHETIC_OFFSET, IrDeclarationOrigin.IR_EXTERNAL_DECLARATION_STUB, it, descriptor) }.also { irClass -> symbolTable.withScope(irClass) {
    irClass.superTypes += descriptor.typeConstructor.supertypes.map { it.toIrType() }
    irClass.generateAnnotations()
    irClass.createParameterDeclarations()
    builder(irClass)
    createFakeOverrides(descriptor).forEach(irClass::addMember)
} }","/**

     * Declares [IrClass] instance from [descriptor] and populates it with

     * supertypes, <this> parameter declaration and fake overrides.

     * Additional elements are passed via [builder] callback.

     */",f3292:m99
56079,@kotlin.internal.InlineOnly public inline fun <@kotlin.internal.OnlyInputTypes T> MutableCollection<out T>.retainAll(elements: Collection<T>): Boolean,"@Suppress(""UNCHECKED_CAST"") (this as MutableCollection<T>).retainAll(elements)","/**

 * Retains only the elements in this collection that are contained in the specified collection.

 *

 * Allows to overcome type-safety restriction of `retainAll` that requires to pass a collection of type `Collection<E>`.

 *

 * @return `true` if any element was removed from the collection, `false` if the collection was not modified.

 */",f16825:m67
48335,"internal fun <T> projectStoredProperty(initializer: Project.() -> T): ReadOnlyProperty<Project, T>","StoredLazyProperty(storage = { storedPropertyStorage }, initializer = initializer)","/**

 * ### Generic mechanism of attaching 'data' to [Project]

 * #### e.g. attaching a simple property to a [Project]

 * ```kotlin

 * class Foo(val projectName: String)

 *

 * val Project.myFoo by projectStoredProperty {

 *     Foo(project.name)

 * }

 * ```

 *

 * _Usage in Project 'a'_

 *

 * ```kotlin

 * class MyPlugin : Plugin<Project> {

 *     fun apply(project: Project) {

 *         // prints 'Foo(""a"")'

 *         println(project.myFoo)

 *     }

 * }

 * ```

 * _Usage in Project 'b'_

 *

 * ```kotlin

 * class MyPlugin : Plugin<Project> {

 *     fun apply(project: Project) {

 *         // prints 'Foo(""b"")'

 *         println(project.myFoo)

 *     }

 * }

 * ```

 *

 * ### Note:

 * The key used for storing the property to the [Project] is the instance of the returned [ReadOnlyProperty],

 * *not* the type, or any String based key

 *

 */",f15607:m33
13869,@kotlin.internal.IntrinsicConstEvaluation public inline operator fun plus(other: Int): Char,(this.code + other).toChar(),/** Adds the other Int value to this value resulting a Char. */,f3703:m59
56135,"@kotlin.internal.InlineOnly public inline fun <T, K> Comparator<T>.thenByDescending(comparator: Comparator<in K>, crossinline selector: (T) -> K): Comparator<T>","Comparator { a, b ->
    val previousCompare = this@thenByDescending.compare(a, b)
    if (previousCompare != 0) previousCompare else compareValuesBy(b, a, comparator, selector)
}","/**

 * Creates a descending comparator comparing values after the primary comparator defined them equal. It uses

 * the [selector] function to transform values and then compares them with the given [comparator].

 *

 * @sample samples.comparisons.Comparisons.thenByDescendingWithComparator

 */",f16832:m347
54739,"@Suppress(""NOTHING_TO_INLINE"") public actual inline operator fun IntArray.plus(element: Int): IntArray","{
    return plus(intArrayOf(element))
}","/**

 * Returns an array containing all elements of the original array and then the given [element].

 */",f16713:m2663
63551,public actual operator fun DoubleArray.plus(element: Double): DoubleArray,"{
    val index = size
    val result = copyOfUninitializedElements(index + 1)
    result[index] = element
    return result
}","/**

 * Returns an array containing all elements of the original array and then the given [element].

 */",f17396:m4207
13932,"@SinceKotlin(""1.4"") public actual fun Long.countLeadingZeroBits(): Int",if (this == 0L) 64 else countLeadingZeroBits(this),"/**

 * Counts the number of consecutive most significant bits that are zero in the binary representation of this [Long] number.

 */",f3706:m409
57475,"@SinceKotlin(""1.4"") @OptIn(kotlin.experimental.ExperimentalTypeInference::class) @OverloadResolutionByLambdaReturnType @kotlin.jvm.JvmName(""sumOfBigInteger"") @kotlin.internal.InlineOnly public inline fun LongArray.sumOf(selector: (Long) -> java.math.BigInteger): java.math.BigInteger","{
    var sum: java.math.BigInteger = 0.toBigInteger()
    for (element in this) {
        sum += selector(element)
    }
    return sum
}","/**

 * Returns the sum of all values produced by [selector] function applied to each element in the array.

 */",f16970:m6049
47015,internal fun addBuildEventsListenerRegistryMock(project: Project),"{
    val executedExtensionKey = ""addBuildEventsListenerRegistryMock.executed""
    try {
        if (project.findExtension<Boolean>(executedExtensionKey) == true) return
        val projectScopeServices = (project as DefaultProject).services as ProjectScopeServices
        val state: Field = ProjectScopeServices::class.java.superclass.getDeclaredField(""state"")
        state.isAccessible = true
        @Suppress(""UNCHECKED_CAST"") val stateValue: AtomicReference<Any> = state.get(projectScopeServices) as AtomicReference<Any>
        val enumClass = Class.forName(DefaultServiceRegistry::class.java.name + ""\$State"")
        stateValue.set(enumClass.enumConstants[0])
        projectScopeServices.add(BuildEventsListenerRegistry::class.java, BuildEventsListenerRegistryMock)
        stateValue.set(enumClass.enumConstants[1])
        project.addExtension(executedExtensionKey, true)
    } catch (e: Throwable) {
        throw RuntimeException(e)
    }
}","/**

 * In Gradle 6.7-rc-1 BuildEventsListenerRegistry service is not created in we need it in order

 * to instantiate AGP. This creates a fake one and injects it - http://b/168630734.

 * https://github.com/gradle/gradle/issues/16774 (Waiting for Gradle 7.5)

 */",f15210:m119
55123,@kotlin.internal.IntrinsicConstEvaluation public inline operator fun minus(other: Int): Long,this.minus(other.toLong()),/** Subtracts the other value from this value. */,f16727:m2589
51958,"fun createCompilationConfigurationFromTemplate(baseClassType: KotlinType, baseHostConfiguration: ScriptingHostConfiguration, contextClass: KClass<*> = ScriptCompilationConfiguration::class, body: ScriptCompilationConfiguration.Builder.() -> Unit = {}): ScriptCompilationConfiguration","{
    val templateClass: KClass<*> = baseClassType.getTemplateClass(baseHostConfiguration, contextClass)
    val mainAnnotation = templateClass.kotlinScriptAnnotation
    val hostConfiguration = constructHostConfiguration(mainAnnotation.hostConfiguration, baseHostConfiguration) {}
    return constructCompilationConfiguration(mainAnnotation, hostConfiguration, templateClass, baseClassType, body)
}","/**

 * Creates compilation configuration from annotated script base class

 * NOTE: it is preferable to use createScriptDefinitionFromTemplate for creating all configurations at once

 * @param baseClassType the annotated script base class to construct the configuration from

 * @param baseHostConfiguration scripting host configuration properties

 * @param contextClass optional context class to extract classloading strategy from

 * @param body optional configuration function to add more properties to the compilation configuration

 */",f16419:m95
15394,@Test fun log10_D(),"{
    assertTrue(Double.isNaN(log10(Double.NaN)))
    assertTrue(Double.isNaN(log10(-2541.05745687234187532)))
    assertTrue(Double.isNaN(log10(-0.1)))
    assertEquals(Double.POSITIVE_INFINITY, log10(Double.POSITIVE_INFINITY))
    assertEquals(Double.NEGATIVE_INFINITY, log10(0.0))
    assertEquals(Double.NEGATIVE_INFINITY, log10(+0.0))
    assertEquals(Double.NEGATIVE_INFINITY, log10(-0.0))
    assertEquals(3.0, log10(1000.0))
    assertEquals(14.0, log10(10.0.pow(14.0)))
    assertEquals(3.7389561269540406, log10(5482.2158))
    assertEquals(14.661551142893833, log10(458723662312872.125782332587))
    assertEquals(-0.9083828622192334, log10(0.12348583358871))
    assertEquals(308.25471555991675, log10(Double.MAX_VALUE))
    assertEquals(-323.3062153431158, log10(Double.MIN_VALUE))
}","/**

     * Tests kotlin.math.log10(Double)

     */",f3868:m759
54744,"@Suppress(""NOTHING_TO_INLINE"") public actual inline operator fun CharArray.plus(element: Char): CharArray","{
    return plus(charArrayOf(element))
}","/**

 * Returns an array containing all elements of the original array and then the given [element].

 */",f16713:m2743
57354,public actual operator fun FloatArray.plus(elements: Collection<Float>): FloatArray,"{
    var index = size
    val result = java.util.Arrays.copyOf(this, index + elements.size)
    for (element in elements) result[index++] = element
    return result
}","/**

 * Returns an array containing all elements of the original array and then all elements of the given [elements] collection.

 */",f16970:m3707
57388,public actual fun ByteArray.toTypedArray(): Array<Byte>,"{
    val result = arrayOfNulls<Byte>(size)
    for (index in indices) result[index] = this[index]
    @Suppress(""UNCHECKED_CAST"") return result as Array<Byte>
}","/**

 * Returns a *typed* object array containing all of the elements of this primitive array.

 */",f16970:m4521
59003,"public inline fun <R, C: MutableCollection<in R>> CharSequence.mapTo(destination: C, transform: (Char) -> R): C","{
    for (item in this) destination.add(transform(item))
    return destination
}","/**

 * Applies the given [transform] function to each character of the original char sequence

 * and appends the results to the given [destination].

 */",f17097:m2081
56085,@kotlin.internal.InlineOnly public inline operator fun <T> MutableCollection<in T>.minusAssign(elements: Iterable<T>),"{
    this.removeAll(elements)
}","/**

 * Removes all elements contained in the given [elements] collection from this mutable collection.

 */",f16825:m169
56423,"@SinceKotlin(""1.9"") @WasExperimental(ExperimentalTime::class) public inline fun <T> measureTimedValue(block: () -> T): TimedValue<T>","{
    contract { callsInPlace(block, InvocationKind.EXACTLY_ONCE) }
    return TimeSource.Monotonic.measureTimedValue(block)
}","/**

 * Executes the given function [block] and returns an instance of [TimedValue] class, containing both

 * the result of the function execution and the duration of elapsed time interval.

 *

 * The elapsed time is measured with [TimeSource.Monotonic].

 */",f16862:m139
20112,public fun KtSymbol.getContainingFileSymbol(): KtFileSymbol?,withValidityAssertion { analysisSession.containingDeclarationProvider.getContainingFileSymbol(this) },"/**

     * Returns containing [KtFile] as [KtFileSymbol]

     *

     * Caveat: returns `null` if the given symbol is already [KtFileSymbol], since there is no containing file.

     *  Similarly, no containing file for libraries and Java, hence `null`.

     */",f5772:m69
53164,"private fun codePointFrom3(bytes: ByteArray, byte1: Int, index: Int, endIndex: Int, throwOnMalformed: Boolean): Int","{
    if (index >= endIndex) {
        return malformed(0, index, throwOnMalformed)
    }
    val byte2 = bytes[index].toInt()
    if (byte1 and 0xF == 0) {
        if (byte2 and 0xE0 != 0xA0) {
            return malformed(0, index, throwOnMalformed)
        }
    } else if (byte1 and 0xF == 0xD) {
        if (byte2 and 0xE0 != 0x80) {
            return malformed(0, index, throwOnMalformed)
        }
    } else if (byte2 and 0xC0 != 0x80) {
        return malformed(0, index, throwOnMalformed)
    }
    if (index + 1 == endIndex) {
        return malformed(1, index, throwOnMalformed)
    }
    val byte3 = bytes[index + 1].toInt()
    if (byte3 and 0xC0 != 0x80) {
        return malformed(1, index, throwOnMalformed)
    }
    return (byte1 shl 12) xor (byte2 shl 6) xor byte3 xor -0x1E080
}","/**

 * Returns code point corresponding to UTF-8 sequence of three bytes,

 * where the first byte of the sequence is the [byte1] and the others are in the [bytes] array starting from the [index].

 * Returns a non-positive value indicating number of bytes from [bytes] included in malformed sequence

 * if the sequence is malformed and [throwOnMalformed] is false.

 *

 * @throws CharacterCodingException if the sequence of three bytes is malformed and [throwOnMalformed] is true.

 */",f16626:m99
13244,"fun KotlinPlatform.getRuntimeType(name: String, nullable: Boolean = false): StubType","{
    val classifier = Classifier.topLevel(cinteropPackage, name)
    PredefinedTypesHandler.tryExpandPlatformDependentTypealias(classifier, this, nullable)?.let { return it }
    return ClassifierStubType(classifier, nullable = nullable)
}","/**

 * @return type from kotlinx.cinterop package

 */",f3652:m81
57404,public fun CharArray.toSortedSet(): java.util.SortedSet<Char>,"{
    return toCollection(java.util.TreeSet<Char>())
}","/**

 * Returns a new [SortedSet][java.util.SortedSet] of all elements.

 */",f16970:m4809
26822,"internal inline fun <T> atomicfu_getValue(`atomicfu$getter`: () -> T, `atomicfu$setter`: (T) -> Unit): T","{
    return `atomicfu$getter`()
}","/**

 * Inline functions that are substituted instead of the corresponding atomic functions defined in `kotlinx.atomicfu`

 * during Js/Ir transformation.

 *

 * Example of transformation:

 * ```

 * val a = atomic(0)

 * a.compareAndSet(expect, update)

 * ```

 * is transformed to:

 * ```

 * var a = 0

 * atomicfu_compareAndSet(expect, update, { return a }, { v: Int -> a.value = v })

 * ```

 */",f9406:m15
27524,"fun getOriginForGeneratedIsolatingType(generatedType: String, sourceFileProvider: (String) -> File): String","{
    val generatedFile = sourceFileProvider(generatedType)
    return isolatingMapping.getValue(generatedFile)
}",/** Gets the originating type for the specified type generated by isolating AP. */,f9701:m233
57023,"public fun Reader.copyTo(out: Writer, bufferSize: Int = DEFAULT_BUFFER_SIZE): Long","{
    var charsCopied: Long = 0
    val buffer = CharArray(bufferSize)
    var chars = read(buffer)
    while (chars >= 0) {
        out.write(buffer, 0, chars)
        charsCopied += chars
        chars = read(buffer)
    }
    return charsCopied
}","/**

 * Copies this reader to the given [out] writer, returning the number of characters copied.

 *

 * **Note** it is the caller's responsibility to close both of these resources.

 *

 * @param out writer to write to.

 * @param bufferSize size of character buffer to use in process.

 * @return number of characters copied.

 */",f16950:m231
54631,"internal fun binarySearchRange(array: IntArray, needle: Int): Int","{
    var bottom = 0
    var top = array.size - 1
    var middle = -1
    var value = 0
    while (bottom <= top) {
        middle = (bottom + top) / 2
        value = array[middle]
        if (needle > value) bottom = middle + 1 else if (needle == value) return middle else top = middle - 1
    }
    return middle - (if (needle < value) 1 else 0)
}","/**

 * Returns the index of the largest element in [array] smaller or equal to the specified [needle],

 * or -1 if [needle] is smaller than the smallest element in [array].

 */",f16708:m41
58531,"@SinceKotlin(""1.5"") @WasExperimental(ExperimentalUnsignedTypes::class) public operator fun UIntRange.contains(value: UByte): Boolean","{
    return contains(value.toUInt())
}","/**

 * Checks if the specified [value] belongs to this range.

 */",f17090:m453
11897,"@Suppress(""FINAL_UPPER_BOUND"") @ExperimentalForeignApi public fun <T: Float> NativePlacement.alloc(value: T): FloatVarOf<T>",alloc<FloatVarOf<T>> { this.value = value },"/**

 * Allocates variable with given value type and initializes it with given value.

 */",f3606:m165
56360,"@SinceKotlin(""1.3"") @ExperimentalStdlibApi public fun Element.minusPolymorphicKey(key: Key<*>): CoroutineContext","{
    if (key is AbstractCoroutineContextKey<*, *>) {
        return if (key.isSubKey(this.key) && key.tryCast(this) != null) EmptyCoroutineContext else this
    }
    return if (this.key === key) EmptyCoroutineContext else this
}","/**

 * Returns empty coroutine context if the element is associated with the given [key] in a polymorphic manner

 * or `null` otherwise.

 * This method returns empty context if either [Element.key] is equal to the given [key] or if the [key] is associated

 * with [Element.key] via [AbstractCoroutineContextKey].

 * See [AbstractCoroutineContextKey] for the example of usage.

 */",f16855:m149
8734,fun generateBodies(),"{
    cEnumCompanionGenerator.invokePostLinkageSteps()
    cEnumByValueFunctionGenerator.invokePostLinkageSteps()
    cEnumClassGenerator.invokePostLinkageSteps()
    cEnumVarClassGenerator.invokePostLinkageSteps()
    cStructClassGenerator.invokePostLinkageSteps()
    cStructCompanionGenerator.invokePostLinkageSteps()
}","/**

     * We postpone generation of bodies until IR linkage is complete.

     * This way we ensure that all used symbols are resolved.

     */",f3291:m157
63639,"@SinceKotlin(""1.4"") public actual fun maxOf(a: Double, vararg other: Double): Double","{
    var max = a
    for (e in other) max = maxOf(max, e)
    return max
}","/**

 * Returns the greater of the given values.

 * 

 * If any value is `NaN`, returns `NaN`.

 */",f17406:m427
64147,@kotlin.internal.IntrinsicConstEvaluation public override inline operator fun compareTo(other: Int): Int,"wasm_i32_compareTo(this, other)","/**

     * Compares this value with the specified value for order.

     * Returns zero if this value is equal to the specified other value, a negative number if it's less than other,

     * or a positive number if it's greater than other.

     */",f17455:m1847
15401,@Test fun minFF(),"{
    assertTrue(""Incorrect float min value"", min(-1908897.600f, 1908897.600f) == -1908897.600f)
    assertTrue(""Incorrect float min value"", min(2.0f, 1908897.600f) == 2.0f)
    assertTrue(""Incorrect float min value"", min(-2.0f, -1908897.600f) == -1908897.600f)
    assertEquals(""Incorrect float min value"", 1.0f, min(1.0f, 1.0f))
    assertEquals(Float.NaN.toString(), min(Float.NaN, 42.0f).toString(), ""Min failed for NaN"")
    assertEquals(Float.NaN.toString(), min(42.0f, Float.NaN).toString(), ""Min failed for NaN"")
    assertEquals((-0.0f).toString(), min(+0.0f, -0.0f).toString(), ""Min failed for -0.0"")
    assertEquals((-0.0f).toString(), min(-0.0f, +0.0f).toString(), ""Min failed for -0.0"")
    assertEquals((-0.0f).toString(), min(-0.0f, -0.0f).toString(), ""Min failed for -0.0f"")
    assertEquals((+0.0f).toString(), min(+0.0f, +0.0f).toString(), ""Min failed for 0.0"")
}","/**

     * Tests kotlin.math.min(float, float)

     */",f3868:m1031
56111,"@kotlin.jvm.JvmName(""getVar"") @kotlin.internal.InlineOnly public inline operator fun <V, V1: V> MutableMap<in String, out @Exact V>.getValue(thisRef: Any?, property: KProperty<*>): V1","@Suppress(""UNCHECKED_CAST"") (getOrImplicitDefault(property.name) as V1)","/**

 * Returns the value of the property for the given object from this mutable map.

 * @param thisRef the object for which the value is requested (not used).

 * @param property the metadata for the property, used to get the name of property and lookup the value corresponding to this name in the map.

 * @return the property value.

 *

 * @throws NoSuchElementException when the map doesn't contain value for the property name and doesn't provide an implicit default (see [withDefault]).

 */",f16828:m49
63533,internal fun DoubleArray.copyOfUninitializedElements(newSize: Int): DoubleArray,"{
    return copyOfUninitializedElements(0, newSize)
}","/**

 * Returns new array which is a copy of the original array with new elements filled with **lateinit** _uninitialized_ values.

 * Attempts to read _uninitialized_ values from this array work in implementation-dependent manner,

 * either throwing exception or returning some kind of implementation-specific default value.

 */",f17396:m3709
16530,fun peek(): FirInProcessOfResolvingToJumpingPhaseState?,stateStackHolder.get().lastOrNull(),"/**

     * Current state on the top if exists

     */",f4129:m835
54723,"public actual fun FloatArray.copyOfRange(fromIndex: Int, toIndex: Int): FloatArray","{
    AbstractList.checkRangeIndexes(fromIndex, toIndex, size)
    return this.asDynamic().slice(fromIndex, toIndex)
}","/**

 * Returns a new array which is a copy of the specified range of the original array.

 * 

 * @param fromIndex the start of the range (inclusive) to copy.

 * @param toIndex the end of the range (exclusive) to copy.

 * 

 * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.

 * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].

 */",f16713:m2213
58861,"@SinceKotlin(""1.1"") public fun <T> Sequence<T>.onEach(action: (T) -> Unit): Sequence<T>","{
    return map {
        action(it)
        it
    }
}","/**

 * Returns a sequence which performs the given [action] on each element of the original sequence as they pass through it.

 *

 * The operation is _intermediate_ and _stateless_.

 */",f17096:m4333
63624,"@SinceKotlin(""1.1"") @kotlin.internal.InlineOnly public actual inline fun maxOf(a: Float, b: Float): Float","{
    return if (a.compareTo(b) >= 0) a else b
}","/**

 * Returns the greater of two values.

 * 

 * If either value is `NaN`, returns `NaN`.

 */",f17406:m119
14852,"@SinceKotlin(""1.4"") public actual infix fun BooleanArray?.contentEquals(other: BooleanArray?): Boolean","{
    if (this === other) return true
    if (this === null || other === null) return false
    if (size != other.size) return false
    for (i in indices) {
        if (this[i] != other[i]) return false
    }
    return true
}","/**

 * Checks if the two specified arrays are *structurally* equal to one another.

 * 

 * Two arrays are considered structurally equal if they have the same size, and elements at corresponding indices are equal.

 * 

 * The arrays are also considered structurally equal if both are `null`.

 * 

 * @param other the array to compare with this array.

 * @return `true` if the two arrays are structurally equal, `false` otherwise.

 * 

 * @sample samples.collections.Arrays.ContentOperations.booleanArrayContentEquals

 */",f3831:m1313
58490,"@SinceKotlin(""1.4"") @OptIn(kotlin.experimental.ExperimentalTypeInference::class) @OverloadResolutionByLambdaReturnType @kotlin.internal.InlineOnly public inline fun <K, V, R: Comparable<R>> Map<out K, V>.maxOfOrNull(selector: (Map.Entry<K, V>) -> R): R?","{
    return entries.maxOfOrNull(selector)
}","/**

 * Returns the largest value among all values produced by [selector] function

 * applied to each entry in the map or `null` if there are no entries.

 */",f17089:m637
59032,"@SinceKotlin(""1.4"") public inline fun <R: Comparable<R>> CharSequence.minByOrNull(selector: (Char) -> R): Char?","{
    if (isEmpty()) return null
    var minElem = this[0]
    val lastIndex = this.lastIndex
    if (lastIndex == 0) return minElem
    var minValue = selector(minElem)
    for (i in 1 .. lastIndex) {
        val e = this[i]
        val v = selector(e)
        if (minValue > v) {
            minElem = e
            minValue = v
        }
    }
    return minElem
}","/**

 * Returns the first character yielding the smallest value of the given function or `null` if there are no characters.

 * 

 * @sample samples.collections.Collections.Aggregates.minByOrNull

 */",f17097:m3037
56184,@kotlin.internal.InlineOnly public inline fun <T: Any> requireNotNull(value: T?): T,"{
    contract { returns() implies (value != null) }
    return requireNotNull(value) { ""Required value was null."" }
}","/**

 * Throws an [IllegalArgumentException] if the [value] is null. Otherwise returns the not null value.

 */",f16839:m83
58225,@kotlin.internal.InlineOnly public inline operator fun plus(other: UShort): ULong,this.plus(other.toULong()),/** Adds the other value to this value. */,f17066:m153
56247,"@SinceKotlin(""1.5"") @kotlin.internal.InlineOnly @kotlin.internal.IntrinsicConstEvaluation public inline fun Long.floorDiv(other: Int): Long",this.floorDiv(other.toLong()),"/** Divides this value by the other value, flooring the result to an integer that is closer to negative infinity. */",f16842:m543
54718,"@Suppress(""ACTUAL_WITHOUT_EXPECT"") public actual fun <T> Array<out T>.copyOfRange(fromIndex: Int, toIndex: Int): Array<T>","{
    AbstractList.checkRangeIndexes(fromIndex, toIndex, size)
    return this.asDynamic().slice(fromIndex, toIndex)
}","/**

 * Returns a new array which is a copy of the specified range of the original array.

 * 

 * @param fromIndex the start of the range (inclusive) to copy.

 * @param toIndex the end of the range (exclusive) to copy.

 * 

 * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.

 * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].

 */",f16713:m2071
58494,"@SinceKotlin(""1.4"") @kotlin.internal.InlineOnly public inline fun <K, V> Map<out K, V>.maxWithOrNull(comparator: Comparator<in Map.Entry<K, V>>): Map.Entry<K, V>?","{
    return entries.maxWithOrNull(comparator)
}","/**

 * Returns the first entry having the largest value according to the provided [comparator] or `null` if there are no entries.

 */",f17089:m739
30905,inline fun <reified T> Collection<*>.memoryOptimizedFilterIsInstance(): List<T>,"{
    return filterIsInstanceTo(ArrayList<T>()).compactIfPossible()
}","/**

 * A memory-optimized version of [Iterable.filterIsInstance].

 * @see Iterable.filterIsInstance

 */",f10791:m117
55537,@PublishedApi internal fun <T> arrayConcat(vararg args: T): T,"{
    val len = args.size
    val typed = js(""Array(len)"").unsafeCast<Array<T>>()
    for (i in 0 .. (len - 1)) {
        val arr = args[i]
        if (arr !is Array<*>) {
            typed[i] = js(""[]"").slice.call(arr)
        } else {
            typed[i] = arr
        }
    }
    return js(""[]"").concat.apply(js(""[]""), typed)
}","/** Concat regular Array's and TypedArray's into an Array.

 */",f16758:m11
13989,"@SinceKotlin(""1.3"") @Suppress(""ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS"") public actual fun CharArray.concatToString(startIndex: Int = 0, endIndex: Int = this.size): String","{
    AbstractList.checkBoundsIndexes(startIndex, endIndex, size)
    return unsafeStringFromCharArray(this, startIndex, endIndex - startIndex)
}","/**

 * Concatenates characters in this [CharArray] or its subrange into a String.

 *

 * @param startIndex the beginning (inclusive) of the subrange of characters, 0 by default.

 * @param endIndex the end (exclusive) of the subrange of characters, size of this array by default.

 *

 * @throws IndexOutOfBoundsException if [startIndex] is less than zero or [endIndex] is greater than the size of this array.

 * @throws IllegalArgumentException if [startIndex] is greater than [endIndex].

 */",f3713:m681
63185,public actual fun Long.takeHighestOneBit(): Long,if (this == 0L) 0L else 1L.shl(64 - 1 - countLeadingZeroBits()),"/**

 * Returns a number having a single bit set in the position of the most significant set bit of this [Long] number,

 * or zero, if this number is zero.

 */",f17314:m187
43607,fun BuildResult.assertTasksAreNotInTaskGraph(vararg taskPaths: String),"{
    val presentTasks = taskPaths.filter { task(it) != null }
    assert(presentTasks.isEmpty()) {
        printBuildOutput()
        val allTaskPaths = taskPaths.joinToString(prefix = ""["", postfix = ""]"")
        ""Tasks $allTaskPaths shouldn't be present in the task graph, but $presentTasks were present""
    }
}","/**

 * Asserts given tasks are not present in the build task graph.

 *

 * (Note: 'not in task graph' has a different meaning to 'not executed'.

 * Tasks with outcomes [TaskOutcome.SKIPPED] and [TaskOutcome.UP_TO_DATE] will be in the task graph, but

 * are not considered 'executed').

 */",f13463:m23
57175,"@SinceKotlin(""1.4"") public actual fun minOf(a: Byte, vararg other: Byte): Byte","{
    var min = a
    for (e in other) min = minOf(min, e)
    return min
}","/**

 * Returns the smaller of the given values.

 */",f16966:m753
14914,public actual fun BooleanArray.copyOf(newSize: Int): BooleanArray,"{
    return this.copyOfUninitializedElements(newSize)
}","/**

 * Returns new array which is a copy of the original array, resized to the given [newSize].

 * The copy is either truncated or padded at the end with `false` values if necessary.

 * 

 * - If [newSize] is less than the size of the original array, the copy array is truncated to the [newSize].

 * - If [newSize] is greater than the size of the original array, the extra elements in the copy array are filled with `false` values.

 * 

 * @sample samples.collections.Arrays.CopyOfOperations.resizedPrimitiveCopyOf

 */",f3831:m2931
56285,public open fun isEmpty(): Boolean,if (step > 0) first > last else first < last,"/**

     * Checks if the progression is empty.

     *

     * Progression with a positive step is empty if its first element is greater than the last element.

     * Progression with a negative step is empty if its first element is less than the last element.

     */",f16847:m213
52438,override fun processSecondPass(): AbstractSet,"{
    if (secondPassVisited) {
        if (fSet.isBackReferenced) {
            @OptIn(ExperimentalNativeApi::class) assert(backReferencedSet != null)
            return backReferencedSet!!
        }
    }
    secondPassVisited = true
    return processSecondPassInternal()
}","/**

     * This method is used for traversing nodes after the first stage of compilation.

     */",f16506:m169
1288,"internal inline fun <T> retry(times: Int, action: (Int) -> T, predicate: (Int, Throwable) -> Boolean): T","{
    if (times < 1) throw IllegalArgumentException(""'times' argument must be at least 1"")
    for (i in 1 .. times) {
        try {
            return action(i)
        } catch (e: Throwable) {
            if (i == times || !predicate(i, e)) throw e
        }
    }
    throw IllegalStateException(""unreachable"")
}","/**

 * Retries [action] the specified number of [times]. If [action] throws an exception, calls [predicate] to determine if

 * another run should be attempted. If [predicate] returns `false`, rethrows the exception.

 *

 * If after the last attempt results in an exception, rethrows that exception without calling [predicate].

 */",f324:m739
64217,@kotlin.internal.IntrinsicConstEvaluation public override inline operator fun compareTo(other: Long): Int,"wasm_i64_compareTo(this, other)","/**

     * Compares this value with the specified value for order.

     * Returns zero if this value is equal to the specified other value, a negative number if it's less than other,

     * or a positive number if it's greater than other.

     */",f17455:m2885
14889,"@SinceKotlin(""1.4"") public actual fun CharArray?.contentToString(): String","{
    return this?.joinToString("", "", ""["", ""]"") ?: ""null""
}","/**

 * Returns a string representation of the contents of the specified array as if it is [List].

 * 

 * @sample samples.collections.Arrays.ContentOperations.contentToString

 */",f3831:m2177
63660,"@SinceKotlin(""1.4"") public actual fun minOf(a: Double, vararg other: Double): Double","{
    var min = a
    for (e in other) min = minOf(min, e)
    return min
}","/**

 * Returns the smaller of the given values.

 * 

 * If any value is `NaN`, returns `NaN`.

 */",f17406:m867
10458,fun removeConstraint(c: Constraint),"{
    constraints.remove(c)
    if (determinedBy == c) determinedBy = null
}","/**

   * Removes all traces of c from this variable.

   */",f3476:m969
59016,"@SinceKotlin(""1.7"") @kotlin.jvm.JvmName(""maxOrThrow"") @Suppress(""CONFLICTING_OVERLOADS"") public fun CharSequence.max(): Char","{
    if (isEmpty()) throw NoSuchElementException()
    var max = this[0]
    for (i in 1 .. lastIndex) {
        val e = this[i]
        if (max < e) max = e
    }
    return max
}","/**

 * Returns the largest character.

 * 

 * @throws NoSuchElementException if the char sequence is empty.

 */",f17097:m2383
17256,"public inline fun <P: KotlinComposableProvider, reified T: P> List<P>.mergeSpecificProviders(factory: KotlinCompositeProviderFactory<P>, crossinline mergeTargets: (List<T>) -> P): P","{
    return factory.createFlattened(factory.flatten(this).mergeOnly<_, T> { mergeTargets(it) })
}","/**

 * Uses the given [factory] to merge all providers of type [T] with the given [mergeTargets] strategy. Other providers (not of type [T]) are

 * added to the resulting composite provider unmerged.

 */",f5203:m81
46479,fun main(args: Array<String>),"{
    val templateGroups = sequenceOf<TemplateGroup>(Elements, Filtering, Ordering, ArrayOps, Snapshots, Mapping, SetOps, Aggregates, Guards, Generators, StringJoinOps, SequenceOps, RangeOps, Numeric, ComparableOps)
    val targetBaseDirs = mutableMapOf<KotlinTarget, File>()
    when (args.size) {
        1 -> {
            val baseDir = File(args.first())
            targetBaseDirs[KotlinTarget.Common] = baseDir.resolveExistingDir(""libraries/stdlib/common/src/generated"")
            targetBaseDirs[KotlinTarget.JVM] = baseDir.resolveExistingDir(""libraries/stdlib/jvm/src/generated"")
            targetBaseDirs[KotlinTarget.JS] = baseDir.resolveExistingDir(""libraries/stdlib/js/src/generated"")
            targetBaseDirs[KotlinTarget.WASM] = baseDir.resolveExistingDir(""libraries/stdlib/wasm/src/generated"")
            targetBaseDirs[KotlinTarget.Native] = baseDir.resolveExistingDir(""kotlin-native/runtime/src/main/kotlin/generated"")
        }
        else -> {
            println(""""""Parameters:
            
                <kotlin-base-dir> - generates sources for common, jvm, js, ir-js, native targets using paths derived from specified base path
            
            """""")
            exitProcess(1)
        }
    }
    templateGroups.groupByFileAndWrite(targetsToGenerate = targetBaseDirs.keys) { (target, source) ->
        val targetDir = targetBaseDirs[target] ?: error(""Target $target directory is not configured"")
        val platformSuffix = when (val platform = target.platform) {
            Platform.Common -> """"
            Platform.Native -> if (target.backend == Backend.Wasm) ""Wasm"" else ""Native""
            else -> platform.name.lowercase().capitalize()
        }
        targetDir.resolve(""_${source.name.capitalize()}$platformSuffix.kt"")
    }
}","/**

 * Generates methods in the standard library which are mostly identical

 * but just using a different input kind.

 *

 * Kinda like mimicking source macros here, but this avoids the inefficiency of type conversions

 * at runtime.

 */",f15057:m23
14936,internal fun ByteArray.copyOfUninitializedElements(newSize: Int): ByteArray,"{
    return copyOfUninitializedElements(0, newSize)
}","/**

 * Returns new array which is a copy of the original array with new elements filled with **lateinit** _uninitialized_ values.

 * Attempts to read _uninitialized_ values from this array work in implementation-dependent manner,

 * either throwing exception or returning some kind of implementation-specific default value.

 */",f3831:m3567
61757,"@SinceKotlin(""1.4"") public fun Document.createElement(name: String, init: Element.() -> Unit): Element","{
    contract { callsInPlace(init, InvocationKind.EXACTLY_ONCE) }
    return createElement(name).apply(init)
}","/**

 * Creates a new element with the specified [name].

 *

 * The element is initialized with the specified [init] function.

 */",f17277:m21
14846,"@SinceKotlin(""1.4"") public actual infix fun ByteArray?.contentEquals(other: ByteArray?): Boolean","{
    if (this === other) return true
    if (this === null || other === null) return false
    if (size != other.size) return false
    for (i in indices) {
        if (this[i] != other[i]) return false
    }
    return true
}","/**

 * Checks if the two specified arrays are *structurally* equal to one another.

 * 

 * Two arrays are considered structurally equal if they have the same size, and elements at corresponding indices are equal.

 * 

 * The arrays are also considered structurally equal if both are `null`.

 * 

 * @param other the array to compare with this array.

 * @return `true` if the two arrays are structurally equal, `false` otherwise.

 * 

 * @sample samples.collections.Arrays.ContentOperations.intArrayContentEquals

 */",f3831:m1029
56016,"@kotlin.internal.InlineOnly public inline operator fun <@kotlin.internal.OnlyInputTypes K, V> Map<out K, V>.get(key: K): V?","@Suppress(""UNCHECKED_CAST"") (this as Map<K, V>).get(key)","/**

 * Returns the value corresponding to the given [key], or `null` if such a key is not present in the map.

 */",f16823:m509
55749,"@ExperimentalStdlibApi @SinceKotlin(""1.9"") @InlineOnly public inline fun String.hexToUShort(format: HexFormat = HexFormat.Default): UShort",hexToShort(format).toUShort(),"/**

 * Parses an `UShort` value from this string using the specified [format].

 *

 * Note that only [HexFormat.NumberHexFormat] affects parsing,

 * and parsing is performed in case-insensitive manner.

 *

 * @param format the [HexFormat] to use for parsing, [HexFormat.Default] by default.

 *

 * @throws IllegalArgumentException if this string does not comply with the specified [format].

 */",f16790:m311
58759,public fun <T> Sequence<T>.filter(predicate: (T) -> Boolean): Sequence<T>,"{
    return FilteringSequence(this, true, predicate)
}","/**

 * Returns a sequence containing only elements matching the given [predicate].

 *

 * The operation is _intermediate_ and _stateless_.

 * 

 * @sample samples.collections.Collections.Filtering.filter

 */",f17096:m853
7516,"fun Project.getFilesToCompile(compile: List<String>, exclude: List<String>): List<String>","{
    val excludeFiles = exclude.map { project.file(it).absolutePath }.toList()
    return compile.flatMap { f -> project.file(f).walk().filter { it.isFile && it.name.endsWith("".kt"") && !excludeFiles.contains(it.absolutePath) }.map { it.absolutePath }.asIterable() }
}","/**

 * Creates a list of file paths to be compiled from the given [compile] list with regard to [exclude] list.

 */",f3111:m283
56491,"@SinceKotlin(""1.2"") @kotlin.internal.InlineOnly public inline fun String.toBigInteger(): java.math.BigInteger",java.math.BigInteger(this),"/**

 * Parses the string as a [java.math.BigInteger] number and returns the result.

 * @throws NumberFormatException if the string is not a valid representation of a number.

 */",f16885:m301
57233,public fun <R> Array<*>.filterIsInstance(klass: Class<R>): List<R>,"{
    return filterIsInstanceTo(ArrayList<R>(), klass)
}","/**

 * Returns a list containing all elements that are instances of specified class.

 * 

 * @sample samples.collections.Collections.Filtering.filterIsInstanceJVM

 */",f16970:m217
64379,@kotlin.internal.IntrinsicConstEvaluation public operator fun plus(other: Any?): String,"{
    val right = other.toString()
    return String(this, this.length + right.length, right.chars)
}","/**

     * Returns a string obtained by concatenating this string with the string representation of the given [other] object.

     */",f17457:m45
63275,internal fun Char.Companion.isSupplementaryCodePoint(codepoint: Int): Boolean,codepoint in MIN_SUPPLEMENTARY_CODE_POINT .. MAX_CODE_POINT,/** Checks if the codepoint specified is a supplementary codepoint or not. */,f17357:m67
59005,public inline fun CharSequence.all(predicate: (Char) -> Boolean): Boolean,"{
    for (element in this) if (!predicate(element)) return false
    return true
}","/**

 * Returns `true` if all characters match the given [predicate].

 * 

 * Note that if the char sequence contains no characters, the function returns `true`

 * because there are no characters in it that _do not_ match the predicate.

 * See a more detailed explanation of this logic concept in [""Vacuous truth""](https://en.wikipedia.org/wiki/Vacuous_truth) article.

 * 

 * @sample samples.collections.Collections.Aggregates.all

 */",f17097:m2117
15005,public actual fun BooleanArray.toTypedArray(): Array<Boolean>,"{
    return Array(size) { index -> this[index] }
}","/**

 * Returns a *typed* object array containing all of the elements of this primitive array.

 */",f3831:m5131
57342,public actual operator fun ShortArray.plus(element: Short): ShortArray,"{
    val index = size
    val result = java.util.Arrays.copyOf(this, index + 1)
    result[index] = element
    return result
}","/**

 * Returns an array containing all elements of the original array and then the given [element].

 */",f16970:m3467
13253,"private fun expandPrimitiveVarType(primitiveVarClassifier: Classifier, nullable: Boolean): AbbreviatedType","{
    val primitiveType = primitiveVarClassifierToPrimitiveType.getValue(primitiveVarClassifier)
    val underlyingType = getVarOfTypeFor(primitiveType, nullable)
    return AbbreviatedType(underlyingType, primitiveVarClassifier, listOf(), nullable)
}","/**

     * @param primitiveVarType one of kotlinx.cinterop.{primitive}Var types.

     * @return typealias in terms of StubIR types.

     */",f3652:m325
15055,"@SinceKotlin(""1.4"") public actual fun minOf(a: Float, vararg other: Float): Float","{
    var min = a
    for (e in other) min = minOf(min, e)
    return min
}","/**

 * Returns the smaller of the given values.

 * 

 * If any value is `NaN`, returns `NaN`.

 */",f3836:m843
63552,public actual operator fun BooleanArray.plus(element: Boolean): BooleanArray,"{
    val index = size
    val result = copyOfUninitializedElements(index + 1)
    result[index] = element
    return result
}","/**

 * Returns an array containing all elements of the original array and then the given [element].

 */",f17396:m4227
57161,"@SinceKotlin(""1.1"") @kotlin.internal.InlineOnly public actual inline fun minOf(a: Byte, b: Byte): Byte","{
    return Math.min(a.toInt(), b.toInt()).toByte()
}","/**

 * Returns the smaller of two values.

 */",f16966:m477
45740,"fun api(dependencyNotation: String, configure: Action<ExternalModuleDependency>): ExternalModuleDependency",api(dependencyNotation) { configure.execute(this) },"/**

     * Adds an `api` [module dependency](https://docs.gradle.org/current/userguide/declaring_dependencies.html#sub:module_dependencies)

     * to this entity.

     *

     * @see [HasKotlinDependencies.apiConfigurationName]

     *

     * @param dependencyNotation The module dependency notation, as per [DependencyHandler.create].

     * @param configure Additional configuration for the created module dependency.

     * @return The module dependency, or `null` if dependencyNotation is a provider.

     */",f14927:m87
63586,"@SinceKotlin(""1.4"") @Suppress(""ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS"") public actual fun FloatArray.sort(fromIndex: Int = 0, toIndex: Int = size): Unit","{
    AbstractList.checkRangeIndexes(fromIndex, toIndex, size)
    sortArray(this, fromIndex, toIndex)
}","/**

 * Sorts a range in the array in-place.

 * 

 * @param fromIndex the start of the range (inclusive) to sort, 0 by default.

 * @param toIndex the end of the range (exclusive) to sort, size of this array by default.

 * 

 * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.

 * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].

 * 

 * @sample samples.collections.Arrays.Sorting.sortRangeOfArray

 */",f17396:m4993
57054,@kotlin.internal.InlineOnly public inline fun println(message: Byte),"{
    System.out.println(message)
}",/** Prints the given [message] and the line separator to the standard output stream. */,f16953:m189
14898,"@SinceKotlin(""1.3"") @Suppress(""ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS"") public actual fun CharArray.copyInto(destination: CharArray, destinationOffset: Int = 0, startIndex: Int = 0, endIndex: Int = size): CharArray","{
    arrayCopy(this, startIndex, destination, destinationOffset, endIndex - startIndex)
    return destination
}","/**

 * Copies this array or its subrange into the [destination] array and returns that array.

 * 

 * It's allowed to pass the same array in the [destination] and even specify the subrange so that it overlaps with the destination range.

 * 

 * @param destination the array to copy to.

 * @param destinationOffset the position in the [destination] array to copy to, 0 by default.

 * @param startIndex the beginning (inclusive) of the subrange to copy, 0 by default.

 * @param endIndex the end (exclusive) of the subrange to copy, size of this array by default.

 * 

 * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of this array indices or when `startIndex > endIndex`.

 * @throws IndexOutOfBoundsException when the subrange doesn't fit into the [destination] array starting at the specified [destinationOffset],

 * or when that index is out of the [destination] array indices range.

 * 

 * @return the [destination] array.

 */",f3831:m2567
14976,public actual operator fun FloatArray.plus(elements: FloatArray): FloatArray,"{
    val thisSize = size
    val arraySize = elements.size
    val result = copyOfUninitializedElements(thisSize + arraySize)
    elements.copyInto(result, thisSize)
    return result
}","/**

 * Returns an array containing all elements of the original array and then all elements of the given [elements] array.

 */",f3831:m4451
56506,"@kotlin.internal.InlineOnly public actual inline operator fun StringBuilder.set(index: Int, value: Char): Unit","this.setCharAt(index, value)","/**

 * Sets the character at the specified [index] to the specified [value].

 *

 * @throws IndexOutOfBoundsException if [index] is out of bounds of this string builder.

 */",f16890:m133
52993,public actual fun println(message: Any?),"{
    output.println(message)
}",/** Prints the given [message] and the line separator to the standard output stream. */,f16600:m195
57155,"@SinceKotlin(""1.4"") public actual fun maxOf(a: Short, vararg other: Short): Short","{
    var max = a
    for (e in other) max = maxOf(max, e)
    return max
}","/**

 * Returns the greater of the given values.

 */",f16966:m349
58491,"@SinceKotlin(""1.4"") @OptIn(kotlin.experimental.ExperimentalTypeInference::class) @OverloadResolutionByLambdaReturnType @kotlin.internal.InlineOnly public inline fun <K, V, R> Map<out K, V>.maxOfWith(comparator: Comparator<in R>, selector: (Map.Entry<K, V>) -> R): R","{
    return entries.maxOfWith(comparator, selector)
}","/**

 * Returns the largest value according to the provided [comparator]

 * among all values produced by [selector] function applied to each entry in the map.

 * 

 * @throws NoSuchElementException if the map is empty.

 */",f17089:m661
64029,@kotlin.internal.IntrinsicConstEvaluation public inline operator fun compareTo(other: Int): Int,this.toInt().compareTo(other),"/**

     * Compares this value with the specified value for order.

     * Returns zero if this value is equal to the specified other value, a negative number if it's less than other,

     * or a positive number if it's greater than other.

     */",f17455:m119
59004,public fun CharSequence.withIndex(): Iterable<IndexedValue<Char>>,"{
    return IndexingIterable { iterator() }
}","/**

 * Returns a lazy [Iterable] that wraps each character of the original char sequence

 * into an [IndexedValue] containing the index of that character and the character itself.

 */",f17097:m2101
48206,fun hasTestTaskFailedPreviously(path: String),previouslyFailedTestTasks.remove(path),"/**

     * Checks whether the test task defined by [path] had failed previously (doesn't matter if it's caused by failed test or any runtime problem).

     * This function is not idempotent as it resets the task's failed state.

     */",f15572:m155
15044,"@SinceKotlin(""1.1"") @kotlin.internal.InlineOnly public actual inline fun minOf(a: Byte, b: Byte, c: Byte): Byte","{
    return minOf(a.toInt(), minOf(b.toInt(), c.toInt())).toByte()
}","/**

 * Returns the smaller of three values.

 */",f3836:m623
58621,"@kotlin.jvm.JvmName(""byteRangeContains"") @SinceKotlin(""1.9"") @WasExperimental(ExperimentalStdlibApi::class) public operator fun OpenEndRange<Byte>.contains(value: Int): Boolean","{
    return value.toByteExactOrNull().let { if (it != null) contains(it) else false }
}","/**

 * Checks if the specified [value] belongs to this range.

 */",f17092:m1131
58975,"public inline fun <K> CharSequence.associateBy(keySelector: (Char) -> K): Map<K, Char>","{
    val capacity = mapCapacity(length).coerceAtLeast(16)
    return associateByTo(LinkedHashMap<K, Char>(capacity), keySelector)
}","/**

 * Returns a [Map] containing the characters from the given char sequence indexed by the key

 * returned from [keySelector] function applied to each character.

 * 

 * If any two characters would have the same key returned by [keySelector] the last one gets added to the map.

 * 

 * The returned map preserves the entry iteration order of the original char sequence.

 * 

 * @sample samples.text.Strings.associateBy

 */",f17097:m1369
58016,"@SinceKotlin(""1.5"") @WasExperimental(ExperimentalUnsignedTypes::class, ExperimentalStdlibApi::class) @kotlin.internal.InlineOnly public inline fun UShort.takeLowestOneBit(): UShort",toInt().takeLowestOneBit().toUShort(),"/**

 * Returns a number having a single bit set in the position of the least significant set bit of this [UShort] number,

 * or zero, if this number is zero.

 */",f17056:m521
58703,public fun Double.coerceAtLeast(minimumValue: Double): Double,"{
    return if (this < minimumValue) minimumValue else this
}","/**

 * Ensures that this value is not less than the specified [minimumValue].

 * 

 * @return this value if it's greater than or equal to the [minimumValue] or the [minimumValue] otherwise.

 * 

 * @sample samples.comparisons.ComparableOps.coerceAtLeast

 */",f17092:m2539
56501,"@Suppress(""EXTENSION_SHADOWED_BY_MEMBER"") @SinceKotlin(""1.9"") @kotlin.internal.InlineOnly public actual inline fun StringBuilder.append(value: Byte): StringBuilder",this.append(value.toInt()),"/**

 * Appends the string representation of the specified byte [value] to this string builder and returns this instance.

 *

 * The overall effect is exactly as if the [value] were converted to a string by the `value.toString()` method,

 * and then that string was appended to this string builder.

 */",f16890:m21
57303,@kotlin.internal.InlineOnly public actual inline fun CharArray.copyOf(): CharArray,"{
    return java.util.Arrays.copyOf(this, size)
}","/**

 * Returns new array which is a copy of the original array.

 * 

 * @sample samples.collections.Arrays.CopyOfOperations.copyOf

 */",f16970:m2399
14837,"@Deprecated(""Use Kotlin compiler 1.4 to avoid deprecation warning."") @SinceKotlin(""1.1"") @DeprecatedSinceKotlin(hiddenSince = ""1.4"") public infix fun ByteArray.contentEquals(other: ByteArray): Boolean","{
    return this.contentEquals(other)
}","/**

 * Checks if the two specified arrays are *structurally* equal to one another.

 * 

 * Two arrays are considered structurally equal if they have the same size, and elements at corresponding indices are equal.

 * 

 * @param other the array to compare with this array.

 * @return `true` if the two arrays are structurally equal, `false` otherwise.

 * 

 * @sample samples.collections.Arrays.ContentOperations.intArrayContentEquals

 */",f3831:m695
59101,"@SinceKotlin(""1.5"") @WasExperimental(ExperimentalUnsignedTypes::class) @kotlin.internal.InlineOnly public inline fun minOf(a: UInt, b: UInt, c: UInt): UInt","{
    return minOf(a, minOf(b, c))
}","/**

 * Returns the smaller of three values.

 */",f17098:m349
54847,"@SinceKotlin(""1.3"") @ExperimentalUnsignedTypes public actual fun UShortArray.elementAt(index: Int): UShort","{
    return elementAtOrElse(index) { throw IndexOutOfBoundsException(""index: $index, size: $size}"") }
}","/**

 * Returns an element at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this array.

 * 

 * @sample samples.collections.Collections.Elements.elementAt

 */",f16716:m99
41448,"fun <R> assertDoesNotThrow(message: String = ""Expected no exception, but {} was thrown"", body: () -> R): R","{
    try {
        return body()
    } catch (e: Throwable) {
        throw AssertionError(message.format(e))
    }
}","/**

 * A replacement for the JUnit Jupiter function to be used in JUnit 4 tests.

 *

 * Asserts that the specified code block does not throw any exception.

 *

 * @param message The message to be included in the AssertionError if an exception is thrown.

 * It can contain the ""{}"" placeholder, which will be replaced with the thrown exception.

 * @param body The code block to be executed.

 *

 * @return The result of executing the code block.

 *

 * @throws AssertionError If the code block throws an exception.

 */",f13041:m65
13507,"@SinceKotlin(""1.1"") @kotlin.internal.IntrinsicConstEvaluation public inline operator fun rem(other: Short): Int",this.toInt() % other.toInt(),"/**

     * Calculates the remainder of truncating division of this value (dividend) by the other value (divisor).

     *

     * The result is either zero or has the same sign as the _dividend_ and has the absolute value less than the absolute value of the divisor.

     */",f3686:m451
57234,"public fun <C: MutableCollection<in R>, R> Array<*>.filterIsInstanceTo(destination: C, klass: Class<R>): C","{
    @Suppress(""UNCHECKED_CAST"") for (element in this) if (klass.isInstance(element)) destination.add(element as R)
    return destination
}","/**

 * Appends all elements that are instances of specified class to the given [destination].

 * 

 * @sample samples.collections.Collections.Filtering.filterIsInstanceToJVM

 */",f16970:m235
14232,public fun getAndSet(newValue: Int): Int,this::value.getAndSetField(newValue),"/**

     * Atomically sets the value to the given [new value][newValue] and returns the old value.

     */",f3762:m41
63504,public actual fun FloatArray.copyOf(newSize: Int): FloatArray,"{
    return this.copyOfUninitializedElements(newSize)
}","/**

 * Returns new array which is a copy of the original array, resized to the given [newSize].

 * The copy is either truncated or padded at the end with zero values if necessary.

 * 

 * - If [newSize] is less than the size of the original array, the copy array is truncated to the [newSize].

 * - If [newSize] is greater than the size of the original array, the extra elements in the copy array are filled with zero values.

 * 

 * @sample samples.collections.Arrays.CopyOfOperations.resizedPrimitiveCopyOf

 */",f17396:m2931
48551,"@JvmOverloads fun test(namePrefix: String, buildTypes: Collection<NativeBuildType> = NativeBuildType.DEFAULT_BUILD_TYPES, configure: Action<TestExecutable>)","test(namePrefix, buildTypes) { configure.execute(this) }",/** Creates a test executable with the given [namePrefix] for each build type and configures it. */,f15652:m611
50882,internal fun Collection<ToolingDiagnostic>.assertContainsSingleDiagnostic(factory: ToolingDiagnosticFactory): ToolingDiagnostic,"{
    val matches = filter { it.id == factory.id }
    if (matches.size != 1) {
        fail(""Expected to have 1 diagnostic with id '${factory.id}', but ${matches.size} were reported:\n${matches.render()}"")
    }
    return matches.single()
}","/**

 * Asserts that [this] contains a single diagnostic that matches [factory]'s ID.

 * @returns the [ToolingDiagnostic] with the same ID as [factory].

 */",f16183:m279
14853,"@SinceKotlin(""1.4"") public actual infix fun CharArray?.contentEquals(other: CharArray?): Boolean","{
    if (this === other) return true
    if (this === null || other === null) return false
    if (size != other.size) return false
    for (i in indices) {
        if (this[i] != other[i]) return false
    }
    return true
}","/**

 * Checks if the two specified arrays are *structurally* equal to one another.

 * 

 * Two arrays are considered structurally equal if they have the same size, and elements at corresponding indices are equal.

 * 

 * The arrays are also considered structurally equal if both are `null`.

 * 

 * @param other the array to compare with this array.

 * @return `true` if the two arrays are structurally equal, `false` otherwise.

 * 

 * @sample samples.collections.Arrays.ContentOperations.charArrayContentEquals

 */",f3831:m1359
63575,public actual fun ByteArray.sort(): Unit,"{
    if (size > 1) sortArray(this, 0, size)
}","/**

 * Sorts the array in-place.

 * 

 * @sample samples.collections.Arrays.Sorting.sortArray

 */",f17396:m4697
58757,public fun <T> Sequence<T>.drop(n: Int): Sequence<T>,"{
    require(n >= 0) { ""Requested element count $n is less than zero."" }
    return when {
        n == 0 -> this
        this is DropTakeSequence -> this.drop(n)
        else -> DropSequence(this, n)
    }
}","/**

 * Returns a sequence containing all elements except first [n] elements.

 *

 * The operation is _intermediate_ and _stateless_.

 * 

 * @throws IllegalArgumentException if [n] is negative.

 * 

 * @sample samples.collections.Collections.Transformations.drop

 */",f17096:m795
15381,@Test fun atanD(),"{
    val answer = tan(atan(1.0))
    assertTrue(""Returned incorrect arc tangent: "" + answer, answer <= 1.0 && answer >= 9.9999999999999983E-1)
}","/**

     * Tests kotlin.math.atan(Double)

     */",f3868:m265
45737,fun configure(configuration: Action<@UnsafeVariance CO>),"{
    configuration.execute(options)
}","/**

     * @suppress

     */",f14926:m59
10454,override fun execute(),"{
    if (direction == Direction.FORWARD) {
        v2.value = v1.value * scale.value + offset.value
    } else {
        v1.value = (v2.value - offset.value) / scale.value
    }
}","/**

   * Enforce this constraint. Assume that it is satisfied.

   */",f3476:m841
21948,"private fun KtAnalysisSession.goToNthParent(symbol: KtDeclarationSymbol, steps: Int): KtDeclarationSymbol?","{
    var currentSymbol = symbol
    repeat(steps) { currentSymbol = currentSymbol.getContainingSymbol() as? KtClassOrObjectSymbol ?: return null }
    return currentSymbol
}","/**

     * N.B. Works only for [KtClassOrObjectSymbol] parents chain.

     */",f8670:m229
55795,"@SinceKotlin(""1.3"") @Suppress(""DEPRECATION"") public fun <T> sequence(@BuilderInference block: suspend SequenceScope<T>.() -> Unit): Sequence<T>",Sequence { iterator(block) },"/**

 * Builds a [Sequence] lazily yielding values one by one.

 *

 * @see kotlin.sequences.generateSequence

 *

 * @sample samples.collections.Sequences.Building.buildSequenceYieldAll

 * @sample samples.collections.Sequences.Building.buildFibonacciSequence

 */",f16811:m31
58895,"@SinceKotlin(""1.2"") public fun <T, R> Sequence<T>.windowed(size: Int, step: Int = 1, partialWindows: Boolean = false, transform: (List<T>) -> R): Sequence<R>","{
    return windowedSequence(size, step, partialWindows, reuseBuffer = true).map(transform)
}","/**

 * Returns a sequence of results of applying the given [transform] function to

 * an each list representing a view over the window of the given [size]

 * sliding along this sequence with the given [step].

 * 

 * Note that the list passed to the [transform] function is ephemeral and is valid only inside that function.

 * You should not store it or allow it to escape in some way, unless you made a snapshot of it.

 * Several last lists may have fewer elements than the given [size].

 * 

 * Both [size] and [step] must be positive and can be greater than the number of elements in this sequence.

 * @param size the number of elements to take in each window

 * @param step the number of elements to move the window forward by on an each step, by default 1

 * @param partialWindows controls whether or not to keep partial windows in the end if any,

 * by default `false` which means partial windows won't be preserved

 * 

 * @sample samples.collections.Sequences.Transformations.averageWindows

 */",f17096:m5587
21961,"private fun KtAnalysisSession.getTypeQualifiedExtensions(fqName: FqName, contextElement: KtElement): Collection<ResolveResult>","{
    if (fqName.isRoot) return emptyList()
    val extensionName = fqName.shortName()
    val receiverTypeName = fqName.parent()
    if (receiverTypeName.isRoot) return emptyList()
    val possibleExtensions = getExtensionCallableSymbolsByShortName(extensionName, contextElement)
    if (possibleExtensions.isEmpty()) return emptyList()
    val possibleReceivers = getReceiverTypeCandidates(receiverTypeName, contextElement)
    return possibleReceivers.flatMap { receiverClassSymbol ->
        val receiverType = buildClassType(receiverClassSymbol)
        val applicableExtensions = possibleExtensions.filter { canBeReferencedAsExtensionOn(it, receiverType) }
        applicableExtensions.map { it.toResolveResult(receiverClassReference = receiverClassSymbol) }
    }
}","/**

     * Tries to resolve [fqName] into available extension callables (functions or properties)

     * prefixed with a suitable extension receiver type (like in `Foo.bar`, or `foo.Foo.bar`).

     *

     * Relies on the fact that in such references only the last qualifier refers to the

     * actual extension callable, and the part before that refers to the receiver type (either fully

     * or partially qualified).

     *

     * For example, `foo.Foo.bar` may only refer to the extension callable `bar` with

     * a `foo.Foo` receiver type, and this function will only look for such combinations.

     *

     * N.B. This function only searches for extension callables qualified by receiver types!

     * It does not try to resolve fully qualified or member functions, because they are dealt

     * with by the other parts of [KDocReferenceResolver].

     */",f8670:m585
58285,"@SinceKotlin(""1.5"") @WasExperimental(ExperimentalUnsignedTypes::class) public fun String.toUShort(): UShort",toUShortOrNull() ?: numberFormatError(this),"/**

 * Parses the string as a [UShort] number and returns the result.

 * @throws NumberFormatException if the string is not a valid representation of a number.

 */",f17067:m137
57022,public fun Reader.readText(): String,"{
    val buffer = StringWriter()
    copyTo(buffer)
    return buffer.toString()
}","/**

 * Reads this reader completely as a String.

 *

 * *Note*:  It is the caller's responsibility to close this reader.

 *

 * @return the string with corresponding file content.

 */",f16950:m205
12238,"private fun tryExpandMacros(library: CompilationWithPCH, translationUnit: CXTranslationUnit, sourceFile: File, names: List<String>, typeConverter: TypeConverter): Map<String, MacroDef?>","{
    reparseWithCodeSnippets(library, translationUnit, sourceFile, names)
    val macrosWithErrorsInSnippetFunctionHeader = mutableSetOf<String>()
    val macrosWithErrorsInSnippetFunctionBody = mutableSetOf<String>()
    val preambleSize = library.preambleLines.size
    translationUnit.getErrorLineNumbers().map { it - preambleSize - 1 }.forEach { lineNumber ->
        val index = lineNumber / CODE_SNIPPET_LINES_NUMBER
        if (index >= 0 && index < names.size) { when (lineNumber % CODE_SNIPPET_LINES_NUMBER) {
            0 -> macrosWithErrorsInSnippetFunctionHeader += names[index]
            1 -> macrosWithErrorsInSnippetFunctionBody += names[index]
            else -> { }
        } }
    }
    val result = mutableMapOf<String, MacroDef?>()
    visitChildren(translationUnit) { cursor, _ ->
        if (cursor.kind == CXCursorKind.CXCursor_FunctionDecl) {
            val functionName = getCursorSpelling(cursor)
            if (functionName.startsWith(CODE_SNIPPET_FUNCTION_NAME_PREFIX)) {
                val macroName = functionName.removePrefix(CODE_SNIPPET_FUNCTION_NAME_PREFIX)
                if (macroName in macrosWithErrorsInSnippetFunctionHeader) { } else {
                    result[macroName] = if (macroName in macrosWithErrorsInSnippetFunctionBody) {
                        null
                    } else {
                        processCodeSnippet(cursor, macroName, typeConverter)
                    }
                }
            }
        }
        CXChildVisitResult.CXChildVisit_Continue
    }
    return result
}","/**

 * Tries to expand macros [names] defined in [library].

 * Returns the map of successfully processed macros with resulting constant as a value

 * or `null` if the result is not a constant (expression).

 *

 * As a side effect, modifies the [sourceFile] and reparses the [translationUnit].

 */",f3629:m187
14521,fun parseDouble(string: String): Double,"parse(string, Double.NEGATIVE_INFINITY, Double.POSITIVE_INFINITY, Double.NaN, 0.0, DOUBLE_MAX_EXP, DOUBLE_MIN_EXP, ::parseDoubleImpl, HexStringParser::parseDouble)","/**

     * Adaptor for parsing string and returning the closest Double value to the real number in the string.

     *

     * @param string the String that will be parsed to Double

     * @return the Double number closest to the real number

     * @exception NumberFormatException if the String doesn't represent a number of type Double

     */",f3789:m141
43615,fun BuildResult.assertTasksSkipped(vararg taskPaths: String),"{
    assertTasksHaveOutcome(TaskOutcome.SKIPPED, taskPaths.asList())
}","/**

 * Asserts given [taskPaths] have [TaskOutcome.SKIPPED] execution state.

 */",f13463:m171
58094,@kotlin.internal.InlineOnly public inline operator fun rem(other: UByte): UInt,this.toUInt().rem(other.toUInt()),"/**

     * Calculates the remainder of truncating division of this value (dividend) by the other value (divisor).

     *

     * The result is always less than the divisor.

     */",f17059:m251
55138,@kotlin.internal.IntrinsicConstEvaluation public inline operator fun div(other: Double): Double,this.toDouble().div(other),/** Divides this value by the other value. */,f16727:m2739
14956,public actual operator fun IntArray.plus(element: Int): IntArray,"{
    val index = size
    val result = copyOfUninitializedElements(index + 1)
    result[index] = element
    return result
}","/**

 * Returns an array containing all elements of the original array and then the given [element].

 */",f3831:m4041
54630,public actual fun <T> MutableList<T>.reverse(): Unit,"{
    val midPoint = (size / 2) - 1
    if (midPoint < 0) return
    var reverseIndex = lastIndex
    for (index in 0 .. midPoint) {
        val tmp = this[index]
        this[index] = this[reverseIndex]
        this[reverseIndex] = tmp
        reverseIndex--
    }
}","/**

 * Reverses elements in the list in-place.

 */",f16707:m33
53152,"@Suppress(""ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS"") public actual fun CharSequence.regionMatches(thisOffset: Int, other: CharSequence, otherOffset: Int, length: Int, ignoreCase: Boolean = false): Boolean","regionMatchesImpl(thisOffset, other, otherOffset, length, ignoreCase)","/**

 * Returns `true` if the specified range in this char sequence is equal to the specified range in another char sequence.

 * @param thisOffset the start offset in this char sequence of the substring to compare.

 * @param other the string against a substring of which the comparison is performed.

 * @param otherOffset the start offset in the other char sequence of the substring to compare.

 * @param length the length of the substring to compare.

 */",f16624:m169
57309,@kotlin.internal.InlineOnly public actual inline fun DoubleArray.copyOf(newSize: Int): DoubleArray,"{
    return java.util.Arrays.copyOf(this, newSize)
}","/**

 * Returns new array which is a copy of the original array, resized to the given [newSize].

 * The copy is either truncated or padded at the end with zero values if necessary.

 * 

 * - If [newSize] is less than the size of the original array, the copy array is truncated to the [newSize].

 * - If [newSize] is greater than the size of the original array, the extra elements in the copy array are filled with zero values.

 * 

 * @sample samples.collections.Arrays.CopyOfOperations.resizedPrimitiveCopyOf

 */",f16970:m2559
63566,public actual operator fun IntArray.plus(elements: IntArray): IntArray,"{
    val thisSize = size
    val arraySize = elements.size
    val result = copyOfUninitializedElements(thisSize + arraySize)
    elements.copyInto(result, thisSize)
    return result
}","/**

 * Returns an array containing all elements of the original array and then all elements of the given [elements] array.

 */",f17396:m4513
56869,"@SinceKotlin(""1.6"") @WasExperimental(ExperimentalStdlibApi::class) @kotlin.internal.InlineOnly public actual inline fun Int.rotateRight(bitCount: Int): Int","Integer.rotateRight(this, bitCount)","/**

 * Rotates the binary representation of this [Int] number right by the specified [bitCount] number of bits.

 * The least significant bits pushed out from the right side reenter the number as the most significant bits on the left side.

 *

 * Rotating the number right by a negative bit count is the same as rotating it left by the negated bit count:

 * `number.rotateRight(-n) == number.rotateLeft(n)`

 *

 * Rotating by a multiple of [Int.SIZE_BITS] (32) returns the same number, or more generally

 * `number.rotateRight(n) == number.rotateRight(n % 32)`

 */",f16929:m299
59113,"@kotlin.jvm.JvmName(""sumOfUInt"") @SinceKotlin(""1.5"") @WasExperimental(ExperimentalUnsignedTypes::class) public fun Iterable<UInt>.sum(): UInt","{
    var sum: UInt = 0u
    for (element in this) {
        sum += element
    }
    return sum
}","/**

 * Returns the sum of all elements in the collection.

 */",f17099:m145
57037,@kotlin.internal.InlineOnly public inline fun OutputStream.bufferedWriter(charset: Charset = Charsets.UTF_8): BufferedWriter,writer(charset).buffered(),/** Creates a buffered writer on this output stream using UTF-8 or the specified [charset]. */,f16952:m187
43627,"fun extractNativeCompilerCommandLineArguments(taskOutput: String, toolName: NativeToolKind): List<String>","extractNativeToolSettings(taskOutput, toolName, NativeToolSettingsKind.COMMAND_LINE_ARGUMENTS).toList()","/**

 * Extracts command line arguments of given task's output

 *

 * @param taskOutput debug level output of the task

 * @param toolName compiler type

 *

 * @return list of command line arguments

 */",f13467:m55
56074,@PublishedApi internal fun <T> Iterable<T>.collectionSizeOrDefault(default: Int): Int,if (this is Collection<*>) this.size else default,"/**

 * Returns the size of this iterable if it is known, or the specified [default] value otherwise.

 */",f16824:m69
63293,"private fun binarySearchRange(array: IntArray, needle: Int): Int","{
    var bottom = 0
    var top = array.size - 1
    var middle = -1
    var value = 0
    while (bottom <= top) {
        middle = (bottom + top) / 2
        value = array[middle]
        if (needle > value) bottom = middle + 1 else if (needle == value) return middle else top = middle - 1
    }
    return middle - (if (needle < value) 1 else 0)
}","/**

 * Returns the index of the largest element in [array] smaller or equal to the specified [needle],

 * or -1 if [needle] is smaller than the smallest element in [array].

 */",f17362:m589
15031,"@SinceKotlin(""1.4"") public actual fun maxOf(a: Short, vararg other: Short): Short","{
    var max = a
    for (e in other) max = maxOf(max, e)
    return max
}","/**

 * Returns the greater of the given values.

 */",f3836:m343
63512,"public actual fun IntArray.copyOfRange(fromIndex: Int, toIndex: Int): IntArray","{
    checkCopyOfRangeArguments(fromIndex, toIndex, size)
    return copyOfUninitializedElements(fromIndex, toIndex)
}","/**

 * Returns a new array which is a copy of the specified range of the original array.

 * 

 * @param fromIndex the start of the range (inclusive) to copy.

 * @param toIndex the end of the range (exclusive) to copy.

 * 

 * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.

 * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].

 */",f17396:m3145
14957,public actual operator fun LongArray.plus(element: Long): LongArray,"{
    val index = size
    val result = copyOfUninitializedElements(index + 1)
    result[index] = element
    return result
}","/**

 * Returns an array containing all elements of the original array and then the given [element].

 */",f3831:m4061
13961,"@Suppress(""ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS"") public actual fun String?.equals(other: String?, ignoreCase: Boolean = false): Boolean","{
    if (this === null) return other === null
    if (other === null) return false
    return if (!ignoreCase) this.equals(other) else if (length != other.length) false else unsafeRangeEqualsIgnoreCase(0, other, 0, length)
}","/**

 * Returns `true` if this string is equal to [other], optionally ignoring character case.

 *

 * Two strings are considered to be equal if they have the same length and the same character at the same index.

 * If [ignoreCase] is true, the result of `Char.uppercaseChar().lowercaseChar()` on each character is compared.

 *

 * @param ignoreCase `true` to ignore character case when comparing strings. By default `false`.

 */",f3713:m67
63568,public actual operator fun FloatArray.plus(elements: FloatArray): FloatArray,"{
    val thisSize = size
    val arraySize = elements.size
    val result = copyOfUninitializedElements(thisSize + arraySize)
    elements.copyInto(result, thisSize)
    return result
}","/**

 * Returns an array containing all elements of the original array and then all elements of the given [elements] array.

 */",f17396:m4557
46631,fun append(line: UnicodeDataLine),"{
    val charCode = line.char.hexToInt()
    val equivalent = mappingEquivalent(line)?.hexToInt() ?: return
    val mapping = equivalent - charCode
    check((charCode > Char.MAX_VALUE.code) == (equivalent > Char.MAX_VALUE.code)) { ""Handle when equivalent mapping is out of BMP."" }
    if (patterns.isEmpty()) {
        patterns.add(createPattern(charCode, line.categoryCode, mapping))
        return
    }
    val lastPattern = patterns.last()
    if (!lastPattern.append(charCode, line.categoryCode, mapping)) {
        val newLastPattern = evolveLastPattern(lastPattern, charCode, line.categoryCode, mapping)
        if (newLastPattern != null) {
            patterns[patterns.lastIndex] = newLastPattern
        } else {
            patterns.add(createPattern(charCode, line.categoryCode, mapping))
        }
    }
}","/**

     * Appends a line from the UnicodeData.txt file.

     */",f15085:m37
52756,@Test fun testGeneralPunctuationCategory(),"{
    val s = arrayOf("","", ""!"", ""\"""", ""#"", ""%"", ""&"", ""'"", ""("", "")"", ""-"", ""."", ""/"")
    val regexp = ""\\p{P}""
    for (i in s.indices) {
        val regex = Regex(regexp)
        assertTrue(regex.containsMatchIn(s[i]))
    }
}","/**

     * Regression test for HARMONY-3360

     */",f16571:m875
56516,"@SinceKotlin(""1.4"") @kotlin.internal.InlineOnly public inline fun StringBuilder.appendLine(value: StringBuilder?): StringBuilder",append(value).appendLine(),"/** Appends [value] to this [StringBuilder], followed by a line feed character (`\n`). */",f16890:m407
58525,"@SinceKotlin(""1.5"") @WasExperimental(ExperimentalStdlibApi::class, ExperimentalUnsignedTypes::class) @kotlin.internal.InlineOnly public inline fun UIntRange.randomOrNull(): UInt?","{
    return randomOrNull(Random)
}","/**

 * Returns a random element from this range, or `null` if this range is empty.

 */",f17090:m321
64216,@kotlin.internal.IntrinsicConstEvaluation public inline operator fun compareTo(other: Int): Int,this.compareTo(other.toLong()),"/**

     * Compares this value with the specified value for order.

     * Returns zero if this value is equal to the specified other value, a negative number if it's less than other,

     * or a positive number if it's greater than other.

     */",f17455:m2867
58034,@kotlin.internal.InlineOnly public inline operator fun times(other: ULong): ULong,this.toULong().times(other),/** Multiplies this value by the other value. */,f17058:m217
56629,@kotlin.internal.InlineOnly public inline fun <T> java.util.Enumeration<T>.toList(): List<T>,java.util.Collections.list(this),"/**

 * Returns a list containing the elements returned by this enumeration

 * in the order they are returned by the enumeration.

 * @sample samples.collections.Collections.Lists.listFromEnumeration

 */",f16923:m111
58770,public fun <T> Sequence<T>.takeWhile(predicate: (T) -> Boolean): Sequence<T>,"{
    return TakeWhileSequence(this, predicate)
}","/**

 * Returns a sequence containing first elements satisfying the given [predicate].

 *

 * The operation is _intermediate_ and _stateless_.

 * 

 * @sample samples.collections.Collections.Transformations.take

 */",f17096:m1137
64281,@kotlin.internal.IntrinsicConstEvaluation public inline operator fun compareTo(other: Int): Int,this.compareTo(other.toFloat()),"/**

     * Compares this value with the specified value for order.

     * Returns zero if this value is equal to the specified other value, a negative number if it's less than other,

     * or a positive number if it's greater than other.

     */",f17455:m3881
850,"fun String.underlineAsText(from: Int, to: Int): String","{
    val lines = StringBuilder()
    var marks = StringBuilder()
    var lineWasMarked = false
    for (i in indices) {
        val c = this[i]
        val mark: Char
        mark = when (i) {
            in from .. to -> '^'
            else -> ' '
        }
        lines.append(c)
        marks.append(mark)
        lineWasMarked = lineWasMarked || mark != ' '
        if (isEndOfLine(c.code)) {
            if (lineWasMarked) {
                lines.appendLine(marks.toString().trimEnd())
                lineWasMarked = false
            }
            marks = StringBuilder()
        }
    }
    if (lineWasMarked) {
        lines.appendLine()
        lines.append(marks.toString())
    }
    return lines.toString()
}","/**

 * Underlines string in given rage.

 *

 * For example:

 * var  = 10;

 *    ^^^^

 */",f228:m115
58957,public inline fun String.filterNot(predicate: (Char) -> Boolean): String,"{
    return filterNotTo(StringBuilder(), predicate).toString()
}","/**

 * Returns a string containing only those characters from the original string that do not match the given [predicate].

 * 

 * @sample samples.text.Strings.filterNot

 */",f17097:m963
56555,"public fun thread(start: Boolean = true, isDaemon: Boolean = false, contextClassLoader: ClassLoader? = null, name: String? = null, priority: Int = -1, block: () -> Unit): Thread","{
    val thread = object : Thread() {
        public override fun run() {
            block()
        }
    }
    if (isDaemon) thread.isDaemon = true
    if (priority > 0) thread.priority = priority
    if (name != null) thread.name = name
    if (contextClassLoader != null) thread.contextClassLoader = contextClassLoader
    if (start) thread.start()
    return thread
}","/**

 * Creates a thread that runs the specified [block] of code.

 *

 * @param start if `true`, the thread is immediately started.

 * @param isDaemon if `true`, the thread is created as a daemon thread. The Java Virtual Machine exits when

 * the only threads running are all daemon threads.

 * @param contextClassLoader the class loader to use for loading classes and resources in this thread.

 * @param name the name of the thread.

 * @param priority the priority of the thread.

 */",f16895:m19
58150,@kotlin.internal.InlineOnly public inline operator fun minus(other: UShort): UInt,this.minus(other.toUInt()),/** Subtracts the other value from this value. */,f17063:m179
59099,"@SinceKotlin(""1.5"") @WasExperimental(ExperimentalUnsignedTypes::class) public fun minOf(a: UByte, b: UByte): UByte","{
    return if (a <= b) a else b
}","/**

 * Returns the smaller of two values.

 */",f17098:m313
15377,@Test fun absI(),"{
    assertTrue(""Incorrect int abs value"", abs(-1908897) == 1908897)
    assertTrue(""Incorrect int abs value"", abs(1908897) == 1908897)
}","/**

     * Tests kotlin.math.abs(int)

     */",f3868:m181
14856,"@Deprecated(""Use Kotlin compiler 1.4 to avoid deprecation warning."") @SinceKotlin(""1.1"") @DeprecatedSinceKotlin(hiddenSince = ""1.4"") public fun ShortArray.contentHashCode(): Int","{
    return this.contentHashCode()
}","/**

 * Returns a hash code based on the contents of this array as if it is [List].

 */",f3831:m1445
20245,"public fun KtType.asPsiType(useSitePosition: PsiElement, allowErrorTypes: Boolean, mode: KtTypeMappingMode = KtTypeMappingMode.DEFAULT, isAnnotationMethod: Boolean = false, suppressWildcards: Boolean? = null, preserveAnnotations: Boolean = true): PsiType?","withValidityAssertion { analysisSession.psiTypeProvider.asPsiType(type = this, useSitePosition = useSitePosition, allowErrorTypes = allowErrorTypes, mode = mode, isAnnotationMethod = isAnnotationMethod, suppressWildcards = suppressWildcards, preserveAnnotations = preserveAnnotations) }","/**

     * Converts the given [KtType] to [PsiType] under [useSitePosition] context.

     *

     * Note: [PsiType] is JVM conception, so this method will return `null` for non-JVM platforms.

     *

     * @receiver type to convert

     *

     * @param useSitePosition is used to determine if the given [KtType] needs to be approximated.

     * For instance, if the given type is local yet available in the same scope of use site,

     * we can still use such a local type.

     * Otherwise, e.g., exposed to public as a return type, the resulting type will be approximated accordingly.

     *

     * @param allowErrorTypes if **false** the result will be null in the case of an error type inside the [type][this].

     * Erroneous types will be replaced with `error.NonExistentClass` type.

     *

     * @param suppressWildcards indicates whether wild cards in type arguments need to be suppressed or not,

     * e.g., according to the annotation on the containing declarations.

     * - `true` means they should be suppressed.

     * - `false` means they should appear.

     * - `null` is no-op by default, i.e., their suppression/appearance is determined by type annotations.

     *

     * @param preserveAnnotations if **true** the result [PsiType] will have converted annotations from the original [type][this]

     */",f5802:m63
56240,"@SinceKotlin(""1.5"") @kotlin.internal.InlineOnly @kotlin.internal.IntrinsicConstEvaluation public inline fun Int.mod(other: Int): Int","{
    val r = this % other
    return r + (other and (((r xor other) and (r or -r)) shr 31))
}","/**

 * Calculates the remainder of flooring division of this value (dividend) by the other value (divisor).

 *

 * The result is either zero or has the same sign as the _divisor_ and has the absolute value less than the absolute value of the divisor.

 */",f16842:m409
48530,"fun findTest(namePrefix: String, buildType: String): TestExecutable?","findTest(namePrefix, NativeBuildType.valueOf(buildType.toUpperCaseAsciiOnly()))",/** Returns a test executable with the given [namePrefix] and the given build type. Returns null if there is no such binary. */,f15652:m321
20198,public fun PsiElement.getExpectedType(): KtType?,withValidityAssertion { analysisSession.expressionTypeProvider.getExpectedType(this) },"/**

     * Returns the expected [KtType] of this [PsiElement] if it is an expression. The returned value should not be a

     * [org.jetbrains.kotlin.analysis.api.types.KtErrorType].

     */",f5788:m119
14838,"@Deprecated(""Use Kotlin compiler 1.4 to avoid deprecation warning."") @SinceKotlin(""1.1"") @DeprecatedSinceKotlin(hiddenSince = ""1.4"") public infix fun ShortArray.contentEquals(other: ShortArray): Boolean","{
    return this.contentEquals(other)
}","/**

 * Checks if the two specified arrays are *structurally* equal to one another.

 * 

 * Two arrays are considered structurally equal if they have the same size, and elements at corresponding indices are equal.

 * 

 * @param other the array to compare with this array.

 * @return `true` if the two arrays are structurally equal, `false` otherwise.

 * 

 * @sample samples.collections.Arrays.ContentOperations.intArrayContentEquals

 */",f3831:m729
56996,"@SinceKotlin(""1.8"") @WasExperimental(ExperimentalTime::class) public fun TimeUnit.toDurationUnit(): DurationUnit","when (this) {
    TimeUnit.NANOSECONDS -> DurationUnit.NANOSECONDS
    TimeUnit.MICROSECONDS -> DurationUnit.MICROSECONDS
    TimeUnit.MILLISECONDS -> DurationUnit.MILLISECONDS
    TimeUnit.SECONDS -> DurationUnit.SECONDS
    TimeUnit.MINUTES -> DurationUnit.MINUTES
    TimeUnit.HOURS -> DurationUnit.HOURS
    TimeUnit.DAYS -> DurationUnit.DAYS
}","/**

 * Converts this [java.util.concurrent.TimeUnit][java.util.concurrent.TimeUnit] enum value to the corresponding [kotlin.time.DurationUnit][DurationUnit] value.

 */",f16946:m105
48986,@ExternalKotlinTargetApi fun IdeDependencyTransformer(transformers: List<IdeDependencyTransformer?>): IdeDependencyTransformer,IdeCompositeDependencyTransformer(transformers.filterNotNull()),"/**

 * Create a composite [IdeDependencyTransformer]

 * `null` instances will just be ignored.

 * The transformers will be invoked in the same order as specified to this function.

 */",f15728:m67
53139,@PublishedApi internal actual fun checkRadix(radix: Int): Int,"{
    if (radix !in 2 .. 36) {
        throw IllegalArgumentException(""radix $radix was not in valid range 2..36"")
    }
    return radix
}","/**

 * Checks whether the given [radix] is valid radix for string to number and number to string conversion.

 */",f16618:m281
58618,"@Deprecated(""This `contains` operation mixing integer and floating point arguments has ambiguous semantics and is going to be removed."") @DeprecatedSinceKotlin(warningSince = ""1.3"", errorSince = ""1.4"", hiddenSince = ""1.5"") @kotlin.jvm.JvmName(""doubleRangeContains"") public operator fun ClosedRange<Double>.contains(value: Int): Boolean","{
    return contains(value.toDouble())
}","/**

 * Checks if the specified [value] belongs to this range.

 */",f17092:m1071
58613,"@kotlin.jvm.JvmName(""doubleRangeContains"") public operator fun ClosedRange<Double>.contains(value: Float): Boolean","{
    return contains(value.toDouble())
}","/**

 * Checks if the specified [value] belongs to this range.

 */",f17092:m987
16207,"fun runLazyResolverByPhase(phase: FirResolvePhase, target: LLFirResolveTarget)","{
    val lazyResolver = LLFirLazyPhaseResolverByPhase.getByPhase(phase)
    LLFirGlobalResolveComponents.getInstance(target.session).lockProvider.withGlobalLock { lazyResolver.resolve(target) }
}","/**

     * Runs [resolver][LLFirLazyResolver] associated with [phase] for [target].

     *

     * @see LLFirLazyPhaseResolverByPhase

     */",f4082:m41
7374,fun main(args: Array<String>),"{
    printMaze(""I  $"")
    printMaze(""I O $"")
    printMaze(""""""
    
        O  $
    
        O
    
        O
    
        O
    
        O           I
    
      """""".trimIndent())
    printMaze(""""""
    
        OOOOOOOOOOO
    
        O $       O
    
        OOOOOOO OOO
    
        O         O
    
        OOOOO OOOOO
    
        O         O
    
        O OOOOOOOOO
    
        O        OO
    
        OOOOOO   IO
    
      """""".trimIndent())
    printMaze(""""""
    
        OOOOOOOOOOOOOOOOO
    
        O               O
    
        O$  O           O
    
        OOOOO           O
    
        O               O
    
        O  OOOOOOOOOOOOOO
    
        O           O I O
    
        O               O
    
        OOOOOOOOOOOOOOOOO
    
      """""".trimIndent())
}",/** A few maze examples here */,f3085:m199
20378,public fun getCallableSymbols(vararg names: Name): Sequence<KtCallableSymbol>,getCallableSymbols(names.toList()),"/**

     * Return a sequence of [KtCallableSymbol] which current scope contain, if declaration name present in [names]

     *

     * @see getCallableSymbols

     */",f5837:m79
63484,"@SinceKotlin(""1.3"") @Suppress(""ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS"") public actual fun ShortArray.copyInto(destination: ShortArray, destinationOffset: Int = 0, startIndex: Int = 0, endIndex: Int = size): ShortArray","{
    AbstractList.checkRangeIndexes(startIndex, endIndex, this.size)
    val rangeSize = endIndex - startIndex
    AbstractList.checkRangeIndexes(destinationOffset, destinationOffset + rangeSize, destination.size)
    kotlin.wasm.internal.copyWasmArray(this.storage, destination.storage, startIndex, destinationOffset, rangeSize)
    return destination
}","/**

 * Copies this array or its subrange into the [destination] array and returns that array.

 * 

 * It's allowed to pass the same array in the [destination] and even specify the subrange so that it overlaps with the destination range.

 * 

 * @param destination the array to copy to.

 * @param destinationOffset the position in the [destination] array to copy to, 0 by default.

 * @param startIndex the beginning (inclusive) of the subrange to copy, 0 by default.

 * @param endIndex the end (exclusive) of the subrange to copy, size of this array by default.

 * 

 * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of this array indices or when `startIndex > endIndex`.

 * @throws IndexOutOfBoundsException when the subrange doesn't fit into the [destination] array starting at the specified [destinationOffset],

 * or when that index is out of the [destination] array indices range.

 * 

 * @return the [destination] array.

 */",f17396:m2301
16568,private fun KtSourceElement.isSourceForCompoundAccess(fir: FirElement): Boolean,"{
    val psi = psi
    val parentPsi = psi?.parent
    if (kind !is KtFakeSourceElementKind.DesugaredAugmentedAssign && kind !is KtFakeSourceElementKind.DesugaredIncrementOrDecrement) {
        return false
    }
    return when {
        psi is KtBinaryExpression || psi is KtUnaryExpression -> fir.isWriteInCompoundCall()
        parentPsi is KtBinaryExpression && psi == parentPsi.left -> fir.isReadInCompoundCall()
        parentPsi is KtUnaryExpression && psi == parentPsi.baseExpression -> fir.isReadInCompoundCall()
        else -> false
    }
}","/**

     * FIR represents compound assignment and inc/dec operations as multiple smaller instructions. Here we choose the write operation as the

     * resolved FirElement for binary and unary expressions. For example, the `FirVariableAssignment` or the call to `set` or `plusAssign`

     * function, etc. This is because the write FirElement can be used to retrieve all other information related to this compound operation.



     * On the other hand, if the PSI is the left operand of an assignment or the base expression of a unary expression, we take the read FIR

     * element so the user of the Analysis API is able to retrieve such read calls reliably.

     */",f4133:m273
19620,"private fun isKotlinWithCompatibleAbiVersion(file: VirtualFile, jvmMetadataVersion: JvmMetadataVersion): Boolean","{
    val clsKotlinBinaryClassCache = ClsKotlinBinaryClassCache.getInstance()
    if (!clsKotlinBinaryClassCache.isKotlinJvmCompiledFile(file)) return false
    val kotlinClass = clsKotlinBinaryClassCache.getKotlinBinaryClassHeaderData(file)
    return kotlinClass != null && kotlinClass.metadataVersion.isCompatible(jvmMetadataVersion)
}","/**

 * Checks if this file is a compiled Kotlin class file ABI-compatible with the current plugin

 */",f5624:m99
9282,"private fun InteropCallContext.findMemoryAccessFunction(isRead: Boolean, valueType: IrType): IrFunction","{
    val requiredType = if (isRead) {
        IntrinsicType.INTEROP_READ_PRIMITIVE
    } else {
        IntrinsicType.INTEROP_WRITE_PRIMITIVE
    }
    val nativeMemUtilsClass = symbols.nativeMemUtils.owner
    return nativeMemUtilsClass.functions.filter {
        val annotationArgument = it.annotations.findAnnotation(RuntimeNames.typedIntrinsicAnnotation)?.getAnnotationStringValue()
        annotationArgument == requiredType.name
    }.firstOrNull { if (isRead) {
        it.returnType.classOrNull == valueType.classOrNull
    } else {
        it.valueParameters.last().type.classOrNull == valueType.classOrNull
    } } ?: error(""No memory access function for ${valueType.classOrNull?.owner?.name}"")
}","/**

 * Search for memory read/write function in [kotlinx.cinterop.nativeMemUtils] of a given [valueType].

 */",f3339:m93
58890,public operator fun <T> Sequence<T>.plus(elements: Array<out T>): Sequence<T>,"{
    return this.plus(elements.asList())
}","/**

 * Returns a sequence containing all elements of original sequence and then all elements of the given [elements] array.

 * 

 * Note that the source sequence and the array being added are iterated only when an `iterator` is requested from

 * the resulting sequence. Changing any of them between successive calls to `iterator` may affect the result.

 *

 * The operation is _intermediate_ and _stateless_.

 */",f17096:m5455
63440,"@SinceKotlin(""1.4"") public actual infix fun IntArray?.contentEquals(other: IntArray?): Boolean","{
    if (this === other) return true
    if (this === null || other === null) return false
    if (size != other.size) return false
    for (i in indices) {
        if (this[i] != other[i]) return false
    }
    return true
}","/**

 * Checks if the two specified arrays are *structurally* equal to one another.

 * 

 * Two arrays are considered structurally equal if they have the same size, and elements at corresponding indices are equal.

 * 

 * The arrays are also considered structurally equal if both are `null`.

 * 

 * @param other the array to compare with this array.

 * @return `true` if the two arrays are structurally equal, `false` otherwise.

 * 

 * @sample samples.collections.Arrays.ContentOperations.intArrayContentEquals

 */",f17396:m1121
15898,@Operation fun computeRemoveValue(key: Int): ValueWithCleanup?,"cache.compute(key) { _, _ -> null }","/**

     * Models a computation that removes the cache's existing value for [key] (if any).

     */",f4020:m131
54889,"@ExperimentalJsExport @ExperimentalJsCollectionsApi @SinceKotlin(""2.0"") public fun asJsReadonlyArrayView(): JsReadonlyArray<E>",createJsReadonlyArrayViewFrom(this),"/**

     * Returns a view with the [JsReadonlyArray] methods to consume it in JavaScript as a regular readonly array.

     * Structural changes in the base list are synchronized with the view.

     */",f16726:m399
48903,internal fun <T> KotlinGradlePluginExtensionPoint(): KotlinGradlePluginExtensionPoint<T>,"{
    @OptIn(UnsafeApi::class) return KotlinGradlePluginExtensionPointInternal()
}","/**

 * Creates a new [KotlinGradlePluginExtensionPoint]

 * See [KotlinGradlePluginExtensionPoint] documentation for the intended usage!

 */",f15703:m23
24363,"private fun checkComposableFunction(function: FirFunction, nonReadOnlyCallInsideFunction: KtSourceElement?, context: CheckerContext, reporter: DiagnosticReporter): ComposableCheckForScopeStatus","{
    if (function.hasComposableAnnotation(context.session)) {
        if (function.hasReadOnlyComposableAnnotation(context.session) && nonReadOnlyCallInsideFunction != null) {
            reporter.reportOn(nonReadOnlyCallInsideFunction, ComposeErrors.NONREADONLY_CALL_IN_READONLY_COMPOSABLE, context)
        }
        return ComposableCheckForScopeStatus.STOP
    }
    if (function is FirPropertyAccessor && function.propertySymbol.hasDelegate) {
        if (function.propertySymbol.isVar) {
            reporter.reportOn(function.source, ComposeErrors.COMPOSE_INVALID_DELEGATE, context)
        }
        if (!function.propertySymbol.isLocal) {
            reporter.reportOn(function.propertySymbol.source, ComposeErrors.COMPOSABLE_EXPECTED, context)
        }
        return ComposableCheckForScopeStatus.STOP
    }
    val source = if (function is FirPropertyAccessor) {
        function.propertySymbol.source
    } else {
        function.source
    }
    reporter.reportOn(source, ComposeErrors.COMPOSABLE_EXPECTED, context)
    return ComposableCheckForScopeStatus.CONTINUE
}","/**

 * This function will be called by [visitCurrentScope], and this function determines

 * whether it will continue the composable element check for the scope or not

 * by returning [ComposableCheckForScopeStatus].

 */",f9187:m381
14913,public actual fun DoubleArray.copyOf(newSize: Int): DoubleArray,"{
    return this.copyOfUninitializedElements(newSize)
}","/**

 * Returns new array which is a copy of the original array, resized to the given [newSize].

 * The copy is either truncated or padded at the end with zero values if necessary.

 * 

 * - If [newSize] is less than the size of the original array, the copy array is truncated to the [newSize].

 * - If [newSize] is greater than the size of the original array, the extra elements in the copy array are filled with zero values.

 * 

 * @sample samples.collections.Arrays.CopyOfOperations.resizedPrimitiveCopyOf

 */",f3831:m2905
59043,"@SinceKotlin(""1.4"") public fun CharSequence.minWithOrNull(comparator: Comparator<in Char>): Char?","{
    if (isEmpty()) return null
    var min = this[0]
    for (i in 1 .. lastIndex) {
        val e = this[i]
        if (comparator.compare(min, e) > 0) min = e
    }
    return min
}","/**

 * Returns the first character having the smallest value according to the provided [comparator] or `null` if there are no characters.

 */",f17097:m3483
47964,internal fun setupAttributesMatchingStrategy(attributesSchema: AttributesSchema),"{
    attributesSchema.attribute(attribute)
}","/**

     * Sets up the attributes matching strategy for the given attributes schema.

     *

     * @param attributesSchema The attributes schema to set up the matching strategy for.

     */",f15493:m63
38078,"public fun runSwiftExport(input: InputModule, config: SwiftExportConfig = SwiftExportConfig(), output: SwiftExportOutput)","{
    val stableDeclarationsOrder = config.settings.containsKey(STABLE_DECLARATIONS_ORDER)
    val renderDocComments = config.settings[RENDER_DOC_COMMENTS] != ""false""
    val bridgeModuleName = config.settings.getOrElse(BRIDGE_MODULE_NAME) {
        config.logger.report(SwiftExportLogger.Severity.Warning, ""Bridging header is not set. Using $DEFAULT_BRIDGE_MODULE_NAME instead"")
        DEFAULT_BRIDGE_MODULE_NAME
    }
    val module = buildSwiftModule(input, config.distribution, bridgeModuleName = bridgeModuleName)
    val bridgeRequests = module.buildFunctionBridges()
    module.dumpResultToFiles(bridgeRequests, output, stableDeclarationsOrder = stableDeclarationsOrder, renderDocComments = renderDocComments)
}","/**

 * A root function for running Swift Export from build tool

 */",f12055:m171
67803,"private fun appendDefaultArgumentsForLocalClassifier(fromIndex: Int, constructorParameters: List<TypeParameterDescriptor>)","constructorParameters.subList(fromIndex, constructorParameters.size).map { TypeProjectionImpl(it.original.defaultType) }","/**

     * For cases like:

     * fun <E> foo() {

     *  class Local<F>

     *  val x: Local<Int> <-- resolve this type

     * }

     *

     * type constructor for `Local` captures type parameter E from containing outer function

     */",f19246:m1945
64067,public operator fun rangeTo(other: Byte): IntRange,"IntRange(this.toInt(), other.toInt())",/** Creates a range from this value to the specified [other] value. */,f17455:m603
64215,@kotlin.internal.IntrinsicConstEvaluation public inline operator fun compareTo(other: Short): Int,this.compareTo(other.toLong()),"/**

     * Compares this value with the specified value for order.

     * Returns zero if this value is equal to the specified other value, a negative number if it's less than other,

     * or a positive number if it's greater than other.

     */",f17455:m2849
55536,internal fun fromNumber(value: Double): Long,"{
    if (value.isNaN()) {
        return ZERO
    } else if (value <= -TWO_PWR_63_DBL_) {
        return MIN_VALUE
    } else if (value + 1 >= TWO_PWR_63_DBL_) {
        return MAX_VALUE
    } else if (value < 0) {
        return fromNumber(-value).negate()
    } else {
        val twoPwr32 = TWO_PWR_32_DBL_
        return Long(jsBitwiseOr(value.rem(twoPwr32), 0), jsBitwiseOr(value / twoPwr32, 0))
    }
}","/**

 * Converts this [Double] value to [Long].

 * The fractional part, if any, is rounded down towards zero.

 * Returns zero if this `Double` value is `NaN`, [Long.MIN_VALUE] if it's less than `Long.MIN_VALUE`,

 * [Long.MAX_VALUE] if it's bigger than `Long.MAX_VALUE`.

 */",f16755:m691
58476,"public inline fun <K, V, R, C: MutableCollection<in R>> Map<out K, V>.mapTo(destination: C, transform: (Map.Entry<K, V>) -> R): C","{
    for (item in this) destination.add(transform(item))
    return destination
}","/**

 * Applies the given [transform] function to each entry of the original map

 * and appends the results to the given [destination].

 */",f17089:m295
54784,"@Deprecated(""Use other sorting functions from the Standard Library"") @DeprecatedSinceKotlin(warningSince = ""1.6"") @kotlin.internal.InlineOnly public inline fun LongArray.sort(noinline comparison: (a: Long, b: Long) -> Int): Unit","{
    nativeSort(comparison)
}","/**

 * Sorts the array in-place according to the order specified by the given [comparison] function.

 */",f16713:m3617
57201,public fun <T> Sequence<T>.toSortedSet(comparator: Comparator<in T>): java.util.SortedSet<T>,"{
    return toCollection(java.util.TreeSet<T>(comparator))
}","/**

 * Returns a new [SortedSet][java.util.SortedSet] of all elements.

 * 

 * Elements in the set returned are sorted according to the given [comparator].

 *

 * The operation is _terminal_.

 */",f16968:m101
56453,public operator fun plus(duration: Duration): TimeMark,"AdjustedTimeMark(this, duration)","/**

     * Returns a time mark on the same time source that is ahead of this time mark by the specified [duration].

     *

     * The returned time mark is more _late_ when the [duration] is positive, and more _early_ when the [duration] is negative.

     *

     * If the time mark is adjusted too far in the past or in the future, it may saturate to an infinitely distant time mark.

     * In that case, [elapsedNow] will return an infinite duration elapsed from such infinitely distant mark.

     *

     * @throws IllegalArgumentException an implementation may throw if a positive infinite duration is added to an infinitely distant past time mark or

     * a negative infinite duration is added to an infinitely distant future time mark.

     */",f16867:m261
20246,public fun PsiType.asKtType(useSitePosition: PsiElement): KtType?,"withValidityAssertion { analysisSession.psiTypeProvider.asKtType(this, useSitePosition) }","/**

     * Converts given [PsiType] to [KtType].

     *

     * [useSitePosition] may be used to clarify how to resolve some parts of [PsiType].

     * For instance, it can be used to collect type parameters and use them during the conversion.

     *

     * @receiver [PsiType] to be converted.

     * @return The converted [KtType], or null if conversion is not possible e.g., [PsiType] is not resolved

     */",f5802:m147
56553,"@kotlin.internal.InlineOnly public inline fun fixedRateTimer(name: String? = null, daemon: Boolean = false, startAt: Date, period: Long, crossinline action: TimerTask.() -> Unit): Timer","{
    val timer = timer(name, daemon)
    timer.scheduleAtFixedRate(startAt, period, action)
    return timer
}","/**

 * Creates a timer that executes the specified [action] periodically, starting at the specified [startAt] date

 * and with the interval of [period] milliseconds between the start of the previous task and the start of the next one.

 *

 * @param name the name to use for the thread which is running the timer.

 * @param daemon if `true`, the thread is started as a daemon thread (the VM will exit when only daemon threads are running).

 */",f16894:m255
56040,"public inline fun <K, V> Map<out K, V>.filter(predicate: (Map.Entry<K, V>) -> Boolean): Map<K, V>","{
    return filterTo(LinkedHashMap<K, V>(), predicate)
}","/**

 * Returns a new map containing all key-value pairs matching the given [predicate].

 *

 * The returned map preserves the entry iteration order of the original map.

 * @sample samples.collections.Maps.Filtering.filter

 */",f16823:m1055
57285,"@SinceKotlin(""1.4"") @kotlin.internal.InlineOnly public actual inline fun CharArray?.contentToString(): String","{
    return java.util.Arrays.toString(this)
}","/**

 * Returns a string representation of the contents of the specified array as if it is [List].

 * 

 * @sample samples.collections.Arrays.ContentOperations.contentToString

 */",f16970:m1803
63470,"@Deprecated(""Use Kotlin compiler 1.4 to avoid deprecation warning."") @SinceKotlin(""1.1"") @DeprecatedSinceKotlin(hiddenSince = ""1.4"") public fun DoubleArray.contentToString(): String","{
    return this.contentToString()
}","/**

 * Returns a string representation of the contents of the specified array as if it is [List].

 * 

 * @sample samples.collections.Arrays.ContentOperations.contentToString

 */",f17396:m1945
56311,"@SinceKotlin(""1.1"") public operator fun Double.rangeTo(that: Double): ClosedFloatingPointRange<Double>","ClosedDoubleRange(this, that)","/**

 * Creates a range from this [Double] value to the specified [that] value.

 *

 * Numbers are compared with the ends of this range according to IEEE-754.

 * @sample samples.ranges.Ranges.rangeFromDouble

 */",f16848:m239
14824,public actual fun IntArray.asList(): List<Int>,"{
    return object : AbstractList<Int>(), RandomAccess {
        override val size: Int get() = this@asList.size
    
        override fun isEmpty(): Boolean = this@asList.isEmpty()
    
        override fun contains(element: Int): Boolean = this@asList.contains(element)
    
        override fun get(index: Int): Int = this@asList[index]
    
        override fun indexOf(element: Int): Int = this@asList.indexOf(element)
    
        override fun lastIndexOf(element: Int): Int = this@asList.lastIndexOf(element)
    }
}","/**

 * Returns a [List] that wraps the original array.

 */",f3831:m295
15385,@Test fun withSign_F(),"{
    for (i in COPYSIGN_FF_CASES.indices) {
        val magnitude = COPYSIGN_FF_CASES[i]
        val absMagnitudeBits = abs(magnitude).toBits()
        val negMagnitudeBits = (-abs(magnitude)).toBits()
        assertTrue(""The result should be NaN."", Float.isNaN(Float.NaN.withSign(magnitude)))
        for (j in COPYSIGN_FF_CASES.indices) {
            val sign = COPYSIGN_FF_CASES[j]
            val resultBits = magnitude.withSign(sign).toBits()
            if (sign > 0 || (+0.0f).toBits() == sign.toBits() || 0.0f.toBits() == sign.toBits()) {
                assertEquals(""If the sign is positive, the result should be positive."", absMagnitudeBits, resultBits)
            }
            if (sign < 0 || (-0.0f).toBits() == sign.toBits()) {
                assertEquals(""If the sign is negative, the result should be negative."", negMagnitudeBits, resultBits)
            }
        }
    }
    assertTrue(""The result should be NaN."", Float.isNaN(Float.NaN.withSign(Float.NaN)))
}","/**

     * Tests kotlin.math.withSign(Float)

     */",f3868:m385
54778,"@SinceKotlin(""1.4"") @Suppress(""ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS"") public actual fun FloatArray.sort(fromIndex: Int = 0, toIndex: Int = size): Unit","{
    AbstractList.checkRangeIndexes(fromIndex, toIndex, size)
    val subarray = this.asDynamic().subarray(fromIndex, toIndex).unsafeCast<FloatArray>()
    subarray.sort()
}","/**

 * Sorts a range in the array in-place.

 * 

 * @param fromIndex the start of the range (inclusive) to sort, 0 by default.

 * @param toIndex the end of the range (exclusive) to sort, size of this array by default.

 * 

 * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.

 * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].

 * 

 * @sample samples.collections.Arrays.Sorting.sortRangeOfArray

 */",f16713:m3445
52031,fun makeFailureResult(vararg reports: ScriptDiagnostic): ResultWithDiagnostics.Failure,ResultWithDiagnostics.Failure(reports.asList()),"/**

 * Makes Failure result with optional diagnostic [reports]

 */",f16426:m449
52650,actual override fun remove(element: E): Boolean,"{
    val it = iterator()
    while (it.hasNext()) {
        if (it.next() == element) {
            it.remove()
            return true
        }
    }
    return false
}","/**

     * Removes a single instance of the specified element from this

     * collection, if it is present.

     *

     * @return `true` if the element has been successfully removed; `false` if it was not present in the collection.

     */",f16554:m57
54759,"@Suppress(""NOTHING_TO_INLINE"") public actual inline operator fun FloatArray.plus(elements: FloatArray): FloatArray","{
    return primitiveArrayConcat(this, elements)
}","/**

 * Returns an array containing all elements of the original array and then all elements of the given [elements] array.

 */",f16713:m3003
54808,"@SinceKotlin(""1.1"") @kotlin.internal.InlineOnly public actual inline fun maxOf(a: Int, b: Int, c: Int): Int","{
    return JsMath.max(a, b, c)
}","/**

 * Returns the greater of three values.

 */",f16714:m221
58495,"@SinceKotlin(""1.7"") @kotlin.jvm.JvmName(""minByOrThrow"") @kotlin.internal.InlineOnly @Suppress(""CONFLICTING_OVERLOADS"") public inline fun <K, V, R: Comparable<R>> Map<out K, V>.minBy(selector: (Map.Entry<K, V>) -> R): Map.Entry<K, V>","{
    return entries.minBy(selector)
}","/**

 * Returns the first entry yielding the smallest value of the given function.

 * 

 * @throws NoSuchElementException if the map is empty.

 * 

 * @sample samples.collections.Collections.Aggregates.minBy

 */",f17089:m757
58993,"public inline fun <K, M: MutableMap<in K, MutableList<Char>>> CharSequence.groupByTo(destination: M, keySelector: (Char) -> K): M","{
    for (element in this) {
        val key = keySelector(element)
        val list = destination.getOrPut(key) { ArrayList<Char>() }
        list.add(element)
    }
    return destination
}","/**

 * Groups characters of the original char sequence by the key returned by the given [keySelector] function

 * applied to each character and puts to the [destination] map each group key associated with a list of corresponding characters.

 * 

 * @return The [destination] map.

 * 

 * @sample samples.collections.Collections.Transformations.groupBy

 */",f17097:m1837
14050,public fun getAndAdd(delta: Int): Int,this::value.getAndAddField(delta),"/**

     * Atomically adds the [given value][delta] to the current value and returns the old value.

     */",f3718:m83
12240,"private fun processCodeSnippet(functionCursor: CValue<CXCursor>, name: String, typeConverter: TypeConverter): MacroDef?","{
    val kindsToSkip = setOf(CXCursorKind.CXCursor_CompoundStmt)
    var state = VisitorState.EXPECT_NODES_TO_SKIP
    var evalResultOrNull: CXEvalResult? = null
    var typeOrNull: Type? = null
    val visitor: CursorVisitor = { cursor, _ ->
        val kind = cursor.kind
        when {
            state == VisitorState.EXPECT_VARIABLE && kind == CXCursorKind.CXCursor_VarDecl -> {
                evalResultOrNull = clang_Cursor_Evaluate(cursor)
                state = VisitorState.EXPECT_VARIABLE_VALUE
                CXChildVisitResult.CXChildVisit_Recurse
            }
            state == VisitorState.EXPECT_VARIABLE_VALUE && clang_isExpression(kind) != 0 -> {
                typeOrNull = typeConverter(clang_getCursorType(cursor))
                state = VisitorState.EXPECT_END
                CXChildVisitResult.CXChildVisit_Continue
            }
            state == VisitorState.EXPECT_NODES_TO_SKIP && kind in kindsToSkip -> CXChildVisitResult.CXChildVisit_Recurse
            state == VisitorState.EXPECT_NODES_TO_SKIP && kind == CXCursorKind.CXCursor_DeclStmt -> {
                state = VisitorState.EXPECT_VARIABLE
                CXChildVisitResult.CXChildVisit_Recurse
            }
            else -> {
                state = VisitorState.INVALID
                CXChildVisitResult.CXChildVisit_Break
            }
        }
    }
    try {
        visitChildren(functionCursor, visitor)
        if (state != VisitorState.EXPECT_END) {
            return null
        }
        val type = typeOrNull!!
        return if (evalResultOrNull == null) { when (type.unwrapTypedefs()) {
            is PrimitiveType, is PointerType, is ObjCPointer -> WrappedMacroDef(name, type)
            else -> null
        } } else {
            val evalResult = evalResultOrNull!!
            val evalResultKind = clang_EvalResult_getKind(evalResult)
            when (evalResultKind) {
                CXEvalResultKind.CXEval_Int -> IntegerConstantDef(name, type, clang_EvalResult_getAsLongLong(evalResult))
                CXEvalResultKind.CXEval_Float -> FloatingConstantDef(name, type, clang_EvalResult_getAsDouble(evalResult))
                CXEvalResultKind.CXEval_CFStr, CXEvalResultKind.CXEval_ObjCStrLiteral, CXEvalResultKind.CXEval_StrLiteral -> if (evalResultKind == CXEvalResultKind.CXEval_StrLiteral && !type.canonicalIsPointerToChar()) {
                    null
                } else {
                    StringConstantDef(name, type, clang_EvalResult_getAsStr(evalResult)!!.toKString())
                }
                CXEvalResultKind.CXEval_Other, CXEvalResultKind.CXEval_UnExposed -> null
            }
        }
    } finally {
        evalResultOrNull?.let { clang_EvalResult_dispose(it) }
    }
}","/**

 * Checks that [functionCursor] is parsed exactly as expected for the code appended by [reparseWithCodeSnippets],

 * and returns the constant on success.

 */",f3629:m377
49765,@ExternalKotlinTargetApi fun Jar.includeSources(compilation: DecoratedExternalKotlinCompilation),"{
    includeSources(compilation.internal)
}","/**

 *

 * Will add all sources (including transitive dependsOn edges) from the compilation into this jar task given

 * the multiplatform convention.

 *

 * e.g.

 * ```

 * src/commonMain/kotlin/CommonMain.kt

 * src/jvmMain/kotlin/JvmMain.kt

 * ```

 *

 * will be packaged like

 * ```

 * /commonMain/CommonMain.kt

 * /jvmMain/JvmMain.kt

 * ```

 *

 * @since 1.9.20

 */",f15951:m35
56496,"@SinceKotlin(""1.2"") @kotlin.internal.InlineOnly public inline fun String.toBigDecimal(mathContext: java.math.MathContext): java.math.BigDecimal","java.math.BigDecimal(this, mathContext)","/**

 * Parses the string as a [java.math.BigDecimal] number and returns the result.

 * @throws NumberFormatException if the string is not a valid representation of a number.

 *

 * @param mathContext specifies the precision and the rounding mode.

 * @throws ArithmeticException if the rounding is needed, but the rounding mode is [java.math.RoundingMode.UNNECESSARY].

 */",f16885:m421
58626,"@kotlin.jvm.JvmName(""shortRangeContains"") public operator fun ClosedRange<Short>.contains(value: Long): Boolean","{
    return value.toShortExactOrNull().let { if (it != null) contains(it) else false }
}","/**

 * Checks if the specified [value] belongs to this range.

 */",f17092:m1219
45734,"@Deprecated(message = ""Do not use in your build script"", level = DeprecationLevel.ERROR) fun warnNpmGenerateExternals(logger: Logger)","{
    logger.warn(""""""
    
            |
    
            |==========
    
            |Please note, Dukat integration in Gradle plugin does not work now.
    
            |It is in redesigning process.
    
            |==========
    
            |
    
            """""".trimMargin())
}","/**

 * @suppress

 */",f14922:m147
58797,"public inline fun <T, K> Sequence<T>.groupBy(keySelector: (T) -> K): Map<K, List<T>>","{
    return groupByTo(LinkedHashMap<K, MutableList<T>>(), keySelector)
}","/**

 * Groups elements of the original sequence by the key returned by the given [keySelector] function

 * applied to each element and returns a map where each group key is associated with a list of corresponding elements.

 * 

 * The returned map preserves the entry iteration order of the keys produced from the original sequence.

 *

 * The operation is _terminal_.

 * 

 * @sample samples.collections.Collections.Transformations.groupBy

 */",f17096:m1961
36881,fun AppleConfigurables.platformName(): String,"when (target.family) {
    Family.OSX -> ""MacOSX""
    Family.IOS -> if (targetTriple.isSimulator) {
        ""iPhoneSimulator""
    } else {
        ""iPhoneOS""
    }
    Family.TVOS -> if (targetTriple.isSimulator) {
        ""AppleTVSimulator""
    } else {
        ""AppleTVOS""
    }
    Family.WATCHOS -> if (targetTriple.isSimulator) {
        ""WatchSimulator""
    } else {
        ""WatchOS""
    }
    else -> error(""Not an Apple target: $target"")
}","/**

 * Name of an Apple platform as in Xcode.app/Contents/Developer/Platforms.

 */",f11643:m173
47359,"internal fun <T: Task, R: Any> TaskCollection<T>.implementing(kclass: KClass<R>): TaskCollection<T>","@Suppress(""UNCHECKED_CAST"") withType(kclass.java as Class<T>)","/**

 * Filters a [TaskCollection] by type that is not a subtype of [Task] (for use with interfaces)

 *

 * TODO properly express within the type system? The result should be a TaskCollection<T & R>

 */",f15306:m207
46112,inline fun <reified T> Iterable<T>.closureSequence(crossinline edges: (T) -> Iterable<T>): Sequence<T>,"{
    if (this is Collection && this.isEmpty()) return emptySequence()
    val thisSet = if (this is Set<T>) this else this.toSet()
    val results = HashSet<T>(thisSet)
    val resolveQueue = createDequeue<T>(thisSet)
    return sequence { while (resolveQueue.isNotEmpty()) { edges(resolveQueue.removeAt(0)).forEach { edge -> if (results.add(edge)) {
        yield(edge)
        resolveQueue.add(edge)
    } } } }
}","/**

 * @see closure

 * @receiver: Will not be included in the return set

 */",f15014:m299
14973,public actual operator fun ShortArray.plus(elements: ShortArray): ShortArray,"{
    val thisSize = size
    val arraySize = elements.size
    val result = copyOfUninitializedElements(thisSize + arraySize)
    elements.copyInto(result, thisSize)
    return result
}","/**

 * Returns an array containing all elements of the original array and then all elements of the given [elements] array.

 */",f3831:m4385
17112,@Test fun testPCEFromPostCompute(),"{
    for (i in 1 .. 100) {
        val t1CalledCalculate = CountDownLatch(1)
        val t2AccessedTheCache = CountDownLatch(1)
        val resultRef = AtomicReference<Any?>(null)
        val valueWithPostCompute = ValueWithPostCompute(key = 1, calculate = {
            if (Thread.currentThread().name == ""t1"") {
                t1CalledCalculate.countDown()
            }
            Thread.currentThread().name to Unit
        }, postCompute = { _, _, _ ->
            t2AccessedTheCache.await()
            if (Thread.currentThread().name == ""t1"") {
                throw ProcessCanceledException()
            }
        })
        val t1 = thread(name = ""t1"") { try {
            valueWithPostCompute.getValue()
        } catch (_: ProcessCanceledException) { } }
        val t2 = thread(name = ""t2"") {
            t1CalledCalculate.await()
            t2AccessedTheCache.countDown()
            try {
                resultRef.set(valueWithPostCompute.getValue())
            } catch (e: Throwable) {
                resultRef.set(e)
            }
        }
        t2.join()
        t1.join()
        when (val result = resultRef.get()) {
            is Throwable -> throw result
            else -> Assertions.assertEquals(""t2"", result)
        }
    }
}","/**

     * Tests the following scenario:

     *  - thread `t1` access the cache and executes `calculate()` and then `postCompute()` under a lock hold

     *  - while the lock hold  by `t1`, `t2` tries to also access the value and waits for the lock to be released by `t1`

     *  - t1: during the post compute, some recoverable (e.g., PCE) exception happens inside the `postCompute()` and exception is not saved in the cache and rethrown

     *  - t1 releases the lock with the `value` set to `ValueIsNotComputed`

     *  - t2 acquires the lock and should try to recalculate the value in this case

     */",f5152:m143
43608,fun BuildResult.findTasksByPattern(pattern: Regex): Set<String>,"{
    return tasks.map { it.path }.filter { taskPath -> pattern.matches(taskPath) }.toSet()
}","/**

 * Returns all the affected during the build tasks, whose [org.gradle.api.Task.getPath] satisfies the [pattern]

 */",f13463:m55
13259,"fun tryExpandPlatformDependentTypealias(classifier: Classifier, platform: KotlinPlatform, nullable: Boolean): StubType?","when (classifier) {
    nativePtrClassifier -> expandNativePtr(platform, nullable)
    else -> null
}","/**

     * Variant of [tryExpandPredefinedTypealias] with [platform]-dependent result.

     */",f3652:m425
13506,"@SinceKotlin(""1.1"") @kotlin.internal.IntrinsicConstEvaluation public inline operator fun rem(other: Byte): Int",this.toInt() % other.toInt(),"/**

     * Calculates the remainder of truncating division of this value (dividend) by the other value (divisor).

     *

     * The result is either zero or has the same sign as the _dividend_ and has the absolute value less than the absolute value of the divisor.

     */",f3686:m431
63419,public actual fun DoubleArray.asList(): List<Double>,"{
    return object : AbstractList<Double>(), RandomAccess {
        override val size: Int get() = this@asList.size
    
        override fun isEmpty(): Boolean = this@asList.isEmpty()
    
        override fun contains(element: Double): Boolean = this@asList.any { it.toBits() == element.toBits() }
    
        override fun get(index: Int): Double = this@asList[index]
    
        override fun indexOf(element: Double): Int = this@asList.indexOfFirst { it.toBits() == element.toBits() }
    
        override fun lastIndexOf(element: Double): Int = this@asList.indexOfLast { it.toBits() == element.toBits() }
    }
}","/**

 * Returns a [List] that wraps the original array.

 */",f17396:m379
58004,"@SinceKotlin(""1.6"") @WasExperimental(ExperimentalStdlibApi::class, ExperimentalUnsignedTypes::class) @kotlin.internal.InlineOnly public inline fun ULong.rotateRight(bitCount: Int): ULong",toLong().rotateRight(bitCount).toULong(),"/**

 * Rotates the binary representation of this [ULong] number right by the specified [bitCount] number of bits.

 * The least significant bits pushed out from the right side reenter the number as the most significant bits on the left side.

 *

 * Rotating the number right by a negative bit count is the same as rotating it left by the negated bit count:

 * `number.rotateRight(-n) == number.rotateLeft(n)`

 *

 * Rotating by a multiple of [ULong.SIZE_BITS] (64) returns the same number, or more generally

 * `number.rotateRight(n) == number.rotateRight(n % 64)`

 */",f17056:m279
56301,"@SinceKotlin(""1.9"") @WasExperimental(ExperimentalStdlibApi::class) public operator fun <T: Comparable<T>> T.rangeUntil(that: T): OpenEndRange<T>","ComparableOpenEndRange(this, that)","/**

 * Creates an open-ended range from this [Comparable] value to the specified [that] value.

 *

 * This value needs to be smaller than [that] value, otherwise the returned range will be empty.

 * @sample samples.ranges.Ranges.rangeFromComparable

 */",f16848:m117
7470,private fun JsScope.findOwnNameOrDeclare(ident: String): JsName,"when (this) {
    is JsFunctionScope -> declareNameUnsafe(ident)
    else -> declareName(ident)
}","/**

 * Overrides JsFunctionScope declareName as it's mapped to declareFreshName

 */",f3099:m155
43513,fun BuildResult.assertIncrementalCompilationFellBackToNonIncremental(reason: BuildAttribute? = null),"{
    if (reason != null) {
        assertOutputContains(""$FALLING_BACK_TO_NON_INCREMENTAL_COMPILATION (reason = ${reason.name})"")
    } else {
        assertOutputContains(FALLING_BACK_TO_NON_INCREMENTAL_COMPILATION)
    }
    assertOutputDoesNotContain(INCREMENTAL_COMPILATION_COMPLETED)
    assertOutputDoesNotContain(NON_INCREMENTAL_COMPILATION_WILL_BE_PERFORMED)
}","/**

 * Asserts that incremental compilation was attempted, failed, and fell back to non-incremental compilation.

 *

 * Note: Log level of output must be set to [LogLevel.DEBUG].

 */",f13451:m219
63255,public actual fun String.toInt(radix: Int): Int,toIntOrNull(radix) ?: numberFormatError(this),"/**

 * Parses the string as an [Int] number and returns the result.

 * @throws NumberFormatException if the string is not a valid representation of a number.

 * @throws IllegalArgumentException when [radix] is not a valid radix for string to number conversion.

 */",f17352:m97
58547,"@SinceKotlin(""1.5"") @WasExperimental(ExperimentalUnsignedTypes::class) public infix fun ULong.until(to: ULong): ULongRange","{
    if (to <= ULong.MIN_VALUE) return ULongRange.EMPTY
    return this .. (to - 1u).toULong()
}","/**

 * Returns a range from this value up to but excluding the specified [to] value.

 * 

 * If the [to] value is less than or equal to `this` value, then the returned range is empty.

 */",f17090:m789
56470,"@PublishedApi internal fun getProgressionLastElement(start: Long, end: Long, step: Long): Long","when {
    step > 0 -> if (start >= end) end else end - differenceModulo(end, start, step)
    step < 0 -> if (start <= end) end else end + differenceModulo(start, end, -step)
    else -> throw kotlin.IllegalArgumentException(""Step is zero."")
}","/**

 * Calculates the final element of a bounded arithmetic progression, i.e. the last element of the progression which is in the range

 * from [start] to [end] in case of a positive [step], or from [end] to [start] in case of a negative

 * [step].

 *

 * No validation on passed parameters is performed. The given parameters should satisfy the condition:

 *

 * - either `step > 0` and `start <= end`,

 * - or `step < 0` and `start >= end`.

 *

 * @param start first element of the progression

 * @param end ending bound for the progression

 * @param step increment, or difference of successive elements in the progression

 * @return the final element of the progression

 * @suppress

 */",f16869:m101
50451,@Test fun `awaiting Project configurationResult`(),"{
    val project = buildProjectWithMPP()
    project.launch {
        assertEquals(EvaluateBuildscript, project.kotlinPluginLifecycle.stage)
        val result = project.configurationResult.await()
        assertIsInstance<ProjectConfigurationResult.Success>(result)
        assertEquals(ReadyForExecution, project.kotlinPluginLifecycle.stage)
    }
    project.evaluate()
}","/**

     * Sample showcasing how one can wait for the finished project configurationResult when no exception is reached.

     * Just simply awaiting the future is enough here!

     * In happy case the stage will be [ReadyForExecution]

     */",f16110:m641
32781,protected fun isCompatibleTo(ourVersion: BinaryVersion): Boolean,"{
    return if (major == 0) ourVersion.major == 0 && minor == ourVersion.minor else major == ourVersion.major && minor <= ourVersion.minor
}","/**

     * Returns true if this version of some format loaded from some binaries is compatible

     * to the expected version of that format in the current compiler.

     *

     * @param ourVersion the version of this format in the current compiler

     */",f11089:m69
57059,@kotlin.internal.InlineOnly public inline fun println(message: Double),"{
    System.out.println(message)
}",/** Prints the given [message] and the line separator to the standard output stream. */,f16953:m249
14073,"public fun compareAndExchange(expected: NativePtr, newValue: NativePtr): NativePtr","this::value.compareAndExchangeField(expected, newValue)","/**

     * Atomically sets the value to the given [new value][newValue] if the current value equals the [expected value][expected]

     * and returns the old value in any case.

     *

     * Provides sequential consistent ordering guarantees and cannot fail spuriously.

     *

     * Comparison of values is done by value.

     */",f3718:m431
20160,public fun KtType.getDirectSuperTypes(shouldApproximate: Boolean = false): List<KtType>,"withValidityAssertion { analysisSession.typeProvider.getDirectSuperTypes(this, shouldApproximate) }","/**

     * Gets the direct super types of the given type. For example, given `MutableList<String>`, this returns `List<String>` and

     * `MutableCollection<String>`.

     *

     * Note that for flexible types, both direct super types of the upper and lower bounds are returned. If that's not desirable, please

     * first call [KtFlexibleType.upperBound] or [KtFlexibleType.lowerBound] and then call this method.

     *

     * @param shouldApproximate whether to approximate non-denotable types. For example, super type of `List<out String>` is

     * `Collection<CAPTURED out String>`. With approximation set to true, `Collection<out String>` is returned instead.

     */",f5780:m259
64126,public operator fun rangeTo(other: Byte): IntRange,"IntRange(this.toInt(), other.toInt())",/** Creates a range from this value to the specified [other] value. */,f17455:m1469
64111,@kotlin.internal.IntrinsicConstEvaluation public inline operator fun div(other: Short): Int,this.toInt() / other.toInt(),"/** Divides this value by the other value, truncating the result to an integer that is closer to zero. */",f17455:m1247
54666,"@SinceKotlin(""1.4"") public actual infix fun ShortArray?.contentEquals(other: ShortArray?): Boolean","{
    return contentEqualsInternal(other)
}","/**

 * Checks if the two specified arrays are *structurally* equal to one another.

 * 

 * Two arrays are considered structurally equal if they have the same size, and elements at corresponding indices are equal.

 * 

 * The arrays are also considered structurally equal if both are `null`.

 * 

 * @param other the array to compare with this array.

 * @return `true` if the two arrays are structurally equal, `false` otherwise.

 * 

 * @sample samples.collections.Arrays.ContentOperations.intArrayContentEquals

 */",f16713:m641
54649,public actual fun <T> Array<out T>.asList(): List<T>,"{
    return ArrayList<T>(this.unsafeCast<Array<Any?>>())
}","/**

 * Returns a [List] that wraps the original array.

 */",f16713:m199
57987,"@SinceKotlin(""1.5"") @WasExperimental(ExperimentalUnsignedTypes::class) @kotlin.internal.InlineOnly public inline fun min(a: UInt, b: UInt): UInt","{
    return minOf(a, b)
}","/**

 * Returns the smaller of two values.

 */",f17055:m15
58862,"@SinceKotlin(""1.4"") public fun <T> Sequence<T>.onEachIndexed(action: (index: Int, T) -> Unit): Sequence<T>","{
    return mapIndexed { index, element ->
        action(index, element)
        element
    }
}","/**

 * Returns a sequence which performs the given [action] on each element of the original sequence as they pass through it.

 * @param [action] function that takes the index of an element and the element itself

 * and performs the action on the element.

 *

 * The operation is _intermediate_ and _stateless_.

 */",f17096:m4359
65047,"@Suppress(""NOTHING_TO_INLINE"") internal actual inline fun AssertionErrorWithCause(message: String?, cause: Throwable?): AssertionError","AssertionError(message, cause)",/** Platform-specific construction of AssertionError with cause */,f17556:m37
13825,@kotlin.internal.IntrinsicConstEvaluation public override fun toString(): String,NumberConverter.convert(this),"/**

     * Returns the string representation of this [Double] value.

     *

     * Note that the representation format is unstable and may change in a future release.

     * However, it is guaranteed that the returned string is valid for converting back to [Double]

     * using [String.toDouble], and will result in the same numeric value.

     * The exact bit pattern of a `NaN` double is not guaranteed to be preserved though.

     */",f3686:m5289
54644,public actual fun LongArray.elementAt(index: Int): Long,"{
    return elementAtOrElse(index) { throw IndexOutOfBoundsException(""index: $index, size: $size}"") }
}","/**

 * Returns an element at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this array.

 * 

 * @sample samples.collections.Collections.Elements.elementAt

 */",f16713:m109
55952,protected fun done(),"{
    state = State.DONE
}","/**

     * Sets the state to done so that the iteration terminates.

     */",f16819:m157
57464,"@SinceKotlin(""1.4"") @OptIn(kotlin.experimental.ExperimentalTypeInference::class) @OverloadResolutionByLambdaReturnType @kotlin.jvm.JvmName(""sumOfBigDecimal"") @kotlin.internal.InlineOnly public inline fun ShortArray.sumOf(selector: (Short) -> java.math.BigDecimal): java.math.BigDecimal","{
    var sum: java.math.BigDecimal = 0.toBigDecimal()
    for (element in this) {
        sum += selector(element)
    }
    return sum
}","/**

 * Returns the sum of all values produced by [selector] function applied to each element in the array.

 */",f16970:m5697
58936,"@SinceKotlin(""1.3"") public fun CharSequence.random(random: Random): Char","{
    if (isEmpty()) throw NoSuchElementException(""Char sequence is empty."")
    return get(random.nextInt(length))
}","/**

 * Returns a random character from this char sequence using the specified source of randomness.

 * 

 * @throws NoSuchElementException if this char sequence is empty.

 */",f17097:m477
63548,public actual operator fun IntArray.plus(element: Int): IntArray,"{
    val index = size
    val result = copyOfUninitializedElements(index + 1)
    result[index] = element
    return result
}","/**

 * Returns an array containing all elements of the original array and then the given [element].

 */",f17396:m4147
48354,"internal fun runCommand(command: List<String>, logger: Logger? = null, errorHandler: ((result: RunProcessResult) -> String?)? = null, processConfiguration: ProcessBuilder.() -> Unit = {}): String","{
    val runResult = assembleAndRunProcess(command, logger, processConfiguration)
    check(runResult.retCode == 0) { errorHandler?.invoke(runResult) ?: createErrorMessage(command, runResult) }
    return runResult.stdOut
}","/**

 * Executes a command and returns the input text.

 *

 * @param command the command and its arguments to be executed as a list of strings.

 * @param logger an optional logger to log information about the command execution.

 * @param errorHandler (Optional) A function that handles any errors that occur during the command execution.

 * @param processConfiguration a function to configure the process before execution.

 * @return The input text of the executed command.

 */",f15610:m51
57386,public actual fun <T> Array<out T>.sortWith(comparator: Comparator<in T>): Unit,"{
    if (size > 1) java.util.Arrays.sort(this, comparator)
}","/**

 * Sorts the array in-place according to the order specified by the given [comparator].

 * 

 * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.

 */",f16970:m4471
58756,public inline fun <T> Sequence<T>.singleOrNull(predicate: (T) -> Boolean): T?,"{
    var single: T? = null
    var found = false
    for (element in this) {
        if (predicate(element)) {
            if (found) return null
            single = element
            found = true
        }
    }
    if (!found) return null
    return single
}","/**

 * Returns the single element matching the given [predicate], or `null` if element was not found or more than one element was found.

 *

 * The operation is _terminal_.

 */",f17096:m757
56584,@kotlin.internal.InlineOnly public inline fun <T> java.util.Enumeration<T>.asSequence(): Sequence<T>,this.iterator().asSequence(),"/**

 * Creates a sequence that returns all values from this enumeration. The sequence is constrained to be iterated only once.

 * @sample samples.collections.Sequences.Building.sequenceFromEnumeration

 */",f16912:m21
57082,"public fun File.writeText(text: String, charset: Charset = Charsets.UTF_8): Unit","FileOutputStream(this).use { it.writeTextImpl(text, charset) }","/**

 * Sets the content of this file as [text] encoded using UTF-8 or specified [charset].

 * If this file exists, it becomes overwritten.

 *

 * @param text text to write into file.

 * @param charset character set to use.

 */",f16956:m265
58179,@kotlin.internal.InlineOnly public inline infix fun and(other: UInt): UInt,UInt(this.data and other.data),/** Performs a bitwise AND operation between the two values. */,f17063:m537
58662,public fun CharProgression.reversed(): CharProgression,"{
    return CharProgression.fromClosedRange(last, first, -step)
}","/**

 * Returns a progression that goes over the same range in the opposite direction with the same step.

 */",f17092:m1899
58298,"@SinceKotlin(""1.5"") @WasExperimental(ExperimentalUnsignedTypes::class) public fun String.toULongOrNull(radix: Int): ULong?","{
    checkRadix(radix)
    val length = this.length
    if (length == 0) return null
    val limit: ULong = ULong.MAX_VALUE
    val start: Int
    val firstChar = this[0]
    if (firstChar < '0') {
        if (length == 1 || firstChar != '+') return null
        start = 1
    } else {
        start = 0
    }
    val limitForMaxRadix = 512409557603043100uL
    var limitBeforeMul = limitForMaxRadix
    val uradix = radix.toULong()
    var result = 0uL
    for (i in start until length) {
        val digit = digitOf(this[i], radix)
        if (digit < 0) return null
        if (result > limitBeforeMul) {
            if (limitBeforeMul == limitForMaxRadix) {
                limitBeforeMul = limit / uradix
                if (result > limitBeforeMul) {
                    return null
                }
            } else {
                return null
            }
        }
        result *= uradix
        val beforeAdding = result
        result += digit.toUInt()
        if (result < beforeAdding) return null
    }
    return result
}","/**

 * Parses the string as an [ULong] number and returns the result

 * or `null` if the string is not a valid representation of a number.

 *

 * @throws IllegalArgumentException when [radix] is not a valid radix for string to number conversion.

 */",f17067:m479
58841,"@SinceKotlin(""1.7"") @kotlin.jvm.JvmName(""minOrThrow"") @Suppress(""CONFLICTING_OVERLOADS"") public fun Sequence<Double>.min(): Double","{
    val iterator = iterator()
    if (!iterator.hasNext()) throw NoSuchElementException()
    var min = iterator.next()
    while (iterator.hasNext()) {
        val e = iterator.next()
        min = minOf(min, e)
    }
    return min
}","/**

 * Returns the smallest element.

 * 

 * If any of elements is `NaN` returns `NaN`.

 *

 * The operation is _terminal_.

 * 

 * @throws NoSuchElementException if the sequence is empty.

 */",f17096:m3475
56207,"@SinceKotlin(""1.4"") @kotlin.internal.InlineOnly public inline fun Byte.countTrailingZeroBits(): Int",(toInt() or 0x100).countTrailingZeroBits(),"/**

 * Counts the number of consecutive least significant bits that are zero in the binary representation of this [Byte] number.

 */",f16841:m291
58865,"@SinceKotlin(""1.4"") public inline fun <S, T: S> Sequence<T>.reduceIndexedOrNull(operation: (index: Int, acc: S, T) -> S): S?","{
    val iterator = this.iterator()
    if (!iterator.hasNext()) return null
    var index = 1
    var accumulator: S = iterator.next()
    while (iterator.hasNext()) {
        accumulator = operation(checkIndexOverflow(index++), accumulator, iterator.next())
    }
    return accumulator
}","/**

 * Accumulates value starting with the first element and applying [operation] from left to right

 * to current accumulator value and each element with its index in the original sequence.

 * 

 * Returns `null` if the sequence is empty.

 * 

 * @param [operation] function that takes the index of an element, current accumulator value and the element itself,

 * and calculates the next accumulator value.

 *

 * The operation is _terminal_.

 * 

 * @sample samples.collections.Collections.Aggregates.reduceOrNull

 */",f17096:m4487
20206,"public fun KtType.render(renderer: KtTypeRenderer = KtTypeRendererForSource.WITH_QUALIFIED_NAMES, position: Variance): String","withValidityAssertion { analysisSession.symbolDeclarationRendererProvider.renderType(this, renderer, position) }","/**

     * Render kotlin type into the representable Kotlin type string

     */",f5792:m67
53048,public actual fun <T> lazy(initializer: () -> T): Lazy<T>,UnsafeLazyImpl(initializer),"/**

 * Creates a new instance of the [Lazy] that uses the specified initialization function [initializer].

 */",f16610:m29
58532,"@SinceKotlin(""1.5"") @WasExperimental(ExperimentalUnsignedTypes::class) public operator fun ULongRange.contains(value: UByte): Boolean","{
    return contains(value.toULong())
}","/**

 * Checks if the specified [value] belongs to this range.

 */",f17090:m471
17118,private fun LLFirDeclarationModificationService.modifyElement(element: PsiElement): Boolean,"{
    val disposable = Disposer.newDisposable(""${LLFirDeclarationModificationService::class.simpleName}.disposable"")
    var isOutOfBlock = false
    try {
        project.analysisMessageBus.connect(disposable).subscribe(KotlinTopics.MODULE_OUT_OF_BLOCK_MODIFICATION, KotlinModuleOutOfBlockModificationListener { isOutOfBlock = true })
        elementModified(element)
    } finally {
        Disposer.dispose(disposable)
    }
    return isOutOfBlock
}","/**

 * @return **true** if out-of-block happens

 */",f5153:m285
56389,"@SinceKotlin(""1.5"") @WasExperimental(ExperimentalUnsignedTypes::class) public fun Random.nextULong(from: ULong, until: ULong): ULong","{
    checkULongRangeBounds(from, until)
    val signedFrom = from.toLong() xor Long.MIN_VALUE
    val signedUntil = until.toLong() xor Long.MIN_VALUE
    val signedResult = nextLong(signedFrom, signedUntil) xor Long.MIN_VALUE
    return signedResult.toULong()
}","/**

 * Gets the next random [ULong] from the random number generator in the specified range.

 *

 * Generates a [ULong] random value uniformly distributed between the specified [from] (inclusive) and [until] (exclusive) bounds.

 *

 * @throws IllegalArgumentException if [from] is greater than or equal to [until].

 */",f16860:m169
14235,public fun getAndAdd(delta: Int): Int,this::value.getAndAddField(delta),"/**

     * Atomically adds the [given value][delta] to the current value and returns the old value.

     */",f3762:m83
20386,public fun getCallableSignatures(vararg names: Name): Sequence<KtCallableSignature<*>>,withValidityAssertion { getCallableSignatures(names.toList()) },"/**

     * Return a sequence of [KtCallableSignature] which current scope contain if declaration, if declaration name present in [names]

     *

     * @see getCallableSignatures

     */",f5838:m67
56318,"@SinceKotlin(""1.9"") @WasExperimental(ExperimentalStdlibApi::class) public operator fun Double.rangeUntil(that: Double): OpenEndRange<Double>","OpenEndDoubleRange(this, that)","/**

 * Creates an open-ended range from this [Double] value to the specified [that] value.

 *

 * Numbers are compared with the ends of this range according to IEEE-754.

 */",f16848:m319
58564,"@kotlin.jvm.JvmName(""sumOfULong"") @SinceKotlin(""1.5"") @WasExperimental(ExperimentalUnsignedTypes::class) public fun Sequence<ULong>.sum(): ULong","{
    var sum: ULong = 0uL
    for (element in this) {
        sum += element
    }
    return sum
}","/**

 * Returns the sum of all elements in the sequence.

 *

 * The operation is _terminal_.

 */",f17091:m69
14861,"@Deprecated(""Use Kotlin compiler 1.4 to avoid deprecation warning."") @SinceKotlin(""1.1"") @DeprecatedSinceKotlin(hiddenSince = ""1.4"") public fun BooleanArray.contentHashCode(): Int","{
    return this.contentHashCode()
}","/**

 * Returns a hash code based on the contents of this array as if it is [List].

 */",f3831:m1545
55799,public suspend fun yieldAll(elements: Iterable<T>),"{
    if (elements is Collection && elements.isEmpty()) return
    return yieldAll(elements.iterator())
}","/**

     * Yields a collections of values to the [Iterator] being built

     * and suspends until all these values are iterated and the next one is requested.

     *

     * @sample samples.collections.Sequences.Building.buildSequenceYieldAll

     */",f16811:m145
57469,"@SinceKotlin(""1.4"") @OptIn(kotlin.experimental.ExperimentalTypeInference::class) @OverloadResolutionByLambdaReturnType @kotlin.jvm.JvmName(""sumOfBigDecimal"") @kotlin.internal.InlineOnly public inline fun BooleanArray.sumOf(selector: (Boolean) -> java.math.BigDecimal): java.math.BigDecimal","{
    var sum: java.math.BigDecimal = 0.toBigDecimal()
    for (element in this) {
        sum += selector(element)
    }
    return sum
}","/**

 * Returns the sum of all values produced by [selector] function applied to each element in the array.

 */",f16970:m5857
58650,public infix fun Byte.downTo(to: Int): IntProgression,"{
    return IntProgression.fromClosedRange(this.toInt(), to, -1)
}","/**

 * Returns a progression from this value down to the specified [to] value with the step -1.

 * 

 * The [to] value should be less than or equal to `this` value.

 * If the [to] value is greater than `this` value the returned progression is empty.

 */",f17092:m1671
9287,"private fun InteropCallContext.castToBoolean(sourceClass: IrClassSymbol, value: IrExpression): IrExpression","{
    val (primitiveBinaryType, immZero) = when (sourceClass) {
        symbols.byte -> PrimitiveBinaryType.BYTE to builder.irByte(0)
        symbols.long -> PrimitiveBinaryType.LONG to builder.irLong(0)
        else -> error(""Unsupported cast to boolean from ${sourceClass.owner.name}"")
    }
    val areEqualByValuesBytes = symbols.areEqualByValue.getValue(primitiveBinaryType)
    val compareToZero = builder.irCall(areEqualByValuesBytes).apply {
        putValueArgument(0, value)
        putValueArgument(1, immZero)
    }
    return builder.irCall(irBuiltIns.booleanNotSymbol).apply { dispatchReceiver = compareToZero }
}","/**

 * Perform (value != 0)

 */",f3339:m289
12006,private fun ffiTypeStruct(elementTypes: List<ffi_type>): ffi_type,"{
    val elements = nativeHeap.allocArrayOfPointersTo(*elementTypes.toTypedArray(), null)
    val res = ffiTypeStruct0(elements.rawValue)
    if (res == 0L) {
        throw OutOfMemoryError()
    }
    caches.addTypeStruct(res)
    return interpretPointed(res)
}","/**

 * Allocates and initializes `ffi_type` describing the struct.

 *

 * @param elements types of the struct elements

 */",f3613:m909
59017,"@SinceKotlin(""1.7"") @kotlin.jvm.JvmName(""maxByOrThrow"") @Suppress(""CONFLICTING_OVERLOADS"") public inline fun <R: Comparable<R>> CharSequence.maxBy(selector: (Char) -> R): Char","{
    if (isEmpty()) throw NoSuchElementException()
    var maxElem = this[0]
    val lastIndex = this.lastIndex
    if (lastIndex == 0) return maxElem
    var maxValue = selector(maxElem)
    for (i in 1 .. lastIndex) {
        val e = this[i]
        val v = selector(e)
        if (maxValue < v) {
            maxElem = e
            maxValue = v
        }
    }
    return maxElem
}","/**

 * Returns the first character yielding the largest value of the given function.

 * 

 * @throws NoSuchElementException if the char sequence is empty.

 * 

 * @sample samples.collections.Collections.Aggregates.maxBy

 */",f17097:m2419
59031,"@SinceKotlin(""1.7"") @kotlin.jvm.JvmName(""minByOrThrow"") @Suppress(""CONFLICTING_OVERLOADS"") public inline fun <R: Comparable<R>> CharSequence.minBy(selector: (Char) -> R): Char","{
    if (isEmpty()) throw NoSuchElementException()
    var minElem = this[0]
    val lastIndex = this.lastIndex
    if (lastIndex == 0) return minElem
    var minValue = selector(minElem)
    for (i in 1 .. lastIndex) {
        val e = this[i]
        val v = selector(e)
        if (minValue > v) {
            minElem = e
            minValue = v
        }
    }
    return minElem
}","/**

 * Returns the first character yielding the smallest value of the given function.

 * 

 * @throws NoSuchElementException if the char sequence is empty.

 * 

 * @sample samples.collections.Collections.Aggregates.minBy

 */",f17097:m2983
48502,"fun getStaticLib(namePrefix: String, buildType: String): StaticLibrary","getStaticLib(namePrefix, NativeBuildType.valueOf(buildType.toUpperCaseAsciiOnly()))",/** Returns a static library with the given [namePrefix] and the given build type. Throws an exception if there is no such binary.*/,f15652:m139
43296,"@DisplayName(""KT-45787: no Gradle deprecation on adding associated dependencies"") @GradleTest fun testNoDeprecationOnAssociatedDep(gradleVersion: GradleVersion)","{
    project(""associatedDependencies"", gradleVersion) { build(""tasks"") }
}",/** Regression test for KT-45787. **/,f13404:m1517
58279,"@SinceKotlin(""1.5"") @WasExperimental(ExperimentalUnsignedTypes::class) public fun UByte.toString(radix: Int): String",this.toInt().toString(radix),"/**

 * Returns a string representation of this [Byte] value in the specified [radix].

 *

 * @throws IllegalArgumentException when [radix] is not a valid radix for number to string conversion.

 */",f17067:m19
14072,"public fun compareAndSet(expected: NativePtr, newValue: NativePtr): Boolean","this::value.compareAndSetField(expected, newValue)","/**

     * Atomically sets the value to the given [new value][newValue] if the current value equals the [expected value][expected],

     * returns true if the operation was successful and false only if the current value was not equal to the expected value.

     *

     * Provides sequential consistent ordering guarantees and cannot fail spuriously.

     *

     * Comparison of values is done by value.

     */",f3718:m409
57236,public actual fun ByteArray.asList(): List<Byte>,"{
    return object : AbstractList<Byte>(), RandomAccess {
        override val size: Int get() = this@asList.size
    
        override fun isEmpty(): Boolean = this@asList.isEmpty()
    
        override fun contains(element: Byte): Boolean = this@asList.contains(element)
    
        override fun get(index: Int): Byte = this@asList[index]
    
        override fun indexOf(element: Byte): Int = this@asList.indexOf(element)
    
        override fun lastIndexOf(element: Byte): Int = this@asList.lastIndexOf(element)
    }
}","/**

 * Returns a [List] that wraps the original array.

 */",f16970:m271
57281,"@SinceKotlin(""1.4"") @kotlin.internal.InlineOnly public actual inline fun LongArray?.contentToString(): String","{
    return java.util.Arrays.toString(this)
}","/**

 * Returns a string representation of the contents of the specified array as if it is [List].

 * 

 * @sample samples.collections.Arrays.ContentOperations.contentToString

 */",f16970:m1715
13968,"@kotlin.internal.InlineOnly public actual inline fun String.substring(startIndex: Int, endIndex: Int): String","subSequence(startIndex, endIndex) as String","/**

 * Returns the substring of this string starting at the [startIndex] and ending right before the [endIndex].

 *

 * @param startIndex the start index (inclusive).

 * @param endIndex the end index (exclusive).

 */",f3713:m233
64150,@kotlin.internal.IntrinsicConstEvaluation public inline operator fun compareTo(other: Double): Int,this.toDouble().compareTo(other),"/**

     * Compares this value with the specified value for order.

     * Returns zero if this value is equal to the specified other value, a negative number if it's less than other,

     * or a positive number if it's greater than other.

     */",f17455:m1901
57296,@kotlin.internal.InlineOnly public actual inline fun ByteArray.copyOf(): ByteArray,"{
    return java.util.Arrays.copyOf(this, size)
}","/**

 * Returns new array which is a copy of the original array.

 * 

 * @sample samples.collections.Arrays.CopyOfOperations.copyOf

 */",f16970:m2259
57340,public actual operator fun <T> Array<T>.plus(element: T): Array<T>,"{
    val index = size
    val result = java.util.Arrays.copyOf(this, index + 1)
    result[index] = element
    return result
}","/**

 * Returns an array containing all elements of the original array and then the given [element].

 */",f16970:m3427
34359,override fun testSuiteWillStart(testSuite: XCTestSuite),"{
    if (testSuite is XCTestSuiteWrapper) {
        sendToListeners { startSuite(testSuite.testSuite) }
    } else if (testSuite.name == TOP_LEVEL_SUITE) {
        sendToListeners {
            startTesting(testSettings)
            startIteration(testSettings, 0, testSettings.testSuites)
        }
    }
}","/**

     * Test suite start notification.

     */",f11292:m253
58767,"public inline fun <T, C: MutableCollection<in T>> Sequence<T>.filterNotTo(destination: C, predicate: (T) -> Boolean): C","{
    for (element in this) if (!predicate(element)) destination.add(element)
    return destination
}","/**

 * Appends all elements not matching the given [predicate] to the given [destination].

 *

 * The operation is _terminal_.

 * 

 * @sample samples.collections.Collections.Filtering.filterTo

 */",f17096:m1053
57999,"@SinceKotlin(""1.5"") @WasExperimental(ExperimentalUnsignedTypes::class, ExperimentalStdlibApi::class) @kotlin.internal.InlineOnly public inline fun ULong.countLeadingZeroBits(): Int",toLong().countLeadingZeroBits(),"/**

 * Counts the number of consecutive most significant bits that are zero in the binary representation of this [ULong] number.

 */",f17056:m181
64033,@kotlin.internal.IntrinsicConstEvaluation public inline operator fun plus(other: Byte): Int,this.toInt() + other.toInt(),/** Adds the other value to this value. */,f17455:m191
58689,public infix fun Int.until(to: Long): LongRange,"{
    if (to <= Long.MIN_VALUE) return LongRange.EMPTY
    return this.toLong() .. (to - 1).toLong()
}","/**

 * Returns a range from this value up to but excluding the specified [to] value.

 * 

 * If the [to] value is less than or equal to `this` value, then the returned range is empty.

 */",f17092:m2255
7794,protected open fun buildCommonArgs(),"mutableListOf<String>().apply {
    if (platformConfigurationFiles.files.isNotEmpty()) {
        platformConfigurationFiles.files.filter { it.name.endsWith("".klib"") }.forEach { addArg(""-library"", it.absolutePath) }
    }
    addFileArgs(""-library"", libraries.klibFiles)
    addArgs(""-library"", libraries.artifacts.map { it.artifact.canonicalPath })
    addArgIfNotNull(""-target"", konanTarget.visibleName)
    addArgIfNotNull(""-language-version"", languageVersion)
    addArgIfNotNull(""-api-version"", apiVersion)
    addArgIfNotNull(""-entry"", entryPoint)
    addKey(""-g"", enableDebug)
    addKey(""-nostdlib"", noStdLib)
    addKey(""-nomain"", noMain)
    addKey(""-opt"", enableOptimizations)
    addKey(""-ea"", enableAssertions)
    addKey(""-Xtime"", measureTime)
    addKey(""-Xprofile-phases"", measureTime)
    addKey(""-no-default-libs"", noDefaultLibs)
    addKey(""-no-endorsed-libs"", noEndorsedLibs)
    addKey(""-Xmulti-platform"", enableMultiplatform)
    if (libraries.friends.isNotEmpty()) addArg(""-friend-modules"", libraries.friends.joinToString(File.pathSeparator))
}",/** Args passed to the compiler at both stages of the two-stage compilation and during the singe-stage compilation. */,f3138:m365
57331,"@Suppress(""ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS"") public actual fun <T> Array<T>.fill(element: T, fromIndex: Int = 0, toIndex: Int = size): Unit","{
    java.util.Arrays.fill(this, fromIndex, toIndex, element)
}","/**

 * Fills this array or its subrange with the specified [element] value.

 * 

 * @param fromIndex the start of the range (inclusive) to fill, 0 by default.

 * @param toIndex the end of the range (exclusive) to fill, size of this array by default.

 * 

 * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.

 * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].

 */",f16970:m3175
54834,"@SinceKotlin(""1.4"") public actual fun minOf(a: Byte, vararg other: Byte): Byte","{
    var min = a
    for (e in other) min = minOf(min, e)
    return min
}","/**

 * Returns the smaller of the given values.

 */",f16714:m749
15411,@Test fun tanh_D(),"{
    assertTrue(""Should return NaN"", Double.isNaN(tanh(Double.NaN)))
    assertEquals(""Should return +1.0"", +1.0, tanh(Double.POSITIVE_INFINITY), 0.0)
    assertEquals(""Should return -1.0"", -1.0, tanh(Double.NEGATIVE_INFINITY), 0.0)
    assertEquals(0.0.toBits(), tanh(0.0).toBits())
    assertEquals(+0.0.toBits(), tanh(+0.0).toBits())
    assertEquals((-0.0).toBits(), tanh(-0.0).toBits())
    assertEquals(""Should return 1.0"", 1.0, tanh(1234.56), 0.0)
    assertEquals(""Should return -1.0"", -1.0, tanh(-1234.56), 0.0)
    assertEquals(""Should return 9.999999999996666E-7"", 9.999999999996666E-7, tanh(0.000001), 0.0)
    assertEquals(""Should return 0.981422884124941"", 0.981422884124941, tanh(2.33482), 0.0)
    assertEquals(""Should return 1.0"", 1.0, tanh(Double.MAX_VALUE), 0.0)
    assertEquals(""Should return 4.9E-324"", 4.9E-324, tanh(Double.MIN_VALUE), 0.0)
}","/**

     * Tests kotlin.math.tanh(Double)

     */",f3868:m1363
58881,"@SinceKotlin(""1.2"") public fun <T> Sequence<T>.chunked(size: Int): Sequence<List<T>>","{
    return windowed(size, size, partialWindows = true)
}","/**

 * Splits this sequence into a sequence of lists each not exceeding the given [size].

 * 

 * The last list in the resulting sequence may have fewer elements than the given [size].

 * 

 * @param size the number of elements to take in each list, must be positive and can be greater than the number of elements in this sequence.

 *

 * The operation is _intermediate_ and _stateful_.

 * 

 * @sample samples.collections.Collections.Transformations.chunked

 */",f17096:m5157
56160,"@kotlin.internal.InlineOnly @SinceKotlin(""1.1"") public inline fun <T> T.takeIf(predicate: (T) -> Boolean): T?","{
    contract { callsInPlace(predicate, InvocationKind.EXACTLY_ONCE) }
    return if (predicate(this)) this else null
}","/**

 * Returns `this` value if it satisfies the given [predicate] or `null`, if it doesn't.

 *

 * For detailed usage information see the documentation for [scope functions](https://kotlinlang.org/docs/reference/scope-functions.html#takeif-and-takeunless).

 */",f16833:m229
68001,"fun isOverloadable(a: DeclarationDescriptor, b: DeclarationDescriptor): Boolean","{
    val aCategory = getDeclarationCategory(a)
    val bCategory = getDeclarationCategory(b)
    if (aCategory != bCategory) return true
    if (a !is CallableDescriptor || b !is CallableDescriptor) return false
    return checkOverloadability(a, b)
}","/**

     * Does not check names.

     */",f19275:m57
43652,fun Path.append(textToAppend: String),"{
    modify { """"""
    
                $it
    
                
    
                $textToAppend
    
            """""".trimIndent() }
}","/**

 * Append [textToAppend] to the file content under [Path].

 */",f13473:m45
48518,"fun getFramework(namePrefix: String, buildType: String): Framework","getFramework(namePrefix, NativeBuildType.valueOf(buildType.toUpperCaseAsciiOnly()))",/** Returns an Objective-C framework with the given [namePrefix] and the given build type. Throws an exception if there is no such binary.*/,f15652:m243
58855,"@SinceKotlin(""1.4"") public fun Sequence<Float>.minOrNull(): Float?","{
    val iterator = iterator()
    if (!iterator.hasNext()) return null
    var min = iterator.next()
    while (iterator.hasNext()) {
        val e = iterator.next()
        min = minOf(min, e)
    }
    return min
}","/**

 * Returns the smallest element or `null` if there are no elements.

 * 

 * If any of elements is `NaN` returns `NaN`.

 *

 * The operation is _terminal_.

 */",f17096:m4139
48088,"internal fun wrapAndRethrowCompilationException(executionStrategy: KotlinCompilerExecutionStrategy, e: Throwable): Nothing","{
    if (e is OutOfMemoryError || e.hasOOMCause()) {
        throw OOMErrorException(executionStrategy)
    } else if (e is RemoteException) {
        throw DaemonCrashedException(e)
    } else {
        throw e
    }
}","/**

 * Wraps an exception occurred during compiler execution.

 * Covers the case when compiler invocation failed before returning any [ExitCode].

 * Always throws some kind of exception.

 */",f15532:m91
58844,"@SinceKotlin(""1.7"") @kotlin.jvm.JvmName(""minByOrThrow"") @Suppress(""CONFLICTING_OVERLOADS"") public inline fun <T, R: Comparable<R>> Sequence<T>.minBy(selector: (T) -> R): T","{
    val iterator = iterator()
    if (!iterator.hasNext()) throw NoSuchElementException()
    var minElem = iterator.next()
    if (!iterator.hasNext()) return minElem
    var minValue = selector(minElem)
    do {
        val e = iterator.next()
        val v = selector(e)
        if (minValue > v) {
            minElem = e
            minValue = v
        }
    } while (iterator.hasNext())
    return minElem
}","/**

 * Returns the first element yielding the smallest value of the given function.

 *

 * The operation is _terminal_.

 * 

 * @throws NoSuchElementException if the sequence is empty.

 * 

 * @sample samples.collections.Collections.Aggregates.minBy

 */",f17096:m3609
54828,"@SinceKotlin(""1.1"") @kotlin.internal.InlineOnly public actual inline fun minOf(a: Short, b: Short, c: Short): Short","{
    return JsMath.min(a.toInt(), b.toInt(), c.toInt()).unsafeCast<Short>()
}","/**

 * Returns the smaller of three values.

 */",f16714:m627
43579,fun BuildResult.assertNoBuildWarnings(additionalExpectedWarnings: Set<String> = emptySet()),"{
    val expectedWarnings = setOf(""w: [InternalKotlinGradlePluginPropertiesUsed | WARNING] ATTENTION! This build uses the following Kotlin Gradle Plugin properties:"")
    val cleanedOutput = (expectedWarnings + additionalExpectedWarnings).fold(output) { acc, s -> acc.replace(s, """") }
    val warnings = cleanedOutput.lineSequence().filter { it.trim().startsWith(""w:"") }.toList()
    assert(warnings.isEmpty()) {
        printBuildOutput()
        ""Build contains following warnings:\n ${warnings.joinToString(separator = ""\n"")}""
    }
}","/**

 * Assert build contains no warnings.

 */",f13457:m315
54687,"@SinceKotlin(""1.4"") public actual fun FloatArray?.contentToString(): String","{
    return this?.joinToString("", "", ""["", ""]"") ?: ""null""
}","/**

 * Returns a string representation of the contents of the specified array as if it is [List].

 * 

 * @sample samples.collections.Arrays.ContentOperations.contentToString

 */",f16713:m1131
14912,public actual fun FloatArray.copyOf(newSize: Int): FloatArray,"{
    return this.copyOfUninitializedElements(newSize)
}","/**

 * Returns new array which is a copy of the original array, resized to the given [newSize].

 * The copy is either truncated or padded at the end with zero values if necessary.

 * 

 * - If [newSize] is less than the size of the original array, the copy array is truncated to the [newSize].

 * - If [newSize] is greater than the size of the original array, the extra elements in the copy array are filled with zero values.

 * 

 * @sample samples.collections.Arrays.CopyOfOperations.resizedPrimitiveCopyOf

 */",f3831:m2879
58798,"public inline fun <T, K, V> Sequence<T>.groupBy(keySelector: (T) -> K, valueTransform: (T) -> V): Map<K, List<V>>","{
    return groupByTo(LinkedHashMap<K, MutableList<V>>(), keySelector, valueTransform)
}","/**

 * Groups values returned by the [valueTransform] function applied to each element of the original sequence

 * by the key returned by the given [keySelector] function applied to the element

 * and returns a map where each group key is associated with a list of corresponding values.

 * 

 * The returned map preserves the entry iteration order of the keys produced from the original sequence.

 *

 * The operation is _terminal_.

 * 

 * @sample samples.collections.Collections.Transformations.groupByKeysAndValues

 */",f17096:m1989
54818,"@SinceKotlin(""1.4"") public actual fun maxOf(a: Double, vararg other: Double): Double","{
    var max = a
    for (e in other) max = maxOf(max, e)
    return max
}","/**

 * Returns the greater of the given values.

 * 

 * If any value is `NaN`, returns `NaN`.

 */",f16714:m429
58970,public inline fun CharSequence.takeWhile(predicate: (Char) -> Boolean): CharSequence,"{
    for (index in 0 until length) if (!predicate(get(index))) {
        return subSequence(0, index)
    }
    return subSequence(0, length)
}","/**

 * Returns a subsequence of this char sequence containing the first characters that satisfy the given [predicate].

 * 

 * @sample samples.text.Strings.take

 */",f17097:m1257
63495,public actual fun LongArray.copyOf(): LongArray,"{
    return this.copyOfUninitializedElements(size)
}","/**

 * Returns new array which is a copy of the original array.

 * 

 * @sample samples.collections.Arrays.CopyOfOperations.copyOf

 */",f17396:m2737
15871,private fun MockApplication.registerFileDocumentManager(),"{
    picoContainer.unregisterComponent(FileDocumentManager::class.java.name)
    registerService(FileDocumentManager::class.java, object : MockFileDocumentManagerImpl(FileDocumentManagerBase.HARD_REF_TO_DOCUMENT_KEY, { DocumentImpl(it) }) {
        override fun getDocument(file: VirtualFile): Document? {
            val document = super.getDocument(file) ?: return null
            file.putUserDataIfAbsent(FileDocumentManagerBase.HARD_REF_TO_DOCUMENT_KEY, document)
            return document
        }
    })
}","/**

     * [MockFileDocumentManagerImpl] doesn't put the cached document as user data under [MockFileDocumentManagerImpl.myCachedDocumentKey] on

     * the virtual file, making [MockFileDocumentManagerImpl.getCachedDocument] effectively return `null`. We extend the file document

     * manager to simulate the behavior of [FileDocumentManagerBase], which puts [FileDocumentManagerBase.HARD_REF_TO_DOCUMENT_KEY] user

     * data on the virtual file.

     */",f4014:m95
58220,@kotlin.internal.InlineOnly public inline operator fun compareTo(other: UByte): Int,this.compareTo(other.toULong()),"/**

     * Compares this value with the specified value for order.

     * Returns zero if this value is equal to the specified other value, a negative number if it's less than other,

     * or a positive number if it's greater than other.

     */",f17066:m81
14101,internal fun <E> Array<E>.resetAt(index: Int),"{
    (@Suppress(""UNCHECKED_CAST"") (this as Array<Any?>))[index] = null
}","/**

 * Resets an array element at a specified index to some implementation-specific _uninitialized_ value.

 * In particular, references stored in this element are released and become available for garbage collection.

 * Attempts to read _uninitialized_ value work in implementation-dependent manner,

 * either throwing exception or returning some kind of implementation-specific default value.

 */",f3730:m51
58539,"@SinceKotlin(""1.5"") @WasExperimental(ExperimentalUnsignedTypes::class) public infix fun ULong.downTo(to: ULong): ULongProgression","{
    return ULongProgression.fromClosedRange(this, to, -1L)
}","/**

 * Returns a progression from this value down to the specified [to] value with the step -1.

 * 

 * The [to] value should be less than or equal to `this` value.

 * If the [to] value is greater than `this` value the returned progression is empty.

 */",f17090:m609
64264,@kotlin.internal.IntrinsicConstEvaluation public inline infix fun ushr(bitCount: Int): Long,"wasm_i64_shr_u(this, bitCount.toLong())","/**

     * Shifts this value right by the [bitCount] number of bits, filling the leftmost bits with zeros.

     *

     * Note that only the six lowest-order bits of the [bitCount] are used as the shift distance.

     * The shift distance actually used is therefore always in the range `0..63`.

     */",f17455:m3511
57143,"@SinceKotlin(""1.1"") @kotlin.internal.InlineOnly public actual inline fun maxOf(a: Long, b: Long): Long","{
    return Math.max(a, b)
}","/**

 * Returns the greater of two values.

 */",f16966:m107
13971,"@Suppress(""ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS"") public actual fun String.startsWith(prefix: String, startIndex: Int, ignoreCase: Boolean = false): Boolean","regionMatches(startIndex, prefix, 0, prefix.length, ignoreCase)","/**

 * Returns `true` if a substring of this string starting at the specified offset [startIndex] starts with the specified prefix.

 */",f3713:m281
14864,"@SinceKotlin(""1.4"") public actual fun ByteArray?.contentHashCode(): Int","{
    if (this === null) return 0
    var result = 1
    for (element in this) result = 31 * result + element.hashCode()
    return result
}","/**

 * Returns a hash code based on the contents of this array as if it is [List].

 */",f3831:m1609
48526,"fun getTest(namePrefix: String, buildType: String): TestExecutable","getTest(namePrefix, NativeBuildType.valueOf(buildType.toUpperCaseAsciiOnly()))",/** Returns a test executable with the given [namePrefix] and the given build type. Throws an exception if there is no such binary.*/,f15652:m295
8267,"internal fun shouldPerformPreLink(config: KonanConfig, caches: ResolvedCacheBinaries, linkerOutputKind: LinkerOutputKind): Boolean","{
    val isStaticLibrary = linkerOutputKind == LinkerOutputKind.STATIC_LIBRARY && config.isFinalBinary
    val enabled = config.cacheSupport.preLinkCaches
    val nonEmptyCaches = caches.static.isNotEmpty()
    return isStaticLibrary && enabled && nonEmptyCaches
}","/**

 * Check if we should link static caches into an object file before running full linkage.

 */",f3225:m19
55958,"@SinceKotlin(""1.1"") public inline fun <T, K, R, M: MutableMap<in K, R>> Grouping<T, K>.foldTo(destination: M, initialValueSelector: (key: K, element: T) -> R, operation: (key: K, accumulator: R, element: T) -> R): M","@Suppress(""UNCHECKED_CAST"") aggregateTo(destination) { key, acc, e, first -> operation(key, if (first) initialValueSelector(key, e) else acc as R, e) }","/**

 * Groups elements from the [Grouping] source by key and applies [operation] to the elements of each group sequentially,

 * passing the previously accumulated value and the current element as arguments,

 * and stores the results in the given [destination] map.

 * An initial value of accumulator is provided by [initialValueSelector] function.

 *

 * @param initialValueSelector a function that provides an initial value of accumulator for each group.

 *  It's invoked with parameters:

 *  - `key`: the key of the group;

 *  - `element`: the first element being encountered in that group.

 *

 * If the [destination] map already has a value corresponding to some key, that value is used as an initial value of

 * the accumulator for that group and the [initialValueSelector] function is not called for that group.

 *

 * @param operation a function that is invoked on each element with the following parameters:

 *  - `key`: the key of the group this element belongs to;

 *  - `accumulator`: the current value of the accumulator of the group;

 *  - `element`: the element from the source being accumulated.

 *

 * @return the [destination] map associating the key of each group with the result of accumulating the group elements.

 * @sample samples.collections.Grouping.foldByEvenLengthWithComputedInitialValueTo

 */",f16820:m227
48101,"@JvmName(""registerTaskOld"") @Deprecated(""please use Project.registerTask"", ReplaceWith(""project.registerTask(name, type, emptyList(), body)"")) internal fun <T: Task> registerTask(project: Project, name: String, type: Class<T>, body: (T) -> (Unit)): TaskProvider<T>","project.registerTask(name, type, emptyList(), body)","/**

 * Registers the task with [name] and [type] and initialization script [body]

 */",f15539:m57
57343,public actual operator fun IntArray.plus(element: Int): IntArray,"{
    val index = size
    val result = java.util.Arrays.copyOf(this, index + 1)
    result[index] = element
    return result
}","/**

 * Returns an array containing all elements of the original array and then the given [element].

 */",f16970:m3487
57073,@kotlin.internal.InlineOnly public inline fun File.reader(charset: Charset = Charsets.UTF_8): InputStreamReader,inputStream().reader(charset),"/**

 * Returns a new [FileReader] for reading the content of this file.

 */",f16956:m45
14778,internal fun Char.isDigitImpl(): Boolean,"{
    return digitToIntImpl() >= 0
}","/**

 * Returns `true` if this character is a digit.

 */",f3823:m103
58845,"@SinceKotlin(""1.4"") public inline fun <T, R: Comparable<R>> Sequence<T>.minByOrNull(selector: (T) -> R): T?","{
    val iterator = iterator()
    if (!iterator.hasNext()) return null
    var minElem = iterator.next()
    if (!iterator.hasNext()) return minElem
    var minValue = selector(minElem)
    do {
        val e = iterator.next()
        val v = selector(e)
        if (minValue > v) {
            minElem = e
            minValue = v
        }
    } while (iterator.hasNext())
    return minElem
}","/**

 * Returns the first element yielding the smallest value of the given function or `null` if there are no elements.

 *

 * The operation is _terminal_.

 * 

 * @sample samples.collections.Collections.Aggregates.minByOrNull

 */",f17096:m3667
57222,"@SinceKotlin(""1.4"") @OptIn(kotlin.experimental.ExperimentalTypeInference::class) @OverloadResolutionByLambdaReturnType @kotlin.jvm.JvmName(""sumOfBigDecimal"") @kotlin.internal.InlineOnly public inline fun CharSequence.sumOf(selector: (Char) -> java.math.BigDecimal): java.math.BigDecimal","{
    var sum: java.math.BigDecimal = 0.toBigDecimal()
    for (element in this) {
        sum += selector(element)
    }
    return sum
}","/**

 * Returns the sum of all values produced by [selector] function applied to each character in the char sequence.

 */",f16969:m151
20272,"public fun collectPossibleReferenceShortenings(file: KtFile, selection: TextRange = file.textRange, shortenOptions: ShortenOptions = ShortenOptions.DEFAULT, classShortenStrategy: (KtClassLikeSymbol) -> ShortenStrategy = defaultClassShortenStrategy, callableShortenStrategy: (KtCallableSymbol) -> ShortenStrategy = defaultCallableShortenStrategy): ShortenCommand","withValidityAssertion { analysisSession.referenceShortener.collectShortenings(file, selection, shortenOptions, classShortenStrategy, callableShortenStrategy) }","/**

     * Collects possible references to shorten. By default, it shortens a fully-qualified members to the outermost class and does not

     * shorten enum entries.  In case of KDoc shortens reference only if it is already imported.

     *

     * N.B. This API is not implemented for the FE10 implementation!

     * For a K1- and K2-compatible API, use [org.jetbrains.kotlin.idea.base.codeInsight.ShortenReferencesFacility].

     *

     * Also see [org.jetbrains.kotlin.idea.base.analysis.api.utils.shortenReferences] and functions around it.

     */",f5810:m257
48546,"@JvmOverloads fun framework(buildTypes: Collection<NativeBuildType> = NativeBuildType.DEFAULT_BUILD_TYPES, configure: Framework.() -> Unit = {})","createBinaries("""", project.name, NativeOutputKind.FRAMEWORK, buildTypes, ::Framework, configure)",/** Creates an Objective-C framework with the empty name prefix for each build type and configures it. */,f15652:m537
34407,fun invokeAll(),"{
    outputTargets.forEach { outputTarget -> invokeTarget(outputTarget) }
    assert(deserializedTargets.isEmpty()) { ""Expected 'deserializedTargets' to be empty. Found ${deserializedTargets.keys}"" }
    assert(commonizedTargets.isEmpty()) { ""Expected 'commonizedTargets' to be empty. Found ${commonizedTargets.keys}"" }
    assert(targetDependencies.isEmpty()) { ""Expected 'targetDependencies' to be empty. Found $targetDependencies"" }
}","/**

     * Runs all tasks/targets in this queue

     */",f11297:m157
58981,"@SinceKotlin(""1.3"") public inline fun <V, M: MutableMap<in Char, in V>> CharSequence.associateWithTo(destination: M, valueSelector: (Char) -> V): M","{
    for (element in this) {
        destination.put(element, valueSelector(element))
    }
    return destination
}","/**

 * Populates and returns the [destination] mutable map with key-value pairs for each character of the given char sequence,

 * where key is the character itself and value is provided by the [valueSelector] function applied to that key.

 * 

 * If any two characters are equal, the last one overwrites the former value in the map.

 * 

 * @sample samples.text.Strings.associateWithTo

 */",f17097:m1553
15583,"fun getAllVirtualFilesFromDirectory(dir: Path, includeRoot: Boolean = true): Collection<VirtualFile>","{
    val fs = StandardFileSystems.local()
    return fs.findFileByPath(dir.toString())?.let { getAllVirtualFilesFromRoot(it, includeRoot) } ?: emptySet()
}","/**

     * Get all [VirtualFile]s inside the given [dir] (of [Path])

     *

     * Note that, if [CoreJarFileSystem] is not given, a fresh instance will be used, which will create fresh instances of [VirtualFile],

     *   resulting in potential hash mismatch (e.g., if used in scope membership check).

     */",f3909:m105
50396,@Test fun `test - launching after Lifecycle finished - will execute code right away`(),"{
    project.evaluate()
    val actionAInvocations = AtomicInteger(0)
    val actionBInvocations = AtomicInteger(0)
    project.launch actionB@{
        project.launch actionA@{
            assertEquals(0, actionBInvocations.get())
            assertEquals(1, actionAInvocations.incrementAndGet())
        }
        assertEquals(1, actionAInvocations.get())
        assertEquals(1, actionBInvocations.incrementAndGet())
    }
    assertEquals(1, actionAInvocations.get())
    assertEquals(1, actionBInvocations.get())
}","/**

     * This requirement is important to safely support project.future { }.getOrThrow() patterns (when the lifecycle is finished),

     */",f16105:m1019
56127,public fun <T> compareBy(vararg selectors: (T) -> Comparable<*>?): Comparator<T>,"{
    require(selectors.size > 0)
    return Comparator { a, b -> compareValuesByImpl(a, b, selectors) }
}","/**

 * Creates a comparator using the sequence of functions to calculate a result of comparison.

 * The functions are called sequentially, receive the given values `a` and `b` and return [Comparable]

 * objects. As soon as the [Comparable] instances returned by a function for `a` and `b` values do not

 * compare as equal, the result of that comparison is returned from the [Comparator].

 *

 * @sample samples.comparisons.Comparisons.compareByWithSelectors

 */",f16832:m161
10441,override fun chooseMethod(mark: Int),"{
    if (v1.mark == mark) {
        direction = if (v2.mark != mark && Strength.stronger(strength, v2.walkStrength)) Direction.FORWARD else Direction.NONE
    }
    if (v2.mark == mark) {
        direction = if (v1.mark != mark && Strength.stronger(strength, v1.walkStrength)) Direction.BACKWARD else Direction.NONE
    }
    if (Strength.weaker(v1.walkStrength, v2.walkStrength)) {
        direction = if (Strength.stronger(strength, v1.walkStrength)) Direction.BACKWARD else Direction.NONE
    } else {
        direction = if (Strength.stronger(strength, v2.walkStrength)) Direction.FORWARD else Direction.BACKWARD
    }
}","/**

   * Decides if this constraint can be satisfied and which way it

   * should flow based on the relative strength of the variables related,

   * and record that decision.

   */",f3476:m597
58578,"@SinceKotlin(""1.7"") public fun CharProgression.lastOrNull(): Char?","{
    return if (isEmpty()) null else this.last
}","/**

 * Returns the last element, or `null` if the progression is empty.

 * 

 * @sample samples.collections.Collections.Elements.last

 */",f17092:m281
56251,"@SinceKotlin(""1.5"") @kotlin.internal.InlineOnly @kotlin.internal.IntrinsicConstEvaluation public inline fun Float.mod(other: Float): Float","{
    val r = this % other
    return if (r != 0.0.toFloat() && r.sign != other.sign) r + other else r
}","/**

 * Calculates the remainder of flooring division of this value (dividend) by the other value (divisor).

 *

 * The result is either zero or has the same sign as the _divisor_ and has the absolute value less than the absolute value of the divisor.

 *

 * If the result cannot be represented exactly, it is rounded to the nearest representable number. In this case the absolute value of the result can be less than or _equal to_ the absolute value of the divisor.

 */",f16842:m625
63589,public actual fun <T> Array<out T>.sortWith(comparator: Comparator<in T>): Unit,"{
    if (size > 1) sortArrayWith(this, 0, size, comparator)
}","/**

 * Sorts the array in-place according to the order specified by the given [comparator].

 * 

 * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.

 */",f17396:m5101
64099,@kotlin.internal.IntrinsicConstEvaluation public inline operator fun minus(other: Short): Int,this.toInt() - other.toInt(),/** Subtracts the other value from this value. */,f17455:m1127
58806,"public inline fun <T, R, C: MutableCollection<in R>> Sequence<T>.mapIndexedTo(destination: C, transform: (index: Int, T) -> R): C","{
    var index = 0
    for (item in this) destination.add(transform(checkIndexOverflow(index++), item))
    return destination
}","/**

 * Applies the given [transform] function to each element and its index in the original sequence

 * and appends the results to the given [destination].

 * @param [transform] function that takes the index of an element and the element itself

 * and returns the result of the transform applied to the element.

 *

 * The operation is _terminal_.

 */",f17096:m2227
31997,fun containsErrorTypeInParameters(function: FunctionDescriptor): Boolean,"{
    val receiverParameter = function.extensionReceiverParameter
    if (receiverParameter != null && containsErrorType(receiverParameter.type)) return true
    for (parameter in function.valueParameters) {
        if (containsErrorType(parameter.type)) return true
    }
    for (parameter in function.typeParameters) {
        for (upperBound in parameter.upperBounds) {
            if (containsErrorType(upperBound)) return true
        }
    }
    return false
}","/**

     * @return true if any of the types referenced in parameter types (including type parameters and extension receiver) of the function

     * is an error type. Does not check the return type of the function.

     */",f10944:m61
54805,"@SinceKotlin(""1.1"") public actual fun <T: Comparable<T>> maxOf(a: T, b: T, c: T): T","{
    return maxOf(a, maxOf(b, c))
}","/**

 * Returns the greater of three values.

 * 

 * If there are multiple equal maximal values, returns the first of them.

 */",f16714:m165
54719,"public actual fun ByteArray.copyOfRange(fromIndex: Int, toIndex: Int): ByteArray","{
    AbstractList.checkRangeIndexes(fromIndex, toIndex, size)
    return this.asDynamic().slice(fromIndex, toIndex)
}","/**

 * Returns a new array which is a copy of the specified range of the original array.

 * 

 * @param fromIndex the start of the range (inclusive) to copy.

 * @param toIndex the end of the range (exclusive) to copy.

 * 

 * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.

 * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].

 */",f16713:m2101
45762,"@Deprecated(""Scheduled for removal in Kotlin 2.1. Check KT-58759"", replaceWith = ReplaceWith(""project.dependencies.enforcedPlatform(notation)"")) fun enforcedPlatform(notation: Any): Dependency",project.dependencies.enforcedPlatform(notation),"/**

     * @suppress

     */",f14927:m661
30086,"override fun create(parcel: Parcel): Pair<F, S>",firstParceler.create(parcel) to secondParceler.create(parcel),"/**

     * Reads the [T] instance state from the [parcel], constructs the new [T] instance and returns it.

     */",f10639:m31
20153,public fun KtTypeReference.getKtType(): KtType,withValidityAssertion { analysisSession.typeProvider.getKtType(this) },"/**

     * Resolve [KtTypeReference] and return corresponding [KtType] if resolved.

     *

     * This may raise an exception if the resolution ends up with an unexpected kind.

     */",f5780:m193
58026,@kotlin.internal.InlineOnly public inline operator fun plus(other: ULong): ULong,this.toULong().plus(other),/** Adds the other value to this value. */,f17058:m165
63531,internal fun LongArray.copyOfUninitializedElements(newSize: Int): LongArray,"{
    return copyOfUninitializedElements(0, newSize)
}","/**

 * Returns new array which is a copy of the original array with new elements filled with **lateinit** _uninitialized_ values.

 * Attempts to read _uninitialized_ values from this array work in implementation-dependent manner,

 * either throwing exception or returning some kind of implementation-specific default value.

 */",f17396:m3673
27526,fun getAggregatingGeneratedTypes(typeInfoProvider: (Collection<File>) -> Set<String>): Set<String>,"{
    val generatedAggregating: MutableSet<File> = HashSet(aggregatingGenerated.size)
    aggregatingGenerated.forEach { if (it.isJavaFileOrClass()) {
        generatedAggregating.add(it)
    } }
    return typeInfoProvider(generatedAggregating)
}",/** Returns all types generated by aggregating APs. */,f9701:m251
15047,"@SinceKotlin(""1.1"") @kotlin.internal.InlineOnly public actual inline fun minOf(a: Long, b: Long, c: Long): Long","{
    return minOf(a, minOf(b, c))
}","/**

 * Returns the smaller of three values.

 */",f3836:m677
13575,public operator fun rangeTo(other: Byte): IntRange,"IntRange(this.toInt(), other.toInt())",/** Creates a range from this value to the specified [other] value. */,f3686:m1469
55731,"@SinceKotlin(""1.1"") public fun String.toIntOrNull(radix: Int): Int?","{
    checkRadix(radix)
    val length = this.length
    if (length == 0) return null
    val start: Int
    val isNegative: Boolean
    val limit: Int
    val firstChar = this[0]
    if (firstChar < '0') {
        if (length == 1) return null
        start = 1
        if (firstChar == '-') {
            isNegative = true
            limit = Int.MIN_VALUE
        } else if (firstChar == '+') {
            isNegative = false
            limit = -Int.MAX_VALUE
        } else return null
    } else {
        start = 0
        isNegative = false
        limit = -Int.MAX_VALUE
    }
    val limitForMaxRadix = (-Int.MAX_VALUE) / 36
    var limitBeforeMul = limitForMaxRadix
    var result = 0
    for (i in start until length) {
        val digit = digitOf(this[i], radix)
        if (digit < 0) return null
        if (result < limitBeforeMul) {
            if (limitBeforeMul == limitForMaxRadix) {
                limitBeforeMul = limit / radix
                if (result < limitBeforeMul) {
                    return null
                }
            } else {
                return null
            }
        }
        result *= radix
        if (result < limit + digit) return null
        result -= digit
    }
    return if (isNegative) result else -result
}","/**

 * Parses the string as an [Int] number and returns the result

 * or `null` if the string is not a valid representation of a number.

 *

 * @throws IllegalArgumentException when [radix] is not a valid radix for string to number conversion.

 */",f16787:m117
30089,"override fun Int.write(parcel: Parcel, flags: Int)","{
    parcel.writeInt(this)
}","/**

     * Writes the [T] instance state to the [parcel].

     */",f10639:m73
53467,"@SinceKotlin(""1.4"") public fun Node.clear()","{
    while (hasChildNodes()) {
        removeChild(firstChild!!)
    }
}",/** Removes all the children from this node. */,f16681:m19
56248,"@SinceKotlin(""1.5"") @kotlin.internal.InlineOnly @kotlin.internal.IntrinsicConstEvaluation public inline fun Long.mod(other: Int): Int",this.mod(other.toLong()).toInt(),"/**

 * Calculates the remainder of flooring division of this value (dividend) by the other value (divisor).

 *

 * The result is either zero or has the same sign as the _divisor_ and has the absolute value less than the absolute value of the divisor.

 */",f16842:m557
58595,"@kotlin.jvm.JvmName(""longRangeContains"") public operator fun ClosedRange<Long>.contains(value: Byte): Boolean","{
    return contains(value.toLong())
}","/**

 * Checks if the specified [value] belongs to this range.

 */",f17092:m647
58914,"@kotlin.jvm.JvmName(""sumOfFloat"") public fun Sequence<Float>.sum(): Float","{
    var sum: Float = 0.0f
    for (element in this) {
        sum += element
    }
    return sum
}","/**

 * Returns the sum of all elements in the sequence.

 *

 * The operation is _terminal_.

 */",f17096:m6167
43626,"fun extractNativeCompilerClasspath(taskOutput: String, toolName: NativeToolKind): List<String>","extractNativeToolSettings(taskOutput, toolName, NativeToolSettingsKind.COMPILER_CLASSPATH).toList()","/**

 * Extracts classpath of given task's output

 *

 * @param taskOutput debug level output of the task

 * @param toolName compiler type

 *

 * @return list of dependencies in classpath

 */",f13467:m33
59035,"@SinceKotlin(""1.4"") @OptIn(kotlin.experimental.ExperimentalTypeInference::class) @OverloadResolutionByLambdaReturnType @kotlin.internal.InlineOnly public inline fun <R: Comparable<R>> CharSequence.minOf(selector: (Char) -> R): R","{
    if (isEmpty()) throw NoSuchElementException()
    var minValue = selector(this[0])
    for (i in 1 .. lastIndex) {
        val v = selector(this[i])
        if (minValue > v) {
            minValue = v
        }
    }
    return minValue
}","/**

 * Returns the smallest value among all values produced by [selector] function

 * applied to each character in the char sequence.

 * 

 * @throws NoSuchElementException if the char sequence is empty.

 */",f17097:m3171
58684,public infix fun Char.until(to: Char): CharRange,"{
    if (to <= '\u0000') return CharRange.EMPTY
    return this .. (to - 1).toChar()
}","/**

 * Returns a range from this value up to but excluding the specified [to] value.

 * 

 * If the [to] value is less than or equal to `this` value, then the returned range is empty.

 */",f17092:m2157
37785,"fun createStandaloneAnalysisApiSession(kotlinSourceModuleName: String = defaultKotlinSourceModuleName, kotlinFiles: List<File>, dependencyKlibs: List<Path> = emptyList()): StandaloneAnalysisAPISession","{
    val currentArchitectureTarget = HostManager.host
    val nativePlatform = NativePlatforms.nativePlatformByTargets(listOf(currentArchitectureTarget))
    return buildStandaloneAnalysisAPISession {
        @OptIn(KtAnalysisApiInternals::class) registerProjectService(KtLifetimeTokenProvider::class.java, KtAlwaysAccessibleLifetimeTokenProvider())
        buildKtModuleProvider {
            platform = nativePlatform
            val stdlibModule = addModule(buildKtLibraryModule {
                addBinaryRoot(Path(kotlinNativeStdlibPath))
                platform = nativePlatform
                libraryName = ""stdlib""
            })
            val dependencyKlibModules = dependencyKlibs.map { klib -> buildKtLibraryModule {
                addBinaryRoot(klib)
                platform = nativePlatform
                libraryName = klib.nameWithoutExtension
                addRegularDependency(stdlibModule)
            } }
            addModule(buildKtSourceModule {
                addSourceRoots(kotlinFiles.map { it.toPath() })
                addRegularDependency(stdlibModule)
                dependencyKlibModules.forEach { dependencyKlibModule -> addRegularDependency(dependencyKlibModule) }
                platform = nativePlatform
                moduleName = kotlinSourceModuleName
            })
        }
    }
}","/**

 * Creates a standalone analysis session from [kotlinFiles] on disk.

 * The Kotlin/Native stdlib will be provided as dependency

 */",f11917:m89
22031,"private fun countQualifiersToDrop(wholeType: KtUserType, nestedType: KtUserType): Int","{
    val qualifierIndex = generateSequence(wholeType) { it.qualifier }.indexOf(nestedType)
    require(qualifierIndex != -1) { ""Whole type $wholeType should contain $nestedType, but it didn't"" }
    return qualifierIndex
}","/**

     * @return How many qualifiers needs to be dropped from [wholeType] to get [nestedType].

     *

     * Example: to get `foo.bar` from `foo.bar.Baz.Inner`, you need to drop 2 qualifiers (`Inner` and `Baz`).

     */",f8681:m1539
48290,"fun isDylib(file: File, logger: Logger): Boolean","{
    try {
        RandomAccessFile(file, ""r"").use { raf ->
            val magic = raf.readInt().fromUIntToLong()
            val fileTypeOffset = when (magic) {
                MH_CIGAM, MH_CIGAM_64 -> FILE_TYPE_OFFSET
                FAT_MAGIC, FAT_MAGIC_64 -> {
                    raf.seek(FAT_FIRST_MACHO_OFFSET_OFFSET)
                    val firstMachoOffset = raf.readInt().fromUIntToLong()
                    firstMachoOffset + FILE_TYPE_OFFSET
                }
                else -> return false
            }
            raf.seek(fileTypeOffset)
            val fileType = raf.readInt().toLong()
            return fileType == MH_BILYD
        }
    } catch (e: IOException) {
        logger.info(""IOException while cheking if '$file' is a dylib"", e)
        return false
    }
}","/**

     * Checks if the [file] is a Mach-O dynamic shared library

     * or a Mach-O fat binary containing a number of dynamic libraries

     */",f15591:m57
14250,public fun incrementAndGet(): Long,this::value.getAndAddField(1L) + 1L,"/**

     * Atomically increments the current value by one and returns the new value.

     */",f3762:m271
55652,"@ExperimentalStdlibApi @SinceKotlin(""1.9"") public fun String.hexToByteArray(format: HexFormat = HexFormat.Default): ByteArray","hexToByteArray(0, length, format)","/**

 * Parses bytes from this string using the specified [HexFormat].

 *

 * Note that only [HexFormat.BytesHexFormat] affects parsing,

 * and parsing is performed in case-insensitive manner.

 * Also, any of the char sequences CRLF, LF and CR is considered a valid line separator.

 *

 * @param format the [HexFormat] to use for parsing, [HexFormat.Default] by default.

 *

 * @throws IllegalArgumentException if this string does not comply with the specified [format].

 */",f16779:m641
14932,"internal fun DoubleArray.copyOfUninitializedElements(fromIndex: Int, toIndex: Int): DoubleArray","{
    val newSize = toIndex - fromIndex
    if (newSize < 0) {
        throw IllegalArgumentException(""$fromIndex > $toIndex"")
    }
    val result = DoubleArray(newSize)
    this.copyInto(result, 0, fromIndex, toIndex.coerceAtMost(size))
    return result
}","/**

 * Returns new array which is a copy of the original array's range between [fromIndex] (inclusive)

 * and [toIndex] (exclusive) with new elements filled with **lateinit** _uninitialized_ values.

 * Attempts to read _uninitialized_ values from this array work in implementation-dependent manner,

 * either throwing exception or returning some kind of implementation-specific default value.

 */",f3831:m3453
57398,public fun ShortArray.toSortedSet(): java.util.SortedSet<Short>,"{
    return toCollection(java.util.TreeSet<Short>())
}","/**

 * Returns a new [SortedSet][java.util.SortedSet] of all elements.

 */",f16970:m4725
11898,"@Suppress(""FINAL_UPPER_BOUND"") @ExperimentalForeignApi public fun <T: Double> NativePlacement.alloc(value: T): DoubleVarOf<T>",alloc<DoubleVarOf<T>> { this.value = value },"/**

 * Allocates variable with given value type and initializes it with given value.

 */",f3606:m181
14025,"@SinceKotlin(""1.4"") @kotlin.internal.InlineOnly public actual inline fun StringBuilder.appendLine(value: Short): StringBuilder",append(value).appendLine(),"/** Appends [value] to this [StringBuilder], followed by a line feed character (`\n`). */",f3715:m29
57032,@kotlin.internal.InlineOnly public inline fun InputStream.buffered(bufferSize: Int = DEFAULT_BUFFER_SIZE): BufferedInputStream,"if (this is BufferedInputStream) this else BufferedInputStream(this, bufferSize)","/**

 * Creates a buffered input stream wrapping this stream.

 * @param bufferSize the buffer size to use.

 */",f16952:m131
57123,override fun step(): File?,"{
    if (!rootVisited) {
        if (onEnter?.invoke(root) == false) {
            return null
        }
        rootVisited = true
        return root
    } else if (fileList == null || fileIndex < fileList!!.size) {
        if (fileList == null) {
            fileList = root.listFiles()
            if (fileList == null) {
                onFail?.invoke(root, AccessDeniedException(file = root, reason = ""Cannot list files in a directory""))
            }
            if (fileList == null || fileList!!.size == 0) {
                onLeave?.invoke(root)
                return null
            }
        }
        return fileList!![fileIndex++]
    } else {
        onLeave?.invoke(root)
        return null
    }
}","/** First root directory, then all children */",f16960:m327
56042,"public inline fun <K, V> Map<out K, V>.filterNot(predicate: (Map.Entry<K, V>) -> Boolean): Map<K, V>","{
    return filterNotTo(LinkedHashMap<K, V>(), predicate)
}","/**

 * Returns a new map containing all key-value pairs not matching the given [predicate].

 *

 * The returned map preserves the entry iteration order of the original map.

 * @sample samples.collections.Maps.Filtering.filterNot

 */",f16823:m1105
21457,override fun createPointer(): KtSymbolPointer<KtFirEnumEntryInitializerSymbol>,withValidityAssertion { KtPsiBasedSymbolPointer.createForSymbolFromSource<KtFirEnumEntryInitializerSymbol>(this) ?: KtFirEnumEntryInitializerSymbolPointer(analysisSession.createOwnerPointer(this)) },"/**

     * [KtFirEnumEntryInitializerSymbol] is the required return type instead of [KtEnumEntryInitializerSymbol] to fulfill return type

     * subtyping requirements, as [KtEnumEntryInitializerSymbol] is not a subtype of

     * [org.jetbrains.kotlin.analysis.api.symbols.KtAnonymousObjectSymbol]. (It cannot be a subtype in the general Analysis API because enum

     * entry initializers are classes in FE10.)

     */",f8562:m55
21271,public inline fun <reified M: KtModule> KtModule.allDirectDependenciesOfType(): Sequence<M>,allDirectDependencies().filterIsInstance<M>(),"/**

 * A list of all other modules of type [M] that the current module can depend on.

 *

 * @see KtModule.directRegularDependencies

 * @see KtModule.directDependsOnDependencies

 * @see KtModule.directFriendDependencies

 */",f8524:m95
58697,public fun <T: Comparable<T>> T.coerceAtLeast(minimumValue: T): T,"{
    return if (this < minimumValue) minimumValue else this
}","/**

 * Ensures that this value is not less than the specified [minimumValue].

 * 

 * @return this value if it's greater than or equal to the [minimumValue] or the [minimumValue] otherwise.

 * 

 * @sample samples.comparisons.ComparableOps.coerceAtLeastComparable

 */",f17092:m2407
15042,"@SinceKotlin(""1.1"") @kotlin.internal.InlineOnly public actual inline fun minOf(a: Double, b: Double): Double","{
    return when {
        a.isNaN() -> a
        b.isNaN() -> b
        else -> if (a.compareTo(b) <= 0) a else b
    }
}","/**

 * Returns the smaller of two values.

 * 

 * If either value is `NaN`, returns `NaN`.

 */",f3836:m573
57052,@kotlin.internal.InlineOnly public inline fun println(message: Int),"{
    System.out.println(message)
}",/** Prints the given [message] and the line separator to the standard output stream. */,f16953:m165
63168,"internal fun assert(value: Boolean, lazyMessage: () -> Any)","{
    if (!value) {
        val message = lazyMessage()
        throw AssertionError(message)
    }
}","/**

 * Throws an [AssertionError] calculated by [lazyMessage] if the [value] is false.

 */",f17307:m33
15053,"@SinceKotlin(""1.4"") public actual fun minOf(a: Int, vararg other: Int): Int","{
    var min = a
    for (e in other) min = minOf(min, e)
    return min
}","/**

 * Returns the smaller of the given values.

 */",f3836:m803
49552,"internal fun Project.transformMetadataLibrariesForIde(resolution: MetadataDependencyResolution.ChooseVisibleSourceSets): Map<String, Iterable<File>>","{
    return when (val metadataProvider = resolution.metadataProvider) {
        is ProjectMetadataProvider -> resolution.visibleSourceSetNamesExcludingDependsOn.associateWith { visibleSourceSetName -> metadataProvider.getSourceSetCompiledMetadata(visibleSourceSetName) ?: emptyList() }
        is ArtifactMetadataProvider -> transformMetadataLibrariesForIde(kotlinTransformedMetadataLibraryDirectoryForIde, resolution, metadataProvider)
    }
}","/**

 * Returns a map from 'visibleSourceSetName' to the transformed metadata libraries.

 * The map is necessary to support [MetadataDependencyTransformation]'s shape, which

 * is used in import and therefore hard to change.

 *

 * This function will also support project to project dependencies and just returns the compiled output FileCollections to the metadata.

 */",f15881:m27
9238,private fun buildNonNullableArgToString(argument: IrExpression): IrExpression,"{
    return if (argument.type.isString() || argument.type.isNullableString()) argument else {
        val calleeOrNull = argument.type.classOrNull?.owner?.functions?.singleOrNull { it.name == OperatorNameConventions.TO_STRING && it.valueParameters.isEmpty() }?.symbol
        val callee = calleeOrNull ?: context.ir.symbols.memberToString
        builder.irCall(callee, callee.owner.returnType, valueArgumentsCount = 0, typeArgumentsCount = 0).apply { dispatchReceiver = argument }
    }
}","/** Builds snippet of type String

     * - ""argument"", in case argument's type is String, since String.toString() is no-op

     * - ""argument"", in case argument's type is String?, due to smart-cast and no-op

     * - ""argument.toString()"", otherwise

     */",f3332:m259
51669,"public fun Metadata(kind: Int? = null, metadataVersion: IntArray? = null, data1: Array<String>? = null, data2: Array<String>? = null, extraString: String? = null, packageName: String? = null, extraInt: Int? = null): Metadata","Metadata(kind ?: 1, metadataVersion ?: intArrayOf(), intArrayOf(1, 0, 3), data1 ?: emptyArray(), data2 ?: emptyArray(), extraString ?: """", packageName ?: """", extraInt ?: 0)","/**

 * Helper function to instantiate [Metadata].

 * Contrary to a direct constructor call, this one accepts nullable parameters to substitute nulls with default values.

 * Also, this one does not accept [Metadata.bytecodeVersion] as it is deprecated.

 */",f16358:m41
53169,"@LowPriorityInOverloadResolution @Deprecated(message = ""This API is moved to another package, use 'kotlinx.dom.addClass' instead."", replaceWith = ReplaceWith(""this.addClass(cssClasses)"", ""kotlinx.dom.addClass"")) @DeprecatedSinceKotlin(warningSince = ""1.4"", errorSince = ""1.6"") @Suppress(""NOTHING_TO_INLINE"") public inline fun Element.addClass(vararg cssClasses: String): Boolean",this.newAddClass(*cssClasses),"/**

 * Adds CSS class to element. Has no effect if all specified classes are already in class attribute of the element

 *

 * @return true if at least one class has been added

 */",f16628:m47
68798,fun KtElement.getCall(context: BindingContext): Call?,"{
    val element = if (this is KtExpression) KtPsiUtil.deparenthesize(this) else this
    if (element == null) return null
    if (element is KtCallElement && element.calleeExpression == null) return null
    if (element is KtWhenExpression) {
        val subjectVariable = element.subjectVariable
        if (subjectVariable != null) {
            return subjectVariable.getCall(context) ?: context[CALL, element]
        }
    }
    val parent = element.parent
    val reference: KtExpression? = when (parent) {
        is KtInstanceExpressionWithLabel -> parent
        is KtUserType -> parent.parent.parent as? KtConstructorCalleeExpression
        else -> element.getCalleeExpressionIfAny()
    }
    if (reference != null) {
        return context[CALL, reference]
    }
    return context[CALL, element]
}","/**

 *  For expressions like <code>a(), a[i], a.b.c(), +a, a + b, (a()), a(): Int, @label a()</code>

 *  returns a corresponding call.

 *

 *  Note: special construction like <code>a!!, a ?: b, if (c) a else b</code> are resolved as calls,

 *  so there is a corresponding call for them.

 */",f19381:m245
63283,"private fun codePointFrom4(bytes: ByteArray, byte1: Int, index: Int, endIndex: Int, throwOnMalformed: Boolean): Int","{
    if (index >= endIndex) {
        malformed(0, index, throwOnMalformed)
    }
    val byte2 = bytes[index].toInt()
    if (byte1 and 0xF == 0x0) {
        if (byte2 and 0xF0 <= 0x80) {
            return malformed(0, index, throwOnMalformed)
        }
    } else if (byte1 and 0xF == 0x4) {
        if (byte2 and 0xF0 != 0x80) {
            return malformed(0, index, throwOnMalformed)
        }
    } else if (byte1 and 0xF > 0x4) {
        return malformed(0, index, throwOnMalformed)
    } else if (byte2 and 0xC0 != 0x80) {
        return malformed(0, index, throwOnMalformed)
    }
    if (index + 1 == endIndex) {
        return malformed(1, index, throwOnMalformed)
    }
    val byte3 = bytes[index + 1].toInt()
    if (byte3 and 0xC0 != 0x80) {
        return malformed(1, index, throwOnMalformed)
    }
    if (index + 2 == endIndex) {
        return malformed(2, index, throwOnMalformed)
    }
    val byte4 = bytes[index + 2].toInt()
    if (byte4 and 0xC0 != 0x80) {
        return malformed(2, index, throwOnMalformed)
    }
    return (byte1 shl 18) xor (byte2 shl 12) xor (byte3 shl 6) xor byte4 xor 0x381F80
}","/**

 * Returns code point corresponding to UTF-8 sequence of four bytes,

 * where the first byte of the sequence is the [byte1] and the others are in the [bytes] array starting from the [index].

 * Returns a non-positive value indicating number of bytes from [bytes] included in malformed sequence

 * if the sequence is malformed and [throwOnMalformed] is false.

 *

 * @throws CharacterCodingException if the sequence of four bytes is malformed and [throwOnMalformed] is true.

 */",f17358:m177
58108,@kotlin.internal.InlineOnly public inline operator fun rangeTo(other: UByte): UIntRange,"UIntRange(this.toUInt(), other.toUInt())",/** Creates a range from this value to the specified [other] value. */,f17059:m473
10448,override fun markUnsatisfied(),"{
    direction = Direction.NONE
}","/**

   * Record the fact that this constraint is unsatisfied.

   */",f3476:m731
50872,internal fun Project.assertContainsDiagnostic(factory: ToolingDiagnosticFactory),"{
    kotlinToolingDiagnosticsCollector.getDiagnosticsForProject(this).assertContainsDiagnostic(factory)
}","/**

 * Checks that diagnostic with [factory.id] is reported. The exact parameters (if any)

 * are ignored. If you need to compare the parameters, refer to the overload accepting [ToolingDiagnostic]

 */",f16183:m153
61698,public actual fun print(message: Any?),"{
    printImpl(message?.toString())
}",/** Prints the given [message] to the standard output stream. */,f17252:m61
7792,protected fun buildFirstStageArgs(klibPath: String),"mutableListOf<String>().apply {
    addArg(""-output"", klibPath)
    addArg(""-produce"", CompilerOutputKind.LIBRARY.name.lowercase(Locale.getDefault()))
    addAll(buildCommonArgs())
    addAll(firstStageExtraOpts())
    allSourceFiles.mapTo(this) { it.absolutePath }
    commonSrcFiles.flatMap { it.files }.mapTo(this) { ""-Xcommon-sources=${it.absolutePath}"" }
}",/** Args passed to the compiler at the first stage of two-stage compilation (klib building). */,f3138:m299
52962,"@SinceKotlin(""1.2"") public actual fun <T> Iterable<T>.shuffled(): List<T>",toMutableList().apply { shuffle() },"/**

 * Returns a new list with the elements of this collection randomly shuffled.

 */",f16596:m243
58579,"@SinceKotlin(""1.3"") @kotlin.internal.InlineOnly public inline fun IntRange.random(): Int","{
    return random(Random)
}","/**

 * Returns a random element from this range.

 * 

 * @throws IllegalArgumentException if this range is empty.

 */",f17092:m301
54727,"@SinceKotlin(""1.3"") @Suppress(""ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS"") public actual fun <T> Array<T>.fill(element: T, fromIndex: Int = 0, toIndex: Int = size): Unit","{
    AbstractList.checkRangeIndexes(fromIndex, toIndex, size)
    nativeFill(element, fromIndex, toIndex)
}","/**

 * Fills this array or its subrange with the specified [element] value.

 * 

 * @param fromIndex the start of the range (inclusive) to fill, 0 by default.

 * @param toIndex the end of the range (exclusive) to fill, size of this array by default.

 * 

 * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.

 * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].

 */",f16713:m2325
56510,"@SinceKotlin(""1.4"") @kotlin.internal.InlineOnly @Suppress(""ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS"") public actual inline fun StringBuilder.toCharArray(destination: CharArray, destinationOffset: Int = 0, startIndex: Int = 0, endIndex: Int = this.length): Unit","this.getChars(startIndex, endIndex, destination, destinationOffset)","/**

 * Copies characters from this string builder into the [destination] character array.

 *

 * @param destination the array to copy to.

 * @param destinationOffset the position in the array to copy to, 0 by default.

 * @param startIndex the beginning (inclusive) of the range to copy, 0 by default.

 * @param endIndex the end (exclusive) of the range to copy, length of this string builder by default.

 *

 * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of this string builder indices or when `startIndex > endIndex`.

 * @throws IndexOutOfBoundsException when the subrange doesn't fit into the [destination] array starting at the specified [destinationOffset],

 *  or when that index is out of the [destination] array indices range.

 */",f16890:m227
64398,public fun Any?.toString(): String,"this?.toString() ?: ""null""","/**

 * Returns a string representation of the object. Can be called with a null receiver, in which case

 * it returns the string ""null"".

 */",f17462:m29
40916,fun ChangesCollector.getChangedSymbols(reporter: ICReporter): DirtyData,"{
    return changes().getChangedAndImpactedSymbols(caches = emptyList(), reporter)
}","/**

 * Returns changed symbols from the changes collected by this [ChangesCollector].

 *

 * If impacted symbols are also needed, use [getChangedAndImpactedSymbols].

 */",f12967:m285
55673,"@ExperimentalStdlibApi @SinceKotlin(""1.9"") public fun String.hexToLong(format: HexFormat = HexFormat.Default): Long","hexToLong(0, length, format)","/**

 * Parses a `Long` value from this string using the specified [format].

 *

 * Note that only [HexFormat.NumberHexFormat] affects parsing,

 * and parsing is performed in case-insensitive manner.

 *

 * @param format the [HexFormat] to use for parsing, [HexFormat.Default] by default.

 *

 * @throws IllegalArgumentException if this string does not comply with the specified [format].

 */",f16779:m1685
57129,public fun File.walk(direction: FileWalkDirection = FileWalkDirection.TOP_DOWN): FileTreeWalk,"FileTreeWalk(this, direction)","/**

 * Gets a sequence for visiting this directory and all its content.

 *

 * @param direction walk direction, top-down (by default) or bottom-up.

 */",f16960:m507
57127,"public fun onFail(function: (File, IOException) -> Unit): FileTreeWalk","{
    return FileTreeWalk(start, direction, onEnter = onEnter, onLeave = onLeave, onFail = function, maxDepth = maxDepth)
}","/**

     * Set a callback [function], that is called on a directory when it's impossible to get its file list.

     *

     * [onEnter] and [onLeave] callback functions are called even in this case.

     */",f16960:m459
56480,"@SinceKotlin(""1.1"") @kotlin.internal.InlineOnly public actual inline fun String.toByte(radix: Int): Byte","java.lang.Byte.parseByte(this, checkRadix(radix))","/**

 * Parses the string as a signed [Byte] number and returns the result.

 * @throws NumberFormatException if the string is not a valid representation of a number.

 * @throws IllegalArgumentException when [radix] is not a valid radix for string to number conversion.

 */",f16885:m127
58949,public inline fun CharSequence.dropWhile(predicate: (Char) -> Boolean): CharSequence,"{
    for (index in this.indices) if (!predicate(this[index])) return subSequence(index, length)
    return """"
}","/**

 * Returns a subsequence of this char sequence containing all characters except first characters that satisfy the given [predicate].

 * 

 * @sample samples.text.Strings.drop

 */",f17097:m789
64330,@kotlin.internal.IntrinsicConstEvaluation public inline operator fun compareTo(other: Short): Int,this.compareTo(other.toDouble()),"/**

     * Compares this value with the specified value for order.

     * Returns zero if this value is equal to the specified other value, a negative number if it's less than other,

     * or a positive number if it's greater than other.

     */",f17455:m4663
57215,public fun CharSequence.toSortedSet(): java.util.SortedSet<Char>,"{
    return toCollection(java.util.TreeSet<Char>())
}","/**

 * Returns a new [SortedSet][java.util.SortedSet] of all characters.

 */",f16969:m53
55163,@kotlin.internal.IntrinsicConstEvaluation public fun inv(): Long,"Long(low.inv(), high.inv())",/** Inverts the bits in this value. */,f16727:m3123
54813,"@SinceKotlin(""1.4"") public actual fun maxOf(a: Byte, vararg other: Byte): Byte","{
    var max = a
    for (e in other) max = maxOf(max, e)
    return max
}","/**

 * Returns the greater of the given values.

 */",f16714:m325
57316,"@JvmName(""copyOfRangeInline"") @kotlin.internal.InlineOnly public actual inline fun IntArray.copyOfRange(fromIndex: Int, toIndex: Int): IntArray","{
    return if (kotlin.internal.apiVersionIsAtLeast(1, 3, 0)) {
        copyOfRangeImpl(fromIndex, toIndex)
    } else {
        if (toIndex > size) throw IndexOutOfBoundsException(""toIndex: $toIndex, size: $size"")
        java.util.Arrays.copyOfRange(this, fromIndex, toIndex)
    }
}","/**

 * Returns a new array which is a copy of the specified range of the original array.

 * 

 * @param fromIndex the start of the range (inclusive) to copy.

 * @param toIndex the end of the range (exclusive) to copy.

 * 

 * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.

 * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].

 */",f16970:m2791
54707,public actual fun BooleanArray.copyOf(): BooleanArray,"{
    return withType(""BooleanArray"", this.asDynamic().slice())
}","/**

 * Returns new array which is a copy of the original array.

 * 

 * @sample samples.collections.Arrays.CopyOfOperations.copyOf

 */",f16713:m1781
20158,public fun KtType.hasCommonSubTypeWith(that: KtType): Boolean,"withValidityAssertion { analysisSession.typeProvider.haveCommonSubtype(this, that) }","/** Check whether this type is compatible with that type. If they are compatible, it means they can have a common subtype. */",f5780:m237
58090,@kotlin.internal.InlineOnly public inline operator fun div(other: UByte): UInt,this.toUInt().div(other.toUInt()),"/** Divides this value by the other value, truncating the result to an integer that is closer to zero. */",f17059:m225
49796,fun configureIdeImport(action: IdeMultiplatformImport.() -> Unit),"{
    val configureIdeImport = this.configureIdeImport
    if (configureIdeImport == null) this.configureIdeImport = action else this.configureIdeImport = {
        configureIdeImport()
        action()
    }
}","/**

     * Main entrance of configuring the ide import:

     * The [IdeMultiplatformImport] instance passed to this function shall

     * not be captured and used outside of this block.

     *

     * The [IdeMultiplatformImport] instance shall not be retrieved any other way than using this function.

     */",f15961:m239
50444,@Test fun `launchInStage AfterEvaluate`(),"{
    val project = buildProject()
    project.startKotlinPluginLifecycle()
    var executed = false
    project.launchInStage(AfterEvaluateBuildscript) { executed = true }
    assertFalse(executed, ""Expected coroutine in $AfterEvaluateBuildscript not to be executed right away"")
    project.evaluate()
    assertTrue(executed, ""Expected coroutine in $AfterEvaluateBuildscript to be executed in 'afterEvaluate'"")
}","/**

     * Launching in code 'AfterEvaluateBuildscript' Stage:

     * This sample shows how code can be deferred into a 'afterEvaluate' based Stage.

     * Using [launchInStage]: This code will only be executed once the stage will be reached.

     */",f16110:m95
9574,internal fun CArrayPointer<ByteVar>.getBytes(size: Long),(0 .. size - 1).map { this[it] }.toByteArray(),"/**

 * Reads [size] bytes contained in this array.

 */",f3372:m265
54688,"@SinceKotlin(""1.4"") public actual fun DoubleArray?.contentToString(): String","{
    return this?.joinToString("", "", ""["", ""]"") ?: ""null""
}","/**

 * Returns a string representation of the contents of the specified array as if it is [List].

 * 

 * @sample samples.collections.Arrays.ContentOperations.contentToString

 */",f16713:m1151
63631,"@SinceKotlin(""1.1"") @kotlin.internal.InlineOnly public actual inline fun maxOf(a: Float, b: Float, c: Float): Float","{
    return maxOf(a, maxOf(b, c))
}","/**

 * Returns the greater of three values.

 * 

 * If any value is `NaN`, returns `NaN`.

 */",f17406:m255
7515,"fun isSimulatorTarget(project: Project, target: KonanTarget): Boolean",project.platformManager.platform(target).targetTriple.isSimulator,"/**

 * Check that [target] is Apple simulator

 */",f3111:m271
45750,"fun compileOnly(dependencyNotation: String, configure: Action<ExternalModuleDependency>)",compileOnly(dependencyNotation) { configure.execute(this) },"/**

     * Adds a `compileOnly` [module dependency](https://docs.gradle.org/current/userguide/declaring_dependencies.html#sub:module_dependencies)

     * to this entity.

     *

     * @see [HasKotlinDependencies.compileOnlyConfigurationName]

     *

     * @param dependencyNotation The module dependency notation, as per [DependencyHandler.create].

     * @param configure Additional configuration for the created module dependency.

     * @return The module dependency, or `null` if dependencyNotation is a provider.

     */",f14927:m323
57390,public actual fun IntArray.toTypedArray(): Array<Int>,"{
    val result = arrayOfNulls<Int>(size)
    for (index in indices) result[index] = this[index]
    @Suppress(""UNCHECKED_CAST"") return result as Array<Int>
}","/**

 * Returns a *typed* object array containing all of the elements of this primitive array.

 */",f16970:m4565
13970,"@Suppress(""ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS"") public actual fun String.startsWith(prefix: String, ignoreCase: Boolean = false): Boolean","regionMatches(0, prefix, 0, prefix.length, ignoreCase)","/**

 * Returns `true` if this string starts with the specified prefix.

 */",f3713:m267
58589,"@SinceKotlin(""1.4"") public fun LongRange.randomOrNull(random: Random): Long?","{
    if (isEmpty()) return null
    return random.nextLong(this)
}","/**

 * Returns a random element from this range using the specified source of randomness, or `null` if this range is empty.

 */",f17092:m525
46121,inline fun <reified T> Iterable<T>.withClosureGroupingByDistance(edges: (T) -> Iterable<T>): List<Set<T>>,"{
    val dequeue = if (this is Collection) {
        if (this.isEmpty()) return emptyList()
        createDequeue(this)
    } else createDequeueFromIterable(this)
    val allElements = createResultSet<T>(dequeue.size)
    val results = mutableListOf<MutableSet<T>>()
    while (dequeue.isNotEmpty()) {
        val levelElements = createResultSet<T>(dequeue.size)
        var levelSize = dequeue.size
        while (levelSize != 0) {
            levelSize -= 1
            val element = dequeue.removeAt(0)
            if (allElements.add(element) && levelElements.add(element)) {
                dequeue.addAll(edges(element))
            }
        }
        if (levelElements.isNotEmpty()) {
            results.add(levelElements)
        }
    }
    return results
}","/**

 * Similar to [closure], but the result is returned in explicit BFS depth order starting with the receiver

 * @see closure

 */",f15014:m629
30683,fun FqName.tail(prefix: FqName): FqName,"{
    return when {
        !isSubpackageOf(prefix) || prefix.isRoot -> this
        this == prefix -> FqName.ROOT
        else -> FqName(asString().substring(prefix.asString().length + 1))
    }
}","/**

 * Get the tail part of the FQ name by stripping a prefix. If FQ name does not begin with the given prefix, it will be returned as is.

 *

 * Examples:

 * ""org.jetbrains.kotlin"".tail(""org"") = ""jetbrains.kotlin""

 * ""org.jetbrains.kotlin"".tail("""") = ""org.jetbrains.kotlin""

 * ""org.jetbrains.kotlin"".tail(""org.jetbrains.kotlin"") = """"

 * ""org.jetbrains.kotlin"".tail(""org.jetbrains.gogland"") = ""org.jetbrains.kotlin""

 */",f10757:m47
14026,"@SinceKotlin(""1.4"") @kotlin.internal.InlineOnly public actual inline fun StringBuilder.appendLine(value: Int): StringBuilder",append(value).appendLine(),"/** Appends [value] to this [StringBuilder], followed by a line feed character (`\n`). */",f3715:m39
34355,override fun testCaseWillStart(testCase: XCTestCase),"{
    if (testCase is XCTestCaseWrapper) {
        val test = testCase.testCase
        if (test.ignored) {
            sendToListeners { ignore(test) }
        } else {
            sendToListeners { start(test) }
        }
    }
}","/**

     * Test case start notification.

     */",f11292:m155
43507,fun extractCompiledKotlinFiles(output: String): List<Path>,"{
    return kotlinSrcRegex.findAll(output).asIterable().flatMap { matchResult -> matchResult.groups[1]!!.value.split("", "") }.toPaths()
}","/**

 * Extracts the list of compiled .kt files from the build output.

 *

 * The returned paths are relative to the project directory.

 *

 * Note: Log level of output must be set to [LogLevel.DEBUG].

 */",f13451:m37
10451,override fun addToGraph(),"{
    super.addToGraph()
    scale.addConstraint(this)
    offset.addConstraint(this)
}","/**

   * Adds this constraint to the constraint graph.

   */",f3476:m795
58744,public inline fun <T> Sequence<T>.firstOrNull(predicate: (T) -> Boolean): T?,"{
    for (element in this) if (predicate(element)) return element
    return null
}","/**

 * Returns the first element matching the given [predicate], or `null` if element was not found.

 *

 * The operation is _terminal_.

 */",f17096:m353
58830,"@SinceKotlin(""1.4"") @OptIn(kotlin.experimental.ExperimentalTypeInference::class) @OverloadResolutionByLambdaReturnType @kotlin.internal.InlineOnly public inline fun <T, R: Comparable<R>> Sequence<T>.maxOf(selector: (T) -> R): R","{
    val iterator = iterator()
    if (!iterator.hasNext()) throw NoSuchElementException()
    var maxValue = selector(iterator.next())
    while (iterator.hasNext()) {
        val v = selector(iterator.next())
        if (maxValue < v) {
            maxValue = v
        }
    }
    return maxValue
}","/**

 * Returns the largest value among all values produced by [selector] function

 * applied to each element in the sequence.

 *

 * The operation is _terminal_.

 * 

 * @throws NoSuchElementException if the sequence is empty.

 */",f17096:m3005
56420,"@SinceKotlin(""1.9"") @WasExperimental(ExperimentalTime::class) public inline fun measureTime(block: () -> Unit): Duration","{
    contract { callsInPlace(block, InvocationKind.EXACTLY_ONCE) }
    return TimeSource.Monotonic.measureTime(block)
}","/**

 * Executes the given function [block] and returns the duration of elapsed time interval.

 *

 * The elapsed time is measured with [TimeSource.Monotonic].

 */",f16862:m19
11466,"fun <T: Any> argument(type: ArgType<T>, fullName: String? = null, description: String? = null, deprecatedWarning: String? = null): SingleArgument<T, DefaultRequiredType.Required>","{
    val argument = SingleArgument<T, DefaultRequiredType.Required>(ArgDescriptor(type, fullName, 1, description, deprecatedWarning = deprecatedWarning), CLIEntityWrapper())
    argument.owner.entity = argument
    declaredArguments.add(argument.owner)
    return argument
}","/**

     * Declares an argument and returns an object which can be used to access the argument value

     * after all arguments are parsed or to delegate a property for accessing the argument value to.

     *

     * By default, the argument supports only a single value, is required, and has no default value,

     * therefore its value's type is `T`.

     *

     * You can alter the argument properties by chaining extensions for the argument type on the returned object:

     *   - [AbstractSingleArgument.default] to provide a default value that is used when the argument is not specified;

     *   - [SingleArgument.optional] to allow omitting the argument;

     *   - [AbstractSingleArgument.multiple] to require the argument to have exactly the number of values specified;

     *   - [AbstractSingleArgument.vararg] to allow specifying an unlimited number of values for the _last_ argument.

     *

     * @param type The type describing how to parse an option value from a string,

     * an instance of [ArgType], e.g. [ArgType.String] or [ArgType.Choice].

     * @param fullName the full name of the argument, can be omitted if the argument name is inferred

     * from the name of a property delegated to this argument.

     * @param description the description of the argument used when rendering the usage information.

     * @param deprecatedWarning the deprecation message for the argument.

     * Specifying anything except `null` makes this argument deprecated. The message is rendered in a help message and

     * issued as a warning when the argument is encountered when parsing command line arguments.

     */",f3554:m569
58076,@kotlin.internal.InlineOnly public inline operator fun compareTo(other: UInt): Int,this.toUInt().compareTo(other),"/**

     * Compares this value with the specified value for order.

     * Returns zero if this value is equal to the specified other value, a negative number if it's less than other,

     * or a positive number if it's greater than other.

     */",f17059:m115
56221,"@SinceKotlin(""1.5"") @kotlin.internal.InlineOnly @kotlin.internal.IntrinsicConstEvaluation public inline fun Byte.floorDiv(other: Short): Int",this.toInt().floorDiv(other.toInt()),"/** Divides this value by the other value, flooring the result to an integer that is closer to negative infinity. */",f16842:m65
53158,"@Suppress(""ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS"") public actual fun String.replace(oldChar: Char, newChar: Char, ignoreCase: Boolean = false): String","nativeReplace(RegExp(Regex.escape(oldChar.toString()), if (ignoreCase) ""gui"" else ""gu""), newChar.toString())","/**

 * Returns a new string with all occurrences of [oldChar] replaced with [newChar].

 *

 * @sample samples.text.Strings.replace

 */",f16624:m373
63584,"@SinceKotlin(""1.4"") @Suppress(""ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS"") public actual fun IntArray.sort(fromIndex: Int = 0, toIndex: Int = size): Unit","{
    AbstractList.checkRangeIndexes(fromIndex, toIndex, size)
    sortArray(this, fromIndex, toIndex)
}","/**

 * Sorts a range in the array in-place.

 * 

 * @param fromIndex the start of the range (inclusive) to sort, 0 by default.

 * @param toIndex the end of the range (exclusive) to sort, size of this array by default.

 * 

 * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.

 * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].

 * 

 * @sample samples.collections.Arrays.Sorting.sortRangeOfArray

 */",f17396:m4921
14269,public override fun toString(): String,"""${debugString(this)} -> ${debugString(value)}""","/**

     * Returns the string representation of this object.

     *

     * @return string representation of this object

     */",f3762:m611
40563,"fun forStaticCache(klib: CompiledDependency<KLIB>, useHeaders: Boolean): Iterable<CompiledDependency<*>>",(klibDependencies.asSequence().filter { it.type == FriendLibrary } + klib + if (useHeaders) staticCacheHeaderDependencies else staticCacheDependencies).asIterable(),/** Dependencies needed to compile KLIB static cache. */,f12864:m97
24109,fun PropertyDescriptor.toAccessorBaseName(config: Accessors): String?,"{
    val isPrimitiveBoolean = type.isPrimitiveBoolean()
    return if (config.prefix.isEmpty()) {
        val prefixes = if (isPrimitiveBoolean) listOf(AccessorNames.IS) else emptyList()
        toPropertyName(name.identifier, prefixes)
    } else {
        val id = name.identifier
        val name = toPropertyName(id, config.prefix)
        name.takeIf { it.length != id.length }
    }
}","/**

 * Make property name from variable name

 * Returns null in case getter/setter shouldn't be generated at all

 */",f9115:m21
58289,"@SinceKotlin(""1.5"") @WasExperimental(ExperimentalUnsignedTypes::class) public fun String.toULong(): ULong",toULongOrNull() ?: numberFormatError(this),"/**

 * Parses the string as a [ULong] number and returns the result.

 * @throws NumberFormatException if the string is not a valid representation of a number.

 */",f17067:m205
58719,public fun <T: Comparable<T>> T.coerceIn(range: ClosedRange<T>): T,"{
    if (range is ClosedFloatingPointRange) {
        return this.coerceIn<T>(range)
    }
    if (range.isEmpty()) throw IllegalArgumentException(""Cannot coerce value to an empty range: $range."")
    return when {
        this < range.start -> range.start
        this > range.endInclusive -> range.endInclusive
        else -> this
    }
}","/**

 * Ensures that this value lies in the specified [range].

 * 

 * @return this value if it's in the [range], or `range.start` if this value is less than `range.start`, or `range.endInclusive` if this value is greater than `range.endInclusive`.

 * 

 * @sample samples.comparisons.ComparableOps.coerceInComparable

 */",f17092:m2961
58732,@kotlin.internal.InlineOnly public inline fun <T> Set<T>.plusElement(element: T): Set<T>,"{
    return plus(element)
}","/**

 * Returns a set containing all elements of the original set and then the given [element] if it isn't already in this set.

 * 

 * The returned set preserves the element iteration order of the original set.

 */",f17095:m259
64455,"@SinceKotlin(""1.5"") @WasExperimental(ExperimentalPathApi::class) @Throws(IOException::class) @kotlin.internal.InlineOnly public inline fun Path.forEachLine(charset: Charset = Charsets.UTF_8, action: (line: String) -> Unit): Unit","{
    Files.newBufferedReader(this, charset).useLines { it.forEach(action) }
}","/**

 * Reads this file line by line using the specified [charset] and calls [action] for each line.

 * Default charset is UTF-8.

 *

 * You may use this function on huge files.

 *

 * @param charset character set to use for reading text, UTF-8 by default.

 * @param action function to process file lines.

 */",f17469:m407
30900,"inline fun <T, R> Collection<T>.memoryOptimizedMapIndexed(transform: (index: Int, T) -> R): List<R>","{
    return mapIndexedTo(ArrayList<R>(size), transform).compactIfPossible()
}","/**

 * A memory-optimized version of [Iterable.mapIndexed].

 * @see Iterable.mapIndexed

 */",f10791:m37
53025,@kotlin.internal.DynamicExtension public operator fun dynamic.iterator(): Iterator<dynamic>,"{
    val r: Any? = this
    return when {
        this[""iterator""] != null -> this[""iterator""]()
        isArrayish(r) -> r.unsafeCast<Array<*>>().iterator()
        else -> (r as Iterable<*>).iterator()
    }
}","/**

 * Allows to iterate this `dynamic` object in the following cases:

 * - when it has an `iterator` function,

 * - when it is an array

 * - when it is an instance of [kotlin.collections.Iterable]

 */",f16604:m55
58033,@kotlin.internal.InlineOnly public inline operator fun times(other: UInt): UInt,this.toUInt().times(other),/** Multiplies this value by the other value. */,f17058:m211
58181,@kotlin.internal.InlineOnly public inline infix fun xor(other: UInt): UInt,UInt(this.data xor other.data),/** Performs a bitwise XOR operation between the two values. */,f17063:m549
22956,"fun Project.sourcesJarWithSourcesFromEmbedded(vararg embeddedDepSourcesJarTasks: TaskProvider<out Jar>, body: Jar.() -> Unit = {}): TaskProvider<Jar>","{
    val sourcesJarTask = sourcesJar(body)
    sourcesJarTask.configure {
        val archiveOperations = serviceOf<ArchiveOperations>()
        embeddedDepSourcesJarTasks.forEach { embeddedSourceJarTask ->
            dependsOn(embeddedSourceJarTask)
            from(embeddedSourceJarTask.map { archiveOperations.zipTree(it.archiveFile) })
        }
    }
    return sourcesJarTask
}","/**

 * Also embeds into final '-sources.jar' file source files from embedded dependencies.

 */",f8818:m375
63647,"@SinceKotlin(""1.1"") public actual fun <T: Comparable<T>> minOf(a: T, b: T, c: T): T","{
    return minOf(a, minOf(b, c))
}","/**

 * Returns the smaller of three values.

 * 

 * If there are multiple equal minimal values, returns the first of them.

 */",f17406:m603
63618,internal fun Char.getCategoryValue(): Int,"{
    val ch = this.code
    val index = binarySearchRange(rangeStart, ch)
    val start = rangeStart[index]
    val code = rangeCategory[index]
    val value = categoryValueFrom(code, ch - start)
    return if (value == 17) CharCategory.UNASSIGNED.value else value
}","/**

 * Returns the Unicode general category of this character as an Int.

 */",f17405:m339
55131,@kotlin.internal.IntrinsicConstEvaluation public inline operator fun times(other: Float): Float,this.toFloat().times(other),/** Multiplies this value by the other value. */,f16727:m2669
63756,public override fun toString(): String,"{
    val s = getSimpleName(this.typeInfo)
    return if (message != null) s + "": "" + message.toString() else s
}","/**

     * Returns the short description of this throwable consisting of the exception class name

     * followed by the exception message if it is not null.

     */",f17427:m55
58879,"@SinceKotlin(""1.5"") @OptIn(kotlin.experimental.ExperimentalTypeInference::class) @OverloadResolutionByLambdaReturnType @kotlin.jvm.JvmName(""sumOfULong"") @WasExperimental(ExperimentalUnsignedTypes::class) @kotlin.internal.InlineOnly public inline fun <T> Sequence<T>.sumOf(selector: (T) -> ULong): ULong","{
    var sum: ULong = 0.toULong()
    for (element in this) {
        sum += selector(element)
    }
    return sum
}","/**

 * Returns the sum of all values produced by [selector] function applied to each element in the sequence.

 *

 * The operation is _terminal_.

 */",f17096:m5101
63679,"@Deprecated(""Use Kotlin compiler 1.4 to avoid deprecation warning."") @SinceKotlin(""1.3"") @DeprecatedSinceKotlin(hiddenSince = ""1.4"") @ExperimentalUnsignedTypes public fun ULongArray.contentToString(): String","{
    return this.contentToString()
}","/**

 * Returns a string representation of the contents of the specified array as if it is [List].

 * 

 * @sample samples.collections.Arrays.ContentOperations.contentToString

 */",f17408:m513
58520,"@SinceKotlin(""1.7"") public fun ULongProgression.lastOrNull(): ULong?","{
    return if (isEmpty()) null else this.last
}","/**

 * Returns the last element, or `null` if the progression is empty.

 * 

 * @sample samples.collections.Collections.Elements.last

 */",f17090:m193
58954,"public inline fun String.filterIndexed(predicate: (index: Int, Char) -> Boolean): String","{
    return filterIndexedTo(StringBuilder(), predicate).toString()
}","/**

 * Returns a string containing only those characters from the original string that match the given [predicate].

 * @param [predicate] function that takes the index of a character and the character itself

 * and returns the result of predicate evaluation on the character.

 * 

 * @sample samples.collections.Collections.Filtering.filterIndexed

 */",f17097:m895
52963,public actual fun <T: Comparable<T>> MutableList<T>.sort(): Unit,"{
    collectionsSort(this, naturalOrder())
}","/**

 * Sorts elements in the list in-place according to their natural sort order.

 *

 * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.

 *

 * @sample samples.collections.Collections.Sorting.sortMutableList

 */",f16596:m255
16771,private fun computeRebindTarget(function: FirFunction): FirFunction?,"{
    if (functionsToRebind.isNullOrEmpty()) return null
    val realPsi = function.realPsi
    if (realPsi != null) {
        return functionsToRebind.firstOrNull { it.realPsi == realPsi }
    }
    val accessor = function as? FirPropertyAccessor ?: return null
    val accessorPsi = accessor.psi ?: return null
    return functionsToRebind.firstOrNull { it is FirPropertyAccessor && it.isGetter == accessor.isGetter && it.psi == accessorPsi }
}","/**

     * @return [FirFunction] if another function should be used instead of [function] for [FirFunctionTarget]

     *

     * @see bindFunctionTarget

     * @see functionsToRebind

     */",f4166:m177
8768,private fun createValueProperty(irClass: IrClass): IrProperty,"{
    val propertyDescriptor = irClass.descriptor.findDeclarationByName<PropertyDescriptor>(""value"") ?: error(""No `value` property in ${irClass.name}"")
    val irProperty = createProperty(propertyDescriptor)
    symbolTable.withScope(irProperty) { irProperty.backingField = symbolTable.descriptorExtension.declareField(SYNTHETIC_OFFSET, SYNTHETIC_OFFSET, IrDeclarationOrigin.PROPERTY_BACKING_FIELD, propertyDescriptor, propertyDescriptor.type.toIrType(), DescriptorVisibilities.PRIVATE).also { postLinkageSteps.add { it.initializer = irBuiltIns.createIrBuilder(it.symbol, SYNTHETIC_OFFSET, SYNTHETIC_OFFSET).run { irExprBody(irGet(irClass.primaryConstructor!!.valueParameters[0])) } } } }
    val getter = irProperty.getter!!
    getter.correspondingPropertySymbol = irProperty.symbol
    postLinkageSteps.add { getter.body = irBuiltIns.createIrBuilder(getter.symbol, SYNTHETIC_OFFSET, SYNTHETIC_OFFSET).irBlockBody { +irReturn(irGetField(irGet(getter.dispatchReceiverParameter!!), irProperty.backingField!!)) } }
    return irProperty
}","/**

     * Creates `value` property that stores integral value of the enum.

     */",f3296:m181
46113,inline fun <reified T> Sequence<T>.closureSequence(crossinline edges: (T) -> Iterable<T>): Sequence<T>,"{
    return toSet().closureSequence(edges)
}","/**

 * @see closure

 * @receiver Initial sequence of elements will not be included in the return squence

 */",f15014:m345
58860,public inline fun <T> Sequence<T>.none(predicate: (T) -> Boolean): Boolean,"{
    for (element in this) if (predicate(element)) return false
    return true
}","/**

 * Returns `true` if no elements match the given [predicate].

 *

 * The operation is _terminal_.

 * 

 * @sample samples.collections.Collections.Aggregates.noneWithPredicate

 */",f17096:m4309
58745,public fun <@kotlin.internal.OnlyInputTypes T> Sequence<T>.indexOf(element: T): Int,"{
    var index = 0
    for (item in this) {
        checkIndexOverflow(index)
        if (element == item) return index
        index++
    }
    return -1
}","/**

 * Returns first index of [element], or -1 if the sequence does not contain element.

 *

 * The operation is _terminal_.

 */",f17096:m373
47925,fun KotlinNativeArtifactConfig.withPodspec(configure: KotlinArtifactsPodspecExtension.() -> Unit),"{
    val extension = cast<ExtensionAware>().kotlinArtifactsPodspecExtension
    checkNotNull(extension) { ""CocoaPods plugin should be applied before using `${KotlinCocoapodsPlugin.ARTIFACTS_PODSPEC_EXTENSION_NAME}` extension"" }
    extension.configure()
}","/**

 * Extends a KotlinArtifact with a corresponding Podspec

 *

 * Only needed in *.kts build files. In Groovy you can use the same syntax but without explicit extension import

 */",f15479:m1843
13984,"@Deprecated(""Use replaceFirstChar instead."", ReplaceWith(""replaceFirstChar { it.lowercase() }"")) @DeprecatedSinceKotlin(warningSince = ""1.5"") public actual fun String.decapitalize(): String","{
    @Suppress(""DEPRECATION"") return if (isNotEmpty() && !this[0].isLowerCase()) substring(0, 1).toLowerCase() + substring(1) else this
}","/**

 * Returns a copy of this string having its first letter lowercased using the rules of the default locale,

 * or the original string if it's empty or already starts with a lower case letter.

 *

 * @sample samples.text.Strings.decapitalize

 */",f3713:m545
14871,"@SinceKotlin(""1.4"") public actual fun CharArray?.contentHashCode(): Int","{
    if (this === null) return 0
    var result = 1
    for (element in this) result = 31 * result + element.hashCode()
    return result
}","/**

 * Returns a hash code based on the contents of this array as if it is [List].

 */",f3831:m1777
15390,@Test fun floorD(),"{
    assertEquals(""Incorrect floor for int"", 42.0, floor(42.0), 0.0)
    assertEquals(""Incorrect floor for -int"", -2.0, floor(-2.0), 0.0)
    assertEquals(""Incorrect floor for zero"", 0.0, floor(0.0), 0.0)
    assertEquals(""Incorrect floor for +Double"", 78.0, floor(78.89), 0.0)
    assertEquals(""Incorrect floor for -Double"", -79.0, floor(-78.89), 0.0)
    assertEquals(""floor large +Double"", 3.7314645675925406E19, floor(3.7314645675925406E19), 0.0)
    assertEquals(""floor large -Double"", -8.173521839218E12, floor(-8.173521839218E12), 0.0)
    assertEquals(""floor small Double"", 0.0, floor(1.11895241315E-102), 0.0)
    assertEquals(Double.NaN.toString(), floor(Double.NaN).toString(), ""Floor failed for NaN"")
    assertEquals((+0.0).toString(), floor(+0.0).toString(), ""Floor failed for +0.0"")
    assertEquals((-0.0).toString(), floor(-0.0).toString(), ""Floor failed for -0.0"")
    assertEquals(Double.POSITIVE_INFINITY.toString(), floor(Double.POSITIVE_INFINITY).toString(), ""Floor failed for +infinity"")
    assertEquals(Double.NEGATIVE_INFINITY.toString(), floor(Double.NEGATIVE_INFINITY).toString(), ""Floor failed for -infinity"")
}","/**

     * Tests kotlin.math.floor(Double)

     */",f3868:m583
58142,@kotlin.internal.InlineOnly public inline operator fun compareTo(other: UShort): Int,this.compareTo(other.toUInt()),"/**

     * Compares this value with the specified value for order.

     * Returns zero if this value is equal to the specified other value, a negative number if it's less than other,

     * or a positive number if it's greater than other.

     */",f17063:m97
58481,"public inline fun <K, V> Map<out K, V>.count(predicate: (Map.Entry<K, V>) -> Boolean): Int","{
    if (isEmpty()) return 0
    var count = 0
    for (element in this) if (predicate(element)) ++count
    return count
}","/**

 * Returns the number of entries matching the given [predicate].

 */",f17089:m401
14922,"public actual fun FloatArray.copyOfRange(fromIndex: Int, toIndex: Int): FloatArray","{
    checkCopyOfRangeArguments(fromIndex, toIndex, size)
    return copyOfUninitializedElements(fromIndex, toIndex)
}","/**

 * Returns a new array which is a copy of the specified range of the original array.

 * 

 * @param fromIndex the start of the range (inclusive) to copy.

 * @param toIndex the end of the range (exclusive) to copy.

 * 

 * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.

 * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].

 */",f3831:m3149
607,"@Suppress(""UNNECESSARY_SAFE_CALL"", ""SAFE_CALL_WILL_CHANGE_NULLABILITY"") override fun hasOwnName(name: String): Boolean",name in RESERVED_WORDS || name == ident || name == labelName?.ident || parent?.hasOwnName(name) ?: false,"/**

         * Safe call is necessary, because hasOwnName can be called

         * in constructor before labelName is initialized (see KT-4394)

         */",f184:m131
15383,@Test fun ceilD(),"{
    assertEquals(""Incorrect ceiling for Double"", 79.0, ceil(78.89), 0.0)
    assertEquals(""Incorrect ceiling for Double"", -78.0, ceil(-78.89), 0.0)
}","/**

     * Tests kotlin.math.ceil(Double)

     */",f3868:m301
58280,"@SinceKotlin(""1.5"") @WasExperimental(ExperimentalUnsignedTypes::class) public fun UShort.toString(radix: Int): String",this.toInt().toString(radix),"/**

 * Returns a string representation of this [Short] value in the specified [radix].

 *

 * @throws IllegalArgumentException when [radix] is not a valid radix for number to string conversion.

 */",f17067:m39
25001,fun toFinalScheme(node: Node),node.toLazyScheme().toScheme(),"/**

     * For testing, produce the scheme inferred or the scheme from the declaration.

     */",f9239:m901
54781,"@Deprecated(""Use other sorting functions from the Standard Library"") @DeprecatedSinceKotlin(warningSince = ""1.6"") @kotlin.internal.InlineOnly public inline fun ByteArray.sort(noinline comparison: (a: Byte, b: Byte) -> Int): Unit","{
    nativeSort(comparison)
}","/**

 * Sorts the array in-place according to the order specified by the given [comparison] function.

 */",f16713:m3557
43527,"fun TestProject.preparePodfile(iosAppLocation: String, mode: ImportMode)","{
    val iosAppDir = projectPath.resolve(iosAppLocation)
    iosAppDir.resolve(""Podfile"").takeIf { it.exists() }?.replaceText(podfileImportDirectivePlaceholder, mode.directive)
}","/**

 * Prepares the Podfile for an iOS app in the [TestProject]

 *

 * @param iosAppLocation The relative location of the iOS app directory within the [TestProject]

 * @param mode The [ImportMode] to be set for the Podfile.

 *

 */",f13455:m109
40860,"fun Xcode.getLatestSimulatorRuntimeFor(family: Family, osMinVersion: String): SimulatorRuntimeDescriptor?","getLatestSimulatorRuntimeFor(getSimulatorRuntimeDescriptors(), family, osMinVersion)","/**

 * Returns first available simulator runtime for [target] with at least [osMinVersion] OS version.

 * */",f12940:m141
54795,public actual fun DoubleArray.toTypedArray(): Array<Double>,"{
    return js(""[]"").slice.call(this)
}","/**

 * Returns a *typed* object array containing all of the elements of this primitive array.

 */",f16713:m3821
57346,public actual operator fun DoubleArray.plus(element: Double): DoubleArray,"{
    val index = size
    val result = java.util.Arrays.copyOf(this, index + 1)
    result[index] = element
    return result
}","/**

 * Returns an array containing all elements of the original array and then the given [element].

 */",f16970:m3547
63651,"@SinceKotlin(""1.1"") @kotlin.internal.InlineOnly public actual inline fun minOf(a: Long, b: Long, c: Long): Long","{
    return minOf(a, minOf(b, c))
}","/**

 * Returns the smaller of three values.

 */",f17406:m677
14766,"@Deprecated(""Use measureTime() instead."", ReplaceWith(""measureTime(block).inWholeNanoseconds"", ""kotlin.time.measureTime"")) @DeprecatedSinceKotlin(warningSince = ""1.9"") @Suppress(""DEPRECATION"") public inline fun measureNanoTime(block: () -> Unit): Long","{
    val start = getTimeNanos()
    block()
    return getTimeNanos() - start
}","/**

 * Executes the given [block] and returns elapsed time in nanoseconds.

 *

 * This function is deprecated.

 * To measure the duration of execution of a block of code,

 * use [measureTime] or [measureTimedValue] instead.

 * The resulting [Duration] then can be expressed as a [Long] number of nanoseconds

 * using [Duration.inWholeNanoseconds].

 *

 * @sample samples.system.Timing.measureBlockNanoTime

 */",f3817:m199
63540,"@SinceKotlin(""1.3"") @Suppress(""ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS"") public actual fun LongArray.fill(element: Long, fromIndex: Int = 0, toIndex: Int = size): Unit","{
    AbstractList.checkRangeIndexes(fromIndex, toIndex, size)
    for (index in fromIndex until toIndex) {
        this[index] = element
    }
}","/**

 * Fills this array or its subrange with the specified [element] value.

 * 

 * @param fromIndex the start of the range (inclusive) to fill, 0 by default.

 * @param toIndex the end of the range (exclusive) to fill, size of this array by default.

 * 

 * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.

 * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].

 */",f17396:m3907
57255,"@SinceKotlin(""1.1"") @kotlin.internal.LowPriorityInOverloadResolution @JvmName(""contentDeepHashCodeInline"") @kotlin.internal.InlineOnly public actual inline fun <T> Array<out T>.contentDeepHashCode(): Int","{
    return this.contentDeepHashCode()
}","/**

 * Returns a hash code based on the contents of this array as if it is [List].

 * Nested arrays are treated as lists too.

 * 

 * If any of arrays contains itself on any nesting level the behavior is undefined.

 */",f16970:m993
56868,"@SinceKotlin(""1.6"") @WasExperimental(ExperimentalStdlibApi::class) @kotlin.internal.InlineOnly public actual inline fun Int.rotateLeft(bitCount: Int): Int","Integer.rotateLeft(this, bitCount)","/**

 * Rotates the binary representation of this [Int] number left by the specified [bitCount] number of bits.

 * The most significant bits pushed out from the left side reenter the number as the least significant bits on the right side.

 *

 * Rotating the number left by a negative bit count is the same as rotating it right by the negated bit count:

 * `number.rotateLeft(-n) == number.rotateRight(n)`

 *

 * Rotating by a multiple of [Int.SIZE_BITS] (32) returns the same number, or more generally

 * `number.rotateLeft(n) == number.rotateLeft(n % 32)`

 */",f16929:m267
53133,@kotlin.internal.InlineOnly public actual inline fun String.toFloatOrNull(): Float?,toDoubleOrNull().unsafeCast<Float?>(),"/**

 * Parses the string as a [Float] number and returns the result

 * or `null` if the string is not a valid representation of a number.

 */",f16618:m187
11095,fun release(id: Int): TaskControlBlock?,"{
    val tcb = this.blocks[id]
    if (tcb == null) return tcb
    tcb.markAsNotHeld()
    if (tcb.priority > this.currentTcb!!.priority) {
        return tcb
    } else {
        return this.currentTcb
    }
}","/**

     * Release a task that is currently blocked and return the next block to run.

     * @param {int} id the id of the task to suspend

     */",f3500:m367
48041,override fun equals(other: Any?): Boolean,"{
    if (this === other) return true
    if (javaClass != other?.javaClass) return false
    other as CInteropGist
    if (identifier != other.identifier) return false
    if (konanTarget != other.konanTarget) return false
    if (libraryFile != other.libraryFile) return false
    if (dependencies != other.dependencies) return false
    if (allSourceSetNames != other.allSourceSetNames) return false
    return true
}",/** Autogenerated with IDEA */,f15519:m129
45637,@OptIn(InternalKotlinGradlePluginApi::class) @Deprecated(message = KOTLIN_OPTIONS_DEPRECATION_MESSAGE) fun kotlinOptions(fn: Action<in T>),"{
    @Suppress(""DEPRECATION"") fn.execute(kotlinOptions)
}","/**

     * Configures the [kotlinOptions] with the provided configuration.

     */",f14907:m107
58637,"@Deprecated(""This `contains` operation mixing integer and floating point arguments has ambiguous semantics and is going to be removed."") @DeprecatedSinceKotlin(warningSince = ""1.3"", errorSince = ""1.4"", hiddenSince = ""1.5"") @kotlin.jvm.JvmName(""floatRangeContains"") public operator fun ClosedRange<Float>.contains(value: Short): Boolean","{
    return contains(value.toFloat())
}","/**

 * Checks if the specified [value] belongs to this range.

 */",f17092:m1419
58011,"@SinceKotlin(""1.6"") @WasExperimental(ExperimentalStdlibApi::class, ExperimentalUnsignedTypes::class) @kotlin.internal.InlineOnly public inline fun UByte.rotateRight(bitCount: Int): UByte",toByte().rotateRight(bitCount).toUByte(),"/**

 * Rotates the binary representation of this [UByte] number right by the specified [bitCount] number of bits.

 * The least significant bits pushed out from the right side reenter the number as the most significant bits on the left side.

 *

 * Rotating the number right by a negative bit count is the same as rotating it left by the negated bit count:

 * `number.rotateRight(-n) == number.rotateLeft(n)`

 *

 * Rotating by a multiple of [UByte.SIZE_BITS] (8) returns the same number, or more generally

 * `number.rotateRight(n) == number.rotateRight(n % 8)`

 */",f17056:m425
13566,"@SinceKotlin(""1.1"") @kotlin.internal.IntrinsicConstEvaluation public inline operator fun rem(other: Short): Int",this.toInt() % other.toInt(),"/**

     * Calculates the remainder of truncating division of this value (dividend) by the other value (divisor).

     *

     * The result is either zero or has the same sign as the _dividend_ and has the absolute value less than the absolute value of the divisor.

     */",f3686:m1317
63454,"@Deprecated(""Use Kotlin compiler 1.4 to avoid deprecation warning."") @SinceKotlin(""1.1"") @DeprecatedSinceKotlin(hiddenSince = ""1.4"") public fun CharArray.contentHashCode(): Int","{
    return this.contentHashCode()
}","/**

 * Returns a hash code based on the contents of this array as if it is [List].

 */",f17396:m1565
21925,"fun isSubClassOf(subClass: FirClass, superClass: FirClass, useSiteSession: FirSession, allowIndirectSubtyping: Boolean = true): Boolean","{
    subClass.lazyResolveToPhase(FirResolvePhase.SUPER_TYPES)
    if (subClass.superConeTypes.any { it.toRegularClassSymbol(useSiteSession) == superClass.symbol }) return true
    if (!allowIndirectSubtyping) return false
    subClass.superConeTypes.forEach { superType ->
        val superOfSub = superType.toRegularClassSymbol(useSiteSession) ?: return@forEach
        if (isSubClassOf(superOfSub.fir, superClass, useSiteSession, allowIndirectSubtyping = true)) return true
    }
    return false
}","/**

 * Returns whether [subClass] is a strict subtype of [superClass]. Resolves [subClass] to [FirResolvePhase.SUPER_TYPES].

 */",f8664:m29
53162,"private fun codePointFromSurrogate(string: String, high: Int, index: Int, endIndex: Int, throwOnMalformed: Boolean): Int","{
    if (high !in 0xD800 .. 0xDBFF || index >= endIndex) {
        return malformed(0, index, throwOnMalformed)
    }
    val low = string[index].code
    if (low !in 0xDC00 .. 0xDFFF) {
        return malformed(0, index, throwOnMalformed)
    }
    return 0x10000 + ((high and 0x3FF) shl 10) or (low and 0x3FF)
}","/**

 * Returns code point corresponding to UTF-16 surrogate pair,

 * where the first of the pair is the [high] and the second is in the [string] at the [index].

 * Returns zero if the pair is malformed and [throwOnMalformed] is false.

 *

 * @throws CharacterCodingException if the pair is malformed and [throwOnMalformed] is true.

 */",f16626:m27
57169,"@SinceKotlin(""1.1"") @kotlin.internal.InlineOnly public actual inline fun minOf(a: Short, b: Short, c: Short): Short","{
    return Math.min(a.toInt(), Math.min(b.toInt(), c.toInt())).toShort()
}","/**

 * Returns the smaller of three values.

 */",f16966:m631
58956,public inline fun CharSequence.filterNot(predicate: (Char) -> Boolean): CharSequence,"{
    return filterNotTo(StringBuilder(), predicate)
}","/**

 * Returns a char sequence containing only those characters from the original char sequence that do not match the given [predicate].

 * 

 * @sample samples.text.Strings.filterNot

 */",f17097:m945
58990,"public inline fun <R, C: MutableCollection<in R>> CharSequence.flatMapTo(destination: C, transform: (Char) -> Iterable<R>): C","{
    for (element in this) {
        val list = transform(element)
        destination.addAll(list)
    }
    return destination
}","/**

 * Appends all elements yielded from results of [transform] function being invoked on each character of original char sequence, to the given [destination].

 */",f17097:m1765
16611,"internal fun collectDiagnosticsForFile(ktFile: KtFile, filter: DiagnosticCheckerFilter): Collection<KtPsiDiagnostic>","{
    return diagnosticProvider.collectDiagnostics(ktFile, filter)
}","/**

     * @see LLDiagnosticProvider.collectDiagnostics

     */",f4142:m179
58723,public operator fun <T> Set<T>.minus(element: T): Set<T>,"{
    val result = LinkedHashSet<T>(mapCapacity(size))
    var removed = false
    return this.filterTo(result) { if (!removed && it == element) {
        removed = true
        false
    } else true }
}","/**

 * Returns a set containing all elements of the original set except the given [element].

 * 

 * The returned set preserves the element iteration order of the original set.

 */",f17095:m41
63659,"@SinceKotlin(""1.4"") public actual fun minOf(a: Float, vararg other: Float): Float","{
    var min = a
    for (e in other) min = minOf(min, e)
    return min
}","/**

 * Returns the smaller of the given values.

 * 

 * If any value is `NaN`, returns `NaN`.

 */",f17406:m843
63245,"@SinceKotlin(""1.9"") @kotlin.internal.InlineOnly public actual inline fun StringBuilder.appendLine(value: Double): StringBuilder",append(value).appendLine(),"/** Appends [value] to this [StringBuilder], followed by a line feed character (`\n`). */",f17351:m69
13992,"@SinceKotlin(""2.0"") @Suppress(""ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS"") public actual fun String.toCharArray(destination: CharArray, destinationOffset: Int = 0, startIndex: Int = 0, endIndex: Int = length): CharArray","{
    AbstractList.checkBoundsIndexes(startIndex, endIndex, length)
    val rangeSize = endIndex - startIndex
    AbstractList.checkBoundsIndexes(destinationOffset, destinationOffset + rangeSize, destination.size)
    return toCharArray(this, destination, destinationOffset, startIndex, rangeSize)
}","/**

 * Copies characters from this string into the [destination] character array and returns that array.

 *

 * @param destination the array to copy to.

 * @param destinationOffset the position in the array to copy to.

 * @param startIndex the start offset (inclusive) of the substring to copy.

 * @param endIndex the end offset (exclusive) of the substring to copy.

 *

 * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of this string builder indices or when `startIndex > endIndex`.

 * @throws IndexOutOfBoundsException when the subrange doesn't fit into the [destination] array starting at the specified [destinationOffset],

 *  or when that index is out of the [destination] array indices range.

 */",f3713:m753
30993,@JvmStatic fun mapClass(classId: String): String,"{
    return map[classId] ?: ""L${classId.replace('.', '$')};""
}","/**

     * @param classId the name of the class in the format: ""org/foo/bar/Test.Inner""

     */",f10809:m149
33532,"@SinceKotlin(""1.1"") fun KType.withNullability(nullable: Boolean): KType","{
    return (this as KTypeImpl).makeNullableAsSpecified(nullable)
}","/**

 * Returns a new type with the same classifier, arguments and annotations as the given type, and with the given nullability.

 */",f11200:m49
48507,fun findStaticLib(buildType: NativeBuildType): StaticLibrary?,"findStaticLib("""", buildType)",/** Returns a static library with the empty name prefix and the given build type. Returns null if there is no such binary. */,f15652:m173
56033,"public fun <K, V> MutableMap<in K, in V>.putAll(pairs: Iterable<Pair<K, V>>): Unit","{
    for ((key, value) in pairs) {
        put(key, value)
    }
}","/**

 * Puts all the elements of the given collection into this [MutableMap] with the first component in the pair being the key and the second the value.

 */",f16823:m869
13489,@kotlin.internal.IntrinsicConstEvaluation public inline operator fun minus(other: Short): Int,this.toInt() - other.toInt(),/** Subtracts the other value from this value. */,f3686:m261
54700,"@Suppress(""ACTUAL_WITHOUT_EXPECT"", ""NOTHING_TO_INLINE"") public actual inline fun <T> Array<out T>.copyOf(): Array<T>","{
    return this.asDynamic().slice()
}","/**

 * Returns new array which is a copy of the original array.

 * 

 * @sample samples.collections.Arrays.CopyOfOperations.copyOf

 */",f16713:m1643
64262,@kotlin.internal.IntrinsicConstEvaluation public inline infix fun shl(bitCount: Int): Long,"wasm_i64_shl(this, bitCount.toLong())","/**

     * Shifts this value left by the [bitCount] number of bits.

     *

     * Note that only the six lowest-order bits of the [bitCount] are used as the shift distance.

     * The shift distance actually used is therefore always in the range `0..63`.

     */",f17455:m3471
58043,@kotlin.internal.InlineOnly public inline fun floorDiv(other: UByte): UInt,this.toUInt().floorDiv(other.toUInt()),"/**

     * Divides this value by the other value, flooring the result to an integer that is closer to negative infinity.

     *

     * For unsigned types, the results of flooring division and truncating division are the same.

     */",f17058:m309
37340,@Test @TodoAnalysisApi fun `test - objectWithGenericSuperclass`(),"{
    doTest(headersTestDataDir.resolve(""objectWithGenericSuperclass""))
}","/**

     * - init method missing

     * - 'new constructor' missing

     */",f11809:m511
63632,"@SinceKotlin(""1.1"") @kotlin.internal.InlineOnly public actual inline fun maxOf(a: Double, b: Double, c: Double): Double","{
    return maxOf(a, maxOf(b, c))
}","/**

 * Returns the greater of three values.

 * 

 * If any value is `NaN`, returns `NaN`.

 */",f17406:m277
54667,"@SinceKotlin(""1.4"") public actual infix fun IntArray?.contentEquals(other: IntArray?): Boolean","{
    return contentEqualsInternal(other)
}","/**

 * Checks if the two specified arrays are *structurally* equal to one another.

 * 

 * Two arrays are considered structurally equal if they have the same size, and elements at corresponding indices are equal.

 * 

 * The arrays are also considered structurally equal if both are `null`.

 * 

 * @param other the array to compare with this array.

 * @return `true` if the two arrays are structurally equal, `false` otherwise.

 * 

 * @sample samples.collections.Arrays.ContentOperations.intArrayContentEquals

 */",f16713:m675
57266,"@SinceKotlin(""1.4"") @kotlin.internal.InlineOnly public actual inline infix fun BooleanArray?.contentEquals(other: BooleanArray?): Boolean","{
    return java.util.Arrays.equals(this, other)
}","/**

 * Checks if the two specified arrays are *structurally* equal to one another.

 * 

 * Two arrays are considered structurally equal if they have the same size, and elements at corresponding indices are equal.

 * 

 * The arrays are also considered structurally equal if both are `null`.

 * 

 * @param other the array to compare with this array.

 * @return `true` if the two arrays are structurally equal, `false` otherwise.

 * 

 * @sample samples.collections.Arrays.ContentOperations.booleanArrayContentEquals

 */",f16970:m1393
43623,private fun BuildResult.getAllTasksFromTheOutput(): List<String>,"{
    val taskPattern = Regex(""^([:\\w]+) - (.*)$"")
    val tasks = mutableListOf<String>()
    output.lines().forEach { line -> if (line.matches(taskPattern)) {
        tasks.add(taskPattern.find(line)!!.groupValues[1])
    } }
    return tasks
}","/**

 * Method parses the output of a 'tasks --all' build

 * and returns a list of all the tasks mentioned in it.

 *

 * @return A list of all the tasks mentioned in the build 'tasks -all' output

 * @throws IllegalStateException if the build output could not be parsed.

 */",f13463:m393
49574,"private fun createRootPublication(project: Project, publishing: PublishingExtension): MavenPublication","{
    val kotlinSoftwareComponent = project.multiplatformExtension.rootSoftwareComponent
    return publishing.publications.create(""kotlinMultiplatform"", MavenPublication::class.java).apply {
        from(kotlinSoftwareComponent)
        (this as MavenPublicationInternal).publishWithOriginalFileName()
        addKotlinToolingMetadataArtifactIfNeeded(project)
    }
}","/**

 * The root publication that references the platform specific publications as its variants

 */",f15891:m117
56105,"@SinceKotlin(""1.4"") public fun <T> MutableList<T>.removeLast(): T","if (isEmpty()) throw NoSuchElementException(""List is empty."") else removeAt(lastIndex)","/**

 * Removes the last element from this mutable list and returns that removed element, or throws [NoSuchElementException] if this list is empty.

 */",f16825:m505
57065,"@Synchronized fun readLine(inputStream: InputStream, charset: Charset): String?","{
    if (!::decoder.isInitialized || decoder.charset() != charset) updateCharset(charset)
    var nBytes = 0
    var nChars = 0
    while (true) {
        val readByte = inputStream.read()
        if (readByte == -1) {
            if (sb.isEmpty() && nBytes == 0 && nChars == 0) {
                return null
            } else {
                nChars = decodeEndOfInput(nBytes, nChars)
                break
            }
        } else {
            bytes[nBytes++] = readByte.toByte()
        }
        if (readByte == '\n'.code || nBytes == BUFFER_SIZE || !directEOL) {
            byteBuf.limit(nBytes)
            charBuf.position(nChars)
            nChars = decode(false)
            if (nChars > 0 && chars[nChars - 1] == '\n') {
                byteBuf.position(0)
                break
            }
            nBytes = compactBytes()
        }
    }
    if (nChars > 0 && chars[nChars - 1] == '\n') {
        nChars--
        if (nChars > 0 && chars[nChars - 1] == '\r') nChars--
    }
    if (sb.isEmpty()) return String(chars, 0, nChars)
    sb.append(chars, 0, nChars)
    val result = sb.toString()
    if (sb.length > BUFFER_SIZE) trimStringBuilder()
    sb.setLength(0)
    return result
}","/**

     * Reads line from the specified [inputStream] with the given [charset].

     * The general design:

     * * This function contains only fast path code and all it state is kept in local variables as much as possible.

     * * All the slow-path code is moved to separate functions and the call-sequence bytecode is minimized for it.

     */",f16953:m365
63498,public actual fun BooleanArray.copyOf(): BooleanArray,"{
    return this.copyOfUninitializedElements(size)
}","/**

 * Returns new array which is a copy of the original array.

 * 

 * @sample samples.collections.Arrays.CopyOfOperations.copyOf

 */",f17396:m2791
55996,"public fun <K, V> emptyMap(): Map<K, V>","@Suppress(""UNCHECKED_CAST"") (EmptyMap as Map<K, V>)","/**

 * Returns an empty read-only map of specified type.

 *

 * The returned map is serializable (JVM).

 * @sample samples.collections.Maps.Instantiation.emptyReadOnlyMap

 */",f16823:m67
54841,internal fun Char.isLowerCaseImpl(): Boolean,"{
    return getLetterType() == 1 || code.isOtherLowercase()
}","/**

 * Returns `true` if this character is a lower case letter, or it has contributory property `Other_Lowercase`.

 */",f16715:m105
57339,"@Suppress(""ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS"") public actual fun CharArray.fill(element: Char, fromIndex: Int = 0, toIndex: Int = size): Unit","{
    java.util.Arrays.fill(this, fromIndex, toIndex, element)
}","/**

 * Fills this array or its subrange with the specified [element] value.

 * 

 * @param fromIndex the start of the range (inclusive) to fill, 0 by default.

 * @param toIndex the end of the range (exclusive) to fill, size of this array by default.

 * 

 * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.

 * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].

 */",f16970:m3399
63561,public actual operator fun BooleanArray.plus(elements: Collection<Boolean>): BooleanArray,"{
    var index = size
    val result = copyOfUninitializedElements(index + elements.size)
    for (element in elements) result[index++] = element
    return result
}","/**

 * Returns an array containing all elements of the original array and then all elements of the given [elements] collection.

 */",f17396:m4407
64032,@kotlin.internal.IntrinsicConstEvaluation public inline operator fun compareTo(other: Double): Int,this.toDouble().compareTo(other),"/**

     * Compares this value with the specified value for order.

     * Returns zero if this value is equal to the specified other value, a negative number if it's less than other,

     * or a positive number if it's greater than other.

     */",f17455:m173
17552,fun KtTestModule.publishWildcardModificationEventByDirectiveIfPresent(modificationEventKind: ModificationEventKind),"{
    if (ModificationEventDirectives.WILDCARD_MODIFICATION_EVENT !in testModule.directives) {
        return
    }
    publishModificationEvent(modificationEventKind, ktModule)
}","/**

 * If the given test module contains a [ModificationEventDirectives.WILDCARD_MODIFICATION_EVENT] directive, publishes a modification event

 * as defined in [KotlinTopics][org.jetbrains.kotlin.analysis.providers.topics.KotlinTopics] based on the given [modificationEventKind] in

 * a write action.

 *

 * Module-level modification events will be published for the [KtTestModule]'s [KtModule].

 */",f5259:m151
48987,@ExternalKotlinTargetApi fun IdeDependencyTransformer(vararg transformers: IdeDependencyTransformer?): IdeDependencyTransformer,IdeDependencyTransformer(transformers.toList()),"/**

 * Create a composite [IdeDependencyTransformer]

 * `null` instances will just be ignored.

 * The transformers will be invoked in the same order as specified to this function.

 */",f15728:m87
57130,public fun File.walkTopDown(): FileTreeWalk,walk(FileWalkDirection.TOP_DOWN),"/**

 * Gets a sequence for visiting this directory and all its content in top-down order.

 * Depth-first search is used and directories are visited before all their files.

 */",f16960:m523
54756,"@Suppress(""NOTHING_TO_INLINE"") public actual inline operator fun ShortArray.plus(elements: ShortArray): ShortArray","{
    return primitiveArrayConcat(this, elements)
}","/**

 * Returns an array containing all elements of the original array and then all elements of the given [elements] array.

 */",f16713:m2955
58537,"@SinceKotlin(""1.5"") @WasExperimental(ExperimentalUnsignedTypes::class) public infix fun UByte.downTo(to: UByte): UIntProgression","{
    return UIntProgression.fromClosedRange(this.toUInt(), to.toUInt(), -1)
}","/**

 * Returns a progression from this value down to the specified [to] value with the step -1.

 * 

 * The [to] value should be less than or equal to `this` value.

 * If the [to] value is greater than `this` value the returned progression is empty.

 */",f17090:m561
56129,"@kotlin.internal.InlineOnly public inline fun <T, K> compareBy(comparator: Comparator<in K>, crossinline selector: (T) -> K): Comparator<T>","Comparator { a, b -> compareValuesBy(a, b, comparator, selector) }","/**

 * Creates a comparator using the [selector] function to transform values being compared and then applying

 * the specified [comparator] to compare transformed values.

 *

 * @sample samples.comparisons.Comparisons.compareByWithComparator

 */",f16832:m207
58872,"@SinceKotlin(""1.4"") public fun <T, R> Sequence<T>.scanIndexed(initial: R, operation: (index: Int, acc: R, T) -> R): Sequence<R>","{
    return runningFoldIndexed(initial, operation)
}","/**

 * Returns a sequence containing successive accumulation values generated by applying [operation] from left to right

 * to each element, its index in the original sequence and current accumulator value that starts with [initial] value.

 * 

 * Note that `acc` value passed to [operation] function should not be mutated;

 * otherwise it would affect the previous value in resulting sequence.

 * The [initial] value should also be immutable (or should not be mutated)

 * as it may be passed to [operation] function later because of sequence's lazy nature.

 * 

 * @param [operation] function that takes the index of an element, current accumulator value

 * and the element itself, and calculates the next accumulator value.

 *

 * The operation is _intermediate_ and _stateless_.

 * 

 * @sample samples.collections.Collections.Aggregates.scan

 */",f17096:m4853
58249,@kotlin.internal.InlineOnly public inline fun mod(other: UShort): UShort,this.mod(other.toULong()).toUShort(),"/**

     * Calculates the remainder of flooring division of this value (dividend) by the other value (divisor).

     *

     * The result is always less than the divisor.

     *

     * For unsigned types, the remainders of flooring division and truncating division are the same.

     */",f17066:m385
56630,"@SinceKotlin(""1.2"") public actual fun <T> Iterable<T>.shuffled(): List<T>",toMutableList().apply { shuffle() },"/**

 * Returns a new list with the elements of this collection randomly shuffled.

 */",f16923:m129
58747,public inline fun <T> Sequence<T>.indexOfLast(predicate: (T) -> Boolean): Int,"{
    var lastIndex = -1
    var index = 0
    for (item in this) {
        checkIndexOverflow(index)
        if (predicate(item)) lastIndex = index
        index++
    }
    return lastIndex
}","/**

 * Returns index of the last element matching the given [predicate], or -1 if the sequence does not contain such element.

 *

 * The operation is _terminal_.

 */",f17096:m437
18693,override fun getReferenceName(): String?,referenceInformationProvider.referenceName,"/**

     * @see com.intellij.psi.impl.PsiImplUtil.findAnnotation

     */",f5491:m47
48510,"fun getSharedLib(namePrefix: String, buildType: String): SharedLibrary","getSharedLib(namePrefix, NativeBuildType.valueOf(buildType.toUpperCaseAsciiOnly()))",/** Returns a shared library with the given [namePrefix] and the given build type. Throws an exception if there is no such binary.*/,f15652:m191
55818,fun expanded(maxCapacity: Int): RingBuffer<T>,"{
    val newCapacity = (capacity + (capacity shr 1) + 1).coerceAtMost(maxCapacity)
    val newBuffer = if (startIndex == 0) buffer.copyOf(newCapacity) else toArray(arrayOfNulls(newCapacity))
    return RingBuffer(newBuffer, size)
}","/**

     * Creates a new ring buffer with the capacity equal to the minimum of [maxCapacity] and 1.5 * [capacity].

     * The returned ring buffer contains the same elements as this ring buffer.

     */",f16812:m313
56421,"@SinceKotlin(""1.9"") @WasExperimental(ExperimentalTime::class) public inline fun TimeSource.measureTime(block: () -> Unit): Duration","{
    contract { callsInPlace(block, InvocationKind.EXACTLY_ONCE) }
    val mark = markNow()
    block()
    return mark.elapsedNow()
}","/**

 * Executes the given function [block] and returns the duration of elapsed time interval.

 *

 * The elapsed time is measured with the specified `this` [TimeSource] instance.

 */",f16862:m49
14592,"@InternalForKotlinNative @OptIn(kotlin.native.runtime.NativeRuntimeApi::class, ObsoleteWorkersApi::class) public fun performGCOnCleanerWorker(): Unit","getCleanerWorker().execute(TransferMode.SAFE, {}) { GC.collect() }.result","/**

 * Perform GC on a worker that executes Cleaner blocks.

 */",f3797:m165
33291,@ExperimentalReflectionOnLambdas fun <R> Function<R>.reflect(): KFunction<R>?,"{
    val annotation = javaClass.getAnnotation(Metadata::class.java) ?: return null
    val data = annotation.data1.takeUnless(Array<String>::isEmpty) ?: return null
    val (nameResolver, proto) = JvmProtoBufUtil.readFunctionDataFrom(data, annotation.data2)
    val metadataVersion = JvmMetadataVersion(annotation.metadataVersion, (annotation.extraInt and JvmAnnotationNames.METADATA_STRICT_VERSION_SEMANTICS_FLAG) != 0)
    val descriptor = deserializeToDescriptor(javaClass, proto, nameResolver, TypeTable(proto.typeTable), metadataVersion, MemberDeserializer::loadFunction)
    @Suppress(""UNCHECKED_CAST"") return KFunctionImpl(EmptyContainerForLocal, descriptor) as KFunction<R>
}","/**

 * This is an experimental API. Given a class for a compiled Kotlin lambda or a function expression,

 * returns a [KFunction] instance providing introspection capabilities for that lambda or function expression and its parameters.

 * Not all features are currently supported, in particular [KCallable.call] and [KCallable.callBy] will fail at the moment.

 */",f11162:m59
58893,@kotlin.internal.InlineOnly public inline fun <T> Sequence<T>.plusElement(element: T): Sequence<T>,"{
    return plus(element)
}","/**

 * Returns a sequence containing all elements of the original sequence and then the given [element].

 *

 * The operation is _intermediate_ and _stateless_.

 */",f17096:m5527
52533,"private fun CharSequence.findLineTerminator(from: Int, to: Int): Int",(from until to).firstOrNull { lineTerminator.isLineTerminator(this[it]) } ?: to,"/**

     * Find the first line terminator between [from] (inclusive) and [to] (exclusive) indices.

     * Returns [to] if no terminator found.

     */",f16539:m173
54775,"@SinceKotlin(""1.4"") @Suppress(""ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS"") public actual fun ShortArray.sort(fromIndex: Int = 0, toIndex: Int = size): Unit","{
    AbstractList.checkRangeIndexes(fromIndex, toIndex, size)
    val subarray = this.asDynamic().subarray(fromIndex, toIndex).unsafeCast<ShortArray>()
    subarray.sort()
}","/**

 * Sorts a range in the array in-place.

 * 

 * @param fromIndex the start of the range (inclusive) to sort, 0 by default.

 * @param toIndex the end of the range (exclusive) to sort, size of this array by default.

 * 

 * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.

 * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].

 * 

 * @sample samples.collections.Arrays.Sorting.sortRangeOfArray

 */",f16713:m3333
56047,"public fun <K, V> Sequence<Pair<K, V>>.toMap(): Map<K, V>","toMap(LinkedHashMap<K, V>()).optimizeReadOnlyMap()","/**

 * Returns a new map containing all key-value pairs from the given sequence of pairs.

 *

 * The returned map preserves the entry iteration order of the original sequence.

 * If any of two pairs would have the same key the last one gets added to the map.

 */",f16823:m1207
30660,@JvmStatic fun getPackagePartClassNamePrefix(shortFileName: String): String,"if (shortFileName.isEmpty()) ""_"" else capitalizeAsJavaClassName(sanitizeAsJavaIdentifier(shortFileName))","/**

     * Capitalizes the short name of the file (without extension) and sanitizes it so that it's a valid Java identifier.

     * E.g. ""fileName"" -> ""FileName"", ""1"" -> ""_1"", """" -> ""_""

     */",f10752:m59
59104,"@SinceKotlin(""1.5"") @WasExperimental(ExperimentalUnsignedTypes::class) @kotlin.internal.InlineOnly public inline fun minOf(a: UShort, b: UShort, c: UShort): UShort","{
    return minOf(a, minOf(b, c))
}","/**

 * Returns the smaller of three values.

 */",f17098:m409
16326,"fun process(file: FirFile, holder: SessionHolder, targetElement: PsiElement, bodyElement: PsiElement? = targetElement): Context?","{
    val isBodyContextCollected = bodyElement != null
    val acceptedElements = targetElement.parentsWithSelf.toSet()
    val contextProvider = process(file, holder, computeDesignation(file, targetElement), isBodyContextCollected) { candidate -> when (candidate) {
        targetElement -> FilterResponse.STOP
        in acceptedElements -> FilterResponse.CONTINUE
        else -> FilterResponse.SKIP
    } }
    for (acceptedElement in acceptedElements) {
        if (acceptedElement === bodyElement) {
            val bodyContext = contextProvider[acceptedElement, ContextKind.BODY]
            if (bodyContext != null) {
                return bodyContext
            }
        }
        val elementContext = contextProvider[acceptedElement, ContextKind.SELF]
        if (elementContext != null) {
            return elementContext
        }
    }
    return null
}","/**

     * Get the most precise context available for the [targetElement] in the [file].

     *

     * @param file The file to process.

     * @param holder The [SessionHolder] for the session that owns a [file].

     * @param targetElement The most precise element for which the context is required.

     * @param bodyElement An element for which the [ContextKind.BODY] context is preferred.

     *

     * Returns the context of the [targetElement] if available, or of one of its tree parents.

     * Returns `null` if the context was not collected.

     */",f4108:m167
54684,"@SinceKotlin(""1.4"") public actual fun ShortArray?.contentToString(): String","{
    return this?.joinToString("", "", ""["", ""]"") ?: ""null""
}","/**

 * Returns a string representation of the contents of the specified array as if it is [List].

 * 

 * @sample samples.collections.Arrays.ContentOperations.contentToString

 */",f16713:m1071
13952,"@ExperimentalNativeApi public fun Char.Companion.toCodePoint(high: Char, low: Char): Int",(((high - MIN_HIGH_SURROGATE) shl 10) or (low - MIN_LOW_SURROGATE)) + 0x10000,"/**

 * Converts a surrogate pair to a unicode code point. Doesn't validate that the characters are a valid surrogate pair.

 *

 * Note that this function is unstable.

 * In the future it could be deprecated in favour of an overload that would return a `CodePoint` type.

 */",f3711:m67
40216,"internal fun AbstractNativeSimpleTest.generateTestCaseWithSingleModule(sourcesRoot: File?, freeCompilerArgs: TestCompilerArgs = TestCompilerArgs.EMPTY, extras: TestCase.Extras = TestCase.WithTestRunnerExtras(TestRunnerType.DEFAULT)): TestCase","{
    val moduleName: String = sourcesRoot?.name?.removeSuffix("".kt"") ?: LAUNCHER_MODULE_NAME
    val module = TestModule.Exclusive(moduleName, emptySet(), emptySet(), emptySet())
    sourcesRoot?.walkTopDown()?.filter { it.isFile && it.extension == ""kt"" }?.forEach { file -> module.files += TestFile.createCommitted(file, module) }
    return TestCase(id = TestCaseId.Named(moduleName), kind = TestKind.STANDALONE, modules = setOf(module), freeCompilerArgs = freeCompilerArgs, nominalPackageName = PackageName.EMPTY, checks = TestRunChecks.Default(testRunSettings.get<Timeouts>().executionTimeout), extras = extras).apply { initialize(null, null) }
}","/**

 * [sourcesRoot] points either to a .kt-file, or a folder.

 *

 * If it's present, then it's name (without .kt-extension, if it's a file) will be used as 'moduleName' for generated module.

 */",f12820:m417
63271,"@SinceKotlin(""1.5"") public actual fun Char.isISOControl(): Boolean","{
    return this <= '\u001F' || this in '\u007F' .. '\u009F'
}","/**

 * Returns `true` if this character is an ISO control character.

 *

 * A character is considered to be an ISO control character if its [category] is [CharCategory.CONTROL].

 *

 * @sample samples.text.Chars.isISOControl

 */",f17357:m15
63649,"@SinceKotlin(""1.1"") @kotlin.internal.InlineOnly public actual inline fun minOf(a: Short, b: Short, c: Short): Short","{
    return minOf(a.toInt(), minOf(b.toInt(), c.toInt())).toShort()
}","/**

 * Returns the smaller of three values.

 */",f17406:m641
14267,"public fun compareAndSwap(expected: T, newValue: T): T","this::value.compareAndExchangeField(expected, newValue)","/**

     * Atomically sets the value to the given [new value][newValue] if the current value equals the [expected value][expected]

     * and returns the old value in any case.

     *

     *

     * @param expected the expected value

     * @param newValue the new value

     * @return the old value

     */",f3762:m565
58548,"@SinceKotlin(""1.5"") @WasExperimental(ExperimentalUnsignedTypes::class) public infix fun UShort.until(to: UShort): UIntRange","{
    if (to <= UShort.MIN_VALUE) return UIntRange.EMPTY
    return this.toUInt() .. (to - 1u).toUInt()
}","/**

 * Returns a range from this value up to but excluding the specified [to] value.

 * 

 * If the [to] value is less than or equal to `this` value, then the returned range is empty.

 */",f17090:m813
54643,public actual fun IntArray.elementAt(index: Int): Int,"{
    return elementAtOrElse(index) { throw IndexOutOfBoundsException(""index: $index, size: $size}"") }
}","/**

 * Returns an element at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this array.

 * 

 * @sample samples.collections.Collections.Elements.elementAt

 */",f16713:m91
56393,"@SinceKotlin(""1.3"") @ExperimentalUnsignedTypes public fun Random.nextUBytes(array: UByteArray, fromIndex: Int = 0, toIndex: Int = array.size): UByteArray","{
    nextBytes(array.asByteArray(), fromIndex, toIndex)
    return array
}","/**

 * Fills a subrange of the specified `UByte` [array] starting from [fromIndex] inclusive and ending [toIndex] exclusive with random UBytes.

 *

 * @return [array] with the subrange filled with random bytes.

 */",f16860:m279
21269,public inline fun <reified M: KtModule> KtModule.directDependsOnDependenciesOfType(): Sequence<M>,directDependsOnDependencies.asSequence().filterIsInstance<M>(),"/**

 * A list of all modules that the current module can depend on with refinement dependency.

 *

 * @see KtModule.directDependsOnDependencies

 */",f8524:m51
63439,"@SinceKotlin(""1.4"") public actual infix fun ShortArray?.contentEquals(other: ShortArray?): Boolean","{
    if (this === other) return true
    if (this === null || other === null) return false
    if (size != other.size) return false
    for (i in indices) {
        if (this[i] != other[i]) return false
    }
    return true
}","/**

 * Checks if the two specified arrays are *structurally* equal to one another.

 * 

 * Two arrays are considered structurally equal if they have the same size, and elements at corresponding indices are equal.

 * 

 * The arrays are also considered structurally equal if both are `null`.

 * 

 * @param other the array to compare with this array.

 * @return `true` if the two arrays are structurally equal, `false` otherwise.

 * 

 * @sample samples.collections.Arrays.ContentOperations.intArrayContentEquals

 */",f17396:m1075
63428,"@Deprecated(""Use Kotlin compiler 1.4 to avoid deprecation warning."") @SinceKotlin(""1.1"") @DeprecatedSinceKotlin(hiddenSince = ""1.4"") public infix fun <T> Array<out T>.contentEquals(other: Array<out T>): Boolean","{
    return this.contentEquals(other)
}","/**

 * Checks if the two specified arrays are *structurally* equal to one another.

 * 

 * Two arrays are considered structurally equal if they have the same size, and elements at corresponding indices are equal.

 * Elements are compared for equality using the [equals][Any.equals] function.

 * For floating point numbers, this means `NaN` is equal to itself and `-0.0` is not equal to `0.0`.

 * 

 * If the arrays contain nested arrays, use [contentDeepEquals] to recursively compare their elements.

 * 

 * @param other the array to compare with this array.

 * @return `true` if the two arrays are structurally equal, `false` otherwise.

 * 

 * @sample samples.collections.Arrays.ContentOperations.arrayContentEquals

 */",f17396:m653
14765,"@Deprecated(""Use measureTime() instead."", ReplaceWith(""measureTime(block).inWholeMicroseconds"", ""kotlin.time.measureTime"")) @DeprecatedSinceKotlin(warningSince = ""1.9"") @Suppress(""DEPRECATION"") public inline fun measureTimeMicros(block: () -> Unit): Long","{
    val start = getTimeMicros()
    block()
    return getTimeMicros() - start
}","/**

 * Executes the given [block] and returns elapsed time in microseconds (Kotlin/Native only).

 *

 * This function is deprecated.

 * To measure the duration of execution of a block of code,

 * use [measureTime] or [measureTimedValue] instead.

 * The resulting [Duration] then can be expressed as a [Long] number of microseconds

 * using [Duration.inWholeMicroseconds].

 */",f3817:m163
58599,"@kotlin.jvm.JvmName(""intRangeContains"") @SinceKotlin(""1.9"") @WasExperimental(ExperimentalStdlibApi::class) public operator fun OpenEndRange<Int>.contains(value: Byte): Boolean","{
    return contains(value.toInt())
}","/**

 * Checks if the specified [value] belongs to this range.

 */",f17092:m719
48295,internal inline fun Project.runProjectConfigurationHealthCheckWhenEvaluated(crossinline check: Project.() -> Unit),"{
    launchInStage(KotlinPluginLifecycle.Stage.ReadyForExecution) { runProjectConfigurationHealthCheck(check) }
}","/**

 * Convenience function for

 * ```kotlin

 *  whenEvaluated {

 *      runProjectConfigurationCheck(action)

 *  }

 * ```

 * @see runProjectConfigurationHealthCheck

 */",f15593:m133
11886,"@Suppress(""UNCHECKED_CAST"") public fun get(): T",derefStablePointer(this.stablePtr) as T,"/**

     * Returns the object this handle was [created][StableRef.create] for.

     */",f3605:m87
55640,"@SinceKotlin(""1.1"") @kotlin.internal.InlineOnly public inline fun Short.inv(): Short",(this.toInt().inv()).toShort(),/** Inverts the bits in this value. */,f16775:m87
58822,"public inline fun <T> Sequence<T>.forEachIndexed(action: (index: Int, T) -> Unit): Unit","{
    var index = 0
    for (item in this) action(checkIndexOverflow(index++), item)
}","/**

 * Performs the given [action] on each element, providing sequential index with the element.

 * @param [action] function that takes the index of an element and the element itself

 * and performs the action on the element.

 *

 * The operation is _terminal_.

 */",f17096:m2639
56229,"@SinceKotlin(""1.5"") @kotlin.internal.InlineOnly @kotlin.internal.IntrinsicConstEvaluation public inline fun Short.floorDiv(other: Short): Int",this.toInt().floorDiv(other.toInt()),"/** Divides this value by the other value, flooring the result to an integer that is closer to negative infinity. */",f16842:m209
63530,internal fun IntArray.copyOfUninitializedElements(newSize: Int): IntArray,"{
    return copyOfUninitializedElements(0, newSize)
}","/**

 * Returns new array which is a copy of the original array with new elements filled with **lateinit** _uninitialized_ values.

 * Attempts to read _uninitialized_ values from this array work in implementation-dependent manner,

 * either throwing exception or returning some kind of implementation-specific default value.

 */",f17396:m3655
58698,public fun Byte.coerceAtLeast(minimumValue: Byte): Byte,"{
    return if (this < minimumValue) minimumValue else this
}","/**

 * Ensures that this value is not less than the specified [minimumValue].

 * 

 * @return this value if it's greater than or equal to the [minimumValue] or the [minimumValue] otherwise.

 * 

 * @sample samples.comparisons.ComparableOps.coerceAtLeast

 */",f17092:m2429
17224,"public fun Project.createDeclarationProvider(scope: GlobalSearchScope, contextualModule: KtModule?): KotlinDeclarationProvider","KotlinDeclarationProviderFactory.getInstance(this).createDeclarationProvider(scope, contextualModule)","/**

 * Creates a [KotlinDeclarationProvider] providing symbols within the given [scope].

 *

 * The [contextualModule] is the module which contains the symbols to be provided, if applicable. The declaration provider may use the

 * contextual module to provide declarations differently, such as providing alternative declarations for an outsider module. Some

 * functionality such as package set computation may also depend on the contextual module, as the declaration provider may require

 * additional information not available in the [scope].

 */",f5187:m223
43592,fun CommandLineArguments.assertCommandLineArgumentsContain(vararg expectedArgs: String),"{
    expectedArgs.forEach { assert(args.contains(it)) {
        this.buildResult.printBuildOutput()
        ""There is no ${it} in actual command line arguments are: ${args}""
    } }
}","/**

 * Asserts that the given list of command line arguments contains all the expected arguments.

 *

 * @param expectedArgs the list of expected arguments

 * @throws AssertionError if any of the expected arguments are missing from the actual arguments list

 */",f13457:m721
58009,"@SinceKotlin(""1.5"") @WasExperimental(ExperimentalUnsignedTypes::class, ExperimentalStdlibApi::class) @kotlin.internal.InlineOnly public inline fun UByte.takeLowestOneBit(): UByte",toInt().takeLowestOneBit().toUByte(),"/**

 * Returns a number having a single bit set in the position of the least significant set bit of this [UByte] number,

 * or zero, if this number is zero.

 */",f17056:m375
58472,"@SinceKotlin(""1.4"") @OptIn(kotlin.experimental.ExperimentalTypeInference::class) @OverloadResolutionByLambdaReturnType @kotlin.jvm.JvmName(""flatMapSequenceTo"") public inline fun <K, V, R, C: MutableCollection<in R>> Map<out K, V>.flatMapTo(destination: C, transform: (Map.Entry<K, V>) -> Sequence<R>): C","{
    for (element in this) {
        val list = transform(element)
        destination.addAll(list)
    }
    return destination
}","/**

 * Appends all elements yielded from results of [transform] function being invoked on each entry of original map, to the given [destination].

 */",f17089:m207
57988,"@SinceKotlin(""1.5"") @WasExperimental(ExperimentalUnsignedTypes::class) @kotlin.internal.InlineOnly public inline fun min(a: ULong, b: ULong): ULong","{
    return minOf(a, b)
}","/**

 * Returns the smaller of two values.

 */",f17055:m35
64325,@kotlin.internal.IntrinsicConstEvaluation public override fun toDouble(): Double,wasm_f64_promote_f32(this),"/**

     * Converts this [Float] value to [Double].

     *

     * The resulting `Double` value represents the same numerical value as this `Float`.

     */",f17455:m4513
14964,public actual operator fun ShortArray.plus(elements: Collection<Short>): ShortArray,"{
    var index = size
    val result = copyOfUninitializedElements(index + elements.size)
    for (element in elements) result[index++] = element
    return result
}","/**

 * Returns an array containing all elements of the original array and then all elements of the given [elements] collection.

 */",f3831:m4201
48543,"@JvmOverloads fun sharedLib(namePrefix: String, buildTypes: Collection<NativeBuildType> = NativeBuildType.DEFAULT_BUILD_TYPES, configure: Action<SharedLibrary>)","sharedLib(namePrefix, buildTypes) { configure.execute(this) }",/** Creates a shared library with the given [namePrefix] for each build type and configures it. */,f15652:m491
55957,"@SinceKotlin(""1.1"") public inline fun <T, K, R> Grouping<T, K>.fold(initialValueSelector: (key: K, element: T) -> R, operation: (key: K, accumulator: R, element: T) -> R): Map<K, R>","@Suppress(""UNCHECKED_CAST"") aggregate { key, acc, e, first -> operation(key, if (first) initialValueSelector(key, e) else acc as R, e) }","/**

 * Groups elements from the [Grouping] source by key and applies [operation] to the elements of each group sequentially,

 * passing the previously accumulated value and the current element as arguments, and stores the results in a new map.

 * An initial value of accumulator is provided by [initialValueSelector] function.

 *

 * @param initialValueSelector a function that provides an initial value of accumulator for each group.

 *  It's invoked with parameters:

 *  - `key`: the key of the group;

 *  - `element`: the first element being encountered in that group.

 *

 * @param operation a function that is invoked on each element with the following parameters:

 *  - `key`: the key of the group this element belongs to;

 *  - `accumulator`: the current value of the accumulator of the group;

 *  - `element`: the element from the source being accumulated.

 *

 * @return a [Map] associating the key of each group with the result of accumulating the group elements.

 * @sample samples.collections.Grouping.foldByEvenLengthWithComputedInitialValue

 */",f16820:m175
58721,public fun Long.coerceIn(range: ClosedRange<Long>): Long,"{
    if (range is ClosedFloatingPointRange) {
        return this.coerceIn<Long>(range)
    }
    if (range.isEmpty()) throw IllegalArgumentException(""Cannot coerce value to an empty range: $range."")
    return when {
        this < range.start -> range.start
        this > range.endInclusive -> range.endInclusive
        else -> this
    }
}","/**

 * Ensures that this value lies in the specified [range].

 * 

 * @return this value if it's in the [range], or `range.start` if this value is less than `range.start`, or `range.endInclusive` if this value is greater than `range.endInclusive`.

 * 

 * @sample samples.comparisons.ComparableOps.coerceIn

 */",f17092:m3037
43576,fun BuildResult.assertOutputDoesNotContain(regexToCheck: Regex),"{
    assert(!output.contains(regexToCheck)) {
        printBuildOutput()
        val matchedStrings = regexToCheck.findAll(output).map { it.value }.joinToString(prefix = ""  "", separator = ""\n  "")
        ""Build output contains following regex '$regexToCheck' matches:\n$matchedStrings""
    }
}","/**

 * Asserts build output does not contain any lines matching [regexToCheck] regex.

 */",f13457:m237
23048,"fun stripMetadata(logger: Logger, classNamePattern: String, inFile: File, outFile: File, preserveFileTimestamps: Boolean = true)","{
    val classRegex = classNamePattern.toRegex()
    assert(inFile.exists()) { ""Input file not found at $inFile"" }
    fun transform(entryName: String, bytes: ByteArray): ByteArray {
        if (!entryName.endsWith("".class"")) return bytes
        if (!classRegex.matches(entryName.removeSuffix("".class""))) return bytes
        var changed = false
        val classWriter = ClassWriter(0)
        val classVisitor = object : ClassVisitor(Opcodes.API_VERSION, classWriter) {
            override fun visitAnnotation(desc: String, visible: Boolean): AnnotationVisitor? {
                if (Type.getType(desc).internalName == ""kotlin/Metadata"") {
                    changed = true
                    return null
                }
                return super.visitAnnotation(desc, visible)
            }
        }
        ClassReader(bytes).accept(classVisitor, 0)
        if (!changed) return bytes
        return classWriter.toByteArray()
    }
    ZipOutputStream(BufferedOutputStream(FileOutputStream(outFile))).use { outJar -> JarFile(inFile).use { inJar -> for (entry in inJar.entries()) {
        val inBytes = inJar.getInputStream(entry).readBytes()
        val outBytes = transform(entry.name, inBytes)
        if (inBytes.size < outBytes.size) {
            error(""Size increased for ${entry.name}: was ${inBytes.size} bytes, became ${outBytes.size} bytes"")
        }
        val newEntry = ZipEntry(entry.name)
        if (!preserveFileTimestamps) {
            newEntry.time = CONSTANT_TIME_FOR_ZIP_ENTRIES
        }
        outJar.putNextEntry(newEntry)
        outJar.write(outBytes)
        outJar.closeEntry()
    } } }
    logger.info(""Stripping @kotlin.Metadata annotations from all classes in $inFile"")
    logger.info(""Class name pattern: $classNamePattern"")
    logger.info(""Input file size: ${inFile.length()} bytes"")
    logger.info(""Output written to $outFile"")
    logger.info(""Output file size: ${outFile.length()} bytes"")
}","/**

 * Removes @kotlin.Metadata annotations from compiled Kotlin classes

 */",f8834:m29
21679,private fun KtElement.getContainingCallExpressionForCalleeExpression(): KtCallExpression?,"{
    if (this !is KtExpression) return null
    val calleeExpression = deparenthesize(this) ?: return null
    if (calleeExpression is KtCallExpression) return null
    val callExpression = parentOfType<KtCallExpression>() ?: return null
    if (deparenthesize(callExpression.calleeExpression) != calleeExpression) return null
    return callExpression
}","/**

     * When resolving the calleeExpression of a `KtCallExpression`, we resolve the entire `KtCallExpression` instead. This way, the

     * corresponding FIR element is the `FirFunctionCall`, etc. Implicit invoke is then specially handled after obtaining the

     * `FirImplicitInvokeCall`.

     *

     * Note that, if the calleeExpression is already a KtCallExpression, then we don't do this because such a callExpression can be properly

     * resolved to the desired FIR element. That is, cases like `getHighLevelFunction()()` just works, where the both `KtCallExpression`

     * resolve to the desired FIR element.

     */",f8624:m583
54651,@kotlin.internal.InlineOnly public actual inline fun ShortArray.asList(): List<Short>,"{
    return this.unsafeCast<Array<Short>>().asList()
}","/**

 * Returns a [List] that wraps the original array.

 */",f16713:m229
11928,fun <T: CPointed> interpretCPointer(rawValue: NativePtr),"if (rawValue == nativeNullPtr) {
    null
} else {
    CPointer<T>(rawValue)
}","/**

 * Creates a [CPointer] from the raw pointer of [NativePtr].

 *

 * @return a [CPointer] representation, or `null` if the [rawValue] represents native `nullptr`.

 */",f3611:m121
54839,"@SinceKotlin(""1.4"") public actual fun minOf(a: Double, vararg other: Double): Double","{
    var min = a
    for (e in other) min = minOf(min, e)
    return min
}","/**

 * Returns the smaller of the given values.

 * 

 * If any value is `NaN`, returns `NaN`.

 */",f16714:m853
49899,internal fun ConfigurationContainer.configureStdlibVersionAlignment(),"all { configuration -> configuration.withDependencies { dependencySet -> dependencySet.withType<ExternalDependency>().configureEach { dependency -> if (dependency.group == KOTLIN_MODULE_GROUP && (dependency.name == KOTLIN_STDLIB_MODULE_NAME || dependency.name == KOTLIN_STDLIB_JDK7_MODULE_NAME) && dependency.version != null && SemVer.fromGradleRichVersion(dependency.version!!).let { it >= kotlin180Version && it < kotlin1920Version }) {
    if (configuration.isCanBeResolved) configuration.alignStdlibJvmVariantVersions(dependency)
    filter { it.isCanBeResolved && it.hierarchy.contains(configuration) }.forEach { it.alignStdlibJvmVariantVersions(dependency) }
} } } }","/**

 * Aligning kotlin-stdlib-jdk8 and kotlin-stdlib-jdk7 dependencies versions with kotlin-stdlib (or kotlin-stdlib-jdk7)

 * when project stdlib version is >= 1.8.0

 */",f16003:m107
13783,@kotlin.internal.IntrinsicConstEvaluation public override operator fun compareTo(other: Double): Int,"{
    if (this > other) return 1
    if (this < other) return -1
    val thisBits = this.toBits()
    val otherBits = other.toBits()
    return thisBits.compareTo(otherBits)
}","/**

     * Compares this value with the specified value for order.

     * Returns zero if this value is equal to the specified other value, a negative number if it's less than other,

     * or a positive number if it's greater than other.

     */",f3686:m4699
17704,"@Suppress(""UNCHECKED_CAST"") private fun <T: CallableDescriptor> T.unwrapUseSiteSubstitutionOverride(): T","{
    var current: CallableDescriptor = this
    while (original != current) {
        current = current.original
    }
    return current as T
}","/**

 * Use-site substitution override are tracked through [CallableDescriptor.getOriginal]. Note that overridden symbols are accessed through

 * [CallableDescriptor.getOverriddenDescriptors] instead, which is separate from [CallableDescriptor.getOriginal].

 */",f5311:m501
56210,"@SinceKotlin(""1.6"") @WasExperimental(ExperimentalStdlibApi::class) public fun Byte.rotateLeft(bitCount: Int): Byte",(toInt().shl(bitCount and 7) or (toInt() and 0xFF).ushr(8 - (bitCount and 7))).toByte(),"/**

 * Rotates the binary representation of this [Byte] number left by the specified [bitCount] number of bits.

 * The most significant bits pushed out from the left side reenter the number as the least significant bits on the right side.

 *

 * Rotating the number left by a negative bit count is the same as rotating it right by the negated bit count:

 * `number.rotateLeft(-n) == number.rotateRight(n)`

 *

 * Rotating by a multiple of [Byte.SIZE_BITS] (8) returns the same number, or more generally

 * `number.rotateLeft(n) == number.rotateLeft(n % 8)`

 */",f16841:m339
58807,"public fun <T, R: Any> Sequence<T>.mapNotNull(transform: (T) -> R?): Sequence<R>","{
    return TransformingSequence(this, transform).filterNotNull()
}","/**

 * Returns a sequence containing only the non-null results of applying the given [transform] function

 * to each element in the original sequence.

 *

 * The operation is _intermediate_ and _stateless_.

 * 

 * @sample samples.collections.Collections.Transformations.mapNotNull

 */",f17096:m2257
43577,"fun BuildResult.assertOutputContainsExactlyTimes(expected: String, expectedCount: Int = 1)","{
    assertOutputContainsExactlyTimes(expected.toRegex(RegexOption.LITERAL), expectedCount)
}","/**

 * Asserts build output contains exactly [expectedCount] of occurrences of [expected] string.

 */",f13457:m271
45636,@OptIn(InternalKotlinGradlePluginApi::class) @Deprecated(message = KOTLIN_OPTIONS_DEPRECATION_MESSAGE) fun kotlinOptions(fn: T.() -> Unit),"{
    @Suppress(""DEPRECATION"") kotlinOptions.fn()
}","/**

     * Configures the [kotlinOptions] with the provided configuration.

     */",f14907:m87
57522,"@SinceKotlin(""1.4"") @OptIn(kotlin.experimental.ExperimentalTypeInference::class) @OverloadResolutionByLambdaReturnType @Suppress(""INAPPLICABLE_JVM_NAME"") @kotlin.jvm.JvmName(""sumOfBigInteger"") @ExperimentalUnsignedTypes @kotlin.internal.InlineOnly public inline fun UByteArray.sumOf(selector: (UByte) -> java.math.BigInteger): java.math.BigInteger","{
    var sum: java.math.BigInteger = 0.toBigInteger()
    for (element in this) {
        sum += selector(element)
    }
    return sum
}","/**

 * Returns the sum of all values produced by [selector] function applied to each element in the array.

 */",f16971:m1239
12239,"private fun reparseWithCodeSnippets(library: CompilationWithPCH, translationUnit: CXTranslationUnit, sourceFile: File, names: List<String>)","{
    sourceFile.bufferedWriter().use { writer ->
        writer.appendPreamble(library)
        names.forEach { name ->
            val codeSnippetLines = when (library.language) {
                Language.C, Language.CPP, Language.OBJECTIVE_C -> listOf(""void $CODE_SNIPPET_FUNCTION_NAME_PREFIX$name() {"", ""    __auto_type KNI_INDEXER_VARIABLE_$name = $name;"", ""}"")
            }
            assert(codeSnippetLines.size == CODE_SNIPPET_LINES_NUMBER)
            codeSnippetLines.forEach { writer.appendLine(it) }
        }
    }
    clang_reparseTranslationUnit(translationUnit, 0, null, CXTranslationUnit_DetailedPreprocessingRecord)
}","/**

 * Adds code snippets to be then processed with [processCodeSnippet] to the [sourceFile]

 * and reparses the [translationUnit].

 *

 *  - If a code snippet allows extracting the constant value using libclang API, we'll add a [ConstantDef] in the

 * native index and generate a Kotlin constant for it.

 *  - If the expression type can be inferred by libclang, we'll add a [WrappedMacroDef] in the native index and

 * generate a bridge for this macro.

 *  - Otherwise the macro is skipped.

 */",f3629:m311
33535,public inline fun <reified @PureReifiable T> emptyArray(): Array<T>,"@Suppress(""UNCHECKED_CAST"") (arrayOfNulls<T>(0) as Array<T>)","/**

 * Returns an empty array of the specified type [T].

 */",f11201:m41
45764,"@Deprecated(""Scheduled for removal in Kotlin 2.1. Check KT-58759"", replaceWith = ReplaceWith(""project.dependencies.platform(notation)"")) fun platform(notation: Any): Dependency",project.dependencies.platform(notation),"/**

     * @suppress

     */",f14927:m701
31017,"@JvmStatic fun writeData(message: MessageLite, stringTable: JvmStringTable): Array<String>","BitEncoding.encodeBytes(writeDataBytes(stringTable, message))","/**

     * Serializes [message] and [stringTable] into a string array which must be further written to [Metadata.data1]

     */",f10812:m107
52883,"@SinceKotlin(""1.4"") public actual fun Long.takeLowestOneBit(): Long","when (val low = this.low) {
    0 -> Long(0, high.takeLowestOneBit())
    else -> Long(low.takeLowestOneBit(), 0)
}","/**

 * Returns a number having a single bit set in the position of the least significant set bit of this [Long] number,

 * or zero, if this number is zero.

 */",f16581:m429
64822,"@JsName(""suite"") internal fun suite(name: String, ignored: Boolean, suiteFn: () -> Unit)","{
    adapter().suite(name, ignored, suiteFn)
}","/**

 * The functions below are used by the compiler to describe the tests structure, e.g.

 *

 * suite('a suite', false, function() {

 *   suite('a subsuite', false, function() {

 *     test('a test', false, function() {...});

 *     test('an ignored/pending test', true, function() {...});

 *   });

 *   suite('an ignored/pending test', true, function() {...});

 * });

 */",f17517:m75
63165,public override fun toString(): String,"{
    val s = getSimpleName(this.typeInfo)
    return if (message != null) s + "": "" + message.toString() else s
}","/**

     * Returns the short description of this throwable consisting of the exception class name

     * followed by the exception message if it is not null.

     */",f17305:m81
55792,public inline fun <T> Iterator<T>.forEach(operation: (T) -> Unit): Unit,"{
    for (element in this) operation(element)
}","/**

 * Performs the given [operation] on each element of this [Iterator].

 * @sample samples.collections.Iterators.forEachIterator

 */",f16810:m53
59048,"public inline fun CharSequence.reduce(operation: (acc: Char, Char) -> Char): Char","{
    if (isEmpty()) throw UnsupportedOperationException(""Empty char sequence can't be reduced."")
    var accumulator = this[0]
    for (index in 1 .. lastIndex) {
        accumulator = operation(accumulator, this[index])
    }
    return accumulator
}","/**

 * Accumulates value starting with the first character and applying [operation] from left to right

 * to current accumulator value and each character.

 * 

 * Throws an exception if this char sequence is empty. If the char sequence can be empty in an expected way,

 * please use [reduceOrNull] instead. It returns `null` when its receiver is empty.

 * 

 * @param [operation] function that takes current accumulator value and a character,

 * and calculates the next accumulator value.

 * 

 * @sample samples.collections.Collections.Aggregates.reduce

 */",f17097:m3587
58950,public inline fun String.dropWhile(predicate: (Char) -> Boolean): String,"{
    for (index in this.indices) if (!predicate(this[index])) return substring(index)
    return """"
}","/**

 * Returns a string containing all characters except first characters that satisfy the given [predicate].

 * 

 * @sample samples.text.Strings.drop

 */",f17097:m813
55697,"@SinceKotlin(""1.4"") @kotlin.internal.InlineOnly public inline fun Appendable.appendLine(value: Char): Appendable",append(value).appendLine(),/** Appends value to the given Appendable and a line feed character (`\n`) after it. */,f16781:m151
56093,public fun <T> MutableCollection<in T>.removeAll(elements: Sequence<T>): Boolean,"{
    val list = elements.toList()
    return list.isNotEmpty() && removeAll(list)
}","/**

 * Removes all elements from this [MutableCollection] that are also contained in the given [elements] sequence.

 */",f16825:m311
56859,"@SinceKotlin(""1.2"") @kotlin.internal.InlineOnly public actual inline fun Double.Companion.fromBits(bits: Long): Double",java.lang.Double.longBitsToDouble(bits),"/**

 * Returns the [Double] value corresponding to a given bit representation.

 */",f16929:m129
48494,"fun getExecutable(namePrefix: String, buildType: String): Executable","getExecutable(namePrefix, NativeBuildType.valueOf(buildType.toUpperCaseAsciiOnly()))",/** Returns an executable with the given [namePrefix] and the given build type. Throws an exception if there is no such binary.*/,f15652:m87
63667,"@SinceKotlin(""1.3"") @ExperimentalUnsignedTypes public actual fun ULongArray.asList(): List<ULong>","{
    return object : AbstractList<ULong>(), RandomAccess {
        override val size: Int get() = this@asList.size
    
        override fun isEmpty(): Boolean = this@asList.isEmpty()
    
        override fun contains(element: ULong): Boolean = this@asList.contains(element)
    
        override fun get(index: Int): ULong = this@asList[index]
    
        override fun indexOf(element: ULong): Int = this@asList.indexOf(element)
    
        override fun lastIndexOf(element: ULong): Int = this@asList.lastIndexOf(element)
    }
}","/**

 * Returns a [List] that wraps the original array.

 */",f17408:m159
50986,@Test fun `test - KT58280 - jvmWithJava Target does not add main classes to test compile classpath`(),"{
    val project = buildProject()
    project.plugins.apply(""java-library"")
    project.applyKotlinJvmPlugin()
    project.repositories.mavenLocal()
    project.repositories.mavenCentralCacheRedirector()
    val kotlin = project.kotlinJvmExtension
    kotlin.target.compilations.test.internal.configurations.compileDependencyConfiguration.resolvedConfiguration.files.forEach { file -> if (file in kotlin.target.compilations.main.output.allOutputs) {
        fail(""Unexpected file in test compile dependencies: $file"")
    } }
}","/**

     * Context:

     * https://youtrack.jetbrains.com/issue/KT-58280/org.jetbrains.kotlin.jvm-Gradle-plugin-contributes-build-directories-to-the-test-compile-classpath

     *

     * This is not necessarily a 'regression' as IntelliJ and CLI compilations work fine.

     * Tools like eclipse did not expect this output.

     *

     * The commit the initially (and accidentally) changed the behavior was:

     * [Gradle] Implement KotlinWithJavaCompilation with underlying KotlinCompilationImpl Sebastian Sellmair* 04.10.22, 17:16

     * af198825899df9943814e2cb54d39868fff399fb

     *

     * This test 'fixates' the old behaviour.

     */",f16222:m41
58999,"public inline fun <R: Any, C: MutableCollection<in R>> CharSequence.mapIndexedNotNullTo(destination: C, transform: (index: Int, Char) -> R?): C","{
    forEachIndexed { index, element -> transform(index, element)?.let { destination.add(it) } }
    return destination
}","/**

 * Applies the given [transform] function to each character and its index in the original char sequence

 * and appends only the non-null results to the given [destination].

 * @param [transform] function that takes the index of a character and the character itself

 * and returns the result of the transform applied to the character.

 */",f17097:m1995
43508,"fun extractCompiledJavaFiles(projectDir: File, output: String): List<Path>","{
    return javaSrcRegex.findAll(output).asIterable().flatMap { matchResult -> matchResult.groups[1]!!.value.split("" "") }.filter { filePath -> filePath.endsWith("".java"", ignoreCase = true) }.map { javaFilePath -> projectDir.toPath().relativize(Paths.get(javaFilePath)) }
}","/**

 * Extracts the list of compiled .java files from the build output.

 *

 * The returned paths are relative to the project directory.

 *

 * Note: Log level of output must be set to [LogLevel.DEBUG].

 */",f13451:m63
49061,internal fun IdeAdditionalArtifactResolver(resolver: IdeDependencyResolver),"IdeAdditionalArtifactResolver { sourceSet, dependencies ->
    val dependenciesByCoordinates = dependencies.filterIsInstance<IdeaKotlinResolvedBinaryDependency>().filter { it.binaryType == IdeaKotlinBinaryDependency.KOTLIN_COMPILE_BINARY_TYPE }.groupBy { it.coordinates?.copy(sourceSetName = null) }
    resolver.resolve(sourceSet).filterIsInstance<IdeaKotlinResolvedBinaryDependency>().filter { it.binaryType == SOURCES_BINARY_TYPE || it.binaryType == DOCUMENTATION_BINARY_TYPE }.forEach forEachSourceOrDocumentationDependency@{ sourceOrDocumentationDependency -> dependenciesByCoordinates[sourceOrDocumentationDependency.coordinates ?: return@forEachSourceOrDocumentationDependency].orEmpty().forEach forEachMatchedDependency@{ dependency ->
        val classpath = when (sourceOrDocumentationDependency.binaryType) {
            SOURCES_BINARY_TYPE -> dependency.sourcesClasspath
            DOCUMENTATION_BINARY_TYPE -> dependency.documentationClasspath
            else -> return@forEachMatchedDependency
        }
        classpath.addAll(dependency.classpath)
    } }
}","/**

 * Creates an [IdeAdditionalArtifactResolver] from a given [IdeDependencyResolver]:

 * Dependencies from the [IdeDependencyResolver] need to resolve sources and javadoc using

 * the [SOURCES_BINARY_TYPE] or [DOCUMENTATION_BINARY_TYPE]

 */",f15741:m139
58246,@kotlin.internal.InlineOnly public inline fun floorDiv(other: UInt): ULong,this.floorDiv(other.toULong()),"/**

     * Divides this value by the other value, flooring the result to an integer that is closer to negative infinity.

     *

     * For unsigned types, the results of flooring division and truncating division are the same.

     */",f17066:m337
61753,"@SinceKotlin(""1.4"") public fun Element.addClass(vararg cssClasses: String): Boolean","{
    val missingClasses = cssClasses.filterNot { hasClass(it) }
    if (missingClasses.isNotEmpty()) {
        val presentClasses = className.trim()
        className = buildString {
            append(presentClasses)
            if (!presentClasses.isEmpty()) {
                append("" "")
            }
            missingClasses.joinTo(this, "" "")
        }
        return true
    }
    return false
}","/**

 * Adds CSS class to element. Has no effect if all specified classes are already in class attribute of the element

 *

 * @return true if at least one class has been added

 */",f17275:m27
58811,public fun <T> Sequence<T>.distinct(): Sequence<T>,"{
    return this.distinctBy { it }
}","/**

 * Returns a sequence containing only distinct elements from the given sequence.

 * 

 * Among equal elements of the given sequence, only the first one will be present in the resulting sequence.

 * The elements in the resulting sequence are in the same order as they were in the source sequence.

 *

 * The operation is _intermediate_ and _stateful_.

 * 

 * @sample samples.collections.Collections.Transformations.distinctAndDistinctBy

 */",f17096:m2347
49053,@ExternalKotlinTargetApi infix fun SourceSetConstraint.and(other: SourceSetConstraint),SourceSetConstraint { sourceSet -> this@and(sourceSet) && other(sourceSet) },"/**

 * Combines two given [SourceSetConstraint] using a logical 'and':

 * The resulting constraint will match only SourceSets that matches both of the specified constraints

 */",f15735:m743
16223,fun postponeForeignAnnotationResolution(symbol: FirBasedSymbol<*>),"{
    val symbolToPostpone = symbol.symbolToPostponeIfCanBeResolvedOnDemand() ?: return
    val currentSymbol = anchorForForeignAnnotations ?: errorWithAttachment(""Unexpected state: the current symbol have to be here"") { withFirSymbolEntry(""symbol to postpone"", symbolToPostpone) }
    if (currentSymbol == symbolToPostpone) return
    postponedSymbols.put(currentSymbol, symbolToPostpone)
}","/**

     * Postpone the resolution request to [symbol] until [annotation arguments][FirResolvePhase.ANNOTATION_ARGUMENTS] phase

     * of the declaration which is used this foreign annotation.

     *

     * @see postponedSymbols

     */",f4086:m143
63640,"@SinceKotlin(""1.1"") public actual fun <T: Comparable<T>> minOf(a: T, b: T): T","{
    return if (a <= b) a else b
}","/**

 * Returns the smaller of two values.

 * 

 * If values are equal, returns the first one.

 */",f17406:m451
57184,public fun <T: Comparable<T>> Iterable<T>.toSortedSet(): java.util.SortedSet<T>,"{
    return toCollection(java.util.TreeSet<T>())
}","/**

 * Returns a new [SortedSet][java.util.SortedSet] of all elements.

 */",f16967:m91
53121,"@SinceKotlin(""1.4"") public actual fun String?.toBoolean(): Boolean","this != null && this.lowercase() == ""true""","/**

 * Returns `true` if this string is not `null` and its content is equal to the word ""true"", ignoring case, and `false` otherwise.

 *

 * There are also strict versions of the function available on non-nullable String, [toBooleanStrict] and [toBooleanStrictOrNull].

 */",f16618:m17
55127,@kotlin.internal.IntrinsicConstEvaluation public inline operator fun times(other: Byte): Long,this.times(other.toLong()),/** Multiplies this value by the other value. */,f16727:m2629
50106,"fun runJvmCompilerAsync(args: K2JVMCompilerArguments, environment: GradleCompilerEnvironment, jdkHome: File, taskOutputsBackup: TaskOutputsBackup?): WorkQueue?","{
    if (args.jdkHome == null && !args.noJdk) args.jdkHome = jdkHome.absolutePath
    loggerProvider.kotlinInfo(""Kotlin compilation 'jdkHome' argument: ${args.jdkHome}"")
    return runCompilerAsync(KotlinCompilerClass.JVM, args, environment, taskOutputsBackup)
}","/**

     * Compiler might be executed asynchronously. Do not do anything requiring end of compilation after this function is called.

     * @see [GradleKotlinCompilerWork]

     */",f16053:m237
14065,public fun getAndDecrement(): Long,this::value.getAndAddField(-1L),"/**

     * Atomically decrements the current value by one and returns the old value.

     */",f3718:m261
57153,"@SinceKotlin(""1.4"") public actual fun <T: Comparable<T>> maxOf(a: T, vararg other: T): T","{
    var max = a
    for (e in other) max = maxOf(max, e)
    return max
}","/**

 * Returns the greater of the given values.

 * 

 * If there are multiple equal maximal values, returns the first of them.

 */",f16966:m305
63423,"@SinceKotlin(""1.4"") public actual infix fun <T> Array<out T>?.contentDeepEquals(other: Array<out T>?): Boolean","{
    return contentDeepEqualsImpl(other)
}","/**

 * Checks if the two specified arrays are *deeply* equal to one another.

 * 

 * Two arrays are considered deeply equal if they have the same size, and elements at corresponding indices are deeply equal.

 * That is, if two corresponding elements are nested arrays, they are also compared deeply.

 * Elements of other types are compared for equality using the [equals][Any.equals] function.

 * For floating point numbers, this means `NaN` is equal to itself and `-0.0` is not equal to `0.0`.

 * 

 * The arrays are also considered deeply equal if both are `null`.

 * 

 * If any of the arrays contain themselves at any nesting level, the behavior is undefined.

 * 

 * @param other the array to compare deeply with this array.

 * @return `true` if the two arrays are deeply equal, `false` otherwise.

 * 

 * @sample samples.collections.Arrays.ContentOperations.contentDeepEquals

 */",f17396:m505
52422,"private fun isLowSurrogateOfSupplement(string: CharSequence, index: Int): Boolean",index < string.length && string[index].isLowSurrogate() && index > 0 && string[index - 1].isHighSurrogate(),/** Returns true if [index] points to a low surrogate following a high surrogate */,f16503:m87
63187,"@SinceKotlin(""1.6"") @WasExperimental(ExperimentalStdlibApi::class) public actual fun Long.rotateLeft(bitCount: Int): Long",shl(bitCount) or ushr(64 - bitCount),"/**

 * Rotates the binary representation of this [Long] number left by the specified [bitCount] number of bits.

 * The most significant bits pushed out from the left side reenter the number as the least significant bits on the right side.

 *

 * Rotating the number left by a negative bit count is the same as rotating it right by the negated bit count:

 * `number.rotateLeft(-n) == number.rotateRight(n)`

 *

 * Rotating by a multiple of [Long.SIZE_BITS] (64) returns the same number, or more generally

 * `number.rotateLeft(n) == number.rotateLeft(n % 64)`

 */",f17314:m215
13660,@kotlin.internal.IntrinsicConstEvaluation public inline operator fun compareTo(other: Byte): Int,this.compareTo(other.toLong()),"/**

     * Compares this value with the specified value for order.

     * Returns zero if this value is equal to the specified other value, a negative number if it's less than other,

     * or a positive number if it's greater than other.

     */",f3686:m2779
57090,@kotlin.internal.InlineOnly public inline fun File.inputStream(): FileInputStream,"{
    return FileInputStream(this)
}","/**

 * Constructs a new FileInputStream of this file and returns it as a result.

 */",f16956:m493
58708,public fun Long.coerceAtMost(maximumValue: Long): Long,"{
    return if (this > maximumValue) maximumValue else this
}","/**

 * Ensures that this value is not greater than the specified [maximumValue].

 * 

 * @return this value if it's less than or equal to the [maximumValue] or the [maximumValue] otherwise.

 * 

 * @sample samples.comparisons.ComparableOps.coerceAtMost

 */",f17092:m2649
56851,@kotlin.internal.InlineOnly public actual inline fun Double.isNaN(): Boolean,java.lang.Double.isNaN(this),"/**

 * Returns `true` if the specified number is a

 * Not-a-Number (NaN) value, `false` otherwise.

 */",f16929:m19
14950,"@SinceKotlin(""1.3"") @Suppress(""ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS"") public actual fun DoubleArray.fill(element: Double, fromIndex: Int = 0, toIndex: Int = size): Unit","{
    arrayFill(this, fromIndex, toIndex, element)
}","/**

 * Fills this array or its subrange with the specified [element] value.

 * 

 * @param fromIndex the start of the range (inclusive) to fill, 0 by default.

 * @param toIndex the end of the range (exclusive) to fill, size of this array by default.

 * 

 * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.

 * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].

 */",f3831:m3891
57051,@kotlin.internal.InlineOnly public actual inline fun println(message: Any?),"{
    System.out.println(message)
}",/** Prints the given [message] and the line separator to the standard output stream. */,f16953:m153
43557,"fun GradleProject.assertFileInProjectDoesNotContain(pathToFile: String, vararg unexpectedText: String)","{
    assertFileDoesNotContain(projectPath.resolve(pathToFile), *unexpectedText)
}","/**

 * Asserts file under [pathToFile] relative to the test project exists and does not contain any line from [unexpectedText]

 */",f13456:m419
58787,public fun <T> Sequence<T>.toMutableList(): MutableList<T>,"{
    return toCollection(ArrayList<T>())
}","/**

 * Returns a new [MutableList] filled with all elements of this sequence.

 *

 * The operation is _terminal_.

 */",f17096:m1647
14939,internal fun LongArray.copyOfUninitializedElements(newSize: Int): LongArray,"{
    return copyOfUninitializedElements(0, newSize)
}","/**

 * Returns new array which is a copy of the original array with new elements filled with **lateinit** _uninitialized_ values.

 * Attempts to read _uninitialized_ values from this array work in implementation-dependent manner,

 * either throwing exception or returning some kind of implementation-specific default value.

 */",f3831:m3621
14777,internal fun Char.digitToIntImpl(): Int,"{
    val ch = this.code
    val index = binarySearchRange(rangeStart, ch)
    val diff = ch - rangeStart[index]
    return if (diff < 10) diff else -1
}","/**

 * Returns an integer from 0..9 indicating the digit this character represents,

 * or -1 if this character is not a digit.

 */",f3823:m81
55955,"@SinceKotlin(""1.1"") public inline fun <T, K, R> Grouping<T, K>.aggregate(operation: (key: K, accumulator: R?, element: T, first: Boolean) -> R): Map<K, R>","{
    return aggregateTo(mutableMapOf<K, R>(), operation)
}","/**

 * Groups elements from the [Grouping] source by key and applies [operation] to the elements of each group sequentially,

 * passing the previously accumulated value and the current element as arguments, and stores the results in a new map.

 *

 * The key for each element is provided by the [Grouping.keyOf] function.

 *

 * @param operation function is invoked on each element with the following parameters:

 *  - `key`: the key of the group this element belongs to;

 *  - `accumulator`: the current value of the accumulator of the group, can be `null` if it's the first `element` encountered in the group;

 *  - `element`: the element from the source being aggregated;

 *  - `first`: indicates whether it's the first `element` encountered in the group.

 *

 * @return a [Map] associating the key of each group with the result of aggregation of the group elements.

 * @sample samples.collections.Grouping.aggregateByRadix

 */",f16820:m67
54736,"@Suppress(""ACTUAL_WITHOUT_EXPECT"", ""NOTHING_TO_INLINE"") public actual inline operator fun <T> Array<out T>.plus(element: T): Array<T>","{
    return this.asDynamic().concat(arrayOf(element))
}","/**

 * Returns an array containing all elements of the original array and then the given [element].

 */",f16713:m2615
54798,"@SinceKotlin(""1.1"") public actual fun <T: Comparable<T>> maxOf(a: T, b: T): T","{
    return if (a >= b) a else b
}","/**

 * Returns the greater of two values.

 * 

 * If values are equal, returns the first one.

 */",f16714:m29
63654,"@SinceKotlin(""1.4"") public actual fun <T: Comparable<T>> minOf(a: T, vararg other: T): T","{
    var min = a
    for (e in other) min = minOf(min, e)
    return min
}","/**

 * Returns the smaller of the given values.

 * 

 * If there are multiple equal minimal values, returns the first of them.

 */",f17406:m739
58751,public fun <T> Sequence<T>.lastOrNull(): T?,"{
    val iterator = iterator()
    if (!iterator.hasNext()) return null
    var last = iterator.next()
    while (iterator.hasNext()) last = iterator.next()
    return last
}","/**

 * Returns the last element, or `null` if the sequence is empty.

 *

 * The operation is _terminal_.

 * 

 * @sample samples.collections.Collections.Elements.last

 */",f17096:m589
58852,"@SinceKotlin(""1.4"") @OptIn(kotlin.experimental.ExperimentalTypeInference::class) @OverloadResolutionByLambdaReturnType @kotlin.internal.InlineOnly public inline fun <T, R> Sequence<T>.minOfWith(comparator: Comparator<in R>, selector: (T) -> R): R","{
    val iterator = iterator()
    if (!iterator.hasNext()) throw NoSuchElementException()
    var minValue = selector(iterator.next())
    while (iterator.hasNext()) {
        val v = selector(iterator.next())
        if (comparator.compare(minValue, v) > 0) {
            minValue = v
        }
    }
    return minValue
}","/**

 * Returns the smallest value according to the provided [comparator]

 * among all values produced by [selector] function applied to each element in the sequence.

 * 

 * @throws NoSuchElementException if the sequence is empty.

 *

 * The operation is _terminal_.

 */",f17096:m4005
14822,public actual fun ByteArray.asList(): List<Byte>,"{
    return object : AbstractList<Byte>(), RandomAccess {
        override val size: Int get() = this@asList.size
    
        override fun isEmpty(): Boolean = this@asList.isEmpty()
    
        override fun contains(element: Byte): Boolean = this@asList.contains(element)
    
        override fun get(index: Int): Byte = this@asList[index]
    
        override fun indexOf(element: Byte): Int = this@asList.indexOf(element)
    
        override fun lastIndexOf(element: Byte): Int = this@asList.lastIndexOf(element)
    }
}","/**

 * Returns a [List] that wraps the original array.

 */",f3831:m239
54751,public actual operator fun DoubleArray.plus(elements: Collection<Double>): DoubleArray,"{
    var index = size
    val result = this.copyOf(size + elements.size)
    for (element in elements) result[index++] = element
    return result
}","/**

 * Returns an array containing all elements of the original array and then all elements of the given [elements] collection.

 */",f16713:m2869
54760,"@Suppress(""NOTHING_TO_INLINE"") public actual inline operator fun DoubleArray.plus(elements: DoubleArray): DoubleArray","{
    return primitiveArrayConcat(this, elements)
}","/**

 * Returns an array containing all elements of the original array and then all elements of the given [elements] array.

 */",f16713:m3019
59109,"@SinceKotlin(""1.3"") @ExperimentalUnsignedTypes public fun Collection<UByte>.toUByteArray(): UByteArray","{
    val result = UByteArray(size)
    var index = 0
    for (element in this) result[index++] = element
    return result
}","/**

 * Returns an array of UByte containing all of the elements of this collection.

 */",f17099:m41
54783,"@Deprecated(""Use other sorting functions from the Standard Library"") @DeprecatedSinceKotlin(warningSince = ""1.6"") @kotlin.internal.InlineOnly public inline fun IntArray.sort(noinline comparison: (a: Int, b: Int) -> Int): Unit","{
    nativeSort(comparison)
}","/**

 * Sorts the array in-place according to the order specified by the given [comparison] function.

 */",f16713:m3597
33526,"@SinceKotlin(""1.1"") inline fun <reified T: Annotation> KAnnotatedElement.findAnnotation(): T?","@Suppress(""UNCHECKED_CAST"") annotations.firstOrNull { it is T } as T?","/**

 * Returns an annotation of the given type on this element.

 */",f11199:m27
68899,"private fun getSmartCastVariantsExcludingReceiver(bindingContext: BindingContext, containingDeclarationOrModule: DeclarationDescriptor, dataFlowInfo: DataFlowInfo, receiverToCast: ReceiverValue, languageVersionSettings: LanguageVersionSettings, dataFlowValueFactory: DataFlowValueFactory): Collection<KotlinType>","{
    val dataFlowValue = dataFlowValueFactory.createDataFlowValue(receiverToCast, bindingContext, containingDeclarationOrModule)
    return dataFlowInfo.getCollectedTypes(dataFlowValue, languageVersionSettings)
}","/**

     * @return variants @param receiverToCast may be cast to according to @param dataFlowInfo, @param receiverToCast itself is NOT included

     */",f19395:m155
57990,"@SinceKotlin(""1.5"") @WasExperimental(ExperimentalUnsignedTypes::class) @kotlin.internal.InlineOnly public inline fun max(a: ULong, b: ULong): ULong","{
    return maxOf(a, b)
}","/**

 * Returns the greater of two values.

 */",f17055:m75
57131,public fun File.walkBottomUp(): FileTreeWalk,walk(FileWalkDirection.BOTTOM_UP),"/**

 * Gets a sequence for visiting this directory and all its content in bottom-up order.

 * Depth-first search is used and directories are visited after all their files.

 */",f16960:m535
57467,"@SinceKotlin(""1.4"") @OptIn(kotlin.experimental.ExperimentalTypeInference::class) @OverloadResolutionByLambdaReturnType @kotlin.jvm.JvmName(""sumOfBigDecimal"") @kotlin.internal.InlineOnly public inline fun FloatArray.sumOf(selector: (Float) -> java.math.BigDecimal): java.math.BigDecimal","{
    var sum: java.math.BigDecimal = 0.toBigDecimal()
    for (element in this) {
        sum += selector(element)
    }
    return sum
}","/**

 * Returns the sum of all values produced by [selector] function applied to each element in the array.

 */",f16970:m5793
55289,public inline fun <T> arrayOf(vararg elements: T): Array<T>,elements.unsafeCast<Array<T>>(),"/**

 * Returns an array containing the specified elements.

 */",f16731:m61
57338,"@Suppress(""ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS"") public actual fun BooleanArray.fill(element: Boolean, fromIndex: Int = 0, toIndex: Int = size): Unit","{
    java.util.Arrays.fill(this, fromIndex, toIndex, element)
}","/**

 * Fills this array or its subrange with the specified [element] value.

 * 

 * @param fromIndex the start of the range (inclusive) to fill, 0 by default.

 * @param toIndex the end of the range (exclusive) to fill, size of this array by default.

 * 

 * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.

 * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].

 */",f16970:m3371
1541,"fun translateAccessors(descriptor: VariableDescriptorWithAccessors, declaration: KtProperty?, result: MutableList<JsPropertyInitializer>, context: TranslationContext)","{
    if (descriptor is PropertyDescriptor && (descriptor.modality == Modality.ABSTRACT || JsDescriptorUtils.isSimpleFinalProperty(descriptor))) return
    PropertyTranslator(descriptor, declaration, context).translate(result)
}","/**

 * Translates single property /w accessors.

 */",f366:m99
13913,"@SinceKotlin(""1.2"") @kotlin.internal.InlineOnly public actual inline fun Double.toBits(): Long",if (isNaN()) Double.NaN.toRawBits() else toRawBits(),"/**

 * Returns a bit representation of the specified floating-point value as [Long]

 * according to the IEEE 754 floating-point ""double format"" bit layout.

 */",f3706:m99
48097,protected open fun makeIncrementalCompilationFeatures(): IncrementalCompilationFeatures,"{
    return IncrementalCompilationFeatures(preciseCompilationResultsBackup = preciseCompilationResultsBackup.get(), keepIncrementalCompilationCachesInMemory = keepIncrementalCompilationCachesInMemory.get(), enableUnsafeIncrementalCompilationForMultiplatform = enableUnsafeIncrementalCompilationForMultiplatform.get())
}","/**

     * Entry point for getting IC feature toggles in Gradle. Child classes should override it

     * if they have a platform-specific Input.

     */",f15533:m559
56145,"@Suppress(""EXTENSION_SHADOWED_BY_MEMBER"") public fun <T> Comparator<T>.reversed(): Comparator<T>","when (this) {
    is ReversedComparator -> this.comparator
    NaturalOrderComparator -> @Suppress(""UNCHECKED_CAST"") (ReverseOrderComparator as Comparator<T>)
    ReverseOrderComparator -> @Suppress(""UNCHECKED_CAST"") (NaturalOrderComparator as Comparator<T>)
    else -> ReversedComparator(this)
}","/**

 *  Returns a comparator that imposes the reverse ordering of this comparator.

 *

 *  @sample samples.comparisons.Comparisons.reversed

 */",f16832:m593
49553,"internal fun ObjectFactory.transformMetadataLibrariesForBuild(resolution: MetadataDependencyResolution.ChooseVisibleSourceSets, outputDirectory: File, materializeFiles: Boolean): Iterable<File>","{
    return when (resolution.metadataProvider) {
        is ProjectMetadataProvider -> fileCollection().from(resolution.visibleSourceSetNamesExcludingDependsOn.map { visibleSourceSetName -> resolution.metadataProvider.getSourceSetCompiledMetadata(visibleSourceSetName) })
        is ArtifactMetadataProvider -> transformMetadataLibrariesForBuild(resolution, outputDirectory, materializeFiles, resolution.metadataProvider)
    }
}","/**

 * Will transform the [CompositeMetadataArtifact] extracting the visible source sets specified in the [resolution]

 * @param materializeFiles: If true, the klib files will actually be created and extracted

 *

 * In case the [resolution] points to a project dependency, then the output file collections will be returned.

 */",f15881:m69
58749,public inline fun <T> Sequence<T>.last(predicate: (T) -> Boolean): T,"{
    var last: T? = null
    var found = false
    for (element in this) {
        if (predicate(element)) {
            last = element
            found = true
        }
    }
    if (!found) throw NoSuchElementException(""Sequence contains no element matching the predicate."")
    @Suppress(""UNCHECKED_CAST"") return last as T
}","/**

 * Returns the last element matching the given [predicate].

 *

 * The operation is _terminal_.

 * 

 * @throws NoSuchElementException if no such element is found.

 * 

 * @sample samples.collections.Collections.Elements.last

 */",f17096:m509
54655,@kotlin.internal.InlineOnly public actual inline fun DoubleArray.asList(): List<Double>,"{
    return this.unsafeCast<Array<Double>>().asList()
}","/**

 * Returns a [List] that wraps the original array.

 */",f16713:m293
57172,"@SinceKotlin(""1.1"") @kotlin.internal.InlineOnly public actual inline fun minOf(a: Float, b: Float, c: Float): Float","{
    return minOf(a, minOf(b, c))
}","/**

 * Returns the smaller of three values.

 * 

 * If any value is `NaN`, returns `NaN`.

 */",f16966:m685
59046,"@SinceKotlin(""1.1"") public inline fun <S: CharSequence> S.onEach(action: (Char) -> Unit): S","{
    return apply { for (element in this) action(element) }
}","/**

 * Performs the given [action] on each character and returns the char sequence itself afterwards.

 */",f17097:m3549
16365,private fun withInterceptor(block: () -> Unit),"{
    val target = designationPathInterceptor?.invoke()
    if (target != null) {
        target.accept(this)
    } else {
        block()
    }
}","/**

     * Ensures that the visitor is going through the path specified by the initial [FirDesignation].

     *

     * If the designation is over, then allows the [block] code to take control.

     */",f4108:m1531
70141,"fun checkContractAndRecordIfPresent(expression: KtExpression, trace: BindingTrace, ownerDescriptor: FunctionDescriptor)","{
    if (!expression.isContractDescriptionCallPsiCheck()) return
    val callContext = ContractCallContext(expression, ownerDescriptor, trace, languageVersionSettings)
    val contractProviderIfAny = ownerDescriptor.getUserData(ContractProviderKey) as? LazyContractProvider?
    var resultingContractDescription: ContractDescription? = null
    try {
        if (!callContext.isContractDescriptionCallPreciseCheck()) return
        resultingContractDescription = parseContractAndReportErrors(callContext)
    } finally {
        contractProviderIfAny?.setContractDescription(resultingContractDescription)
    }
}","/**

     * ! IMPORTANT NOTICE !

     *

     * This function has very important non-obvious implicit contract:

     * it *must* call [org.jetbrains.kotlin.contracts.description.LazyContractProvider.setContractDescription]

     * if FunctionDescriptor had [LazyContractProvider] in the user data.

     *

     * Otherwise, it may lead to inconsistent resolve state and failed assertions

     */",f19593:m69
55286,public fun Any?.toString(): String,"this?.toString() ?: ""null""","/**

 * Returns a string representation of the object. Can be called with a null receiver, in which case

 * it returns the string ""null"".

 */",f16731:m23
54763,"@Suppress(""ACTUAL_WITHOUT_EXPECT"", ""NOTHING_TO_INLINE"") public actual inline fun <T> Array<out T>.plusElement(element: T): Array<T>","{
    return this.asDynamic().concat(arrayOf(element))
}","/**

 * Returns an array containing all elements of the original array and then the given [element].

 */",f16713:m3067
9239,"private fun IrBlockBuilder.twoExpressionsForSubsequentUsages(argument: IrExpression): Pair<IrExpression, IrExpression>","if (argument is IrGetValue) Pair(argument, argument.shallowCopy()) else createTmpVariable(argument).let { Pair(irGet(it), irGet(it)) }","/**

     * This function returns two expressions based on the parameter:

     * - <original [argument] and its shallow copy>, should its second usage be idempotent and have runtime cost not greater than local val read.

     *   This reduces excessive local variable usage without performance degradation.

     * - <two [IrGetValue] nodes for newly-created temporary val, initialized with original expression>, otherwise.

     */",f3332:m297
57280,"@SinceKotlin(""1.4"") @kotlin.internal.InlineOnly public actual inline fun IntArray?.contentToString(): String","{
    return java.util.Arrays.toString(this)
}","/**

 * Returns a string representation of the contents of the specified array as if it is [List].

 * 

 * @sample samples.collections.Arrays.ContentOperations.contentToString

 */",f16970:m1693
23837,"private fun createKSerializerParamsForEachGenericArgument(parentFunction: FunctionDescriptor, serializableClass: ClassDescriptor, actualArgsOffset: Int = 0): Pair<List<TypeParameterDescriptor>, List<ValueParameterDescriptor>>","{
    val serializerClass = serializableClass.getClassFromSerializationPackage(SerialEntityNames.KSERIALIZER_CLASS)
    val args = mutableListOf<ValueParameterDescriptor>()
    val typeArgs = mutableListOf<TypeParameterDescriptor>()
    var i = 0
    serializableClass.declaredTypeParameters.forEach { _ ->
        val targ = TypeParameterDescriptorImpl.createWithDefaultBound(parentFunction, Annotations.EMPTY, false, Variance.INVARIANT, Name.identifier(""T$i""), i, LockBasedStorageManager.NO_LOCKS)
        val pType = KotlinTypeFactory.simpleNotNullType(TypeAttributes.Empty, serializerClass, listOf(TypeProjectionImpl(targ.defaultType)))
        args.add(ValueParameterDescriptorImpl(containingDeclaration = parentFunction, original = null, index = actualArgsOffset + i, annotations = Annotations.EMPTY, name = Name.identifier(""$typeArgPrefix$i""), outType = pType, declaresDefaultValue = false, isCrossinline = false, isNoinline = false, varargElementType = null, source = parentFunction.source))
        typeArgs.add(targ)
        i++
    }
    return typeArgs to args
}","/**

     * Creates free type parameters T0, T1, ... for given serializable class

     * Returns [T0, T1, ...] and [KSerializer<T0>, KSerializer<T1>,...]

     */",f9030:m777
48515,fun findSharedLib(buildType: NativeBuildType): SharedLibrary?,"findSharedLib("""", buildType)",/** Returns a shared library with the empty name prefix and the given build type. Returns null if there is no such binary. */,f15652:m225
48974,@ExternalKotlinTargetApi fun IdeDependencyResolver.withEffect(effect: IdeDependencyEffect),"IdeDependencyResolver { sourceSet -> this@withEffect.resolve(sourceSet).also { dependencies -> effect(sourceSet, dependencies) } }","/**

 * Wraps the given [IdeDependencyResolver] with the specified [effect]

 * The resulting resolver will first resolve the dependencies and then execute the effect on the result

 */",f15723:m43
56039,"public inline fun <K, V, M: MutableMap<in K, in V>> Map<out K, V>.filterTo(destination: M, predicate: (Map.Entry<K, V>) -> Boolean): M","{
    for (element in this) {
        if (predicate(element)) {
            destination.put(element.key, element.value)
        }
    }
    return destination
}","/**

 * Appends all entries matching the given [predicate] into the mutable map given as [destination] parameter.

 *

 * @return the destination map.

 * @sample samples.collections.Maps.Filtering.filterTo

 */",f16823:m1025
58809,"public inline fun <T, R, C: MutableCollection<in R>> Sequence<T>.mapTo(destination: C, transform: (T) -> R): C","{
    for (item in this) destination.add(transform(item))
    return destination
}","/**

 * Applies the given [transform] function to each element of the original sequence

 * and appends the results to the given [destination].

 *

 * The operation is _terminal_.

 */",f17096:m2303
14099,public actual inline fun <reified T> Collection<T>.toTypedArray(): Array<T>,"{
    val result = arrayOfNulls<T>(size)
    var index = 0
    for (element in this) result[index++] = element
    @Suppress(""UNCHECKED_CAST"") return result as Array<T>
}","/**

 * Returns a *typed* array containing all the elements of this collection.

 *

 * Allocates an array of runtime type `T` having its size equal to the size of this collection

 * and populates the array with the elements of this collection.

 * @sample samples.collections.Collections.Collections.collectionToTypedArray

 */",f3729:m15
15001,public actual fun IntArray.toTypedArray(): Array<Int>,"{
    return Array(size) { index -> this[index] }
}","/**

 * Returns a *typed* object array containing all of the elements of this primitive array.

 */",f3831:m5075
43518,"fun GradleProject.addPropertyToGradleProperties(propertyName: String, propertyValues: Map<String, String>)","{
    if (!gradleProperties.exists()) gradleProperties.createFile()
    val propertiesContent = gradleProperties.readText()
    val (existingPropertyLine, otherLines) = propertiesContent.lines().partition { it.trim().startsWith(propertyName) }
    if (existingPropertyLine.isEmpty()) {
        gradleProperties.writeText(""""""
        
                    |${propertyName}=${propertyValues.values.joinToString("" "")}
        
                    | 
        
                    |$propertiesContent
        
                    """""".trimMargin())
    } else {
        val argsLine = existingPropertyLine.single()
        val optionsToRewrite = mutableListOf<String>()
        val appendedOptions = buildString { propertyValues.forEach { if (argsLine.contains(it.key) && !argsLine.contains(it.value)) optionsToRewrite.add(it.value) else if (!argsLine.contains(it.key)) append("" ${it.value}"") } }
        assert(optionsToRewrite.isEmpty()) { """"""
        
                    |You are trying to write options: $optionsToRewrite 
        
                    |for property: $propertyName 
        
                    |in $gradleProperties
        
                    |But these options are already exists with another values.
        
                    |Current property value is: $argsLine
        
                    """""".trimMargin() }
        gradleProperties.writeText(""""""
        
                    |$argsLine$appendedOptions
        
                    |
        
                    |${otherLines.joinToString(separator = ""\n"")}
        
                    """""".trimMargin())
    }
}","/**

 * Adds the given options to a Gradle property specified by name, in the project's Gradle properties file.

 * If the property does not exist, it is created.

 * @param propertyName The name of the Gradle property to modify or create.

 * @param propertyValues Map with key = ""option prefix"", and value = ""option value"".

 *                       For example, for options: -Xmx2g -XX:MaxMetaspaceSize=512m -XX:+HeapDumpOnOutOfMemoryError

 *                       Map would be look like: Map.of(""-Xmx"", ""-Xmx2g"",

 *                                                      ""-XX:MaxMetaspaceSize"",""-XX:MaxMetaspaceSize=512m"",

 *                                                      ""-XX:+HeapDumpOnOutOfMemoryError"", ""-XX:+HeapDumpOnOutOfMemoryError"" )

 */",f13453:m191
14840,"@Deprecated(""Use Kotlin compiler 1.4 to avoid deprecation warning."") @SinceKotlin(""1.1"") @DeprecatedSinceKotlin(hiddenSince = ""1.4"") public infix fun LongArray.contentEquals(other: LongArray): Boolean","{
    return this.contentEquals(other)
}","/**

 * Checks if the two specified arrays are *structurally* equal to one another.

 * 

 * Two arrays are considered structurally equal if they have the same size, and elements at corresponding indices are equal.

 * 

 * @param other the array to compare with this array.

 * @return `true` if the two arrays are structurally equal, `false` otherwise.

 * 

 * @sample samples.collections.Arrays.ContentOperations.intArrayContentEquals

 */",f3831:m797
56174,public fun <T> lazyOf(value: T): Lazy<T>,InitializedLazyImpl(value),"/**

 * Creates a new instance of the [Lazy] that is already initialized with the specified [value].

 */",f16837:m63
45766,"@Deprecated(""Dukat integration is in redesigning process. Now it does not work."") fun npm(name: String, version: String, generateExternals: Boolean): Dependency","{
    @Suppress(""deprecation_error"") (warnNpmGenerateExternals(project.logger))
    return npm(name, version)
}","/**

     * @suppress

     */",f14927:m741
16620,"fun KtFile.collectDiagnosticsForFile(firResolveSession: LLFirResolveSession, filter: DiagnosticCheckerFilter): Collection<KtPsiDiagnostic>","firResolveSession.collectDiagnosticsForFile(this, filter)","/**

 * Returns a list of Diagnostics compiler finds for given [KtFile]

 * This operation could be performance affective because it create FIleStructureElement and resolve non-local declaration into BODY phase

 */",f4145:m157
30901,"inline fun <T, R: Any> Collection<T>.memoryOptimizedMapNotNull(transform: (T) -> R?): List<R>","{
    return mapNotNullTo(ArrayList(), transform).compactIfPossible()
}","/**

 * A memory-optimized version of [Iterable.mapNotNull].

 * @see Iterable.mapNotNull

 */",f10791:m53
14068,"public fun compareAndSet(expected: T, newValue: T): Boolean","this::value.compareAndSetField(expected, newValue)","/**

     * Atomically sets the value to the given [new value][newValue] if the current value equals the [expected value][expected],

     * returns true if the operation was successful and false only if the current value was not equal to the expected value.

     *

     * Provides sequential consistent ordering guarantees and cannot fail spuriously.

     *

     * Comparison of values is done by reference.

     */",f3718:m305
57321,"@JvmName(""copyOfRangeInline"") @kotlin.internal.InlineOnly public actual inline fun CharArray.copyOfRange(fromIndex: Int, toIndex: Int): CharArray","{
    return if (kotlin.internal.apiVersionIsAtLeast(1, 3, 0)) {
        copyOfRangeImpl(fromIndex, toIndex)
    } else {
        if (toIndex > size) throw IndexOutOfBoundsException(""toIndex: $toIndex, size: $size"")
        java.util.Arrays.copyOfRange(this, fromIndex, toIndex)
    }
}","/**

 * Returns a new array which is a copy of the specified range of the original array.

 * 

 * @param fromIndex the start of the range (inclusive) to copy.

 * @param toIndex the end of the range (exclusive) to copy.

 * 

 * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.

 * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].

 */",f16970:m2991
55866,"public fun <T, R> Sequence<Pair<T, R>>.unzip(): Pair<List<T>, List<R>>","{
    val listT = ArrayList<T>()
    val listR = ArrayList<R>()
    for (pair in this) {
        listT.add(pair.first)
        listR.add(pair.second)
    }
    return listT to listR
}","/**

 * Returns a pair of lists, where

 * *first* list is built from the first values of each pair from this sequence,

 * *second* list is built from the second values of each pair from this sequence.

 *

 * The operation is _terminal_.

 *

 * @sample samples.collections.Sequences.Transformations.unzip

 */",f16815:m201
14006,"@SinceKotlin(""1.1"") @kotlin.internal.InlineOnly public actual inline fun Short.toString(radix: Int): String",this.toInt().toString(checkRadix(radix)),"/**

 * Returns a string representation of this [Short] value in the specified [radix].

 *

 * @throws IllegalArgumentException when [radix] is not a valid radix for number to string conversion.

 */",f3714:m39
14865,"@SinceKotlin(""1.4"") public actual fun ShortArray?.contentHashCode(): Int","{
    if (this === null) return 0
    var result = 1
    for (element in this) result = 31 * result + element.hashCode()
    return result
}","/**

 * Returns a hash code based on the contents of this array as if it is [List].

 */",f3831:m1633
23022,fun Project.createGradleCommonSourceSet(): SourceSet,"{
    val commonSourceSet = sourceSets.create(commonSourceSetName) {
        excludeGradleCommonDependencies(this)
        val commonGradleApiConfiguration = configurations.create(""commonGradleApiCompileOnly"") {
            isVisible = false
            isCanBeConsumed = false
            isCanBeResolved = true
        }
        configurations[compileClasspathConfigurationName].extendsFrom(commonGradleApiConfiguration)
        dependencies {
            compileOnlyConfigurationName(kotlinStdlib())
            ""commonGradleApiCompileOnly""(""dev.gradleplugins:gradle-api:8.6"")
            if (this@createGradleCommonSourceSet.name !in testPlugins) {
                compileOnlyConfigurationName(project("":kotlin-gradle-plugin-api"")) { capabilities { requireCapability(""org.jetbrains.kotlin:kotlin-gradle-plugin-api-common"") } }
            }
        }
    }
    plugins.withType<JavaLibraryPlugin>().configureEach { this@createGradleCommonSourceSet.extensions.configure<JavaPluginExtension> { registerFeature(commonSourceSet.name) {
        usingSourceSet(commonSourceSet)
        disablePublication()
    } } }
    tasks.named<KotlinJvmCompile>(""compile${commonSourceSet.name.replaceFirstChar { it.uppercase() }}Kotlin"") { compilerOptions.moduleName.set(""${this@createGradleCommonSourceSet.name}_${commonSourceSet.name}"") }
    registerValidatePluginTasks(commonSourceSet)
    return commonSourceSet
}","/**

 * Common sources for all variants.

 * Should contain classes that are independent of Gradle API version or using minimal supported Gradle api.

 */",f8830:m281
58913,"@kotlin.jvm.JvmName(""sumOfLong"") public fun Sequence<Long>.sum(): Long","{
    var sum: Long = 0L
    for (element in this) {
        sum += element
    }
    return sum
}","/**

 * Returns the sum of all elements in the sequence.

 *

 * The operation is _terminal_.

 */",f17096:m6139
64461,"@SinceKotlin(""1.5"") @WasExperimental(ExperimentalPathApi::class) @Throws(IOException::class) @kotlin.internal.InlineOnly public inline fun Path.writeLines(lines: Sequence<CharSequence>, charset: Charset = Charsets.UTF_8, vararg options: OpenOption): Path","{
    return Files.write(this, lines.asIterable(), charset, *options)
}","/**

 * Write the specified sequence of char sequences [lines] to a file terminating each one with the platform's line separator.

 *

 * By default, the file will be overwritten if it already exists, but you can control this behavior

 * with [options].

 *

 * @param charset character set to use for writing text, UTF-8 by default.

 */",f17469:m605
20186,public fun KtClassOrObjectSymbol.isSubClassOf(superClass: KtClassOrObjectSymbol): Boolean,"withValidityAssertion { analysisSession.symbolDeclarationOverridesProvider.isSubClassOf(this, superClass) }","/**

     * Checks if [this] class has [superClass] as its superclass somewhere in the inheritance hierarchy.

     *

     * N.B. The class is not considered to be a subclass of itself, so `myClass.isSubClassOf(myClass)` is always `false`.

     */",f5787:m103
52464,"override fun tryToMatch(startIndex: Int, testString: CharSequence, matchResult: MatchResultImpl): Int","{
    matchResult.setConsumed(groupIndex, startIndex)
    children.forEach {
        val shift = it.findBack(0, startIndex, testString, matchResult)
        if (shift >= 0) {
            return -1
        }
    }
    return next.matches(startIndex, testString, matchResult)
}","/** Returns startIndex+shift, the next position to match */",f16513:m103
7527,fun String.sameDependenciesAs(task: Task),"{
    val t = task.project.tasks.getByName(this)
    t.sameDependenciesAs(task)
}","/**

 * Sets the same dependencies for the receiver task from the given [task]

 */",f3111:m499
58800,"public inline fun <T, K, V, M: MutableMap<in K, MutableList<V>>> Sequence<T>.groupByTo(destination: M, keySelector: (T) -> K, valueTransform: (T) -> V): M","{
    for (element in this) {
        val key = keySelector(element)
        val list = destination.getOrPut(key) { ArrayList<V>() }
        list.add(valueTransform(element))
    }
    return destination
}","/**

 * Groups values returned by the [valueTransform] function applied to each element of the original sequence

 * by the key returned by the given [keySelector] function applied to the element

 * and puts to the [destination] map each group key associated with a list of corresponding values.

 * 

 * @return The [destination] map.

 *

 * The operation is _terminal_.

 * 

 * @sample samples.collections.Collections.Transformations.groupByKeysAndValues

 */",f17096:m2057
63555,public actual operator fun ByteArray.plus(elements: Collection<Byte>): ByteArray,"{
    var index = size
    val result = copyOfUninitializedElements(index + elements.size)
    for (element in elements) result[index++] = element
    return result
}","/**

 * Returns an array containing all elements of the original array and then all elements of the given [elements] collection.

 */",f17396:m4287
34357,"override fun testSuite(testSuite: XCTestSuite, didRecordExpectedFailure: XCTExpectedFailure)","{
    logger.log(""TestSuite ${testSuite.name} got expected failure: ${didRecordExpectedFailure.failureReason}"")
    this.testSuite(testSuite, didRecordExpectedFailure.issue)
}","/**

     * Test suite expected failure.

     *

     * Logs the failure of the test suite execution.

     * Treat expected failures as ordinary unexpected one.

     */",f11292:m201
13967,"@Suppress(""ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS"") public actual fun String.replaceFirst(oldValue: String, newValue: String, ignoreCase: Boolean = false): String","{
    val index = indexOf(oldValue, ignoreCase = ignoreCase)
    return if (index < 0) this else this.replaceRange(index, index + oldValue.length, newValue)
}","/**

 * Returns a new string obtained by replacing the first occurrence of the [oldValue] substring in this string

 * with the specified [newValue] string.

 */",f3713:m213
57994,"@SinceKotlin(""1.5"") @WasExperimental(ExperimentalUnsignedTypes::class, ExperimentalStdlibApi::class) @kotlin.internal.InlineOnly public inline fun UInt.takeHighestOneBit(): UInt",toInt().takeHighestOneBit().toUInt(),"/**

 * Returns a number having a single bit set in the position of the most significant set bit of this [UInt] number,

 * or zero, if this number is zero.

 */",f17056:m65
43549,fun TestProject.assertSymlinkInProjectExists(pathToFile: String),"{
    assertSymlinkExists(projectPath.resolve(pathToFile))
}","/**

 * Asserts symlink under [pathToFile] relative to the test project exists and is a symlink.

 */",f13456:m235
59055,"@SinceKotlin(""1.4"") public inline fun CharSequence.reduceRightOrNull(operation: (Char, acc: Char) -> Char): Char?","{
    var index = lastIndex
    if (index < 0) return null
    var accumulator = get(index--)
    while (index >= 0) {
        accumulator = operation(get(index--), accumulator)
    }
    return accumulator
}","/**

 * Accumulates value starting with the last character and applying [operation] from right to left

 * to each character and current accumulator value.

 * 

 * Returns `null` if the char sequence is empty.

 * 

 * @param [operation] function that takes a character and current accumulator value,

 * and calculates the next accumulator value.

 * 

 * @sample samples.collections.Collections.Aggregates.reduceRightOrNull

 */",f17097:m3899
58946,public fun String.dropLast(n: Int): String,"{
    require(n >= 0) { ""Requested character count $n is less than zero."" }
    return take((length - n).coerceAtLeast(0))
}","/**

 * Returns a string with the last [n] characters removed.

 * 

 * @throws IllegalArgumentException if [n] is negative.

 * 

 * @sample samples.text.Strings.drop

 */",f17097:m717
53135,"@SinceKotlin(""1.2"") @kotlin.internal.InlineOnly public actual inline fun Short.toString(radix: Int): String",this.toInt().toString(radix),"/**

 * Returns a string representation of this [Short] value in the specified [radix].

 *

 * @throws IllegalArgumentException when [radix] is not a valid radix for number to string conversion.

 */",f16618:m219
58567,"@SinceKotlin(""1.7"") public fun IntProgression.first(): Int","{
    if (isEmpty()) throw NoSuchElementException(""Progression $this is empty."")
    return this.first
}","/**

 * Returns the first element.

 * 

 * @throws NoSuchElementException if the progression is empty.

 */",f17092:m37
8399,internal fun IrClass.requiresRtti(): Boolean,"when {
    this.isExternalObjCClass() -> false
    else -> true
}","/**

 * We don't need to generate RTTI in some cases, e.g. Objective-C external classes.

 */",f3253:m21
63184,"@Suppress(""NOTHING_TO_INLINE"") public actual inline fun Long.countTrailingZeroBits(): Int",wasm_i64_ctz(this).toInt(),"/**

 * Counts the number of consecutive least significant bits that are zero in the binary representation of this [Long] number.

 */",f17314:m173
57064,public fun readLine(): String?,"LineReader.readLine(System.`in`, Charset.defaultCharset())","/**

 * Reads a line of input from the standard input stream.

 *

 * @return the line read or `null` if the input stream is redirected to a file and the end of file has been reached.

 */",f16953:m329
11457,"fun <T: Any, DefaultRequired: DefaultRequiredType> MultipleOption<T, MultipleOptionType.Repeated, DefaultRequired>.delimiter(delimiterValue: String): MultipleOption<T, MultipleOptionType.RepeatedDelimited, DefaultRequired>","{
    val newOption = with((delegate.cast<ParsingValue<T, List<T>>>()).descriptor as OptionDescriptor) { MultipleOption<T, MultipleOptionType.RepeatedDelimited, DefaultRequired>(OptionDescriptor(optionFullFormPrefix, optionShortFromPrefix, type, fullName, shortName, description, defaultValue?.toList() ?: listOf(), required, multiple, delimiterValue, deprecatedWarning), owner) }
    owner.entity = newOption
    return newOption
}","/**

 * Allows the option to have several values joined with [delimiter] specified in command line string.

 * Number of values is unlimited.

 *

 * The value of the argument is an empty list in case if no value was specified in command line string.

 *

 * @param delimiterValue delimiter used to separate string value to option values list.

 */",f3549:m487
11449,"internal fun checkDescriptor(descriptor: OptionDescriptor<*, *>)","{
    if (descriptor.multiple || descriptor.delimiter != null) {
        failAssertion(""Option with single value can't be initialized with descriptor for multiple values."")
    }
}","/**

     * Check descriptor for this kind of option.

     */",f3549:m99
56481,@kotlin.internal.InlineOnly public actual inline fun String.toShort(): Short,java.lang.Short.parseShort(this),"/**

 * Parses the string as a [Short] number and returns the result.

 * @throws NumberFormatException if the string is not a valid representation of a number.

 */",f16885:m147
47292,"internal fun resolve(name: String, context: File = dir): File?","if (name.startsWith(""/"")) resolve(name.removePrefix(""/""), File(""/"")) else resolveAsRelative(""./"", name, context) ?: resolveAsRelative(""/"", name, context) ?: resolveAsRelative(""../"", name, context) ?: resolveInNodeModulesDir(name, context.resolve(NODE_MODULES)) ?: context.parentFile?.let { resolve(name, it) }","/**

     * Find node module according to https://nodejs.org/api/modules.html#modules_all_together

     */",f15294:m73
58728,public operator fun <T> Set<T>.plus(element: T): Set<T>,"{
    val result = LinkedHashSet<T>(mapCapacity(size + 1))
    result.addAll(this)
    result.add(element)
    return result
}","/**

 * Returns a set containing all elements of the original set and then the given [element] if it isn't already in this set.

 * 

 * The returned set preserves the element iteration order of the original set.

 */",f17095:m159
55631,"@SinceKotlin(""1.4"") @kotlin.internal.InlineOnly public inline operator fun <T, V> KProperty1<T, V>.getValue(thisRef: T, property: KProperty<*>): V","{
    return get(thisRef)
}","/**

 * An extension operator that allows delegating a read-only member or extension property of type [V]

 * to a property reference to a member or extension property of type [V] or its subtype.

 *

 * @receiver A property reference to a read-only or mutable property of type [V] or its subtype.

 * The reference has an unbound receiver of type [T].

 *

 * Example:

 *

 * ```

 * class Login(val username: String)

 * val Login.user by Login::username

 * // equivalent to

 * val Login.user get() = this.username

 * ```

 */",f16773:m123
13542,@kotlin.internal.IntrinsicConstEvaluation public inline operator fun plus(other: Short): Int,this.toInt() + other.toInt(),/** Adds the other value to this value. */,f3686:m1067
58735,"public fun <T> Sequence<T>.elementAtOrElse(index: Int, defaultValue: (Int) -> T): T","{
    contract { callsInPlace(defaultValue, InvocationKind.AT_MOST_ONCE) }
    if (index < 0) return defaultValue(index)
    val iterator = iterator()
    var count = 0
    while (iterator.hasNext()) {
        val element = iterator.next()
        if (index == count++) return element
    }
    return defaultValue(index)
}","/**

 * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this sequence.

 *

 * The operation is _terminal_.

 * 

 * @sample samples.collections.Collections.Elements.elementAtOrElse

 */",f17096:m77
29386,"inline fun checkParcelizeClassSymbols(symbol: FirClassSymbol<*>, session: FirSession, predicate: (FirClassSymbol<*>) -> Boolean): Boolean","{
    if (predicate(symbol)) return true
    return symbol.resolvedSuperTypeRefs.any { superTypeRef ->
        val superTypeSymbol = superTypeRef.type.toRegularClassSymbol(session)?.takeIf { it.rawStatus.modality == Modality.SEALED } ?: return@any false
        predicate(superTypeSymbol)
    }
}","/**

 * Check all related [FirClassSymbol]s to the provided [symbol] which are valid locations for a

 * `Parcelize` annotation to be present. This commonizes class symbol navigation between checker and

 * generator, even though [predicate] implementation is different.

 */",f10304:m247
58740,public inline fun <T> Sequence<T>.first(predicate: (T) -> Boolean): T,"{
    for (element in this) if (predicate(element)) return element
    throw NoSuchElementException(""Sequence contains no element matching the predicate."")
}","/**

 * Returns the first element matching the given [predicate].

 * @throws [NoSuchElementException] if no such element is found.

 *

 * The operation is _terminal_.

 */",f17096:m239
43621,"fun BuildResult.assertTasksInBuildOutput(expectedPresentTasks: List<String> = emptyList(), expectedAbsentTasks: List<String> = emptyList())","{
    val registeredTasks = getAllTasksFromTheOutput()
    expectedPresentTasks.forEach { assert(registeredTasks.contains(it)) {
        printBuildOutput()
        ""Expected $it task is not registered in $registeredTasks""
    } }
    expectedAbsentTasks.forEach { assert(!registeredTasks.contains(it)) {
        printBuildOutput()
        ""$it task should not be registered in $registeredTasks""
    } }
}","/**

 * Inspects the output of the 'tasks' command and asserts that the specified

 * tasks are either present or absent in the output.

 *

 * @param expectedPresentTasks The names of the tasks that should be present in the output,

 *                              it could contain task paths as well, but without the first semicolon.

 * @param expectedAbsentTasks The names of the tasks that should be absent from the output,

 *                              it could contain task paths as well, but without the first semicolon.

 * @throws AssertionError if any of the expected present tasks are not present in the output,

 * or if any of the expected absent tasks are present in the output.

 */",f13463:m319
44147,fun main(),"{
    Runtime.getRuntime().traceInstructions(true)
    val array: Array<String> = listOf("""").toArray { arrayOf(""other"") }
}","/**

 * A main function that could only compile on JDK 11-13, due to use of both new api and removed api

 */",f13615:m13
65006,internal fun setAdapter(adapter: FrameworkAdapter),"{
    currentAdapter = adapter
}","/**

 * Overrides current framework adapter with a provided instance of [FrameworkAdapter]. Use in order to support custom test frameworks.

 *

 * If this function is not called, the test framework will be detected automatically.

 *

 */",f17551:m21
58664,public infix fun LongProgression.step(step: Long): LongProgression,"{
    checkStepIsPositive(step > 0, step)
    return LongProgression.fromClosedRange(first, last, if (this.step > 0) step else -step)
}","/**

 * Returns a progression that goes over the same range with the given step.

 * 

 * @sample samples.ranges.Ranges.stepLong

 */",f17092:m1933
58163,@kotlin.internal.InlineOnly public inline operator fun rem(other: UInt): UInt,"uintRemainder(this, other)","/**

     * Calculates the remainder of truncating division of this value (dividend) by the other value (divisor).

     *

     * The result is always less than the divisor.

     */",f17063:m279
63507,public actual fun CharArray.copyOf(newSize: Int): CharArray,"{
    return this.copyOfUninitializedElements(newSize)
}","/**

 * Returns new array which is a copy of the original array, resized to the given [newSize].

 * The copy is either truncated or padded at the end with null char (`\u0000`) values if necessary.

 * 

 * - If [newSize] is less than the size of the original array, the copy array is truncated to the [newSize].

 * - If [newSize] is greater than the size of the original array, the extra elements in the copy array are filled with null char (`\u0000`) values.

 * 

 * @sample samples.collections.Arrays.CopyOfOperations.resizedPrimitiveCopyOf

 */",f17396:m3009
8461,"internal fun createLTOFinalPipelineConfig(context: PhaseContext, targetTriple: String, closedWorld: Boolean, timePasses: Boolean = false): LlvmPipelineConfig","{
    val config = context.config
    val target = config.target
    val configurables: Configurables = config.platform.configurables
    val cpuModel = getCpuModel(context)
    val cpuFeatures = getCpuFeatures(context)
    val optimizationLevel: LlvmOptimizationLevel = when {
        context.shouldOptimize() -> LlvmOptimizationLevel.AGGRESSIVE
        context.shouldContainDebugInfo() -> LlvmOptimizationLevel.NONE
        else -> LlvmOptimizationLevel.DEFAULT
    }
    val sizeLevel: LlvmSizeLevel = when {
        context.shouldOptimize() -> LlvmSizeLevel.NONE
        context.shouldContainDebugInfo() -> LlvmSizeLevel.NONE
        else -> LlvmSizeLevel.NONE
    }
    val codegenOptimizationLevel: LLVMCodeGenOptLevel = when {
        context.shouldOptimize() -> LLVMCodeGenOptLevel.LLVMCodeGenLevelAggressive
        context.shouldContainDebugInfo() -> LLVMCodeGenOptLevel.LLVMCodeGenLevelNone
        else -> LLVMCodeGenOptLevel.LLVMCodeGenLevelDefault
    }
    val relocMode: LLVMRelocMode = configurables.currentRelocationMode(context).translateToLlvmRelocMode()
    val codeModel: LLVMCodeModel = LLVMCodeModel.LLVMCodeModelDefault
    val globalDce = true
    val internalize = closedWorld
    val makeDeclarationsHidden = config.produce == CompilerOutputKind.STATIC_CACHE
    val objcPasses = configurables is AppleConfigurables
    val inlineThreshold: Int? = when {
        context.shouldOptimize() -> tryGetInlineThreshold(context)
        context.shouldContainDebugInfo() -> null
        else -> null
    }
    return LlvmPipelineConfig(targetTriple, cpuModel, cpuFeatures, optimizationLevel, sizeLevel, codegenOptimizationLevel, relocMode, codeModel, globalDce, internalize, makeDeclarationsHidden, objcPasses, inlineThreshold, timePasses = timePasses)
}","/**

 * In the end, Kotlin/Native generates a single LLVM module during compilation.

 * It won't be linked with any other LLVM module, so we can hide and DCE unused symbols.

 *

 * The set of optimizations relies on current compiler configuration.

 * In case of debug we do almost nothing (that's why we need [createLTOPipelineConfigForRuntime]),

 * but for release binaries we rely on ""closed"" world and enable a lot of optimizations.

 */",f3263:m185
14843,"@Deprecated(""Use Kotlin compiler 1.4 to avoid deprecation warning."") @SinceKotlin(""1.1"") @DeprecatedSinceKotlin(hiddenSince = ""1.4"") public infix fun BooleanArray.contentEquals(other: BooleanArray): Boolean","{
    return this.contentEquals(other)
}","/**

 * Checks if the two specified arrays are *structurally* equal to one another.

 * 

 * Two arrays are considered structurally equal if they have the same size, and elements at corresponding indices are equal.

 * 

 * @param other the array to compare with this array.

 * @return `true` if the two arrays are structurally equal, `false` otherwise.

 * 

 * @sample samples.collections.Arrays.ContentOperations.booleanArrayContentEquals

 */",f3831:m907
57168,"@SinceKotlin(""1.1"") @kotlin.internal.InlineOnly public actual inline fun minOf(a: Byte, b: Byte, c: Byte): Byte","{
    return Math.min(a.toInt(), Math.min(b.toInt(), c.toInt())).toByte()
}","/**

 * Returns the smaller of three values.

 */",f16966:m613
56469,"@PublishedApi internal fun getProgressionLastElement(start: Int, end: Int, step: Int): Int","when {
    step > 0 -> if (start >= end) end else end - differenceModulo(end, start, step)
    step < 0 -> if (start <= end) end else end + differenceModulo(start, end, -step)
    else -> throw kotlin.IllegalArgumentException(""Step is zero."")
}","/**

 * Calculates the final element of a bounded arithmetic progression, i.e. the last element of the progression which is in the range

 * from [start] to [end] in case of a positive [step], or from [end] to [start] in case of a negative

 * [step].

 *

 * No validation on passed parameters is performed. The given parameters should satisfy the condition:

 *

 * - either `step > 0` and `start <= end`,

 * - or `step < 0` and `start >= end`.

 *

 * @param start first element of the progression

 * @param end ending bound for the progression

 * @param step increment, or difference of successive elements in the progression

 * @return the final element of the progression

 * @suppress

 */",f16869:m55
14978,public actual operator fun BooleanArray.plus(elements: BooleanArray): BooleanArray,"{
    val thisSize = size
    val arraySize = elements.size
    val result = copyOfUninitializedElements(thisSize + arraySize)
    elements.copyInto(result, thisSize)
    return result
}","/**

 * Returns an array containing all elements of the original array and then all elements of the given [elements] array.

 */",f3831:m4495
58717,"public fun Double.coerceIn(minimumValue: Double, maximumValue: Double): Double","{
    if (minimumValue > maximumValue) throw IllegalArgumentException(""Cannot coerce value to an empty range: maximum $maximumValue is less than minimum $minimumValue."")
    if (this < minimumValue) return minimumValue
    if (this > maximumValue) return maximumValue
    return this
}","/**

 * Ensures that this value lies in the specified range [minimumValue]..[maximumValue].

 * 

 * @return this value if it's in the range, or [minimumValue] if this value is less than [minimumValue], or [maximumValue] if this value is greater than [maximumValue].

 * 

 * @sample samples.comparisons.ComparableOps.coerceIn

 */",f17092:m2895
63515,"public actual fun DoubleArray.copyOfRange(fromIndex: Int, toIndex: Int): DoubleArray","{
    checkCopyOfRangeArguments(fromIndex, toIndex, size)
    return copyOfUninitializedElements(fromIndex, toIndex)
}","/**

 * Returns a new array which is a copy of the specified range of the original array.

 * 

 * @param fromIndex the start of the range (inclusive) to copy.

 * @param toIndex the end of the range (exclusive) to copy.

 * 

 * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.

 * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].

 */",f17396:m3229
63511,"public actual fun ShortArray.copyOfRange(fromIndex: Int, toIndex: Int): ShortArray","{
    checkCopyOfRangeArguments(fromIndex, toIndex, size)
    return copyOfUninitializedElements(fromIndex, toIndex)
}","/**

 * Returns a new array which is a copy of the specified range of the original array.

 * 

 * @param fromIndex the start of the range (inclusive) to copy.

 * @param toIndex the end of the range (exclusive) to copy.

 * 

 * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.

 * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].

 */",f17396:m3117
9459,"fun createGlobal(type: LLVMTypeRef, name: String, isExported: Boolean = false): Global","{
    return Global.create(this, type, name, isExported)
}","/**

     * Creates [Global] with given type and name.

     *

     * It is external until explicitly initialized with [Global.setInitializer].

     */",f3357:m207
11895,"@Suppress(""FINAL_UPPER_BOUND"") @ExperimentalForeignApi public fun <T: UInt> NativePlacement.alloc(value: T): UIntVarOf<T>",alloc<UIntVarOf<T>> { this.value = value },"/**

 * Allocates variable with given value type and initializes it with given value.

 */",f3606:m133
58088,@kotlin.internal.InlineOnly public inline operator fun times(other: UInt): UInt,this.toUInt().times(other),/** Multiplies this value by the other value. */,f17059:m211
16616,"fun KtDeclaration.resolveToFirSymbol(firResolveSession: LLFirResolveSession, phase: FirResolvePhase = FirResolvePhase.RAW_FIR): FirBasedSymbol<*>","{
    return firResolveSession.resolveToFirSymbol(this, phase)
}","/**

 * Creates [FirBasedSymbol] by [KtDeclaration] .

 * returned [FirDeclaration]  will be resolved at least to [phase]

 *

 */",f4145:m53
63626,"@SinceKotlin(""1.1"") public actual fun <T: Comparable<T>> maxOf(a: T, b: T, c: T): T","{
    return maxOf(a, maxOf(b, c))
}","/**

 * Returns the greater of three values.

 * 

 * If there are multiple equal maximal values, returns the first of them.

 */",f17406:m163
64069,public operator fun rangeTo(other: Int): IntRange,"IntRange(this.toInt(), other)",/** Creates a range from this value to the specified [other] value. */,f17455:m619
55925,"@kotlin.jvm.JvmName(""withDefaultMutable"") public fun <K, V> MutableMap<K, V>.withDefault(defaultValue: (key: K) -> V): MutableMap<K, V>","when (this) {
    is MutableMapWithDefault -> this.map.withDefault(defaultValue)
    else -> MutableMapWithDefaultImpl(this, defaultValue)
}","/**

 * Returns a wrapper of this mutable map, having the implicit default value provided with the specified function [defaultValue].

 *

 * This implicit default value is used when the original map doesn't contain a value for the key specified

 * and a value is obtained with [Map.getValue] function, for example when properties are delegated to the map.

 *

 * When this map already has an implicit default value provided with a former call to [withDefault], it is being replaced by this call.

 */",f16818:m81
63195,"@SinceKotlin(""1.2"") public actual fun Double.toBits(): Long",if (isNaN()) Double.NaN.toRawBits() else toRawBits(),"/**

 * Returns a bit representation of the specified floating-point value as [Long]

 * according to the IEEE 754 floating-point ""double format"" bit layout.

 */",f17314:m341
53130,public actual fun String.toDouble(): Double,(+(this.asDynamic())).unsafeCast<Double>().also { if (it.isNaN() && !this.isNaN() || it == 0.0 && this.isBlank()) numberFormatError(this) },"/**

 * Parses the string as a [Double] number and returns the result.

 * @throws NumberFormatException if the string is not a valid representation of a number.

 */",f16618:m139
63560,public actual operator fun DoubleArray.plus(elements: Collection<Double>): DoubleArray,"{
    var index = size
    val result = copyOfUninitializedElements(index + elements.size)
    for (element in elements) result[index++] = element
    return result
}","/**

 * Returns an array containing all elements of the original array and then all elements of the given [elements] collection.

 */",f17396:m4387
54716,public actual fun CharArray.copyOf(newSize: Int): CharArray,"{
    require(newSize >= 0) { ""Invalid new array size: $newSize."" }
    return withType(""CharArray"", fillFrom(this, CharArray(newSize)))
}","/**

 * Returns new array which is a copy of the original array, resized to the given [newSize].

 * The copy is either truncated or padded at the end with null char (`\u0000`) values if necessary.

 * 

 * - If [newSize] is less than the size of the original array, the copy array is truncated to the [newSize].

 * - If [newSize] is greater than the size of the original array, the extra elements in the copy array are filled with null char (`\u0000`) values.

 * 

 * @sample samples.collections.Arrays.CopyOfOperations.resizedPrimitiveCopyOf

 */",f16713:m2013
54633,internal fun Char.isDigitImpl(): Boolean,"{
    return digitToIntImpl() >= 0
}","/**

 * Returns `true` if this character is a digit.

 */",f16708:m107
14990,"@SinceKotlin(""1.4"") @Suppress(""ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS"") public actual fun ByteArray.sort(fromIndex: Int = 0, toIndex: Int = size): Unit","{
    AbstractList.checkRangeIndexes(fromIndex, toIndex, size)
    sortArray(this, fromIndex, toIndex)
}","/**

 * Sorts a range in the array in-place.

 * 

 * @param fromIndex the start of the range (inclusive) to sort, 0 by default.

 * @param toIndex the end of the range (exclusive) to sort, size of this array by default.

 * 

 * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.

 * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].

 * 

 * @sample samples.collections.Arrays.Sorting.sortRangeOfArray

 */",f3831:m4743
15386,@Test fun cosD(),"{
    assertEquals(""Incorrect answer"", 1.0, cos(0.0), 0.0)
    assertEquals(""Incorrect answer"", 0.5403023058681398, cos(1.0), 0.0)
}","/**

     * Tests kotlin.math.cos(Double)

     */",f3868:m445
63501,public actual fun ShortArray.copyOf(newSize: Int): ShortArray,"{
    return this.copyOfUninitializedElements(newSize)
}","/**

 * Returns new array which is a copy of the original array, resized to the given [newSize].

 * The copy is either truncated or padded at the end with zero values if necessary.

 * 

 * - If [newSize] is less than the size of the original array, the copy array is truncated to the [newSize].

 * - If [newSize] is greater than the size of the original array, the extra elements in the copy array are filled with zero values.

 * 

 * @sample samples.collections.Arrays.CopyOfOperations.resizedPrimitiveCopyOf

 */",f17396:m2853
54787,"@Deprecated(""Use other sorting functions from the Standard Library"") @DeprecatedSinceKotlin(warningSince = ""1.6"") @kotlin.internal.InlineOnly public inline fun CharArray.sort(noinline comparison: (a: Char, b: Char) -> Int): Unit","{
    nativeSort(comparison)
}","/**

 * Sorts the array in-place according to the order specified by the given [comparison] function.

 */",f16713:m3677
56245,"@SinceKotlin(""1.5"") @kotlin.internal.InlineOnly @kotlin.internal.IntrinsicConstEvaluation public inline fun Long.floorDiv(other: Short): Long",this.floorDiv(other.toLong()),"/** Divides this value by the other value, flooring the result to an integer that is closer to negative infinity. */",f16842:m507
15045,"@SinceKotlin(""1.1"") @kotlin.internal.InlineOnly public actual inline fun minOf(a: Short, b: Short, c: Short): Short","{
    return minOf(a.toInt(), minOf(b.toInt(), c.toInt())).toShort()
}","/**

 * Returns the smaller of three values.

 */",f3836:m641
54772,"@Deprecated(""Use sortWith instead"", ReplaceWith(""this.sortWith(Comparator(comparison))"")) @DeprecatedSinceKotlin(warningSince = ""1.6"") public fun <T> Array<out T>.sort(comparison: (a: T, b: T) -> Int): Unit","{
    if (size > 1) sortArrayWith(this, comparison)
}","/**

 * Sorts the array in-place according to the order specified by the given [comparison] function.

 * 

 * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.

 */",f16713:m3233
11093,"fun addTask(id: Int, priority: Int, queue: Packet?, task: Task)","{
    this.currentTcb = TaskControlBlock(this.list, id, priority, queue, task)
    this.list = this.currentTcb
    this.blocks[id] = this.currentTcb
}","/**

     * Add the specified task to this scheduler.

     * @param {int} id the identity of the task

     * @param {int} priority the task's priority

     * @param {Packet} queue the queue of work to be processed by the task

     * @param {Task} task the task to add

     */",f3500:m311
14829,public actual fun CharArray.asList(): List<Char>,"{
    return object : AbstractList<Char>(), RandomAccess {
        override val size: Int get() = this@asList.size
    
        override fun isEmpty(): Boolean = this@asList.isEmpty()
    
        override fun contains(element: Char): Boolean = this@asList.contains(element)
    
        override fun get(index: Int): Char = this@asList[index]
    
        override fun indexOf(element: Char): Int = this@asList.indexOf(element)
    
        override fun lastIndexOf(element: Char): Int = this@asList.lastIndexOf(element)
    }
}","/**

 * Returns a [List] that wraps the original array.

 */",f3831:m435
52544,"@SinceKotlin(""1.2"") public actual fun <T> MutableList<T>.fill(value: T): Unit","{
    for (index in 0 .. lastIndex) {
        this[index] = value
    }
}","/**

 * Fills the list with the provided [value].

 *

 * Each element in the list gets replaced with the [value].

 */",f16542:m141
56552,"@kotlin.internal.InlineOnly public inline fun fixedRateTimer(name: String? = null, daemon: Boolean = false, initialDelay: Long = 0.toLong(), period: Long, crossinline action: TimerTask.() -> Unit): Timer","{
    val timer = timer(name, daemon)
    timer.scheduleAtFixedRate(initialDelay, period, action)
    return timer
}","/**

 * Creates a timer that executes the specified [action] periodically, starting after the specified [initialDelay]

 * (expressed in milliseconds) and with the interval of [period] milliseconds between the start of the previous task

 * and the start of the next one.

 *

 * @param name the name to use for the thread which is running the timer.

 * @param daemon if `true`, the thread is started as a daemon thread (the VM will exit when only daemon threads are running).

 */",f16894:m225
13553,@kotlin.internal.IntrinsicConstEvaluation public inline operator fun times(other: Byte): Int,this.toInt() * other.toInt(),/** Multiplies this value by the other value. */,f3686:m1177
53403,"@Suppress(""UNUSED_PARAMETER"", ""unused"") @PublishedApi internal fun <R, T> (suspend R.() -> T).invokeSuspendSuperTypeWithReceiver(receiver: R, completion: Continuation<T>): Any?","{
    throw NotImplementedError(""It is intrinsic method"")
}","/**

 * Invoke 'invoke' method of suspend super type with receiver

 * Because callable references translated with local classes,

 * necessary to call it in special way, not in synamic way

 */",f16673:m53
58783,"@SinceKotlin(""1.3"") public inline fun <K, V, M: MutableMap<in K, in V>> Sequence<K>.associateWithTo(destination: M, valueSelector: (K) -> V): M","{
    for (element in this) {
        destination.put(element, valueSelector(element))
    }
    return destination
}","/**

 * Populates and returns the [destination] mutable map with key-value pairs for each element of the given sequence,

 * where key is the element itself and value is provided by the [valueSelector] function applied to that key.

 * 

 * If any two elements are equal, the last one overwrites the former value in the map.

 *

 * The operation is _terminal_.

 * 

 * @sample samples.collections.Collections.Transformations.associateWithTo

 */",f17096:m1533
14962,public actual operator fun <T> Array<T>.plus(elements: Collection<T>): Array<T>,"{
    var index = size
    val result = copyOfUninitializedElements(index + elements.size)
    for (element in elements) result[index++] = element
    return result
}","/**

 * Returns an array containing all elements of the original array and then all elements of the given [elements] collection.

 */",f3831:m4161
56582,public fun <T> sortedSetOf(vararg elements: T): java.util.TreeSet<T>,elements.toCollection(java.util.TreeSet<T>()),"/**

 * Returns a new [java.util.SortedSet] with the given elements.

 */",f16911:m109
15048,"@SinceKotlin(""1.1"") @kotlin.internal.InlineOnly public actual inline fun minOf(a: Float, b: Float, c: Float): Float","{
    return minOf(a, minOf(b, c))
}","/**

 * Returns the smaller of three values.

 * 

 * If any value is `NaN`, returns `NaN`.

 */",f3836:m695
63273,public actual fun Char.isLowSurrogate(): Boolean,this in Char.MIN_LOW_SURROGATE .. Char.MAX_LOW_SURROGATE,"/**

 * Returns `true` if this character is a Unicode low-surrogate code unit (also known as trailing-surrogate code unit).

 */",f17357:m49
58565,"@kotlin.jvm.JvmName(""sumOfUByte"") @SinceKotlin(""1.5"") @WasExperimental(ExperimentalUnsignedTypes::class) public fun Sequence<UByte>.sum(): UInt","{
    var sum: UInt = 0u
    for (element in this) {
        sum += element
    }
    return sum
}","/**

 * Returns the sum of all elements in the sequence.

 *

 * The operation is _terminal_.

 */",f17091:m101
53148,"@Suppress(""ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS"") public actual fun String.startsWith(prefix: String, startIndex: Int, ignoreCase: Boolean = false): Boolean","{
    if (!ignoreCase) return nativeStartsWith(prefix, startIndex) else return regionMatches(startIndex, prefix, 0, prefix.length, ignoreCase)
}","/**

 * Returns `true` if a substring of this string starting at the specified offset [startIndex] starts with the specified prefix.

 */",f16624:m53
58545,"@SinceKotlin(""1.5"") @WasExperimental(ExperimentalUnsignedTypes::class) public infix fun UByte.until(to: UByte): UIntRange","{
    if (to <= UByte.MIN_VALUE) return UIntRange.EMPTY
    return this.toUInt() .. (to - 1u).toUInt()
}","/**

 * Returns a range from this value up to but excluding the specified [to] value.

 * 

 * If the [to] value is less than or equal to `this` value, then the returned range is empty.

 */",f17090:m741
16329,"fun process(file: FirFile, holder: SessionHolder, designation: FirDesignation?, shouldCollectBodyContext: Boolean, filter: (PsiElement) -> FilterResponse): ContextProvider","{
    val interceptor = designation?.let(::DesignationInterceptor)
    val visitor = ContextCollectorVisitor(holder, shouldCollectBodyContext, filter, interceptor)
    visitor.collect(file)
    return ContextProvider { element, kind -> visitor[element, kind] }
}","/**

     * Processes the [FirFile], collecting contexts for elements matching the [filter].

     *

     * @param file The file to process.

     * @param holder The [SessionHolder] for the session that owns a [file].

     * @param designation The declaration to process. If `null`, all declarations in the [file] are processed.

     * @param shouldCollectBodyContext If `true`, [ContextKind.BODY] is collected where available.

     * @param filter The filter predicate. Context is collected only for [PsiElement]s for which the [filter] returns `true`.

     */",f4108:m299
57165,"@SinceKotlin(""1.1"") @kotlin.internal.InlineOnly public actual inline fun minOf(a: Float, b: Float): Float","{
    return Math.min(a, b)
}","/**

 * Returns the smaller of two values.

 * 

 * If either value is `NaN`, returns `NaN`.

 */",f16966:m549
51457,fun write(writeStrategy: KlibModuleFragmentWriteStrategy = KlibModuleFragmentWriteStrategy.DEFAULT): SerializedKlibMetadata,"{
    val reverseIndex = ReverseSourceFileIndexWriteExtension()
    val groupedFragments = fragments.groupBy(KmModuleFragment::fqNameOrFail).mapValues { writeStrategy.processPackageParts(it.value) }
    val header = KlibHeader(name, reverseIndex.fileIndex, groupedFragments.map { it.key }, groupedFragments.filter { it.value.all(KmModuleFragment::isEmpty) }.map { it.key }, annotations)
    val groupedProtos = groupedFragments.mapValues { (_, fragments) -> fragments.map { mf ->
        val c = WriteContext(ApproximatingStringTable(), listOf(reverseIndex))
        KlibModuleFragmentWriter(c.strings as ApproximatingStringTable, c.contextExtensions).also { it.writeModuleFragment(mf) }.write()
    } }
    val c = WriteContext(ApproximatingStringTable(), listOf(reverseIndex))
    return SerializedKlibMetadata(header.writeHeader(c).build().toByteArray(), groupedProtos.map { it.value.map(ProtoBuf.PackageFragment::toByteArray) }, header.packageFragmentName)
}","/**

     * Writes metadata back to serialized representation.

     * @param writeStrategy specifies the way module fragments are modified (e.g. split) before serialization.

     */",f16326:m201
52283,"fun reloadScriptConfiguration(scriptFile: PsiFile, updateEditorWithoutNotification: Boolean = false)","{
    val extensions = scriptFile.project.extensionArea.getExtensionPoint(IdeScriptConfigurationControlFacade.EP_NAME).extensions
    for (extension in extensions) {
        extension.reloadScriptConfiguration(scriptFile, updateEditorWithoutNotification)
    }
}","/**

 * Force reloading the script definition associated with the passed [scriptFile] in the Kotlin plugin

 *

 * [updateEditorWithoutNotification] controls whether the update of the indexes and highlighting of the script files

 * based on the reloaded definition should be reloaded automatically or using notification and explicit reload action

 */",f16466:m21
17700,internal fun CallableDescriptor.unwrapFakeOverrideIfNeeded(): CallableDescriptor,"{
    val useSiteUnwrapped = unwrapUseSiteSubstitutionOverride()
    if (useSiteUnwrapped !is CallableMemberDescriptor) return useSiteUnwrapped
    if (useSiteUnwrapped.kind.isReal) return useSiteUnwrapped
    val overriddenDescriptor = useSiteUnwrapped.overriddenDescriptors.singleOrNull()?.unwrapUseSiteSubstitutionOverride() ?: return useSiteUnwrapped
    if (hasTypeReferenceAffectingSignature(useSiteUnwrapped, overriddenDescriptor)) {
        return useSiteUnwrapped
    }
    return overriddenDescriptor.unwrapFakeOverrideIfNeeded()
}","/**

 * This logic should be equivalent to

 * [org.jetbrains.kotlin.analysis.api.fir.KtSymbolByFirBuilder.unwrapSubstitutionOverrideIfNeeded]. But this method unwrap all fake

 * overrides that do not change the signature.

 */",f5311:m395
58920,@kotlin.internal.InlineOnly public inline fun CharSequence.findLast(predicate: (Char) -> Boolean): Char?,"{
    return lastOrNull(predicate)
}","/**

 * Returns the last character matching the given [predicate], or `null` if no such character was found.

 * 

 * @sample samples.collections.Collections.Elements.find

 */",f17097:m117
58712,"public fun Byte.coerceIn(minimumValue: Byte, maximumValue: Byte): Byte","{
    if (minimumValue > maximumValue) throw IllegalArgumentException(""Cannot coerce value to an empty range: maximum $maximumValue is less than minimum $minimumValue."")
    if (this < minimumValue) return minimumValue
    if (this > maximumValue) return maximumValue
    return this
}","/**

 * Ensures that this value lies in the specified range [minimumValue]..[maximumValue].

 * 

 * @return this value if it's in the range, or [minimumValue] if this value is less than [minimumValue], or [maximumValue] if this value is greater than [maximumValue].

 * 

 * @sample samples.comparisons.ComparableOps.coerceIn

 */",f17092:m2755
15011,internal fun Char.isLetterImpl(): Boolean,"{
    return getLetterType() != 0
}","/**

 * Returns `true` if this character is a letter.

 */",f3835:m119
57367,@kotlin.internal.InlineOnly public actual inline fun <T> Array<T>.plusElement(element: T): Array<T>,"{
    return plus(element)
}","/**

 * Returns an array containing all elements of the original array and then the given [element].

 */",f16970:m3985
64068,public operator fun rangeTo(other: Short): IntRange,"IntRange(this.toInt(), other.toInt())",/** Creates a range from this value to the specified [other] value. */,f17455:m611
58095,@kotlin.internal.InlineOnly public inline operator fun rem(other: UShort): UInt,this.toUInt().rem(other.toUInt()),"/**

     * Calculates the remainder of truncating division of this value (dividend) by the other value (divisor).

     *

     * The result is always less than the divisor.

     */",f17059:m265
15052,"@SinceKotlin(""1.4"") public actual fun minOf(a: Short, vararg other: Short): Short","{
    var min = a
    for (e in other) min = minOf(min, e)
    return min
}","/**

 * Returns the smaller of the given values.

 */",f3836:m783
10037,"private fun <Data, Context: PhaseContext> createLlvmVerifierAction(): Action<Data, Context>","fun(actionState: ActionState, data: Data, context: Context) {
    if (!context.config.configuration.getBoolean(KonanConfigKeys.VERIFY_BITCODE)) {
        return
    }
    val llvmModule = findLlvmModule(data, context)
    if (llvmModule == null) {
        context.messageCollector.report(CompilerMessageSeverity.WARNING, ""Cannot verify LLVM IR ${actionState.beforeOrAfter.name.lowercase()} ${actionState.phase.name}"")
        return
    }
    verifyModule(llvmModule)
}","/**

 *

 */",f3408:m97
13481,@kotlin.internal.IntrinsicConstEvaluation public inline operator fun compareTo(other: Double): Int,this.toDouble().compareTo(other),"/**

     * Compares this value with the specified value for order.

     * Returns zero if this value is equal to the specified other value, a negative number if it's less than other,

     * or a positive number if it's greater than other.

     */",f3686:m173
53409,"@SinceKotlin(""1.3"") public actual fun <R, T> (suspend R.() -> T).createCoroutineUnintercepted(receiver: R, completion: Continuation<T>): Continuation<Unit>","createCoroutineFromSuspendFunction(completion) {
    val a = this.asDynamic()
    if (jsTypeOf(a) == ""function"") a(receiver, completion) else this.invokeSuspendSuperTypeWithReceiver(receiver, completion)
}","/**

 * Creates unintercepted coroutine with receiver type [R] and result type [T].

 * This function creates a new, fresh instance of suspendable computation every time it is invoked.

 *

 * To start executing the created coroutine, invoke `resume(Unit)` on the returned [Continuation] instance.

 * The [completion] continuation is invoked when coroutine completes with result or exception.

 *

 * This function returns unintercepted continuation.

 * Invocation of `resume(Unit)` starts coroutine directly in the invoker's thread without going through the

 * [ContinuationInterceptor] that might be present in the completion's [CoroutineContext].

 * It is the invoker's responsibility to ensure that a proper invocation context is established.

 * [Continuation.intercepted] can be used to acquire the intercepted continuation.

 *

 * Repeated invocation of any resume function on the resulting continuation corrupts the

 * state machine of the coroutine and may result in arbitrary behaviour or exception.

 */",f16673:m275
15393,@Test fun lnD(),"{
    var d = 10.0
    while (d >= -10) {
        val answer = ln(exp(d))
        assertTrue(""Answer does not equal expected answer for d = "" + d + "" answer = "" + answer, abs(answer - d) <= abs(d * 0.00000001))
        d -= 0.5
    }
}","/**

     * Tests kotlin.math.ln(Double)

     */",f3868:m731
10035,"internal fun <Data, Context: PhaseContext> getDefaultIrActions(): Set<Action<Data, Context>>","setOfNotNull(getIrDumper(), getIrValidator<Context, Data>())","/**

 * IR dump and verify actions.

 */",f3407:m217
56235,"@SinceKotlin(""1.5"") @kotlin.internal.InlineOnly @kotlin.internal.IntrinsicConstEvaluation public inline fun Int.floorDiv(other: Byte): Int",this.floorDiv(other.toInt()),"/** Divides this value by the other value, flooring the result to an integer that is closer to negative infinity. */",f16842:m317
58003,"@SinceKotlin(""1.6"") @WasExperimental(ExperimentalStdlibApi::class, ExperimentalUnsignedTypes::class) @kotlin.internal.InlineOnly public inline fun ULong.rotateLeft(bitCount: Int): ULong",toLong().rotateLeft(bitCount).toULong(),"/**

 * Rotates the binary representation of this [ULong] number left by the specified [bitCount] number of bits.

 * The most significant bits pushed out from the left side reenter the number as the least significant bits on the right side.

 *

 * Rotating the number left by a negative bit count is the same as rotating it right by the negated bit count:

 * `number.rotateLeft(-n) == number.rotateRight(n)`

 *

 * Rotating by a multiple of [ULong.SIZE_BITS] (64) returns the same number, or more generally

 * `number.rotateLeft(n) == number.rotateLeft(n % 64)`

 */",f17056:m249
45763,"@Deprecated(""Scheduled for removal in Kotlin 2.1. Check KT-58759"", replaceWith = ReplaceWith(""project.dependencies.enforcedPlatform(notation, configureAction)"")) fun enforcedPlatform(notation: Any, configureAction: Action<in Dependency>): Dependency","project.dependencies.enforcedPlatform(notation, configureAction)","/**

     * @suppress

     */",f14927:m681
33529,"@SinceKotlin(""1.7"") @Suppress(""INVISIBLE_REFERENCE"", ""INVISIBLE_MEMBER"") @WasExperimental(ExperimentalStdlibApi::class) fun <T: Annotation> KAnnotatedElement.findAnnotations(klass: KClass<T>): List<T>","{
    val filtered = annotations.filterIsInstance(klass.java)
    if (filtered.isNotEmpty()) return filtered
    val containerClass = Java8RepeatableContainerLoader.loadRepeatableContainer(klass.java)
    if (containerClass != null) {
        val container = annotations.firstOrNull { it.annotationClass.java == containerClass }
        if (container != null) {
            val valueMethod = container::class.java.getMethod(""value"")
            @Suppress(""UNCHECKED_CAST"") return (valueMethod(container) as Array<T>).asList()
        }
    }
    return emptyList()
}","/**

 * Returns all annotations of the given type on this element, including individually applied annotations

 * as well as repeated annotations.

 *

 * In case the annotation is repeated, instances are extracted from the container annotation class similarly to how it happens

 * in Java reflection ([java.lang.reflect.AnnotatedElement.getAnnotationsByType]). This is supported both for Kotlin-repeatable

 * ([kotlin.annotation.Repeatable]) and Java-repeatable ([java.lang.annotation.Repeatable]) annotation classes.

 */",f11199:m89
14027,"@SinceKotlin(""1.4"") @kotlin.internal.InlineOnly public actual inline fun StringBuilder.appendLine(value: Long): StringBuilder",append(value).appendLine(),"/** Appends [value] to this [StringBuilder], followed by a line feed character (`\n`). */",f3715:m49
14902,public actual fun IntArray.copyOf(): IntArray,"{
    return this.copyOfUninitializedElements(size)
}","/**

 * Returns new array which is a copy of the original array.

 * 

 * @sample samples.collections.Arrays.CopyOfOperations.copyOf

 */",f3831:m2667
14148,"@Suppress(""UNCHECKED_CAST"") internal inline fun createContinuationArgumentFromCallback(completion: Continuation<Unit>, crossinline callback: (Result<Any?>) -> Unit): Continuation<Any?>","object : ContinuationImpl(completion as Continuation<Any?>) {
    private var invoked = false

    override fun invokeSuspend(result: Result<Any?>): Any? {
        if (invoked) error(""This coroutine had already completed"")
        invoked = true
        callback(result)
        return Unit
    }
}","/**

 * This function creates continuation suitable for passing as implicit argument to suspend functions.

 * The continuation calls [callback] and then delegates to [completion].

 *

 * The result is [ContinuationImpl] because that is an expectation of all coroutines machinery.

 *

 * It can be thought as a state machine of

 * ```

 * suspend fun foo() {

 *     val result = runCatching { <suspended here> }

 *     callback(result)

 * }

 * ```

 */",f3737:m529
56134,@kotlin.internal.InlineOnly public inline fun <T> Comparator<T>.thenByDescending(crossinline selector: (T) -> Comparable<*>?): Comparator<T>,"Comparator { a, b ->
    val previousCompare = this@thenByDescending.compare(a, b)
    if (previousCompare != 0) previousCompare else compareValuesBy(b, a, selector)
}","/**

 * Creates a descending comparator using the primary comparator and

 * the function to transform value to a [Comparable] instance for comparison.

 *

 * @sample samples.comparisons.Comparisons.thenByDescending

 */",f16832:m321
56548,"@kotlin.internal.InlineOnly public inline fun Timer.scheduleAtFixedRate(time: Date, period: Long, crossinline action: TimerTask.() -> Unit): TimerTask","{
    val task = timerTask(action)
    scheduleAtFixedRate(task, time, period)
    return task
}","/**

 * Schedules an [action] to be executed periodically, starting at the specified [time] and with the

 * interval of [period] milliseconds between the start of the previous task and the start of the next one.

 */",f16894:m135
58535,"@SinceKotlin(""1.5"") @WasExperimental(ExperimentalUnsignedTypes::class) public operator fun UIntRange.contains(value: UShort): Boolean","{
    return contains(value.toUInt())
}","/**

 * Checks if the specified [value] belongs to this range.

 */",f17090:m525
52038,fun <R> ResultWithDiagnostics<R>.valueOrNull(): R?,"when (this) {
    is ResultWithDiagnostics.Success<R> -> value
    else -> null
}","/**

 * Extracts the result value from the receiver wrapper or null if receiver represents a Failure

 */",f16426:m569
54793,public actual fun LongArray.toTypedArray(): Array<Long>,"{
    return js(""[]"").slice.call(this)
}","/**

 * Returns a *typed* object array containing all of the elements of this primitive array.

 */",f16713:m3793
58854,"@SinceKotlin(""1.4"") public fun Sequence<Double>.minOrNull(): Double?","{
    val iterator = iterator()
    if (!iterator.hasNext()) return null
    var min = iterator.next()
    while (iterator.hasNext()) {
        val e = iterator.next()
        min = minOf(min, e)
    }
    return min
}","/**

 * Returns the smallest element or `null` if there are no elements.

 * 

 * If any of elements is `NaN` returns `NaN`.

 *

 * The operation is _terminal_.

 */",f17096:m4101
64241,@kotlin.internal.IntrinsicConstEvaluation public operator fun div(other: Long): Long,"if (this == Long.MIN_VALUE && other == -1L) Long.MIN_VALUE else wasm_i64_div_s(this, other)","/** Divides this value by the other value, truncating the result to an integer that is closer to zero. */",f17455:m3155
58778,"public inline fun <T, K, V> Sequence<T>.associateBy(keySelector: (T) -> K, valueTransform: (T) -> V): Map<K, V>","{
    return associateByTo(LinkedHashMap<K, V>(), keySelector, valueTransform)
}","/**

 * Returns a [Map] containing the values provided by [valueTransform] and indexed by [keySelector] functions applied to elements of the given sequence.

 * 

 * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.

 * 

 * The returned map preserves the entry iteration order of the original sequence.

 *

 * The operation is _terminal_.

 * 

 * @sample samples.collections.Collections.Transformations.associateByWithValueTransform

 */",f17096:m1361
57334,"@Suppress(""ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS"") public actual fun IntArray.fill(element: Int, fromIndex: Int = 0, toIndex: Int = size): Unit","{
    java.util.Arrays.fill(this, fromIndex, toIndex, element)
}","/**

 * Fills this array or its subrange with the specified [element] value.

 * 

 * @param fromIndex the start of the range (inclusive) to fill, 0 by default.

 * @param toIndex the end of the range (exclusive) to fill, size of this array by default.

 * 

 * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.

 * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].

 */",f16970:m3259
58693,public infix fun Int.until(to: Short): IntRange,"{
    return this .. (to.toInt() - 1).toInt()
}","/**

 * Returns a range from this value up to but excluding the specified [to] value.

 * 

 * If the [to] value is less than or equal to `this` value, then the returned range is empty.

 */",f17092:m2335
10054,"internal fun PhaseEngine<NativeGenerationState>.compileModule(module: IrModuleFragment, bitcodeFile: java.io.File, cExportFiles: CExportFiles?)","{
    runBackendCodegen(module, cExportFiles)
    val checkExternalCalls = context.config.checkStateAtExternalCalls
    if (checkExternalCalls) {
        runPhase(CheckExternalCallsPhase)
    }
    newEngine(context as BitcodePostProcessingContext) { it.runBitcodePostProcessing() }
    if (checkExternalCalls) {
        runPhase(RewriteExternalCallsCheckerGlobals)
    }
    if (context.config.produce.isFullCache) {
        runPhase(SaveAdditionalCacheInfoPhase)
    }
    runPhase(WriteBitcodeFilePhase, WriteBitcodeFileInput(context.llvm.module, bitcodeFile))
}","/**

 * 1. Runs IR lowerings

 * 2. Runs LTO.

 * 3. Translates IR to LLVM IR.

 * 4. Optimizes it.

 * 5. Serializes it to a bitcode file.

 */",f3419:m505
57036,@kotlin.internal.InlineOnly public inline fun OutputStream.writer(charset: Charset = Charsets.UTF_8): OutputStreamWriter,"OutputStreamWriter(this, charset)",/** Creates a writer on this output stream using UTF-8 or the specified [charset]. */,f16952:m179
13500,@kotlin.internal.IntrinsicConstEvaluation public inline operator fun div(other: Byte): Int,this.toInt() / other.toInt(),"/** Divides this value by the other value, truncating the result to an integer that is closer to zero. */",f3686:m371
30853,fun String.capitalizeFirstWord(asciiOnly: Boolean = false): String,"{
    val secondWordStart = indices.drop(1).firstOrNull { !isLowerCaseCharAt(it, asciiOnly) } ?: return toUpperCase(this, asciiOnly)
    return toUpperCase(substring(0, secondWordStart), asciiOnly) + substring(secondWordStart)
}","/**

 * ""fooBar"" -> ""FOOBar""

 * ""FooBar"" -> ""FOOBar""

 * ""foo"" -> ""FOO""

 */",f10787:m101
56067,"@SinceKotlin(""1.1"") @kotlin.internal.InlineOnly public inline operator fun <K, V> MutableMap<K, V>.minusAssign(keys: Iterable<K>)","{
    this.keys.removeAll(keys)
}","/**

 * Removes all entries the keys of which are contained in the given [keys] collection from this mutable map.

 */",f16823:m1557
58875,"@SinceKotlin(""1.4"") @OptIn(kotlin.experimental.ExperimentalTypeInference::class) @OverloadResolutionByLambdaReturnType @kotlin.jvm.JvmName(""sumOfDouble"") @kotlin.internal.InlineOnly public inline fun <T> Sequence<T>.sumOf(selector: (T) -> Double): Double","{
    var sum: Double = 0.toDouble()
    for (element in this) {
        sum += selector(element)
    }
    return sum
}","/**

 * Returns the sum of all values produced by [selector] function applied to each element in the sequence.

 *

 * The operation is _terminal_.

 */",f17096:m4955
64333,@kotlin.internal.IntrinsicConstEvaluation public inline operator fun compareTo(other: Float): Int,this.compareTo(other.toDouble()),"/**

     * Compares this value with the specified value for order.

     * Returns zero if this value is equal to the specified other value, a negative number if it's less than other,

     * or a positive number if it's greater than other.

     */",f17455:m4717
63522,"internal fun LongArray.copyOfUninitializedElements(fromIndex: Int, toIndex: Int): LongArray","{
    val newSize = toIndex - fromIndex
    if (newSize < 0) {
        throw IllegalArgumentException(""$fromIndex > $toIndex"")
    }
    val result = LongArray(newSize)
    this.copyInto(result, 0, fromIndex, toIndex.coerceAtMost(size))
    return result
}","/**

 * Returns new array which is a copy of the original array's range between [fromIndex] (inclusive)

 * and [toIndex] (exclusive) with new elements filled with **lateinit** _uninitialized_ values.

 * Attempts to read _uninitialized_ values from this array work in implementation-dependent manner,

 * either throwing exception or returning some kind of implementation-specific default value.

 */",f17396:m3441
58509,"@SinceKotlin(""1.1"") public inline fun <K, V, M: Map<out K, V>> M.onEach(action: (Map.Entry<K, V>) -> Unit): M","{
    return apply { for (element in this) action(element) }
}","/**

 * Performs the given [action] on each entry and returns the map itself afterwards.

 */",f17089:m1117
63542,"@SinceKotlin(""1.3"") @Suppress(""ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS"") public actual fun DoubleArray.fill(element: Double, fromIndex: Int = 0, toIndex: Int = size): Unit","{
    AbstractList.checkRangeIndexes(fromIndex, toIndex, size)
    for (index in fromIndex until toIndex) {
        this[index] = element
    }
}","/**

 * Fills this array or its subrange with the specified [element] value.

 * 

 * @param fromIndex the start of the range (inclusive) to fill, 0 by default.

 * @param toIndex the end of the range (exclusive) to fill, size of this array by default.

 * 

 * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.

 * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].

 */",f17396:m3979
52543,"@SinceKotlin(""1.1"") public actual fun <T, K> Grouping<T, K>.eachCount(): Map<K, Int>","eachCountTo(mutableMapOf<K, Int>())","/**

 * Groups elements from the [Grouping] source by key and counts elements in each group.

 *

 * @return a [Map] associating the key of each group with the count of elements in the group.

 *

 * @sample samples.collections.Grouping.groupingByEachCount

 */",f16542:m117
59098,"@SinceKotlin(""1.5"") @WasExperimental(ExperimentalUnsignedTypes::class) public fun minOf(a: ULong, b: ULong): ULong","{
    return if (a <= b) a else b
}","/**

 * Returns the smaller of two values.

 */",f17098:m295
16345,@OptIn(PrivateForInline::class) private fun Processor.processClassHeader(regularClass: FirRegularClass),"{
    context.withTypeParametersOf(regularClass) {
        processList(regularClass.contextReceivers)
        processList(regularClass.typeParameters)
        processList(regularClass.superTypeRefs)
    }
}","/**

     * Process the parts of the class declaration which resolution is not affected

     * by the class own supertypes.

     *

     * Processing those parts before adding the implicit receiver of the class

     * to the [context] allows to not collect incorrect contexts for them later on.

     */",f4108:m869
42838,"@DisplayName(""Changed types causing incremental compilation"") @GradleTest fun testClasspathChangesCauseTypesToBeReprocessed(gradleVersion: GradleVersion)","{
    project(PROJECT_NAME, gradleVersion) {
        setupIncrementalAptProject(Pair(""ISOLATING"", IncrementalBinaryIsolatingProcessor::class.java), Pair(""AGGREGATING"", IncrementalAggregatingReferencingClasspathProcessor::class.java))
        settingsGradle.append(""\ninclude ':', ':lib'\n"")
        val classpathTypeSource = subProject(""lib"").run {
            projectPath.createDirectories()
            buildGradle.writeText(""""""
            
                                plugins {
            
                                    id 'java'
            
                                }
            
                                
            
                                """""".trimIndent())
            val source = javaSourcesDir().resolve(IncrementalAggregatingReferencingClasspathProcessor.CLASSPATH_TYPE.replace(""."", ""/"") + "".java"")
            source.parent.createDirectories()
            source.writeText(""""""
            
                                package ${IncrementalAggregatingReferencingClasspathProcessor.CLASSPATH_TYPE.substringBeforeLast(""."")};
            
                                public class ${IncrementalAggregatingReferencingClasspathProcessor.CLASSPATH_TYPE.substringAfterLast(""."")} {}
            
                                """""".trimIndent())
            return@run source
        }
        buildGradle.append(""""""
        
        
        
                        dependencies {
        
                            implementation project(':lib')
        
                        }
        
                        """""".trimIndent())
        javaSourcesDir().deleteRecursively()
        with(javaSourcesDir().resolve(""example/A.kt"")) {
            parent.createDirectories()
            writeText(""""""
            
                                package example
            
                                
            
                                annotation class ExampleAnnotation
            
                                @ExampleAnnotation
            
                                class A
            
                                """""".trimIndent())
        }
        val allKotlinStubs = setOf(""build/tmp/kapt3/stubs/main/example/ExampleAnnotation.java"", ""build/tmp/kapt3/stubs/main/example/A.java"", ""build/tmp/kapt3/stubs/main/error/NonExistentClass.java"")
        build(""clean"", ""assemble"") {
            assertEquals(allKotlinStubs.map { projectPath.resolve(it).toRealPath().toString() }.toSet(), getProcessedSources(output))
            assertFileInProjectExists(""build/generated/source/kapt/main/com/example/AggGenerated.java"")
        }
        classpathTypeSource.writeText(classpathTypeSource.readText().replace(""}"", ""int i = 10;\n}""))
        build(""assemble"") {
            assertEquals(emptySet(), getProcessedSources(output))
            assertEquals(setOf(""example.AGenerated""), getProcessedTypes(output))
            assertFileInProjectExists(""build/generated/source/kapt/main/com/example/AggGenerated.java"")
        }
    }
}","/**

     * Make sure that changes to classpath can cause types to be reprocessed (i.e types in generated .class files that contain annotations

     * claimed by annotation processors).

     */",f13371:m665
14921,"public actual fun LongArray.copyOfRange(fromIndex: Int, toIndex: Int): LongArray","{
    checkCopyOfRangeArguments(fromIndex, toIndex, size)
    return copyOfUninitializedElements(fromIndex, toIndex)
}","/**

 * Returns a new array which is a copy of the specified range of the original array.

 * 

 * @param fromIndex the start of the range (inclusive) to copy.

 * @param toIndex the end of the range (exclusive) to copy.

 * 

 * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.

 * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].

 */",f3831:m3121
54714,public actual fun DoubleArray.copyOf(newSize: Int): DoubleArray,"{
    require(newSize >= 0) { ""Invalid new array size: $newSize."" }
    return fillFrom(this, DoubleArray(newSize))
}","/**

 * Returns new array which is a copy of the original array, resized to the given [newSize].

 * The copy is either truncated or padded at the end with zero values if necessary.

 * 

 * - If [newSize] is less than the size of the original array, the copy array is truncated to the [newSize].

 * - If [newSize] is greater than the size of the original array, the extra elements in the copy array are filled with zero values.

 * 

 * @sample samples.collections.Arrays.CopyOfOperations.resizedPrimitiveCopyOf

 */",f16713:m1957
58468,"public fun <K, V> Map<out K, V>.toList(): List<Pair<K, V>>","{
    if (size == 0) return emptyList()
    val iterator = entries.iterator()
    if (!iterator.hasNext()) return emptyList()
    val first = iterator.next()
    if (!iterator.hasNext()) return listOf(first.toPair())
    val result = ArrayList<Pair<K, V>>(size)
    result.add(first.toPair())
    do {
        result.add(iterator.next().toPair())
    } while (iterator.hasNext())
    return result
}","/**

 * Returns a [List] containing all key-value pairs.

 */",f17089:m101
58587,"@SinceKotlin(""1.4"") @kotlin.internal.InlineOnly public inline fun CharRange.randomOrNull(): Char?","{
    return randomOrNull(Random)
}","/**

 * Returns a random element from this range, or `null` if this range is empty.

 */",f17092:m487
56482,"@SinceKotlin(""1.1"") @kotlin.internal.InlineOnly public actual inline fun String.toShort(radix: Int): Short","java.lang.Short.parseShort(this, checkRadix(radix))","/**

 * Parses the string as a [Short] number and returns the result.

 * @throws NumberFormatException if the string is not a valid representation of a number.

 * @throws IllegalArgumentException when [radix] is not a valid radix for string to number conversion.

 */",f16885:m161
59057,"@SinceKotlin(""1.4"") public inline fun <R> CharSequence.runningFoldIndexed(initial: R, operation: (index: Int, acc: R, Char) -> R): List<R>","{
    if (isEmpty()) return listOf(initial)
    val result = ArrayList<R>(length + 1).apply { add(initial) }
    var accumulator = initial
    for (index in indices) {
        accumulator = operation(index, accumulator, this[index])
        result.add(accumulator)
    }
    return result
}","/**

 * Returns a list containing successive accumulation values generated by applying [operation] from left to right

 * to each character, its index in the original char sequence and current accumulator value that starts with [initial] value.

 * 

 * Note that `acc` value passed to [operation] function should not be mutated;

 * otherwise it would affect the previous value in resulting list.

 * 

 * @param [operation] function that takes the index of a character, current accumulator value

 * and the character itself, and calculates the next accumulator value.

 * 

 * @sample samples.collections.Collections.Aggregates.runningFold

 */",f17097:m3989
63529,internal fun ShortArray.copyOfUninitializedElements(newSize: Int): ShortArray,"{
    return copyOfUninitializedElements(0, newSize)
}","/**

 * Returns new array which is a copy of the original array with new elements filled with **lateinit** _uninitialized_ values.

 * Attempts to read _uninitialized_ values from this array work in implementation-dependent manner,

 * either throwing exception or returning some kind of implementation-specific default value.

 */",f17396:m3637
1334,suspend inline fun <T> NodeJsInspectorClientContext.waitForValueToBecomeNonNull(crossinline test: () -> T?): T,"{
    var value: T? = null
    waitForConditionToBecomeTrue { test()?.also { value = it } != null }
    return value!!
}","/**

 * On each incoming message checks whether [test] returns `null`, and returns only when [test] returns non-`null` value.

 */",f338:m67
52877,"@SinceKotlin(""1.6"") @WasExperimental(ExperimentalStdlibApi::class) public actual fun Int.rotateLeft(bitCount: Int): Int",shl(bitCount) or ushr(Int.SIZE_BITS - bitCount),"/**

 * Rotates the binary representation of this [Int] number left by the specified [bitCount] number of bits.

 * The most significant bits pushed out from the left side reenter the number as the least significant bits on the right side.

 *

 * Rotating the number left by a negative bit count is the same as rotating it right by the negated bit count:

 * `number.rotateLeft(-n) == number.rotateRight(n)`

 *

 * Rotating by a multiple of [Int.SIZE_BITS] (32) returns the same number, or more generally

 * `number.rotateLeft(n) == number.rotateLeft(n % 32)`

 */",f16581:m289
58707,public fun Int.coerceAtMost(maximumValue: Int): Int,"{
    return if (this > maximumValue) maximumValue else this
}","/**

 * Ensures that this value is not greater than the specified [maximumValue].

 * 

 * @return this value if it's less than or equal to the [maximumValue] or the [maximumValue] otherwise.

 * 

 * @sample samples.comparisons.ComparableOps.coerceAtMost

 */",f17092:m2627
59042,"@SinceKotlin(""1.7"") @kotlin.jvm.JvmName(""minWithOrThrow"") @Suppress(""CONFLICTING_OVERLOADS"") public fun CharSequence.minWith(comparator: Comparator<in Char>): Char","{
    if (isEmpty()) throw NoSuchElementException()
    var min = this[0]
    for (i in 1 .. lastIndex) {
        val e = this[i]
        if (comparator.compare(min, e) > 0) min = e
    }
    return min
}","/**

 * Returns the first character having the smallest value according to the provided [comparator].

 * 

 * @throws NoSuchElementException if the char sequence is empty.

 */",f17097:m3447
58120,@kotlin.internal.InlineOnly public inline fun toUInt(): UInt,UInt(data.toInt() and 0xFF),"/**

     * Converts this [UByte] value to [UInt].

     *

     * The resulting `UInt` value represents the same numerical value as this `UByte`.

     *

     * The least significant 8 bits of the resulting `UInt` value are the same as the bits of this `UByte` value,

     * whereas the most significant 24 bits are filled with zeros.

     */",f17059:m635
49294,private fun KotlinCompilation<*>.isPublished(): Boolean,"{
    return when (this) {
        is KotlinMetadataCompilation<*> -> true
        else -> name == KotlinCompilation.MAIN_COMPILATION_NAME
    }
}","/**

     * Estimate whether a [KotlinCompilation] is 'publishable' (i.e. it is a main, non-test compilation).

     */",f15794:m139
16225,fun pushCycledSymbol(symbol: FirCallableSymbol<*>),"{
    requireWithAttachment(cycledSymbol == null, { ""Nested recursion is not allowed"" })
    cycledSymbol = symbol
}","/**

     * Push [symbol] with a recursion return type to be able to report it later

     *

     * @param symbol is a symbol with the recursion error in the return type

     *

     * @see popCycledSymbolIfExists

     * @see LLFirImplicitBodyTargetResolver.handleCycleInResolution

     */",f4086:m205
58782,"@SinceKotlin(""1.3"") public inline fun <K, V> Sequence<K>.associateWith(valueSelector: (K) -> V): Map<K, V>","{
    val result = LinkedHashMap<K, V>()
    return associateWithTo(result, valueSelector)
}","/**

 * Returns a [Map] where keys are elements from the given sequence and values are

 * produced by the [valueSelector] function applied to each element.

 * 

 * If any two elements are equal, the last one gets added to the map.

 * 

 * The returned map preserves the entry iteration order of the original sequence.

 *

 * The operation is _terminal_.

 * 

 * @sample samples.collections.Collections.Transformations.associateWith

 */",f17096:m1497
58523,"@SinceKotlin(""1.5"") @WasExperimental(ExperimentalUnsignedTypes::class) public fun UIntRange.random(random: Random): UInt","{
    try {
        return random.nextUInt(this)
    } catch (e: IllegalArgumentException) {
        throw NoSuchElementException(e.message)
    }
}","/**

 * Returns a random element from this range using the specified source of randomness.

 * 

 * @throws IllegalArgumentException if this range is empty.

 */",f17090:m261
58690,public infix fun Long.until(to: Long): LongRange,"{
    if (to <= Long.MIN_VALUE) return LongRange.EMPTY
    return this .. (to - 1).toLong()
}","/**

 * Returns a range from this value up to but excluding the specified [to] value.

 * 

 * If the [to] value is less than or equal to `this` value, then the returned range is empty.

 */",f17092:m2275
58614,"@kotlin.jvm.JvmName(""doubleRangeContains"") @SinceKotlin(""1.9"") @WasExperimental(ExperimentalStdlibApi::class) public operator fun OpenEndRange<Double>.contains(value: Float): Boolean","{
    return contains(value.toDouble())
}","/**

 * Checks if the specified [value] belongs to this range.

 */",f17092:m1003
34723,private fun buildSupertypesGroups(trees: List<SupertypesTree>): List<SupertypesGroup>,"{
    val groups = mutableListOf<SupertypesGroup>()
    var allowClassTypes = true
    trees.flatMap { tree -> tree.allNodes }.forEach { node ->
        if (node.isConsumed) return@forEach
        val candidateGroup = buildTypeGroup(trees, node.type.classifierId) ?: return@forEach
        if (containsAnyClassKind(candidateGroup)) {
            if (!allowClassTypes) return@forEach
            allowClassTypes = false
        }
        assignGroupToNodes(candidateGroup)
        groups.add(candidateGroup)
    }
    return groups
}","/**

     * Builds [SupertypesGroup] (a group representing one type for every platform) that will be enqueued for type commonization.

     * To find out which types shall  be grouped this implementation will go through every single node in all trees (BFS!)

     * If a certain type can be found on all other platforms, then a group is build.

     * This types and all transitively ""covered"" supertypes will be marked as 'consumed' and therefore will be 'effectively removed'

     * from the tree.

     *

     * This grouping implementation will also be very careful about *not* grouping two groups that could effectively

     * represent a 'ClassKind' (to avoid commonizing with two abstract class supertypes)

     */",f11393:m173
13954,"@ExperimentalNativeApi public fun Char.Companion.isSurrogatePair(high: Char, low: Char): Boolean",high.isHighSurrogate() && low.isLowSurrogate(),"/**

 * Checks if the specified [high] and [low] chars are [Char.isHighSurrogate] and [Char.isLowSurrogate] correspondingly.

 */",f3711:m111
57360,public actual operator fun ShortArray.plus(elements: ShortArray): ShortArray,"{
    val thisSize = size
    val arraySize = elements.size
    val result = java.util.Arrays.copyOf(this, thisSize + arraySize)
    System.arraycopy(elements, 0, result, thisSize, arraySize)
    return result
}","/**

 * Returns an array containing all elements of the original array and then all elements of the given [elements] array.

 */",f16970:m3831
63182,"@Suppress(""NOTHING_TO_INLINE"") public actual inline fun Long.countOneBits(): Int",wasm_i64_popcnt(this).toInt(),"/**

 * Counts the number of set bits in the binary representation of this [Long] number.

 */",f17314:m149
56924,"@SinceKotlin(""1.2"") @kotlin.internal.InlineOnly public inline fun Double.toBigDecimal(mathContext: MathContext): BigDecimal","BigDecimal(this.toString(), mathContext)","/**

 * Returns the value of this [Double] number as a [BigDecimal].

 *

 * The number is converted to a string and then the string is converted to a [BigDecimal].

 *

 * @param mathContext specifies the precision and the rounding mode.

 */",f16935:m257
58570,"@SinceKotlin(""1.7"") public fun IntProgression.firstOrNull(): Int?","{
    return if (isEmpty()) null else this.first
}","/**

 * Returns the first element, or `null` if the progression is empty.

 */",f17092:m109
63638,"@SinceKotlin(""1.4"") public actual fun maxOf(a: Float, vararg other: Float): Float","{
    var max = a
    for (e in other) max = maxOf(max, e)
    return max
}","/**

 * Returns the greater of the given values.

 * 

 * If any value is `NaN`, returns `NaN`.

 */",f17406:m403
19995,"@OptIn(KtModuleStructureInternals::class) public inline fun <R> analyzeCopy(useSiteKtElement: KtElement, resolutionMode: DanglingFileResolutionMode, crossinline action: KtAnalysisSession.() -> R): R","{
    val containingFile = useSiteKtElement.containingKtFile
    return withDanglingFileResolutionMode(containingFile, resolutionMode) { analyze(containingFile, action) }
}","/**

 * Executes the given [action] in a [KtAnalysisSession] context.

 * Depending on the passed [resolutionMode], declarations inside a file copy will be treated in a specific way.

 *

 * Note that the [useSiteKtElement] must be inside a dangling file copy.

 * Specifically, [PsiFile.getOriginalFile] must point to the copy source.

 *

 * The project will be analyzed from the perspective of [useSiteKtElement]'s module, also called the use-site module.

 */",f5731:m95
34353,"override fun testCase(testCase: XCTestCase, didRecordExpectedFailure: XCTExpectedFailure)","{
    logger.log(""TestCase: $testCase got expected failure: ${didRecordExpectedFailure.failureReason}"")
    this.testCase(testCase, didRecordExpectedFailure.issue)
}","/**

     * Records expected failures as failed test as soon as such expectations should be processed in the test.

     */",f11292:m111
55733,"@SinceKotlin(""1.1"") public fun String.toLongOrNull(radix: Int): Long?","{
    checkRadix(radix)
    val length = this.length
    if (length == 0) return null
    val start: Int
    val isNegative: Boolean
    val limit: Long
    val firstChar = this[0]
    if (firstChar < '0') {
        if (length == 1) return null
        start = 1
        if (firstChar == '-') {
            isNegative = true
            limit = Long.MIN_VALUE
        } else if (firstChar == '+') {
            isNegative = false
            limit = -Long.MAX_VALUE
        } else return null
    } else {
        start = 0
        isNegative = false
        limit = -Long.MAX_VALUE
    }
    val limitForMaxRadix = (-Long.MAX_VALUE) / 36
    var limitBeforeMul = limitForMaxRadix
    var result = 0L
    for (i in start until length) {
        val digit = digitOf(this[i], radix)
        if (digit < 0) return null
        if (result < limitBeforeMul) {
            if (limitBeforeMul == limitForMaxRadix) {
                limitBeforeMul = limit / radix
                if (result < limitBeforeMul) {
                    return null
                }
            } else {
                return null
            }
        }
        result *= radix
        if (result < limit + digit) return null
        result -= digit
    }
    return if (isNegative) result else -result
}","/**

 * Parses the string as a [Long] number and returns the result

 * or `null` if the string is not a valid representation of a number.

 *

 * @throws IllegalArgumentException when [radix] is not a valid radix for string to number conversion.

 */",f16787:m267
57347,public actual operator fun BooleanArray.plus(element: Boolean): BooleanArray,"{
    val index = size
    val result = java.util.Arrays.copyOf(this, index + 1)
    result[index] = element
    return result
}","/**

 * Returns an array containing all elements of the original array and then the given [element].

 */",f16970:m3567
63573,public actual fun IntArray.sort(): Unit,"{
    if (size > 1) sortArray(this, 0, size)
}","/**

 * Sorts the array in-place.

 * 

 * @sample samples.collections.Arrays.Sorting.sortArray

 */",f17396:m4661
14870,"@SinceKotlin(""1.4"") public actual fun BooleanArray?.contentHashCode(): Int","{
    if (this === null) return 0
    var result = 1
    for (element in this) result = 31 * result + element.hashCode()
    return result
}","/**

 * Returns a hash code based on the contents of this array as if it is [List].

 */",f3831:m1753
59108,"@SinceKotlin(""1.4"") @ExperimentalUnsignedTypes public fun minOf(a: UShort, vararg other: UShort): UShort","{
    var min = a
    for (e in other) min = minOf(min, e)
    return min
}","/**

 * Returns the smaller of the given values.

 */",f17098:m495
43510,"fun GradleProject.assertCompiledJavaSources(expectedSources: Iterable<Path>, output: String, errorMessageSuffix: String = """")","{
    val actualSources = extractCompiledJavaFiles(projectPath.toRealPath().toFile(), output)
    assertSameFiles(expectedSources, actualSources, ""Compiled Java files differ${errorMessageSuffix}:\n"")
}","/**

 * Asserts all the .java files from [expectedSources] and only they are compiled

 *

 * Note: log level of output should be set to [LogLevel.DEBUG]

 */",f13451:m119
31269,fun <H: Any> Collection<H>.selectMostSpecificInEachOverridableGroup(descriptorByHandle: H.() -> CallableDescriptor): Collection<H>,"{
    if (size <= 1) return this
    val queue = LinkedList<H>(this)
    val result = SmartSet.create<H>()
    while (queue.isNotEmpty()) {
        val nextHandle: H = queue.first()
        val conflictedHandles = SmartSet.create<H>()
        val overridableGroup = OverridingUtil.extractMembersOverridableInBothWays(nextHandle, queue, descriptorByHandle) { conflictedHandles.add(it) }
        if (overridableGroup.size == 1 && conflictedHandles.isEmpty()) {
            result.add(overridableGroup.single())
            continue
        }
        val mostSpecific = OverridingUtil.selectMostSpecificMember(overridableGroup, descriptorByHandle)
        val mostSpecificDescriptor = mostSpecific.descriptorByHandle()
        overridableGroup.filterNotTo(conflictedHandles) { OverridingUtil.isMoreSpecific(mostSpecificDescriptor, it.descriptorByHandle()) }
        if (conflictedHandles.isNotEmpty()) {
            result.addAll(conflictedHandles)
        }
        result.add(mostSpecific)
    }
    return result
}","/**

 * @param <H> is something that handles CallableDescriptor inside

 */",f10871:m91
20375,public fun getAllSymbols(): Sequence<KtDeclarationSymbol>,"withValidityAssertion { sequence {
    yieldAll(getCallableSymbols())
    yieldAll(getClassifierSymbols())
    yieldAll(getConstructors())
} }","/**

     * Return a sequence of all [KtDeclarationSymbol] which current scope contain

     */",f5837:m27
14049,"public fun compareAndExchange(expected: Int, newValue: Int): Int","this::value.compareAndExchangeField(expected, newValue)","/**

     * Atomically sets the value to the given [new value][newValue] if the current value equals the [expected value][expected]

     * and returns the old value in any case.

     *

     * Provides sequential consistent ordering guarantees and cannot fail spuriously.

     */",f3718:m67
54921,"@ExperimentalJsExport @ExperimentalJsCollectionsApi @SinceKotlin(""2.0"") public fun asJsReadonlyMapView(): JsReadonlyMap<K, V>",createJsReadonlyMapViewFrom(this),"/**

     * Returns a view with the [JsReadonlyMap] methods to consume it in JavaScript as a regular readonly Map.

     * Structural changes in the base map are synchronized with the view.

     */",f16726:m845
27464,"private fun checkMinNumberOfClassFiles(roots: List<File>, required: Int): Boolean","{
    var currentlyMissing = required
    roots.filter { it.isDirectory }.forEach {
        val inThisRoot = countClassFilesUpToLimit(it, currentlyMissing)
        currentlyMissing -= inThisRoot
    }
    return currentlyMissing <= 0
}",/** Returns if specified root dirs have at least [required] number of class files. */,f9696:m405
54665,"@SinceKotlin(""1.4"") public actual infix fun ByteArray?.contentEquals(other: ByteArray?): Boolean","{
    return contentEqualsInternal(other)
}","/**

 * Checks if the two specified arrays are *structurally* equal to one another.

 * 

 * Two arrays are considered structurally equal if they have the same size, and elements at corresponding indices are equal.

 * 

 * The arrays are also considered structurally equal if both are `null`.

 * 

 * @param other the array to compare with this array.

 * @return `true` if the two arrays are structurally equal, `false` otherwise.

 * 

 * @sample samples.collections.Arrays.ContentOperations.intArrayContentEquals

 */",f16713:m607
54725,"public actual fun BooleanArray.copyOfRange(fromIndex: Int, toIndex: Int): BooleanArray","{
    AbstractList.checkRangeIndexes(fromIndex, toIndex, size)
    return withType(""BooleanArray"", this.asDynamic().slice(fromIndex, toIndex))
}","/**

 * Returns a new array which is a copy of the specified range of the original array.

 * 

 * @param fromIndex the start of the range (inclusive) to copy.

 * @param toIndex the end of the range (exclusive) to copy.

 * 

 * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.

 * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].

 */",f16713:m2269
23742,"fun analyzeSpecialSerializers(session: FirSession, annotations: List<FirAnnotation>): FirClassSymbol<*>?","when {
    annotations.hasAnnotation(SerializationAnnotations.contextualClassId, session) || annotations.hasAnnotation(SerializationAnnotations.contextualOnPropertyClassId, session) -> {
        session.dependencySerializationInfoProvider.getClassFromSerializationPackage(SpecialBuiltins.Names.contextSerializer)
    }
    annotations.hasAnnotation(SerializationAnnotations.polymorphicClassId, session) -> {
        session.dependencySerializationInfoProvider.getClassFromSerializationPackage(SpecialBuiltins.Names.polymorphicSerializer)
    }
    else -> null
}","/**

 * Returns class descriptor for ContextSerializer or PolymorphicSerializer

 * if [annotations] contains @Contextual or @Polymorphic annotation

 */",f9011:m195
63516,"public actual fun BooleanArray.copyOfRange(fromIndex: Int, toIndex: Int): BooleanArray","{
    checkCopyOfRangeArguments(fromIndex, toIndex, size)
    return copyOfUninitializedElements(fromIndex, toIndex)
}","/**

 * Returns a new array which is a copy of the specified range of the original array.

 * 

 * @param fromIndex the start of the range (inclusive) to copy.

 * @param toIndex the end of the range (exclusive) to copy.

 * 

 * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.

 * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].

 */",f17396:m3257
58098,@kotlin.internal.InlineOnly public inline fun floorDiv(other: UByte): UInt,this.toUInt().floorDiv(other.toUInt()),"/**

     * Divides this value by the other value, flooring the result to an integer that is closer to negative infinity.

     *

     * For unsigned types, the results of flooring division and truncating division are the same.

     */",f17059:m309
52298,private fun getFilePath(filePattern: String): String,"{
    return substitutePropertiesValues(filePattern) { propertyValue -> propertyValue.replace('\\', '/').replace(""$"", ""\\$"") }.replace('\\', '/')
}","/**

 * Get file path from a string pattern

 *

 * Implementation is mostly copied from [DefaultMavenSettingsBuilder.getFile]

 */",f16469:m139
13539,@kotlin.internal.IntrinsicConstEvaluation public inline operator fun compareTo(other: Float): Int,this.toFloat().compareTo(other),"/**

     * Compares this value with the specified value for order.

     * Returns zero if this value is equal to the specified other value, a negative number if it's less than other,

     * or a positive number if it's greater than other.

     */",f3686:m1021
54737,"@Suppress(""NOTHING_TO_INLINE"") public actual inline operator fun ByteArray.plus(element: Byte): ByteArray","{
    return plus(byteArrayOf(element))
}","/**

 * Returns an array containing all elements of the original array and then the given [element].

 */",f16713:m2631
55862,"@SinceKotlin(""1.3"") public fun <T> Sequence<T>.ifEmpty(defaultValue: () -> Sequence<T>): Sequence<T>","sequence {
    val iterator = this@ifEmpty.iterator()
    if (iterator.hasNext()) {
        yieldAll(iterator)
    } else {
        yieldAll(defaultValue())
    }
}","/**

 * Returns a sequence that iterates through the elements either of this sequence

 * or, if this sequence turns out to be empty, of the sequence returned by [defaultValue] function.

 *

 * @sample samples.collections.Sequences.Usage.sequenceIfEmpty

 */",f16815:m117
15019,"@SinceKotlin(""1.1"") @kotlin.internal.InlineOnly public actual inline fun maxOf(a: Long, b: Long): Long","{
    return if (a >= b) a else b
}","/**

 * Returns the greater of two values.

 */",f3836:m101
41272,fun clean(),"{
    close()
    deleteStorageFiles()
}","/**

     * DEPRECATED: This API should be removed because:

     *   - It's not obvious what ""clean"" means: It does not exactly describe the current implementation, and it also sounds similar to

     *   ""clear"" which means removing all the map entries, but this method does not do that.

     *   - This method currently calls [close] (and [deleteStorageFiles]). However, [close] is often already called separately and

     *   automatically, so this API makes it more likely for [close] to be accidentally called twice.

     *

     * Instead, just call [close] and/or [deleteStorageFiles] explicitly.

     */",f13001:m131
57177,"@SinceKotlin(""1.4"") public actual fun minOf(a: Int, vararg other: Int): Int","{
    var min = a
    for (e in other) min = minOf(min, e)
    return min
}","/**

 * Returns the smaller of the given values.

 */",f16966:m793
58924,"@SinceKotlin(""1.5"") @kotlin.internal.InlineOnly public inline fun <R: Any> CharSequence.firstNotNullOfOrNull(transform: (Char) -> R?): R?","{
    for (element in this) {
        val result = transform(element)
        if (result != null) {
            return result
        }
    }
    return null
}","/**

 * Returns the first non-null value produced by [transform] function being applied to characters of this char sequence in iteration order,

 * or `null` if no non-null value was produced.

 * 

 * @sample samples.collections.Collections.Transformations.firstNotNullOf

 */",f17097:m201
49579,private fun dependenciesForPomRewriting(target: InternalKotlinTarget): Provider<Set<ModuleCoordinates>>?,"if (target !is KotlinMetadataTarget || !target.project.isKotlinGranularMetadataEnabled) null else {
    val commonMain = target.project.kotlinExtension.sourceSets.findByName(KotlinSourceSet.COMMON_MAIN_SOURCE_SET_NAME)
    if (commonMain == null) null else target.project.provider {
        val project = target.project
        val commonMainApi = project.configurations.sourceSetDependencyConfigurationByScope(commonMain, KotlinDependencyScope.API_SCOPE)
        val commonMainDependencies = commonMainApi.allDependencies
        commonMainDependencies.map { ModuleCoordinates(it.group, it.name, it.version) }.toSet()
    }
}","/**

 * The metadata targets need their POMs to only include the dependencies from the commonMain API configuration.

 * The actual apiElements configurations of metadata targets now contain dependencies from all source sets, but, as the consumers who

 * can't read Gradle module metadata won't resolve a dependency on an MPP to the granular metadata variant and won't then choose the

 * right dependencies for each source set, we put only the dependencies of the legacy common variant into the POM, i.e. commonMain API.

 */",f15891:m279
422,"private fun isNameInitialized(name: JsName, initializer: JsStatement): Boolean","{
    val thenStmt = (initializer as JsIf).thenStatement
    val lastThenStmt = flattenStatement(thenStmt).last()
    val expr = (lastThenStmt as? JsExpressionStatement)?.expression
    if (expr !is JsBinaryOperation) return false
    val op = expr.operator
    if (!op.isAssignment) return false
    val arg1 = expr.arg1
    if (arg1 is HasName && arg1.name === name) return true
    return false
}","/**

 * Tests if the last statement of initializer

 * is name assignment.

 */",f150:m199
63174,"@Deprecated(""Synchronization on Any? object is not supported."", ReplaceWith(""lazy(initializer)"")) @DeprecatedSinceKotlin(warningSince = ""1.9"") public actual fun <T> lazy(lock: Any?, initializer: () -> T): Lazy<T>",UnsafeLazyImpl(initializer),"/**

 * Creates a new instance of the [Lazy] that uses the specified initialization function [initializer].

 *

 * The [lock] parameter is ignored.

 */",f17312:m37
58959,"public inline fun <C: Appendable> CharSequence.filterTo(destination: C, predicate: (Char) -> Boolean): C","{
    for (index in 0 until length) {
        val element = get(index)
        if (predicate(element)) destination.append(element)
    }
    return destination
}","/**

 * Appends all characters matching the given [predicate] to the given [destination].

 * 

 * @sample samples.collections.Collections.Filtering.filterTo

 */",f17097:m1001
56518,"@SinceKotlin(""1.4"") @kotlin.internal.InlineOnly public actual inline fun StringBuilder.appendLine(value: Short): StringBuilder",append(value.toInt()).appendLine(),"/** Appends [value] to this [StringBuilder], followed by a line feed character (`\n`). */",f16890:m427
54840,internal fun Char.isLetterImpl(): Boolean,"{
    return getLetterType() != 0
}","/**

 * Returns `true` if this character is a letter.

 */",f16715:m91
31047,fun mapJavaToKotlin(fqName: FqName): ClassId?,"{
    return javaToKotlin[fqName.toUnsafe()]
}","/**

     * E.g.

     * - java.lang.String -> kotlin.String

     * - java.lang.Integer -> kotlin.Int

     * - kotlin.jvm.internal.IntCompanionObject -> kotlin.Int.Companion

     * - java.util.List -> kotlin.List

     * - java.util.Map.Entry -> kotlin.Map.Entry

     * - java.lang.Void -> null

     * - kotlin.jvm.functions.Function3 -> kotlin.Function3

     * - kotlin.jvm.functions.FunctionN -> null // Without a type annotation like @Arity(n), it's impossible to find out arity

     */",f10819:m215
10459,fun add(c: Constraint),"{
    c.addToGraph()
    incrementalAdd(c)
}","/**

   * Activate the constraint and attempt to satisfy it.

   */",f3476:m1007
315,fun removeUnusedLocalFunctionDeclarations(root: JsNode),"{
    val removable = with(UnusedInstanceCollector()) {
        accept(root)
        removableDeclarations
    }
    NodeRemover(JsStatement::class.java) { it in removable }.accept(root)
}","/**

 * Removes unused local function declarations like:

 *  var inc = _.foo.f$inc(a)

 *

 * Declaration can become unused, if inlining happened.

 */",f125:m49
64445,"@SinceKotlin(""1.5"") @WasExperimental(ExperimentalPathApi::class) @Throws(IOException::class) @kotlin.internal.InlineOnly public inline fun Path.reader(charset: Charset = Charsets.UTF_8, vararg options: OpenOption): InputStreamReader","{
    return InputStreamReader(Files.newInputStream(this, *options), charset)
}","/**

 * Returns a new [InputStreamReader] for reading the content of this file.

 *

 * @param charset character set to use for reading text, UTF-8 by default.

 * @param options options to determine how the file is opened.

 */",f17469:m43
57241,public actual fun DoubleArray.asList(): List<Double>,"{
    return object : AbstractList<Double>(), RandomAccess {
        override val size: Int get() = this@asList.size
    
        override fun isEmpty(): Boolean = this@asList.isEmpty()
    
        override fun contains(element: Double): Boolean = this@asList.any { it.toBits() == element.toBits() }
    
        override fun get(index: Int): Double = this@asList[index]
    
        override fun indexOf(element: Double): Int = this@asList.indexOfFirst { it.toBits() == element.toBits() }
    
        override fun lastIndexOf(element: Double): Int = this@asList.indexOfLast { it.toBits() == element.toBits() }
    }
}","/**

 * Returns a [List] that wraps the original array.

 */",f16970:m411
58632,@kotlin.internal.InlineOnly public inline operator fun IntRange.contains(value: Long): Boolean,"{
    return (this as ClosedRange<Int>).contains(value)
}","/**

 * Checks if the specified [value] belongs to this range.

 */",f17092:m1335
48329,"internal fun AttributeContainer.toMap(): Map<Attribute<*>, Any?>","{
    val result = mutableMapOf<Attribute<*>, Any?>()
    for (key in keySet()) {
        result[key] = getAttribute(key)
    }
    return result
}","/**

 * KGP's internal analog of [org.gradle.api.internal.attributes.AttributeContainerInternal.asMap]

 * Can be used to compare attributes

 */",f15606:m27
13846,public open fun toString(): String,"{
    val className = this::class.fullName ?: ""<object>""
    val unsignedHashCode = this.hashCode().toLong() and 0xffffffffL
    val hashCodeStr = unsignedHashCode.toString(16)
    return ""$className@$hashCodeStr""
}","/**

     * Returns a string representation of the object.

     */",f3691:m83
56595,"public fun <K: Comparable<K>, V> sortedMapOf(vararg pairs: Pair<K, V>): SortedMap<K, V>","TreeMap<K, V>().apply { putAll(pairs) }","/**

 * Returns a new [SortedMap] with the specified contents, given as a list of pairs

 * where the first value is the key and the second is the value.

 *

 * The resulting [SortedMap] determines the equality and order of keys according to their natural sorting order.

 *

 * @sample samples.collections.Maps.Instantiation.sortedMapFromPairs

 */",f16913:m197
58644,public infix fun Long.downTo(to: Byte): LongProgression,"{
    return LongProgression.fromClosedRange(this, to.toLong(), -1L)
}","/**

 * Returns a progression from this value down to the specified [to] value with the step -1.

 * 

 * The [to] value should be less than or equal to `this` value.

 * If the [to] value is greater than `this` value the returned progression is empty.

 */",f17092:m1551
63480,"@SinceKotlin(""1.4"") public actual fun BooleanArray?.contentToString(): String","{
    return this?.joinToString("", "", ""["", ""]"") ?: ""null""
}","/**

 * Returns a string representation of the contents of the specified array as if it is [List].

 * 

 * @sample samples.collections.Arrays.ContentOperations.contentToString

 */",f17396:m2157
46617,"fun fill(rangeStart: Int, rangeEnd: Int, categoryIdOf: (Int) -> String, charCode: Int, categoryId: String): Boolean","{
    require(charCode == rangeStart - 1 || charCode == rangeEnd + 1)
    val attempt = categoryIds.copyOf()
    for (ch in rangeStart .. rangeEnd) {
        if (!attempt.fill(ch, categoryIdOf(ch))) return false
    }
    if (!attempt.fill(charCode, categoryId)) return false
    attempt.copyInto(categoryIds)
    return true
}","/**

     * Returns true if a range with the specified [rangeStart], [rangeEnd] and [categoryIdOf] was successfully added

     * together with a char with the specified [charCode] and [categoryId].

     *

     * The [charCode] must go immediately after the [rangeEnd] or before the [rangeStart].

     */",f15082:m289
63183,public actual fun Long.countLeadingZeroBits(): Int,wasm_i64_clz(this).toInt(),"/**

 * Counts the number of consecutive most significant bits that are zero in the binary representation of this [Long] number.

 */",f17314:m163
24978,fun toCallBindings(): CallBindings,"CallBindings(target, parameters.map { it.toCallBindings() }, result = result?.toCallBindings(), anyParameters)","/**

     * Create a call binding for use when validating a call to the function this lazy scheme is for.

     */",f9238:m137
59088,"@SinceKotlin(""1.5"") @WasExperimental(ExperimentalUnsignedTypes::class) public fun maxOf(a: UShort, b: UShort): UShort","{
    return if (a >= b) a else b
}","/**

 * Returns the greater of two values.

 */",f17098:m91
58941,public fun CharSequence.singleOrNull(): Char?,"{
    return if (length == 1) this[0] else null
}","/**

 * Returns single character, or `null` if the char sequence is empty or has more than one character.

 */",f17097:m597
58517,"@SinceKotlin(""1.7"") public fun UIntProgression.last(): UInt","{
    if (isEmpty()) throw NoSuchElementException(""Progression $this is empty."")
    return this.last
}","/**

 * Returns the last element.

 * 

 * @throws NoSuchElementException if the progression is empty.

 * 

 * @sample samples.collections.Collections.Elements.last

 */",f17090:m117
59110,"@SinceKotlin(""1.3"") @ExperimentalUnsignedTypes public fun Collection<UInt>.toUIntArray(): UIntArray","{
    val result = UIntArray(size)
    var index = 0
    for (element in this) result[index++] = element
    return result
}","/**

 * Returns an array of UInt containing all of the elements of this collection.

 */",f17099:m67
63510,"public actual fun ByteArray.copyOfRange(fromIndex: Int, toIndex: Int): ByteArray","{
    checkCopyOfRangeArguments(fromIndex, toIndex, size)
    return copyOfUninitializedElements(fromIndex, toIndex)
}","/**

 * Returns a new array which is a copy of the specified range of the original array.

 * 

 * @param fromIndex the start of the range (inclusive) to copy.

 * @param toIndex the end of the range (exclusive) to copy.

 * 

 * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.

 * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].

 */",f17396:m3089
58534,"@SinceKotlin(""1.5"") @WasExperimental(ExperimentalUnsignedTypes::class) public operator fun UIntRange.contains(value: ULong): Boolean","{
    return (value shr UInt.SIZE_BITS) == 0uL && contains(value.toUInt())
}","/**

 * Checks if the specified [value] belongs to this range.

 */",f17090:m507
58685,public infix fun Int.until(to: Int): IntRange,"{
    if (to <= Int.MIN_VALUE) return IntRange.EMPTY
    return this .. (to - 1).toInt()
}","/**

 * Returns a range from this value up to but excluding the specified [to] value.

 * 

 * If the [to] value is less than or equal to `this` value, then the returned range is empty.

 */",f17092:m2177
56052,"public operator fun <K, V> Map<out K, V>.plus(pair: Pair<K, V>): Map<K, V>","if (this.isEmpty()) mapOf(pair) else LinkedHashMap(this).apply { put(pair.first, pair.second) }","/**

 * Creates a new read-only map by replacing or adding an entry to this map from a given key-value [pair].

 *

 * The returned map preserves the entry iteration order of the original map.

 * The [pair] is iterated in the end if it has a unique key.

 */",f16823:m1289
43541,fun assertFileExists(file: Path),"{
    assert(Files.exists(file)) { ""File '${file}' does not exist!"" }
    assert(Files.isRegularFile(file)) { ""'${file}' is not a regular file!"" }
}","/**

 * Asserts file under [file] path exists and is a regular file.

 */",f13456:m43
17233,public fun Project.createAllLibrariesModificationTracker(): ModificationTracker,KotlinModificationTrackerFactory.getInstance(this).createLibrariesWideModificationTracker(),"/**

 * Creates a modification tracker which is incremented every time libraries in the project are changed.

 *

 * See [KotlinModificationTrackerFactory] for the definition of **OOBM**.

 * @see ModificationTracker

 */",f5190:m165
56559,@kotlin.internal.InlineOnly public inline fun <T> ReentrantReadWriteLock.write(action: () -> T): T,"{
    contract { callsInPlace(action, InvocationKind.EXACTLY_ONCE) }
    val rl = readLock()
    val readCount = if (writeHoldCount == 0) readHoldCount else 0
    repeat(readCount) { rl.unlock() }
    val wl = writeLock()
    wl.lock()
    try {
        return action()
    } finally {
        repeat(readCount) { rl.lock() }
        wl.unlock()
    }
}","/**

 * Executes the given [action] under the write lock of this lock.

 *

 * The function does upgrade from read to write lock if needed, but this upgrade is not atomic

 * as such upgrade is not supported by [ReentrantReadWriteLock].

 * In order to do such upgrade this function first releases all read locks held by this thread,

 * then acquires write lock, and after releasing it acquires read locks back again.

 *

 * Therefore if the [action] inside write lock has been initiated by checking some condition,

 * the condition must be rechecked inside the [action] to avoid possible races.

 *

 * @return the return value of the action.

 */",f16896:m87
59065,"@SinceKotlin(""1.4"") @OptIn(kotlin.experimental.ExperimentalTypeInference::class) @OverloadResolutionByLambdaReturnType @kotlin.jvm.JvmName(""sumOfInt"") @kotlin.internal.InlineOnly public inline fun CharSequence.sumOf(selector: (Char) -> Int): Int","{
    var sum: Int = 0.toInt()
    for (element in this) {
        sum += selector(element)
    }
    return sum
}","/**

 * Returns the sum of all values produced by [selector] function applied to each character in the char sequence.

 */",f17097:m4281
14170,"@Suppress(""DEPRECATION"") @Deprecated(""ImmutableBlob is deprecated. Use ByteArray instead. To get a stable C pointer to a `ByteArray`, pin it first."") @DeprecatedSinceKotlin(warningSince = ""1.9"") public fun ImmutableBlob.asUCPointer(offset: Int = 0): CPointer<UByteVar>",interpretCPointer<UByteVar>(asCPointerImpl(offset))!!,"/**

 * Returns stable C pointer to data at certain [offset], useful as a way to pass resource

 * to C APIs.

 *

 * `ImmutableBlob` is deprecated since Kotlin 1.9. It is recommended to use `ByteArray` instead.

 * To get a stable C pointer to `ByteArray` data the array needs to be pinned first.

 * ```

 * byteArray.usePinned {

 *     val cpointer = it.addressOf(offset)

 *     // use the stable C pointer

 * }

 * ```

 * @see kotlinx.cinterop.CPointer

 */",f3746:m183
56631,"@SinceKotlin(""1.2"") public fun <T> Iterable<T>.shuffled(random: java.util.Random): List<T>",toMutableList().apply { shuffle(random) },"/**

 * Returns a new list with the elements of this list randomly shuffled

 * using the specified [random] instance as the source of randomness.

 */",f16923:m141
58533,"@SinceKotlin(""1.5"") @WasExperimental(ExperimentalUnsignedTypes::class) public operator fun ULongRange.contains(value: UInt): Boolean","{
    return contains(value.toULong())
}","/**

 * Checks if the specified [value] belongs to this range.

 */",f17090:m489
9856,"inline fun ObjCExportFunctionGenerationContext.convertKotlin(genValue: (Lifetime) -> LLVMValueRef, actualType: IrType, expectedType: IrType, resultLifetime: Lifetime): LLVMValueRef","{
    val conversion = context.getTypeConversion(actualType, expectedType) ?: return genValue(resultLifetime)
    val value = genValue(Lifetime.ARGUMENT)
    return callFromBridge(conversion.owner.llvmFunction, listOf(value), resultLifetime)
}","/**

     * Convert [genValue] of Kotlin type from [actualType] to [expectedType] in a bridge method.

     */",f3387:m753
14993,"@SinceKotlin(""1.4"") @Suppress(""ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS"") public actual fun LongArray.sort(fromIndex: Int = 0, toIndex: Int = size): Unit","{
    AbstractList.checkRangeIndexes(fromIndex, toIndex, size)
    sortArray(this, fromIndex, toIndex)
}","/**

 * Sorts a range in the array in-place.

 * 

 * @param fromIndex the start of the range (inclusive) to sort, 0 by default.

 * @param toIndex the end of the range (exclusive) to sort, size of this array by default.

 * 

 * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.

 * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].

 * 

 * @sample samples.collections.Arrays.Sorting.sortRangeOfArray

 */",f3831:m4851
20146,public fun KtType.approximateToSubPublicDenotable(approximateLocalTypes: Boolean): KtType?,"withValidityAssertion { analysisSession.typeProvider.approximateToSubPublicDenotableType(this, approximateLocalTypes) }","/**

     * Approximates [KtType] with a subtype which can be rendered in a source code

     *

     * Return `null` if the type do not need approximation and can be rendered as is

     * Otherwise, for type `T` return type `S` such `S <: T` and `T` and every type argument is denotable

     */",f5780:m127
20215,public fun <S: KtVariableLikeSymbol> S.substitute(substitutor: KtSubstitutor): KtVariableLikeSignature<S>,"withValidityAssertion { analysisSession.signatureSubstitutor.substitute(this, substitutor) }","/**

     * Applies a [substitutor] to the given symbols and return a signature with substituted types.

     *

     * @see KtSubstitutor.substitute

     */",f5793:m105
19800,"internal fun decompiledText(file: FileWithMetadata.Compatible, serializerProtocol: SerializerExtensionProtocol, flexibleTypeDeserializer: FlexibleTypeDeserializer, renderer: DescriptorRenderer, deserializationConfiguration: DeserializationConfiguration = DeserializationConfiguration.Default): DecompiledText","{
    val packageFqName = file.packageFqName
    val resolver = KlibMetadataDeserializerForDecompiler(packageFqName, file.proto, file.nameResolver, serializerProtocol, flexibleTypeDeserializer, deserializationConfiguration)
    val declarations = arrayListOf<DeclarationDescriptor>()
    declarations.addAll(resolver.resolveDeclarationsInFacade(packageFqName))
    for (classProto in file.classesToDecompile) {
        val classId = file.nameResolver.getClassId(classProto.fqName)
        declarations.addIfNotNull(resolver.resolveTopLevelClass(classId))
    }
    return buildDecompiledText(packageFqName, declarations, renderer)
}","/**

 * This function is extracted for [Fe10KlibMetadataDecompiler], [Fe10KlibMetadataStubBuilder] and [K2KlibMetadataDecompiler].

 * TODO: K2 shouldn't use descriptor renderer for building decompiled text.

 * Note that decompiled text is not used for building stubs in K2.

 * That's why in K2 it is important to preserve declaration order during deserialization to not get PSI vs. stubs mismatch.

 */",f5706:m101
31656,@TypeRefinement override fun refineType(type: KotlinTypeMarker): KotlinType,"{
    require(type is KotlinType)
    if (type.constructor.declarationDescriptor?.module == moduleDescriptor) return type
    return when {
        type.needsRefinementHackForKtij24195() -> doRefineType((type as AbbreviatedType).abbreviation)
        type.needsRefinement() -> doRefineType(type)
        else -> type
    }
}","/**

     * IMPORTANT: that function has not obvious contract: it refines only supertypes,

     *   and don't refines type arguments, so return type is ""partly refined"".

     *

     *   It's fine for subtyping, because we refine type arguments inside type checker when it needs to

     *   It's fine for scopes, because we refine type of every expression:

     *

     *   // common module

     *   expect interface A

     *   class Inv<T>(val value: T)

     *   fun getA(): Inv<A> = ...

     *

     *   // platform module

     *

     *   actual interface A {

     *       val x: Int

     *   }

     *

     *   fun foo() {

     *      getA().value.x

     *   }

     *

     *   Let's call type of `actual interface A` A'

     *

     *   expression `getA()` has not refined type Inv<A> and same refined type

     *   expression `getA().value` has not refined type A that refines into type A', so there is a

     *     field `x` in it's member scope

     */",f10915:m101
17551,fun KtTestModule.publishModificationEventByDirective(isOptional: Boolean = false),"{
    val modificationEventKinds = testModule.directives[ModificationEventDirectives.MODIFICATION_EVENT]
    val modificationEventKind = when (modificationEventKinds.size) {
        0 -> {
            if (isOptional) return
            error(""Expected a `${ModificationEventDirectives.MODIFICATION_EVENT.name}` to be present in the test module `$this`."")
        }
        1 -> modificationEventKinds.single()
        else -> error(""The test module `$this` must not specify multiple modification events."")
    }
    publishModificationEvent(modificationEventKind, ktModule)
}","/**

 * Publishes a modification event as defined in [KotlinTopics][org.jetbrains.kotlin.analysis.providers.topics.KotlinTopics] based on the

 * [ModificationEventDirectives.MODIFICATION_EVENT] directive present in the test module in a write action.

 *

 * Module-level modification events will be published for the [KtTestModule]'s [KtModule].

 *

 * The function expects exactly one `MODIFICATION_EVENT` directive to be present, unless [isOptional] is `true`.

 */",f5259:m109
58065,@kotlin.internal.InlineOnly public inline fun toUInt(): UInt,UInt(data.toInt() and 0xFFFF),"/**

     * Converts this [UShort] value to [UInt].

     *

     * The resulting `UInt` value represents the same numerical value as this `UShort`.

     *

     * The least significant 16 bits of the resulting `UInt` value are the same as the bits of this `UShort` value,

     * whereas the most significant 16 bits are filled with zeros.

     */",f17058:m637
57093,"public inline fun <T> File.useLines(charset: Charset = Charsets.UTF_8, block: (Sequence<String>) -> T): T","{
    contract { callsInPlace(block, InvocationKind.EXACTLY_ONCE) }
    return bufferedReader(charset).use { block(it.lineSequence()) }
}","/**

 * Calls the [block] callback giving it a sequence of all the lines in this file and closes the reader once

 * the processing is complete.



 * @param charset character set to use. By default uses UTF-8 charset.

 * @return the value returned by [block].

 */",f16956:m553
57039,"@Deprecated(""Use readBytes() overload without estimatedSize parameter"", ReplaceWith(""readBytes()"")) @DeprecatedSinceKotlin(warningSince = ""1.3"", errorSince = ""1.5"") public fun InputStream.readBytes(estimatedSize: Int = DEFAULT_BUFFER_SIZE): ByteArray","{
    val buffer = ByteArrayOutputStream(maxOf(estimatedSize, this.available()))
    copyTo(buffer)
    return buffer.toByteArray()
}","/**

 * Reads this stream completely into a byte array.

 *

 * **Note**: It is the caller's responsibility to close this stream.

 */",f16952:m229
58625,"@kotlin.jvm.JvmName(""byteRangeContains"") public operator fun ClosedRange<Byte>.contains(value: Long): Boolean","{
    return value.toByteExactOrNull().let { if (it != null) contains(it) else false }
}","/**

 * Checks if the specified [value] belongs to this range.

 */",f17092:m1203
11892,"@Suppress(""FINAL_UPPER_BOUND"") @ExperimentalForeignApi public fun <T: Long> NativePlacement.alloc(value: T): LongVarOf<T>",alloc<LongVarOf<T>> { this.value = value },"/**

 * Allocates variable with given value type and initializes it with given value.

 */",f3606:m85
48512,fun getSharedLib(buildType: String): SharedLibrary,"getSharedLib("""", buildType)",/** Returns a shared library with the empty name prefix and the given build type. Throws an exception if there is no such binary.*/,f15652:m205
48336,"internal fun <R: HasMutableExtras, T> extrasStoredProperty(initializer: R.() -> T): ReadOnlyProperty<R, T>","StoredLazyProperty(storage = { storedPropertyStorage }, initializer = initializer)","/**

 * Same as [projectStoredProperty], but will allow storing the property on any object implementing [HasMutableExtras]

 */",f15607:m117
56090,public fun <T> MutableCollection<in T>.addAll(elements: Array<out T>): Boolean,"{
    return addAll(elements.asList())
}","/**

 * Adds all elements of the given [elements] array to this [MutableCollection].

 */",f16825:m269
33950,"@Deprecated(""Direct conversion to Char is deprecated. Use toInt().toChar() or Char constructor instead.\nIf you override toChar() function in your Number inheritor, it's recommended to gradually deprecate the overriding function and then remove it.\nSee https://youtrack.jetbrains.com/issue/KT-46465 for details about the migration"", ReplaceWith(""this.toInt().toChar()"")) @DeprecatedSinceKotlin(warningSince = ""1.9"", errorSince = ""2.3"") public open fun toChar(): Char","{
    return toInt().toChar()
}","/**

     * Returns the [Char] with the numeric value equal to this number, truncated to 16 bits if appropriate.

     */",f11217:m85
64218,@kotlin.internal.IntrinsicConstEvaluation public inline operator fun compareTo(other: Float): Int,this.toFloat().compareTo(other),"/**

     * Compares this value with the specified value for order.

     * Returns zero if this value is equal to the specified other value, a negative number if it's less than other,

     * or a positive number if it's greater than other.

     */",f17455:m2903
57183,public actual fun <T> MutableList<T>.reverse(): Unit,"{
    java.util.Collections.reverse(this)
}","/**

 * Reverses elements in the list in-place.

 */",f16967:m77
58880,public fun <T: Any> Sequence<T?>.requireNoNulls(): Sequence<T>,"{
    return map { it ?: throw IllegalArgumentException(""null element found in $this."") }
}","/**

 * Returns an original collection containing all the non-`null` elements, throwing an [IllegalArgumentException] if there are any `null` elements.

 *

 * The operation is _intermediate_ and _stateless_.

 */",f17096:m5139
63173,"public actual fun <T> lazy(mode: LazyThreadSafetyMode, initializer: () -> T): Lazy<T>",UnsafeLazyImpl(initializer),"/**

 * Creates a new instance of the [Lazy] that uses the specified initialization function [initializer].

 *

 * The [mode] parameter is ignored. */",f17312:m25
55653,"@ExperimentalStdlibApi private fun String.hexToByteArray(startIndex: Int = 0, endIndex: Int = length, format: HexFormat = HexFormat.Default): ByteArray","{
    AbstractList.checkBoundsIndexes(startIndex, endIndex, length)
    if (startIndex == endIndex) {
        return byteArrayOf()
    }
    val bytesFormat = format.bytes
    if (bytesFormat.noLineAndGroupSeparator) {
        hexToByteArrayNoLineAndGroupSeparator(startIndex, endIndex, bytesFormat)?.let { return it }
    }
    return hexToByteArraySlowPath(startIndex, endIndex, bytesFormat)
}","/**

 * Parses bytes from this string using the specified [HexFormat].

 *

 * Note that only [HexFormat.BytesHexFormat] affects parsing,

 * and parsing is performed in case-insensitive manner.

 * Also, any of the char sequences CRLF, LF and CR is considered a valid line separator.

 *

 * @param startIndex the beginning (inclusive) of the substring to parse, 0 by default.

 * @param endIndex the end (exclusive) of the substring to parse, length of this string by default.

 * @param format the [HexFormat] to use for parsing, [HexFormat.Default] by default.

 *

 * @throws IndexOutOfBoundsException when [startIndex] or [endIndex] is out of range of this string indices.

 * @throws IllegalArgumentException when `startIndex > endIndex`.

 * @throws IllegalArgumentException if the substring does not comply with the specified [format].

 */",f16779:m671
24127,"fun get(annotated: Annotated, config: LombokConfig): T","extract(annotated.annotations.findAnnotation(annotationName), config)","/**

     * Get from annotation or config or default

     */",f9118:m69
48508,fun findStaticLib(buildType: String): StaticLibrary?,"findStaticLib("""", buildType)",/** Returns a static library with the empty name prefix and the given build type. Returns null if there is no such binary. */,f15652:m179
55642,"@ExperimentalStdlibApi @SinceKotlin(""1.9"") public fun ByteArray.toHexString(startIndex: Int = 0, endIndex: Int = size, format: HexFormat = HexFormat.Default): String","{
    AbstractList.checkBoundsIndexes(startIndex, endIndex, size)
    if (startIndex == endIndex) {
        return """"
    }
    val byteToDigits = if (format.upperCase) BYTE_TO_UPPER_CASE_HEX_DIGITS else BYTE_TO_LOWER_CASE_HEX_DIGITS
    val bytesFormat = format.bytes
    if (bytesFormat.noLineAndGroupSeparator) {
        return toHexStringNoLineAndGroupSeparator(startIndex, endIndex, bytesFormat, byteToDigits)
    }
    return toHexStringSlowPath(startIndex, endIndex, bytesFormat, byteToDigits)
}","/**

 * Formats bytes in this array using the specified [HexFormat].

 *

 * Note that only [HexFormat.upperCase] and [HexFormat.BytesHexFormat] affect formatting.

 *

 * @param startIndex the beginning (inclusive) of the subrange to format, 0 by default.

 * @param endIndex the end (exclusive) of the subrange to format, size of this array by default.

 * @param format the [HexFormat] to use for formatting, [HexFormat.Default] by default.

 *

 * @throws IndexOutOfBoundsException when [startIndex] or [endIndex] is out of range of this array indices.

 * @throws IllegalArgumentException when `startIndex > endIndex`.

 * @throws IllegalArgumentException if the result length is more than [String] maximum capacity.

 */",f16779:m145
58501,"@SinceKotlin(""1.4"") @OptIn(kotlin.experimental.ExperimentalTypeInference::class) @OverloadResolutionByLambdaReturnType @kotlin.internal.InlineOnly public inline fun <K, V> Map<out K, V>.minOfOrNull(selector: (Map.Entry<K, V>) -> Float): Float?","{
    return entries.minOfOrNull(selector)
}","/**

 * Returns the smallest value among all values produced by [selector] function

 * applied to each entry in the map or `null` if there are no entries.

 * 

 * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.

 */",f17089:m929
63371,"@Suppress(""UNCHECKED_CAST"") public actual fun <R, T> (suspend R.() -> T).createCoroutineUnintercepted(receiver: R, completion: Continuation<T>): Continuation<Unit>","{
    return createCoroutineFromSuspendFunction(completion) { this.startCoroutineUninterceptedOrReturn(receiver, completion) }
}","/**

 * Creates unintercepted coroutine with receiver type [R] and result type [T].

 * This function creates a new, fresh instance of suspendable computation every time it is invoked.

 *

 * To start executing the created coroutine, invoke `resume(Unit)` on the returned [Continuation] instance.

 * The [completion] continuation is invoked when coroutine completes with result or exception.

 *

 * This function returns unintercepted continuation.

 * Invocation of `resume(Unit)` starts coroutine immediately in the invoker's call stack without going through the

 * [ContinuationInterceptor] that might be present in the completion's [CoroutineContext].

 * It is the invoker's responsibility to ensure that a proper invocation context is established.

 * Note that [completion] of this function may get invoked in an arbitrary context.

 *

 * [Continuation.intercepted] can be used to acquire the intercepted continuation.

 * Invocation of `resume(Unit)` on intercepted continuation guarantees that execution of

 * both the coroutine and [completion] happens in the invocation context established by

 * [ContinuationInterceptor].

 *

 * Repeated invocation of any resume function on the resulting continuation corrupts the

 * state machine of the coroutine and may result in arbitrary behaviour or exception.

 */",f17386:m183
63648,"@SinceKotlin(""1.1"") @kotlin.internal.InlineOnly public actual inline fun minOf(a: Byte, b: Byte, c: Byte): Byte","{
    return minOf(a.toInt(), minOf(b.toInt(), c.toInt())).toByte()
}","/**

 * Returns the smaller of three values.

 */",f17406:m623
21678,"private fun createGenericTypeQualifierCallIfApplicable(firElement: FirElement, psiElement: KtElement): KtCallInfo?","{
    if (psiElement !is KtExpression) return null
    if (firElement !is FirResolvedQualifier) return null
    val call = psiElement.getPossiblyQualifiedCallExpression() ?: return null
    if (call.typeArgumentList == null || call.valueArgumentList != null) return null
    val parentReferenceExpression = psiElement.parent as? KtDoubleColonExpression ?: return null
    if (parentReferenceExpression.lhs != psiElement) return null
    return KtSuccessCallInfo(KtGenericTypeQualifier(token, psiElement))
}","/**

     * Resolves call expressions like `Foo<Bar>` or `test.Foo<Bar>` in calls like `Foo<Bar>::foo`, `test.Foo<Bar>::foo` and class literals like `Foo<Bar>`::class.java.

     *

     * We have a separate [KtGenericTypeQualifier] type of [KtCall].

     */",f8624:m547
58527,"@SinceKotlin(""1.5"") @WasExperimental(ExperimentalStdlibApi::class, ExperimentalUnsignedTypes::class) public fun UIntRange.randomOrNull(random: Random): UInt?","{
    if (isEmpty()) return null
    return random.nextUInt(this)
}","/**

 * Returns a random element from this range using the specified source of randomness, or `null` if this range is empty.

 */",f17090:m361
55786,"@ExperimentalUnsignedTypes internal fun sortArray(array: UByteArray, fromIndex: Int, toIndex: Int)","quickSort(array, fromIndex, toIndex - 1)","/**

 * Sorts the given array using qsort algorithm.

 */",f16808:m283
61705,public fun JsAny.toThrowableOrNull(): Throwable?,"{
    val thisAny: Any = this
    if (thisAny is Throwable) return thisAny
    var result: Throwable? = null
    jsCatch { try {
        jsThrow(this)
    } catch (e: Throwable) {
        result = e
    } }
    return result
}","/**

 * For a Dynamic value caught in JS, returns the corresponding [Throwable]

 * if it was thrown from Kotlin, or null otherwise.

 */",f17253:m89
56214,"@SinceKotlin(""1.4"") @kotlin.internal.InlineOnly public inline fun Short.countTrailingZeroBits(): Int",(toInt() or 0x10000).countTrailingZeroBits(),"/**

 * Counts the number of consecutive least significant bits that are zero in the binary representation of this [Short] number.

 */",f16841:m429
58121,@kotlin.internal.InlineOnly public inline fun toULong(): ULong,ULong(data.toLong() and 0xFF),"/**

     * Converts this [UByte] value to [ULong].

     *

     * The resulting `ULong` value represents the same numerical value as this `UByte`.

     *

     * The least significant 8 bits of the resulting `ULong` value are the same as the bits of this `UByte` value,

     * whereas the most significant 56 bits are filled with zeros.

     */",f17059:m655
50108,"fun runMetadataCompilerAsync(args: K2MetadataCompilerArguments, environment: GradleCompilerEnvironment): WorkQueue?","{
    return runCompilerAsync(KotlinCompilerClass.METADATA, args, environment)
}","/**

     * Compiler might be executed asynchronously. Do not do anything requiring end of compilation after this function is called.

     * @see [GradleKotlinCompilerWork]

     */",f16053:m291
14952,"@SinceKotlin(""1.3"") @Suppress(""ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS"") public actual fun CharArray.fill(element: Char, fromIndex: Int = 0, toIndex: Int = size): Unit","{
    arrayFill(this, fromIndex, toIndex, element)
}","/**

 * Fills this array or its subrange with the specified [element] value.

 * 

 * @param fromIndex the start of the range (inclusive) to fill, 0 by default.

 * @param toIndex the end of the range (exclusive) to fill, size of this array by default.

 * 

 * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.

 * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].

 */",f3831:m3951
56545,"@kotlin.internal.InlineOnly public inline fun Timer.schedule(delay: Long, period: Long, crossinline action: TimerTask.() -> Unit): TimerTask","{
    val task = timerTask(action)
    schedule(task, delay, period)
    return task
}","/**

 * Schedules an [action] to be executed periodically, starting after the specified [delay] (expressed

 * in milliseconds) and with the interval of [period] milliseconds between the end of the previous task

 * and the start of the next one.

 */",f16894:m65
50507,"@Test fun `when compileOnly dependency is defined in commonTest, expect no warning`()","{
    val project = setupKmpProject { kotlin { sourceSets.apply { commonTest { dependencies { compileOnly(""org.jetbrains.kotlinx:atomicfu:latest.release"") } } } } }
    project.runLifecycleAwareTest {
        val diagnostics = kotlinToolingDiagnosticsCollector.getDiagnosticsForProject(this)
        diagnostics.assertNoDiagnostics(IncorrectCompileOnlyDependencyWarning)
    }
}","/**

     * The `compileOnly()` warning is only relevant for 'published' compilations.

     *

     * Verify `compileOnly()` dependencies in test sources do not trigger the warning.

     */",f16119:m111
64200,@kotlin.internal.IntrinsicConstEvaluation public override fun toByte(): Byte,((this shl 24) shr 24).reinterpretAsByte(),"/**

     * Converts this [Int] value to [Byte].

     *

     * If this value is in [Byte.MIN_VALUE]..[Byte.MAX_VALUE], the resulting `Byte` value represents

     * the same numerical value as this `Int`.

     *

     * The resulting `Byte` value is represented by the least significant 8 bits of this `Int` value.

     */",f17455:m2565
30614,fun <T> Collection<T>.bfs(getNeighbors: (T) -> Iterator<T>): Sequence<T>,"{
    val queue = ArrayDeque(this)
    val visited = mutableSetOf<T>()
    return sequence { while (queue.isNotEmpty()) {
        val current = queue.removeFirst()
        if (current in visited) continue
        visited.add(current)
        yield(current)
        getNeighbors(current).forEach(queue::add)
    } }
}","/**

 * Perform BFS on the given collection with neighbors created by the given function.

 */",f10743:m15
1330,suspend fun release(),"{
    logger.fine { ""Releasing $this"" }
    webSocketSession?.close()
    webSocketSession = null
    webSocketClient.close()
    nodeProcess.destroy()
}","/**

     * Releases all the resources and destroys the Node.js process.

     */",f337:m515
29397,private fun AnnotationVisitor.visitKotlinMetadata(header: Metadata),"{
    visit(KIND_FIELD_NAME, header.kind)
    visit(METADATA_VERSION_FIELD_NAME, header.metadataVersion)
    if (header.data1.isNotEmpty()) {
        visitArray(METADATA_DATA_FIELD_NAME).apply {
            header.data1.forEach { visit(null, it) }
            visitEnd()
        }
    }
    if (header.data2.isNotEmpty()) {
        visitArray(METADATA_STRINGS_FIELD_NAME).apply {
            header.data2.forEach { visit(null, it) }
            visitEnd()
        }
    }
    if (header.extraString.isNotEmpty()) {
        visit(METADATA_EXTRA_STRING_FIELD_NAME, header.extraString)
    }
    if (header.packageName.isNotEmpty()) {
        visit(METADATA_PACKAGE_NAME_FIELD_NAME, header.packageName)
    }
    if (header.extraInt != 0) {
        visit(METADATA_EXTRA_INT_FIELD_NAME, header.extraInt)
    }
    visitEnd()
}","/**

 * Serialize a KotlinClassHeader to an existing Kotlin Metadata annotation visitor.

 */",f10310:m263
15017,"@SinceKotlin(""1.1"") @kotlin.internal.InlineOnly public actual inline fun maxOf(a: Short, b: Short): Short","{
    return maxOf(a.toInt(), b.toInt()).toShort()
}","/**

 * Returns the greater of two values.

 */",f3836:m65
17401,"public fun <T> strongCachedValue(vararg dependencies: ModificationTracker, compute: () -> T): StrongRefModificationTrackerBasedCache<T>","StrongRefModificationTrackerBasedCache(dependencies.toList(), compute)","/**

 * Create modification tracker which will be invalidated when dependencies change.

 * The cached value is hold on the strong reference.

 * So, the value will not be garbage collected until modification tracker changes.

 */",f5224:m81
58776,"public inline fun <T, K, V> Sequence<T>.associate(transform: (T) -> Pair<K, V>): Map<K, V>","{
    return associateTo(LinkedHashMap<K, V>(), transform)
}","/**

 * Returns a [Map] containing key-value pairs provided by [transform] function

 * applied to elements of the given sequence.

 * 

 * If any of two pairs would have the same key the last one gets added to the map.

 * 

 * The returned map preserves the entry iteration order of the original sequence.

 *

 * The operation is _terminal_.

 * 

 * @sample samples.collections.Collections.Transformations.associate

 */",f17096:m1297
14989,"@SinceKotlin(""1.4"") @Suppress(""ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS"") public actual fun <T: Comparable<T>> Array<out T>.sort(fromIndex: Int = 0, toIndex: Int = size): Unit","{
    AbstractList.checkRangeIndexes(fromIndex, toIndex, size)
    sortArray(this, fromIndex, toIndex)
}","/**

 * Sorts a range in the array in-place.

 * 

 * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.

 * 

 * @param fromIndex the start of the range (inclusive) to sort, 0 by default.

 * @param toIndex the end of the range (exclusive) to sort, size of this array by default.

 * 

 * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.

 * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].

 * 

 * @sample samples.collections.Arrays.Sorting.sortRangeOfArrayOfComparable

 */",f3831:m4703
57521,"@SinceKotlin(""1.4"") @OptIn(kotlin.experimental.ExperimentalTypeInference::class) @OverloadResolutionByLambdaReturnType @Suppress(""INAPPLICABLE_JVM_NAME"") @kotlin.jvm.JvmName(""sumOfBigInteger"") @ExperimentalUnsignedTypes @kotlin.internal.InlineOnly public inline fun ULongArray.sumOf(selector: (ULong) -> java.math.BigInteger): java.math.BigInteger","{
    var sum: java.math.BigInteger = 0.toBigInteger()
    for (element in this) {
        sum += selector(element)
    }
    return sum
}","/**

 * Returns the sum of all values produced by [selector] function applied to each element in the array.

 */",f16971:m1203
14954,public actual operator fun ByteArray.plus(element: Byte): ByteArray,"{
    val index = size
    val result = copyOfUninitializedElements(index + 1)
    result[index] = element
    return result
}","/**

 * Returns an array containing all elements of the original array and then the given [element].

 */",f3831:m4001
15375,@Test fun absD(),"{
    assertTrue(""Incorrect Double abs value"", abs(-1908.8976) == 1908.8976)
    assertTrue(""Incorrect Double abs value"", abs(1908.8976) == 1908.8976)
}","/**

     * Tests kotlin.math.abs(Double)

     */",f3868:m135
10465,"fun addPropagate(c: Constraint, mark: Int): Boolean","{
    val todo = OrderedCollection<Constraint>()
    todo.add(c)
    while (todo.size() > 0) {
        var d = todo.removeFirst()
        if (d.output().mark == mark) {
            incrementalRemove(c)
            return false
        }
        d.recalculate()
        addConstraintsConsumingTo(d.output(), todo)
    }
    return true
}","/**

   * Recompute the walkabout strengths and stay flags of all variables

   * downstream of the given constraint and recompute the actual

   * values of all variables whose stay flag is true. If a cycle is

   * detected, remove the given constraint and answer

   * false. Otherwise, answer true.

   * Details: Cycles are detected when a marked variable is

   * encountered downstream of the given constraint. The sender is

   * assumed to have marked the inputs of the given constraint with

   * the given mark. Thus, encountering a marked node downstream of

   * the output constraint means that there is a path from the

   * constraint's output to one of its inputs.

   */",f3476:m1223
14896,"@SinceKotlin(""1.3"") @Suppress(""ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS"") public actual fun DoubleArray.copyInto(destination: DoubleArray, destinationOffset: Int = 0, startIndex: Int = 0, endIndex: Int = size): DoubleArray","{
    arrayCopy(this, startIndex, destination, destinationOffset, endIndex - startIndex)
    return destination
}","/**

 * Copies this array or its subrange into the [destination] array and returns that array.

 * 

 * It's allowed to pass the same array in the [destination] and even specify the subrange so that it overlaps with the destination range.

 * 

 * @param destination the array to copy to.

 * @param destinationOffset the position in the [destination] array to copy to, 0 by default.

 * @param startIndex the beginning (inclusive) of the subrange to copy, 0 by default.

 * @param endIndex the end (exclusive) of the subrange to copy, size of this array by default.

 * 

 * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of this array indices or when `startIndex > endIndex`.

 * @throws IndexOutOfBoundsException when the subrange doesn't fit into the [destination] array starting at the specified [destinationOffset],

 * or when that index is out of the [destination] array indices range.

 * 

 * @return the [destination] array.

 */",f3831:m2475
59077,"@SinceKotlin(""1.2"") public fun CharSequence.windowedSequence(size: Int, step: Int = 1, partialWindows: Boolean = false): Sequence<String>","{
    return windowedSequence(size, step, partialWindows) { it.toString() }
}","/**

 * Returns a sequence of snapshots of the window of the given [size]

 * sliding along this char sequence with the given [step], where each

 * snapshot is a string.

 * 

 * Several last strings may have fewer characters than the given [size].

 * 

 * Both [size] and [step] must be positive and can be greater than the number of elements in this char sequence.

 * @param size the number of elements to take in each window

 * @param step the number of elements to move the window forward by on an each step, by default 1

 * @param partialWindows controls whether or not to keep partial windows in the end if any,

 * by default `false` which means partial windows won't be preserved

 * 

 * @sample samples.collections.Sequences.Transformations.takeWindows

 */",f17097:m4731
52472,"override fun tryToMatch(startIndex: Int, testString: CharSequence, matchResult: MatchResultImpl): Int","{
    children.forEach {
        val shift = it.matches(startIndex, testString, matchResult)
        if (shift >= 0) {
            return next.matches(startIndex, testString, matchResult)
        }
    }
    return -1
}","/** Returns startIndex+shift, the next position to match */",f16517:m59
56616,"@kotlin.internal.InlineOnly @SinceKotlin(""1.2"") public inline fun <T> MutableList<T>.shuffle(random: java.util.Random)","{
    java.util.Collections.shuffle(this, random)
}","/**

 * Randomly shuffles elements in this mutable list using the specified [random] instance as the source of randomness.

 */",f16918:m131
58549,"@SinceKotlin(""1.5"") @WasExperimental(ExperimentalUnsignedTypes::class) public fun UInt.coerceAtLeast(minimumValue: UInt): UInt","{
    return if (this < minimumValue) minimumValue else this
}","/**

 * Ensures that this value is not less than the specified [minimumValue].

 * 

 * @return this value if it's greater than or equal to the [minimumValue] or the [minimumValue] otherwise.

 * 

 * @sample samples.comparisons.ComparableOps.coerceAtLeastUnsigned

 */",f17090:m837
21965,"private fun KtAnalysisSession.isPossiblySuperTypeOf(type: KtType, actualReceiverType: KtType): Boolean","{
    if (actualReceiverType is KtTypeParameterType) return false
    if (type is KtTypeParameterType) {
        return type.symbol.upperBounds.all { isPossiblySuperTypeOf(it, actualReceiverType) }
    }
    val receiverExpanded = actualReceiverType.expandedClassSymbol
    val expectedExpanded = type.expandedClassSymbol
    if (receiverExpanded != null && receiverExpanded == expectedExpanded) {
        return true
    }
    return actualReceiverType.isSubTypeOf(type)
}","/**

     * Same constraints as in [canBeReferencedAsExtensionOn].

     *

     * For a similar function in the `intellij` repository, see `isPossiblySubTypeOf`.

     */",f8670:m713
20169,public fun analyseImports(file: KtFile): KtImportOptimizerResult,withValidityAssertion { return analysisSession.importOptimizer.analyseImports(file) },"/**

     * Takes [file] and inspects its imports and their usages,

     * so they can be optimized based on the resulting [KtImportOptimizerResult].

     *

     * Does **not** change the file.

     */",f5783:m39
57046,@kotlin.internal.InlineOnly public inline fun print(message: Char),"{
    System.out.print(message)
}",/** Prints the given [message] to the standard output stream. */,f16953:m93
20166,"public fun KtClassOrObject.calculateMetadata(mapping: Multimap<KtElement, PsiElement>): Metadata","withValidityAssertion { analysisSession.metadataCalculator.calculateMetadata(this, mapping) }","/**

     * Calculates metadata that would be generated by the compiler in case this class was compiled to the JVM class file.

     *

     * @param mapping map containing the light elements ([KtLightElement]) for each callable declaration in this class.

     */",f5781:m49
55669,"@ExperimentalStdlibApi @SinceKotlin(""1.9"") public fun Int.toHexString(format: HexFormat = HexFormat.Default): String","{
    val digits = if (format.upperCase) UPPER_CASE_HEX_DIGITS else LOWER_CASE_HEX_DIGITS
    val numberFormat = format.number
    if (numberFormat.isDigitsOnly) {
        val charArray = CharArray(8)
        val value = this
        charArray[0] = digits[(value shr 28) and 0xF]
        charArray[1] = digits[(value shr 24) and 0xF]
        charArray[2] = digits[(value shr 20) and 0xF]
        charArray[3] = digits[(value shr 16) and 0xF]
        charArray[4] = digits[(value shr 12) and 0xF]
        charArray[5] = digits[(value shr 8) and 0xF]
        charArray[6] = digits[(value shr 4) and 0xF]
        charArray[7] = digits[value and 0xF]
        return if (numberFormat.removeLeadingZeros) charArray.concatToString(startIndex = (countLeadingZeroBits() shr 2).coerceAtMost(7)) else charArray.concatToString()
    }
    return toLong().toHexStringImpl(numberFormat, digits, bits = 32)
}","/**

 * Formats this `Int` value using the specified [format].

 *

 * Note that only [HexFormat.upperCase] and [HexFormat.NumberHexFormat] affect formatting.

 *

 * @param format the [HexFormat] to use for formatting, [HexFormat.Default] by default.

 */",f16779:m1463
16768,private fun FirElementWithResolveState.shouldBeResolved(),"when (this) {
    is FirDeclaration -> shouldBeResolved()
    else -> throwUnexpectedFirElementError(this)
}","/**

     * @see isLazyResolvable

     */",f4165:m127
56554,@kotlin.internal.InlineOnly public inline fun timerTask(crossinline action: TimerTask.() -> Unit): TimerTask,"object : TimerTask() {
    override fun run() = action()
}","/**

 * Wraps the specified [action] in a [TimerTask].

 */",f16894:m283
58867,"@SinceKotlin(""1.4"") public fun <T, R> Sequence<T>.runningFold(initial: R, operation: (acc: R, T) -> R): Sequence<R>","{
    return sequence {
        yield(initial)
        var accumulator = initial
        for (element in this@runningFold) {
            accumulator = operation(accumulator, element)
            yield(accumulator)
        }
    }
}","/**

 * Returns a sequence containing successive accumulation values generated by applying [operation] from left to right

 * to each element and current accumulator value that starts with [initial] value.

 * 

 * Note that `acc` value passed to [operation] function should not be mutated;

 * otherwise it would affect the previous value in resulting sequence.

 * The [initial] value should also be immutable (or should not be mutated)

 * as it may be passed to [operation] function later because of sequence's lazy nature.

 * 

 * @param [operation] function that takes current accumulator value and an element, and calculates the next accumulator value.

 *

 * The operation is _intermediate_ and _stateless_.

 * 

 * @sample samples.collections.Collections.Aggregates.runningFold

 */",f17096:m4585
57243,public actual fun CharArray.asList(): List<Char>,"{
    return object : AbstractList<Char>(), RandomAccess {
        override val size: Int get() = this@asList.size
    
        override fun isEmpty(): Boolean = this@asList.isEmpty()
    
        override fun contains(element: Char): Boolean = this@asList.contains(element)
    
        override fun get(index: Int): Char = this@asList[index]
    
        override fun indexOf(element: Char): Int = this@asList.indexOf(element)
    
        override fun lastIndexOf(element: Char): Int = this@asList.lastIndexOf(element)
    }
}","/**

 * Returns a [List] that wraps the original array.

 */",f16970:m467
7546,fun writeTextToFile(),"{
    Paths.get(path).takeUnless { text.isEmpty() }?.run {
        parent.toFile().takeUnless { it.exists() }?.mkdirs()
        toFile().writeText(text)
    }
}","/**

     * Writes [text] to the file created from the [path].

     */",f3117:m323
14055,public fun getAndDecrement(): Int,this::value.getAndAddField(-1),"/**

     * Atomically decrements the current value by one and returns the old value.

     */",f3718:m133
20163,public fun KtType.getArrayElementType(): KtType?,withValidityAssertion { analysisSession.typeProvider.getArrayElementType(this) },"/**

     * If provided [KtType] is a primitive type array or [Array], returns the type of the array's elements. Otherwise, returns null.

     */",f5780:m333
49397,private suspend fun Project.setupPreMultiplatformStableDefaultDependsOnEdges(),"multiplatformExtension.targets.flatMap { target -> target.compilations }.forEach { compilation ->
    val sourceSetTree = KotlinSourceSetTree.orNull(compilation) ?: return@forEach
    val commonSourceSetName = lowerCamelCaseName(""common"", sourceSetTree.name)
    val commonSourceSet = multiplatformExtension.sourceSets.findByName(commonSourceSetName) ?: return@forEach
    compilation.defaultSourceSet.dependsOn(commonSourceSet)
}","/**

 * Before 1.9.20 (and without any targetHierarchy applied), we just added default dependsOn

 * edges from 'main' compilations defaultSourceSets to 'commonMain' and

 * edges from 'test' compilations defaultSourceSets to 'commonTest

 */",f15851:m191
56455,public fun hasPassedNow(): Boolean,!elapsedNow().isNegative(),"/**

     * Returns true if this time mark has passed according to the time source from which this mark was taken.

     *

     * Note that the value returned by this function can change on subsequent invocations.

     * If the time source is monotonic, it can change only from `false` to `true`, namely, when the time mark becomes behind the current point of the time source.

     */",f16867:m315
23426,private fun IrStatementsBuilder<*>.addAndGetLastExpression(blockBuilder: IrBlockBodyBuilder.() -> Unit): IrExpression,"{
    val irBlockBody = irBlockBody(startOffset, endOffset, blockBuilder)
    irBlockBody.statements.dropLast(1).forEach { +it }
    return irBlockBody.statements.last() as? IrExpression ?: error(""Last statement in property initializer builder is not an a expression"")
}","/**

     * Add all statements to the builder, except the last one.

     * The last statement should be an expression, it will return as a result

     */",f8978:m389
55760,"@SinceKotlin(""1.6"") @WasExperimental(ExperimentalStdlibApi::class) public inline fun <reified T> typeOf(): KType","throw UnsupportedOperationException(""This function is implemented as an intrinsic on all supported platforms."")","/**

 * Returns a runtime representation of the given reified type [T] as an instance of [KType].

 *

 * Note that on JVM, the created type has no annotations ([KType.annotations] returns an empty list)

 * even if the type in the source code is annotated. Support for type annotations might be added in a future version.

 */",f16795:m15
58153,@kotlin.internal.InlineOnly public inline operator fun times(other: UByte): UInt,this.times(other.toUInt()),/** Multiplies this value by the other value. */,f17063:m199
43580,fun BuildResult.assertKotlinDaemonJvmOptions(expectedJvmArgs: List<String>),"{
    val jvmArgsCommonMessage = ""Kotlin compile daemon JVM options: ""
    assertOutputContains(jvmArgsCommonMessage)
    val argsRegex = ""\\[.+?]"".toRegex()
    val argsStrings = output.lineSequence().filter { it.contains(jvmArgsCommonMessage) }.map { argsRegex.findAll(it).last().value.removePrefix(""["").removeSuffix(""]"").split("", "") }
    val containsArgs = argsStrings.any { it.containsAll(expectedJvmArgs) }
    assert(containsArgs) {
        printBuildOutput()
        ""${argsStrings.toList()} does not contain expected args: $expectedJvmArgs""
    }
}","/**

 * Asserts compilation is running via Kotlin daemon with given jvm arguments.

 */",f13457:m371
10025,"private fun produceBinary(engine: PhaseEngine<PhaseContext>, config: KonanConfig, environment: KotlinCoreEnvironment)","{
    val frontendOutput = engine.runFrontend(config, environment) ?: return
    val psiToIrOutput = engine.runPsiToIr(frontendOutput, isProducingLibrary = false)
    require(psiToIrOutput is PsiToIrOutput.ForBackend)
    val backendContext = createBackendContext(config, frontendOutput, psiToIrOutput)
    engine.runBackend(backendContext, psiToIrOutput.irModule)
}","/**

     * Produce a single binary artifact.

     */",f3405:m309
14014,@kotlin.internal.InlineOnly public actual inline fun String.toShort(): Short,toShortOrNull() ?: throw NumberFormatException(),"/**

 * Parses the string as a [Short] number and returns the result.

 * @throws NumberFormatException if the string is not a valid representation of a number.

 */",f3714:m159
54832,"@SinceKotlin(""1.1"") @kotlin.internal.InlineOnly public actual inline fun minOf(a: Double, b: Double, c: Double): Double","{
    return JsMath.min(a, b, c)
}","/**

 * Returns the smaller of three values.

 * 

 * If any value is `NaN`, returns `NaN`.

 */",f16714:m703
56769,"private fun retainOrRemoveAllInternal(rangeOffset: Int, rangeLength: Int, elements: Collection<E>, retain: Boolean): Int","{
    var i = 0
    var j = 0
    while (i < rangeLength) {
        if (elements.contains(backing[rangeOffset + i]) == retain) {
            backing[rangeOffset + j++] = backing[rangeOffset + i++]
        } else {
            i++
        }
    }
    val removed = rangeLength - j
    backing.copyInto(backing, startIndex = rangeOffset + rangeLength, endIndex = length, destinationOffset = rangeOffset + j)
    backing.resetRange(fromIndex = length - removed, toIndex = length)
    if (removed > 0) registerModification()
    length -= removed
    return removed
}",/** Retains elements if [retain] == true and removes them it [retain] == false. */,f16926:m461
43558,"fun assertFileContains(file: Path, vararg expectedText: String): String","{
    return assertFilesCombinedContains(listOf(file), *expectedText)
}","/**

 * Asserts file under [file] exists and contains all the lines from [expectedText]

 *

 * @return the content of the [file]

 */",f13456:m439
56390,"@SinceKotlin(""1.5"") @WasExperimental(ExperimentalUnsignedTypes::class) public fun Random.nextULong(range: ULongRange): ULong","when {
    range.isEmpty() -> throw IllegalArgumentException(""Cannot get random in empty range: $range"")
    range.last < ULong.MAX_VALUE -> nextULong(range.first, range.last + 1u)
    range.first > ULong.MIN_VALUE -> nextULong(range.first - 1u, range.last) + 1u
    else -> nextULong()
}","/**

 * Gets the next random [ULong] from the random number generator in the specified [range].

 *

 * Generates a [ULong] random value uniformly distributed in the specified [range]:

 * from `range.start` inclusive to `range.endInclusive` inclusive.

 *

 * @throws IllegalArgumentException if [range] is empty.

 */",f16860:m207
58649,public infix fun Long.downTo(to: Int): LongProgression,"{
    return LongProgression.fromClosedRange(this, to.toLong(), -1L)
}","/**

 * Returns a progression from this value down to the specified [to] value with the step -1.

 * 

 * The [to] value should be less than or equal to `this` value.

 * If the [to] value is greater than `this` value the returned progression is empty.

 */",f17092:m1651
10430,override fun chooseMethod(mark: Int),"{
    satisfied = (myOutput.mark != mark) && Strength.stronger(strength, myOutput.walkStrength)
}","/**

   * Decides if this constraint can be satisfied and records that

   * decision.

   */",f3476:m393
24807,"fun <T> siblings(part: String, block: () -> T): T",enter(part) { siblings(block) },"/**

     * Enter into a new scope with path part [part] and assume entered paths to be children of

     * that path.

     *

     * This is shorthand for `enter(part) { siblings(block) } }`.

     */",f9214:m249
59052,"public inline fun CharSequence.reduceRight(operation: (Char, acc: Char) -> Char): Char","{
    var index = lastIndex
    if (index < 0) throw UnsupportedOperationException(""Empty char sequence can't be reduced."")
    var accumulator = get(index--)
    while (index >= 0) {
        accumulator = operation(get(index--), accumulator)
    }
    return accumulator
}","/**

 * Accumulates value starting with the last character and applying [operation] from right to left

 * to each character and current accumulator value.

 * 

 * Throws an exception if this char sequence is empty. If the char sequence can be empty in an expected way,

 * please use [reduceRightOrNull] instead. It returns `null` when its receiver is empty.

 * 

 * @param [operation] function that takes a character and current accumulator value,

 * and calculates the next accumulator value.

 * 

 * @sample samples.collections.Collections.Aggregates.reduceRight

 */",f17097:m3763
13935,"@SinceKotlin(""1.4"") public actual fun Long.takeHighestOneBit(): Long",if (this == 0L) 0L else 1L.shl(64 - 1 - countLeadingZeroBits(this)),"/**

 * Returns a number having a single bit set in the position of the most significant set bit of this [Long] number,

 * or zero, if this number is zero.

 */",f3706:m451
56879,"@kotlin.internal.InlineOnly public inline fun assert(value: Boolean, lazyMessage: () -> Any)","{
    if (_Assertions.ENABLED) {
        if (!value) {
            val message = lazyMessage()
            throw AssertionError(message)
        }
    }
}","/**

 * Throws an [AssertionError] calculated by [lazyMessage] if the [value] is false

 * and runtime assertions have been enabled on the JVM using the *-ea* JVM option.

 */",f16931:m51
58588,"@SinceKotlin(""1.4"") public fun IntRange.randomOrNull(random: Random): Int?","{
    if (isEmpty()) return null
    return random.nextInt(this)
}","/**

 * Returns a random element from this range using the specified source of randomness, or `null` if this range is empty.

 */",f17092:m505
64280,@kotlin.internal.IntrinsicConstEvaluation public inline operator fun compareTo(other: Short): Int,this.compareTo(other.toFloat()),"/**

     * Compares this value with the specified value for order.

     * Returns zero if this value is equal to the specified other value, a negative number if it's less than other,

     * or a positive number if it's greater than other.

     */",f17455:m3863
57295,@kotlin.internal.InlineOnly public actual inline fun <T> Array<T>.copyOf(): Array<T>,"{
    return java.util.Arrays.copyOf(this, size)
}","/**

 * Returns new array which is a copy of the original array.

 * 

 * @sample samples.collections.Arrays.CopyOfOperations.copyOf

 */",f16970:m2239
30796,fun TargetPlatform?.isCommon(): Boolean,"isMultiPlatform() && this!!.iterator().let { i ->
    val firstPlatformName = i.next().platformName
    while (i.hasNext()) {
        if (i.next().platformName != firstPlatformName) return@let true
    }
    false
}","/**

 * Whether this is ""Common"" platform in its classical sense (MPP v1).

 */",f10777:m183
49530,"private fun processDependency(dependency: ResolvedDependencyResult, sourceSetsVisibleInParents: Set<String>): MetadataDependencyResolution","{
    val module = dependency.selected
    val moduleId = module.id
    val compositeMetadataArtifact = params.resolvedMetadataConfiguration.getArtifacts(dependency).singleOrNull()?.takeIf { it.variant.attributes.containsMultiplatformAttributes } ?: return MetadataDependencyResolution.KeepOriginalDependency(module)
    logger.debug(""Transform composite metadata artifact: '${compositeMetadataArtifact.file}'"")
    val mppDependencyMetadataExtractor = params.projectStructureMetadataExtractorFactory.create(compositeMetadataArtifact)
    val projectStructureMetadata = mppDependencyMetadataExtractor.getProjectStructureMetadata() ?: return MetadataDependencyResolution.KeepOriginalDependency(module)
    if (!projectStructureMetadata.isPublishedAsRoot) {
        error(""Artifacts of dependency ${module.id.displayName} is built by old Kotlin Gradle Plugin and can't be consumed in this way"")
    }
    val isResolvedToProject = moduleId in params.build
    val sourceSetVisibility = params.sourceSetVisibilityProvider.getVisibleSourceSets(params.sourceSetName, dependency, projectStructureMetadata, isResolvedToProject)
    val allVisibleSourceSets = sourceSetVisibility.visibleSourceSetNames
    val requestedTransitiveDependencies: Set<ModuleDependencyIdentifier> = mutableSetOf<ModuleDependencyIdentifier>().apply { projectStructureMetadata.sourceSetModuleDependencies.forEach { (sourceSetName, moduleDependencies) -> if (sourceSetName in allVisibleSourceSets) {
        addAll(moduleDependencies)
    } } }
    val transitiveDependenciesToVisit = module.dependencies.filterIsInstance<ResolvedDependencyResult>().filterTo(mutableSetOf()) { it.toModuleDependencyIdentifier() in requestedTransitiveDependencies }
    if (params.sourceSetName in params.platformCompilationSourceSets && !isResolvedToProject) return MetadataDependencyResolution.Exclude.PublishedPlatformSourceSetDependency(module, transitiveDependenciesToVisit)
    val visibleSourceSetsExcludingDependsOn = allVisibleSourceSets.filterTo(mutableSetOf()) { it !in sourceSetsVisibleInParents }
    val metadataProvider = when (mppDependencyMetadataExtractor) {
        is ProjectMppDependencyProjectStructureMetadataExtractor -> ProjectMetadataProvider(sourceSetMetadataOutputs = params.projectData[mppDependencyMetadataExtractor.projectPath]?.sourceSetMetadataOutputs?.getOrThrow() ?: error(""Unexpected project path '${mppDependencyMetadataExtractor.projectPath}'""))
        is JarMppDependencyProjectStructureMetadataExtractor -> ArtifactMetadataProvider(CompositeMetadataArtifactImpl(moduleDependencyIdentifier = dependency.toModuleDependencyIdentifier(), moduleDependencyVersion = module.moduleVersion?.version ?: ""unspecified"", kotlinProjectStructureMetadata = projectStructureMetadata, primaryArtifactFile = mppDependencyMetadataExtractor.primaryArtifactFile, hostSpecificArtifactFilesBySourceSetName = sourceSetVisibility.hostSpecificMetadataArtifactBySourceSet))
    }
    return MetadataDependencyResolution.ChooseVisibleSourceSets(dependency = module, projectStructureMetadata = projectStructureMetadata, allVisibleSourceSetNames = allVisibleSourceSets, visibleSourceSetNamesExcludingDependsOn = visibleSourceSetsExcludingDependsOn, visibleTransitiveDependencies = transitiveDependenciesToVisit, metadataProvider = metadataProvider)
}","/**

     * If the [module] is an MPP metadata module, we extract [KotlinProjectStructureMetadata] and do the following:

     *

     * * get the [KotlinProjectStructureMetadata] from the dependency (either deserialize from the artifact or build from the project)

     *

     * * determine the set *S* of source sets that should be seen in the [kotlinSourceSet] by finding which variants the [parent]

     *   dependency got resolved for the compilations where [kotlinSourceSet] participates:

     *

     * * transform the single Kotlin metadata artifact into a set of Kotlin metadata artifacts for the particular source sets in

     *   *S* and add the results as [MetadataDependencyResolution.ChooseVisibleSourceSets]

     *

     * * based on the project structure metadata, determine which of the module's dependencies are requested by the

     *   source sets in *S*, then consider only these transitive dependencies, ignore the others;

     */",f15872:m391
63608,internal fun Char.isWhitespaceImpl(): Boolean,"{
    val ch = this.code
    return ch in 0x0009 .. 0x000d || ch in 0x001c .. 0x0020 || ch == 0x00a0 || ch > 0x1000 && (ch == 0x1680 || ch in 0x2000 .. 0x200a || ch == 0x2028 || ch == 0x2029 || ch == 0x202f || ch == 0x205f || ch == 0x3000)
}","/**

 * Returns `true` if this character is a whitespace.

 */",f17402:m27
68930,"override fun clearValueInfo(value: DataFlowValue, languageVersionSettings: LanguageVersionSettings): DataFlowInfo","{
    val resultNullabilityInfo = hashMapOf<DataFlowValue, Nullability>()
    putNullabilityAndTypeInfo(resultNullabilityInfo, value, value.immanentNullability, languageVersionSettings)
    return create(this, resultNullabilityInfo, EMPTY_TYPE_INFO, value)
}","/**

     * Call this function to clear all data flow information about

     * the given data flow value.



     * @param value

     */",f19398:m315
27002,"private fun IrBuilderWithScope.nest(sourceFile: SourceFile, node: OrNode, index: Int, variables: List<IrTemporaryVariable>, call: IrBuilderWithScope.(IrExpression, List<IrTemporaryVariable>) -> IrExpression): IrExpression","{
    val children = node.children
    val child = children[index]
    return buildExpression(sourceFile, child, variables) { argument, newVariables -> if (index + 1 == children.size) {
        call(argument, newVariables)
    } else {
        irIfThenElse(context.irBuiltIns.anyType, argument, call(irTrue(), newVariables), nest(sourceFile, node, index + 1, newVariables, call))
    } }
}","/**

 * ```

 * val result = call(1 == 1 || 2 == 2)

 * ```

 * Transforms to

 * ```

 * val result = run {

 *   val tmp0 = 1 == 1

 *   if (tmp0) call(true, <diagram>)

 *   else {

 *     val tmp1 = 2 == 2

 *     call(tmp1, <diagram>)

 *   }

 * }

 * ```

 */",f9511:m249
63180,"@SinceKotlin(""1.6"") @WasExperimental(ExperimentalStdlibApi::class) public actual fun Int.rotateLeft(bitCount: Int): Int",shl(bitCount) or ushr(32 - bitCount),"/**

 * Rotates the binary representation of this [Int] number left by the specified [bitCount] number of bits.

 * The most significant bits pushed out from the left side reenter the number as the least significant bits on the right side.

 *

 * Rotating the number left by a negative bit count is the same as rotating it right by the negated bit count:

 * `number.rotateLeft(-n) == number.rotateRight(n)`

 *

 * Rotating by a multiple of [Int.SIZE_BITS] (32) returns the same number, or more generally

 * `number.rotateLeft(n) == number.rotateLeft(n % 32)`

 */",f17314:m89
58940,public inline fun CharSequence.single(predicate: (Char) -> Boolean): Char,"{
    var single: Char? = null
    var found = false
    for (element in this) {
        if (predicate(element)) {
            if (found) throw IllegalArgumentException(""Char sequence contains more than one matching element."")
            single = element
            found = true
        }
    }
    if (!found) throw NoSuchElementException(""Char sequence contains no character matching the predicate."")
    @Suppress(""UNCHECKED_CAST"") return single as Char
}","/**

 * Returns the single character matching the given [predicate], or throws exception if there is no or more than one matching character.

 */",f17097:m561
58576,"@SinceKotlin(""1.7"") public fun IntProgression.lastOrNull(): Int?","{
    return if (isEmpty()) null else this.last
}","/**

 * Returns the last element, or `null` if the progression is empty.

 * 

 * @sample samples.collections.Collections.Elements.last

 */",f17092:m241
56460,public override operator fun compareTo(other: ComparableTimeMark): Int,(this - other).compareTo(Duration.ZERO),"/**

     * Compares this time mark with the [other] time mark for order.

     *

     * - Returns zero if this time mark represents *the same moment* of time as the [other] time mark.

     * - Returns a negative number if this time mark is *earlier* than the [other] time mark.

     * - Returns a positive number if this time mark is *later* than the [other] time mark.

     *

     * Note that the other time mark must be obtained from the same time source as this one.

     *

     * @throws IllegalArgumentException if time marks were obtained from different time sources.

     */",f16867:m401
1490,"fun setInlineCallMetadata(expression: JsExpression, psiElement: KtElement, descriptor: CallableDescriptor, context: TranslationContext)","{
    assert(CallExpressionTranslator.shouldBeInlined(descriptor)) { ""Expected descriptor of callable, that should be inlined, but got: $descriptor"" }
    val candidateNames = setOf(context.aliasedName(descriptor), context.getInnerNameForDescriptor(descriptor))
    val visitor = object : RecursiveJsVisitor() {
        override fun visitInvocation(invocation: JsInvocation) {
            super.visitInvocation(invocation)
            if (invocation.name in candidateNames || invocation.name?.descriptor?.original == descriptor.original) {
                invocation.descriptor = descriptor
                invocation.isInline = true
                invocation.psiElement = psiElement
            }
        }
    }
    visitor.accept(expression)
    context.addInlineCall(descriptor)
}","/**

 * Recursively walks expression and sets metadata for all invocations of descriptor.

 *

 * When JetExpression is compiled, the resulting JsExpression

 * might not be JsInvocation.

 *

 * For example, extension call with nullable receiver:

 *  x?.fn(y)

 * will compile to:

 *  (x != null) ? fn.call(x, y) : null

 */",f360:m63
14058,"public fun compareAndSet(expected: Long, newValue: Long): Boolean","this::value.compareAndSetField(expected, newValue)","/**

     * Atomically sets the value to the given [new value][newValue] if the current value equals the [expected value][expected],

     * returns true if the operation was successful and false only if the current value was not equal to the expected value.

     *

     * Provides sequential consistent ordering guarantees and cannot fail spuriously.

     */",f3718:m179
37463,private fun translateExtraClasses(),"{
    while (extraClassesToTranslate.isNotEmpty()) {
        val descriptor = extraClassesToTranslate.first()
        extraClassesToTranslate -= descriptor
        assert(shouldTranslateExtraClass(descriptor)) { ""Shouldn't be queued for translation: $descriptor"" }
        if (descriptor.isInterface) {
            generateInterface(descriptor)
        } else {
            generateClass(descriptor)
        }
    }
}","/**

     * Translates additional classes referenced from the module's declarations, such as parameter types, return types,

     * thrown exception types, and underlying enum types.

     *

     * This is required for classes from dependencies to be exported correctly. However, we also currently rely on this

     * for a few edge cases, such as some inner classes. Sub classes may reject certain descriptors to be translated.

     * Some referenced descriptors may be translated early for ordering reasons.

     * @see shouldTranslateExtraClass

     * @see generateExtraClassEarly

     * @see generateExtraInterfaceEarly

     */",f11824:m299
14885,"@SinceKotlin(""1.4"") public actual fun LongArray?.contentToString(): String","{
    return this?.joinToString("", "", ""["", ""]"") ?: ""null""
}","/**

 * Returns a string representation of the contents of the specified array as if it is [List].

 * 

 * @sample samples.collections.Arrays.ContentOperations.contentToString

 */",f3831:m2097
57401,public fun FloatArray.toSortedSet(): java.util.SortedSet<Float>,"{
    return toCollection(java.util.TreeSet<Float>())
}","/**

 * Returns a new [SortedSet][java.util.SortedSet] of all elements.

 */",f16970:m4767
14833,"@SinceKotlin(""1.4"") public actual fun <T> Array<out T>?.contentDeepHashCode(): Int","{
    return contentDeepHashCodeImpl()
}","/**

 * Returns a hash code based on the contents of this array as if it is [List].

 * Nested arrays are treated as lists too.

 * 

 * If any of arrays contains itself on any nesting level the behavior is undefined.

 */",f3831:m573
13597,@kotlin.internal.IntrinsicConstEvaluation public inline operator fun compareTo(other: Long): Int,this.toLong().compareTo(other),"/**

     * Compares this value with the specified value for order.

     * Returns zero if this value is equal to the specified other value, a negative number if it's less than other,

     * or a positive number if it's greater than other.

     */",f3686:m1865
58032,@kotlin.internal.InlineOnly public inline operator fun times(other: UShort): UInt,this.toUInt().times(other.toUInt()),/** Multiplies this value by the other value. */,f17058:m205
58915,"@kotlin.jvm.JvmName(""sumOfDouble"") public fun Sequence<Double>.sum(): Double","{
    var sum: Double = 0.0
    for (element in this) {
        sum += element
    }
    return sum
}","/**

 * Returns the sum of all elements in the sequence.

 *

 * The operation is _terminal_.

 */",f17096:m6195
14897,"@SinceKotlin(""1.3"") @Suppress(""ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS"") public actual fun BooleanArray.copyInto(destination: BooleanArray, destinationOffset: Int = 0, startIndex: Int = 0, endIndex: Int = size): BooleanArray","{
    arrayCopy(this, startIndex, destination, destinationOffset, endIndex - startIndex)
    return destination
}","/**

 * Copies this array or its subrange into the [destination] array and returns that array.

 * 

 * It's allowed to pass the same array in the [destination] and even specify the subrange so that it overlaps with the destination range.

 * 

 * @param destination the array to copy to.

 * @param destinationOffset the position in the [destination] array to copy to, 0 by default.

 * @param startIndex the beginning (inclusive) of the subrange to copy, 0 by default.

 * @param endIndex the end (exclusive) of the subrange to copy, size of this array by default.

 * 

 * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of this array indices or when `startIndex > endIndex`.

 * @throws IndexOutOfBoundsException when the subrange doesn't fit into the [destination] array starting at the specified [destinationOffset],

 * or when that index is out of the [destination] array indices range.

 * 

 * @return the [destination] array.

 */",f3831:m2521
14245,"public fun compareAndSet(expected: Long, newValue: Long): Boolean","this::value.compareAndSetField(expected, newValue)","/**

     * Atomically sets the value to the given [new value][newValue] if the current value equals the [expected value][expected],

     * returns true if the operation was successful and false only if the current value was not equal to the expected value.

     *

     * Provides sequential consistent ordering guarantees and cannot fail spuriously.

     */",f3762:m209
64456,"@SinceKotlin(""1.5"") @WasExperimental(ExperimentalPathApi::class) @Throws(IOException::class) @kotlin.internal.InlineOnly public inline fun Path.inputStream(vararg options: OpenOption): InputStream","{
    return Files.newInputStream(this, *options)
}","/**

 * Constructs a new InputStream of this file and returns it as a result.

 *

 * The [options] parameter determines how the file is opened. If no options are present then it is

 * equivalent to opening the file with the [READ][StandardOpenOption.READ] option.

 */",f17469:m443
10463,fun makePlan(sources: OrderedCollection<Constraint>): Plan,"{
    var mark = this.newMark()
    var plan = Plan()
    var todo = sources
    while (todo.size() > 0) {
        var c = todo.removeFirst()
        if (c.output().mark != mark && c.inputsKnown(mark)) {
            plan.addConstraint(c)
            c.output().mark = mark
            addConstraintsConsumingTo(c.output(), todo)
        }
    }
    return plan
}","/**

   * Extract a plan for resatisfaction starting from the given source

   * constraints, usually a set of input constraints. This method

   * assumes that stay optimization is desired the plan will contain

   * only constraints whose output variables are not stay. Constraints

   * that do no computation, such as stay and edit constraints, are

   * not included in the plan.

   * Details: The outputs of a constraint are marked when it is added

   * to the plan under construction. A constraint may be appended to

   * the plan when all its input variables are known. A variable is

   * known if either a) the variable is marked (indicating that has

   * been computed by a constraint appearing earlier in the plan), b)

   * the variable is 'stay' (i.e. it is a constant at plan execution

   * time), or c) the variable is not determined by any

   * constraint. The last provision is for past states of history

   * variables, which are not stay but which are also not computed by

   * any constraint.

   * Assume: sources are all satisfied.

   */",f3476:m1127
57519,"@SinceKotlin(""1.4"") @OptIn(kotlin.experimental.ExperimentalTypeInference::class) @OverloadResolutionByLambdaReturnType @Suppress(""INAPPLICABLE_JVM_NAME"") @kotlin.jvm.JvmName(""sumOfBigDecimal"") @ExperimentalUnsignedTypes @kotlin.internal.InlineOnly public inline fun UShortArray.sumOf(selector: (UShort) -> java.math.BigDecimal): java.math.BigDecimal","{
    var sum: java.math.BigDecimal = 0.toBigDecimal()
    for (element in this) {
        sum += selector(element)
    }
    return sum
}","/**

 * Returns the sum of all values produced by [selector] function applied to each element in the array.

 */",f16971:m1131
59094,"@SinceKotlin(""1.4"") @ExperimentalUnsignedTypes public fun maxOf(a: ULong, vararg other: ULong): ULong","{
    var max = a
    for (e in other) max = maxOf(max, e)
    return max
}","/**

 * Returns the greater of the given values.

 */",f17098:m211
48496,fun getExecutable(buildType: String): Executable,"getExecutable("""", buildType)",/** Returns an executable with the empty name prefix and the given build type. Throws an exception if there is no such binary.*/,f15652:m101
59116,"@kotlin.jvm.JvmName(""sumOfUShort"") @SinceKotlin(""1.5"") @WasExperimental(ExperimentalUnsignedTypes::class) public fun Iterable<UShort>.sum(): UInt","{
    var sum: UInt = 0u
    for (element in this) {
        sum += element
    }
    return sum
}","/**

 * Returns the sum of all elements in the collection.

 */",f17099:m229
11094,fun schedule(),"{
    this.currentTcb = this.list
    while (this.currentTcb != null) {
        if (this.currentTcb!!.isHeldOrSuspended()) {
            this.currentTcb = this.currentTcb!!.link
        } else {
            this.currentId = this.currentTcb!!.id
            this.currentTcb = this.currentTcb!!.run()
        }
    }
}","/**

     * Execute the tasks managed by this scheduler.

     */",f3500:m337
56325,"@SinceKotlin(""1.1"") public operator fun Float.rangeTo(that: Float): ClosedFloatingPointRange<Float>","ClosedFloatRange(this, that)","/**

 * Creates a range from this [Float] value to the specified [that] value.

 *

 * Numbers are compared with the ends of this range according to IEEE-754.

 * @sample samples.ranges.Ranges.rangeFromFloat

 */",f16848:m401
43601,"fun getOutputForTask(taskPath: String, output: String, logLevel: LogLevel = LogLevel.DEBUG): String","(when (logLevel) {
    LogLevel.INFO -> taskOutputRegexForInfoLog(taskPath)
    LogLevel.DEBUG -> taskOutputRegexForDebugLog(taskPath)
    else -> throw throw IllegalStateException(""Unsupported log lever for task output was given: $logLevel"")
}).findAll(output).map { it.groupValues[1] }.joinToString(System.lineSeparator()).ifEmpty { error(""""""

            Could not find output for task $taskPath.

            =================

            Build output is:

            $output 

            =================     

            """""".trimIndent()) }","/**

 * Gets the output produced by a specific task during a Gradle build.

 *

 * @param taskPath The path of the task whose output should be retrieved.

 * @param output The output from which we should extract task's output

 * @param logLevel The given output contains no more than the [logLevel] logs.

 *

 * @return The output produced by the specified task during the build.

 *

 * @throws IllegalStateException if the specified task path does not match any tasks in the build.

 */",f13459:m95
54742,"@Suppress(""NOTHING_TO_INLINE"") public actual inline operator fun DoubleArray.plus(element: Double): DoubleArray","{
    return plus(doubleArrayOf(element))
}","/**

 * Returns an array containing all elements of the original array and then the given [element].

 */",f16713:m2711
64030,@kotlin.internal.IntrinsicConstEvaluation public inline operator fun compareTo(other: Long): Int,this.toLong().compareTo(other),"/**

     * Compares this value with the specified value for order.

     * Returns zero if this value is equal to the specified other value, a negative number if it's less than other,

     * or a positive number if it's greater than other.

     */",f17455:m137
53102,"@SinceKotlin(""1.4"") @Suppress(""ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS"") public actual fun ByteArray.decodeToString(startIndex: Int = 0, endIndex: Int = this.size, throwOnInvalidSequence: Boolean = false): String","{
    AbstractList.checkBoundsIndexes(startIndex, endIndex, this.size)
    return decodeUtf8(this, startIndex, endIndex, throwOnInvalidSequence)
}","/**

 * Decodes a string from the bytes in UTF-8 encoding in this array or its subrange.

 *

 * @param startIndex the beginning (inclusive) of the subrange to decode, 0 by default.

 * @param endIndex the end (exclusive) of the subrange to decode, size of this array by default.

 * @param throwOnInvalidSequence specifies whether to throw an exception on malformed byte sequence or replace it by the replacement char `\uFFFD`.

 *

 * @throws IndexOutOfBoundsException if [startIndex] is less than zero or [endIndex] is greater than the size of this array.

 * @throws IllegalArgumentException if [startIndex] is greater than [endIndex].

 * @throws CharacterCodingException if the byte array contains malformed UTF-8 byte sequence and [throwOnInvalidSequence] is true.

 */",f16617:m275
53185,"@OptIn(JsIntrinsic::class) @SinceKotlin(""1.9"") @ExperimentalJsReflectionCreateInstance public fun <T: Any> KClass<T>.createInstance(): T","{
    val jsClass = js.asDynamic()
    if (jsClass === js(""Object"")) return js(""{}"")
    val noArgsConstructor = jsClass.`$metadata$`.unsafeCast<Metadata?>()?.defaultConstructor ?: throw IllegalArgumentException(""Class \""$simpleName\"" should have a single no-arg constructor"")
    return if (jsIsEs6() && noArgsConstructor !== jsClass) {
        js(""noArgsConstructor.call(jsClass)"")
    } else {
        js(""new noArgsConstructor()"")
    }
}","/**

 * Creates a new instance of the class, calling a constructor which either has no parameters or all parameters of which have

 * a default value. If there are no or many such constructors, an exception is thrown.

 */",f16639:m15
63681,"@Deprecated(""Use Kotlin compiler 1.4 to avoid deprecation warning."") @SinceKotlin(""1.3"") @DeprecatedSinceKotlin(hiddenSince = ""1.4"") @ExperimentalUnsignedTypes public fun UShortArray.contentToString(): String","{
    return this.contentToString()
}","/**

 * Returns a string representation of the contents of the specified array as if it is [List].

 * 

 * @sample samples.collections.Arrays.ContentOperations.contentToString

 */",f17408:m565
41439,"private fun fillLookupStorage(projectRoot: File, reverseFiles: Boolean, reverseLookups: Boolean, storeFullFqNames: Boolean = false)","{
    val storageRoot = projectRoot.storageRoot
    val fileToPathConverter = RelativeFileToPathConverter(projectRoot)
    val icContext = IncrementalCompilationContext(pathConverterForSourceFiles = fileToPathConverter, storeFullFqNamesInLookupCache = storeFullFqNames)
    val lookupStorage = LookupStorage(storageRoot, icContext)
    val files = LinkedHashSet<String>()
    val symbols = LinkedHashSet<LookupSymbol>()
    val lookups = MultiMap.createOrderedSet<LookupSymbol, String>()
    for (i in 0 .. 10) {
        val newSymbol = LookupSymbol(name = ""MyClass_$i"", scope = ""myscope_$i"")
        val newSourcePath = projectRoot.resolve(""src/${newSymbol.asRelativePath()}"").canonicalFile.invariantSeparatorsPath
        symbols.add(newSymbol)
        for (lookedUpSymbol in symbols) {
            lookups.putValue(lookedUpSymbol, newSourcePath)
        }
        files.add(newSourcePath)
    }
    val filesToAdd = if (reverseFiles) files.reversedSet() else files
    val lookupsToAdd = if (reverseLookups) lookups.reversedMultiMap() else lookups
    lookupStorage.addAll(lookupsToAdd, filesToAdd)
    lookupStorage.flush()
}","/**

     * Fills lookup storage in [projectRoot] with N fq-names,

     * where i_th fq-name myscope_i.MyClass_i has lookups for previous fq-names (from 0 to i-1)

     */",f13039:m89
50925,internal fun addBuildEventsListenerRegistryMock(project: Project),"{
    val executedExtensionKey = ""addBuildEventsListenerRegistryMock.executed""
    try {
        if (project.findExtension<Boolean>(executedExtensionKey) == true) return
        val projectScopeServices = (project as DefaultProject).services as ProjectScopeServices
        val state: Field = ProjectScopeServices::class.java.superclass.getDeclaredField(""state"")
        state.isAccessible = true
        @Suppress(""UNCHECKED_CAST"") val stateValue: AtomicReference<Any> = state.get(projectScopeServices) as AtomicReference<Any>
        val enumClass = Class.forName(DefaultServiceRegistry::class.java.name + ""\$State"")
        stateValue.set(enumClass.enumConstants[0])
        projectScopeServices.add(BuildEventsListenerRegistry::class.java, BuildEventsListenerRegistryMock)
        stateValue.set(enumClass.enumConstants[1])
        project.addExtension(executedExtensionKey, true)
    } catch (e: Throwable) {
        throw RuntimeException(e)
    }
}","/**

 * In Gradle 6.7-rc-1 BuildEventsListenerRegistry service is not created in we need it in order

 * to instantiate AGP. This creates a fake one and injects it - http://b/168630734.

 * https://github.com/gradle/gradle/issues/16774 (Waiting for Gradle 7.5)

 */",f16193:m39
23992,"fun get(annotated: FirAnnotationContainer, config: LombokConfig, session: FirSession): T","extract(annotated.annotations.findAnnotation(annotationName), config, session)","/**

     * Get from annotation or config or default

     */",f9095:m131
57375,@kotlin.internal.InlineOnly public actual inline fun <T: Comparable<T>> Array<out T>.sort(): Unit,"{
    @Suppress(""UNCHECKED_CAST"") (this as Array<Any?>).sort()
}","/**

 * Sorts the array in-place according to the natural order of its elements.

 * 

 * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.

 * 

 * @sample samples.collections.Arrays.Sorting.sortArrayOfComparable

 */",f16970:m4127
15027,"@SinceKotlin(""1.1"") @kotlin.internal.InlineOnly public actual inline fun maxOf(a: Float, b: Float, c: Float): Float","{
    return maxOf(a, maxOf(b, c))
}","/**

 * Returns the greater of three values.

 * 

 * If any value is `NaN`, returns `NaN`.

 */",f3836:m255
54835,"@SinceKotlin(""1.4"") public actual fun minOf(a: Short, vararg other: Short): Short","{
    var min = a
    for (e in other) min = minOf(min, e)
    return min
}","/**

 * Returns the smaller of the given values.

 */",f16714:m769
61752,"@SinceKotlin(""1.4"") public fun Element.hasClass(cssClass: String): Boolean","className.matches(""""""(^|.*\s+)$cssClass($|\s+.*)"""""".toRegex())",/** Returns true if the element has the given CSS class style in its 'class' attribute */,f17275:m19
57251,"public fun DoubleArray.binarySearch(element: Double, fromIndex: Int = 0, toIndex: Int = size): Int","{
    return java.util.Arrays.binarySearch(this, fromIndex, toIndex, element)
}","/**

 * Searches the array or the range of the array for the provided [element] using the binary search algorithm.

 * The array is expected to be sorted, otherwise the result is undefined.

 * 

 * If the array contains multiple elements equal to the specified [element], there is no guarantee which one will be found.

 * 

 * @param element the to search for.

 * @param fromIndex the start of the range (inclusive) to search in, 0 by default.

 * @param toIndex the end of the range (exclusive) to search in, size of this array by default.

 * 

 * @return the index of the element, if it is contained in the array within the specified range;

 * otherwise, the inverted insertion point `(-insertion point - 1)`.

 * The insertion point is defined as the index at which the element should be inserted,

 * so that the array (or the specified subrange of array) still remains sorted.

 * 

 * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.

 * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].

 */",f16970:m805
58910,"@kotlin.jvm.JvmName(""sumOfByte"") public fun Sequence<Byte>.sum(): Int","{
    var sum: Int = 0
    for (element in this) {
        sum += element
    }
    return sum
}","/**

 * Returns the sum of all elements in the sequence.

 *

 * The operation is _terminal_.

 */",f17096:m6055
14237,public fun getAndIncrement(): Int,this::value.getAndAddField(1),"/**

     * Atomically increments the current value by one and returns the old value.

     */",f3762:m103
59096,"@SinceKotlin(""1.4"") @ExperimentalUnsignedTypes public fun maxOf(a: UShort, vararg other: UShort): UShort","{
    var max = a
    for (e in other) max = maxOf(max, e)
    return max
}","/**

 * Returns the greater of the given values.

 */",f17098:m255
46498,fun main(args: Array<String>),"{
    fun readLines(url: String): List<String> {
        return URL(url).openStream().reader().readLines()
    }
    val unicodeDataLines = readLines(unicodeDataUrl).map { line -> UnicodeDataLine(line.split("";"")) }
    val bmpUnicodeDataLines = unicodeDataLines.filter { line -> line.char.length <= 4 }
    fun String.isEmptyOrComment(): Boolean = isEmpty() || startsWith(""#"")
    val specialCasingLines = readLines(specialCasingUrl).filterNot(String::isEmptyOrComment).map { line -> SpecialCasingLine(line.split(""; "")) }
    val propListLines = readLines(propListUrl).filterNot(String::isEmptyOrComment).map { line -> PropertyLine(line.split(""; "").map { it.trim() }) }
    val wordBreakPropertyLines = readLines(wordBreakPropertyUrl).filterNot(String::isEmptyOrComment).map { line -> PropertyLine(line.split(""; "").map { it.trim() }) }
    val derivedCorePropertiesLines = readLines(derivedCorePropertiesUrl).filterNot(String::isEmptyOrComment).map { line -> PropertyLine(line.split(""; "").map { it.trim() }) }
    val categoryRangesGenerators = mutableListOf<RangesGenerator>()
    val otherLowercaseGenerators = mutableListOf<OtherLowercaseRangesGenerator>()
    val otherUppercaseGenerators = mutableListOf<OtherUppercaseRangesGenerator>()
    fun addRangesGenerators(generatedDir: File, target: KotlinTarget) {
        val category = RangesGenerator.forCharCategory(generatedDir.resolve(""_CharCategories.kt""), target)
        val digit = RangesGenerator.forDigit(generatedDir.resolve(""_DigitChars.kt""), target)
        val letter = RangesGenerator.forLetter(generatedDir.resolve(""_LetterChars.kt""), target)
        val whitespace = RangesGenerator.forWhitespace(generatedDir.resolve(""_WhitespaceChars.kt""))
        categoryRangesGenerators.add(category)
        categoryRangesGenerators.add(digit)
        categoryRangesGenerators.add(letter)
        categoryRangesGenerators.add(whitespace)
        otherLowercaseGenerators.add(OtherLowercaseRangesGenerator(generatedDir.resolve(""_OtherLowercaseChars.kt""), target))
        otherUppercaseGenerators.add(OtherUppercaseRangesGenerator(generatedDir.resolve(""_OtherUppercaseChars.kt""), target))
    }
    val oneToOneMappingsGenerators = mutableListOf<MappingsGenerator>()
    fun addOneToOneMappingsGenerators(generatedDir: File, target: KotlinTarget) {
        val uppercase = MappingsGenerator.forUppercase(generatedDir.resolve(""_UppercaseMappings.kt""), target)
        val lowercase = MappingsGenerator.forLowercase(generatedDir.resolve(""_LowercaseMappings.kt""), target)
        val titlecase = MappingsGenerator.forTitlecase(generatedDir.resolve(""_TitlecaseMappings.kt""))
        oneToOneMappingsGenerators.add(uppercase)
        oneToOneMappingsGenerators.add(lowercase)
        oneToOneMappingsGenerators.add(titlecase)
    }
    val oneToManyMappingsGenerators = mutableListOf<OneToManyMappingsGenerator>()
    fun addOneToManyMappingsGenerators(generatedDir: File, target: KotlinTarget) {
        val uppercase = OneToManyMappingsGenerator.forUppercase(generatedDir.resolve(""_OneToManyUppercaseMappings.kt""), target, bmpUnicodeDataLines)
        val lowercase = OneToManyMappingsGenerator.forLowercase(generatedDir.resolve(""_OneToManyLowercaseMappings.kt""), target, bmpUnicodeDataLines)
        oneToManyMappingsGenerators.add(uppercase)
        oneToManyMappingsGenerators.add(lowercase)
    }
    val stringUppercaseGenerators = mutableListOf<StringUppercaseGenerator>()
    val stringLowercaseGenerators = mutableListOf<StringLowercaseGenerator>()
    val categoryTestGenerator: CharCategoryTestGenerator
    val stringCasingTestGenerator: StringCasingTestGenerator
    when (args.size) {
        1 -> {
            val baseDir = File(args.first())
            val categoryTestFile = baseDir.resolve(""libraries/stdlib/js/test/text/unicodeData/_CharCategoryTest.kt"")
            categoryTestGenerator = CharCategoryTestGenerator(categoryTestFile)
            val commonGeneratedDir = baseDir.resolve(""libraries/stdlib/common/src/generated"")
            oneToManyMappingsGenerators.add(OneToManyMappingsGenerator.forTitlecase(commonGeneratedDir.resolve(""_OneToManyTitlecaseMappings.kt""), bmpUnicodeDataLines))
            val jsGeneratedDir = baseDir.resolve(""libraries/stdlib/js/src/generated/"")
            addRangesGenerators(jsGeneratedDir, KotlinTarget.JS)
            oneToOneMappingsGenerators.add(MappingsGenerator.forTitlecase(jsGeneratedDir.resolve(""_TitlecaseMappings.kt"")))
            val nativeGeneratedDir = baseDir.resolve(""kotlin-native/runtime/src/main/kotlin/generated/"")
            addRangesGenerators(nativeGeneratedDir, KotlinTarget.Native)
            addOneToOneMappingsGenerators(nativeGeneratedDir, KotlinTarget.Native)
            addOneToManyMappingsGenerators(nativeGeneratedDir, KotlinTarget.Native)
            stringUppercaseGenerators.add(StringUppercaseGenerator(nativeGeneratedDir.resolve(""_StringUppercase.kt""), unicodeDataLines, KotlinTarget.Native))
            stringLowercaseGenerators.add(StringLowercaseGenerator(nativeGeneratedDir.resolve(""_StringLowercase.kt""), unicodeDataLines, KotlinTarget.Native))
            val wasmGeneratedDir = baseDir.resolve(""libraries/stdlib/wasm/src/generated/"")
            addRangesGenerators(wasmGeneratedDir, KotlinTarget.WASM)
            addOneToOneMappingsGenerators(wasmGeneratedDir, KotlinTarget.WASM)
            addOneToManyMappingsGenerators(wasmGeneratedDir, KotlinTarget.WASM)
            stringUppercaseGenerators.add(StringUppercaseGenerator(wasmGeneratedDir.resolve(""_StringUppercase.kt""), unicodeDataLines, KotlinTarget.WASM))
            stringLowercaseGenerators.add(StringLowercaseGenerator(wasmGeneratedDir.resolve(""_StringLowercase.kt""), unicodeDataLines, KotlinTarget.WASM))
            val nativeTestDir = baseDir.resolve(""kotlin-native/runtime/test/text"")
            stringCasingTestGenerator = StringCasingTestGenerator(nativeTestDir)
            fun downloadFile(fromUrl: String) {
                val fileName = File(fromUrl).name
                val dest = baseDir.resolve(""libraries/tools/kotlin-stdlib-gen/src/generators/unicode/$fileName"")
                dest.writeText(readLines(fromUrl).joinToString(separator = ""\n""))
            }
            downloadFile(unicodeDataUrl)
            downloadFile(specialCasingUrl)
        }
        else -> {
            println(""""""Parameters:
            
                <kotlin-base-dir> - generates sources for js, js-ir and native targets using paths derived from specified base path
            
            """""")
            exitProcess(1)
        }
    }
    categoryRangesGenerators.forEach {
        bmpUnicodeDataLines.forEach { line -> it.appendLine(line) }
        it.generate()
    }
    otherLowercaseGenerators.forEach {
        propListLines.forEach { line -> it.appendLine(line) }
        it.generate()
    }
    otherUppercaseGenerators.forEach {
        propListLines.forEach { line -> it.appendLine(line) }
        it.generate()
    }
    categoryTestGenerator.let {
        bmpUnicodeDataLines.forEach { line -> it.appendLine(line) }
        propListLines.forEach { line -> it.appendPropertyLine(line) }
        it.generate()
    }
    oneToOneMappingsGenerators.forEach {
        unicodeDataLines.forEach { line -> it.appendLine(line) }
        it.generate()
    }
    oneToManyMappingsGenerators.forEach {
        specialCasingLines.forEach { line -> it.appendLine(line) }
        it.generate()
    }
    stringUppercaseGenerators.forEach {
        specialCasingLines.forEach { line -> it.appendSpecialCasingLine(line) }
        it.generate()
    }
    stringLowercaseGenerators.forEach {
        specialCasingLines.forEach { line -> it.appendSpecialCasingLine(line) }
        wordBreakPropertyLines.forEach { line -> it.appendWordBreakPropertyLine(line) }
        it.generate()
    }
    stringCasingTestGenerator.let {
        derivedCorePropertiesLines.forEach { line -> it.appendDerivedCorePropertiesLine(line) }
        it.generate()
    }
}","/**

 * This program generates sources related to UnicodeData.txt and SpecialCasing.txt.

 * Pass the root directory of the project to generate sources for js, js-ir and native.

 *  _CharCategoryTest.kt and supporting files are also generated to test the generated sources.

 *  The generated test is meant to be run after updating Unicode version and should not be merged to master.

 */",f15062:m61
58700,public fun Int.coerceAtLeast(minimumValue: Int): Int,"{
    return if (this < minimumValue) minimumValue else this
}","/**

 * Ensures that this value is not less than the specified [minimumValue].

 * 

 * @return this value if it's greater than or equal to the [minimumValue] or the [minimumValue] otherwise.

 * 

 * @sample samples.comparisons.ComparableOps.coerceAtLeast

 */",f17092:m2473
56521,"@SinceKotlin(""1.4"") @kotlin.internal.InlineOnly public actual inline fun StringBuilder.appendLine(value: Float): StringBuilder",append(value).appendLine(),"/** Appends [value] to this [StringBuilder], followed by a line feed character (`\n`). */",f16890:m457
58912,"@kotlin.jvm.JvmName(""sumOfInt"") public fun Sequence<Int>.sum(): Int","{
    var sum: Int = 0
    for (element in this) {
        sum += element
    }
    return sum
}","/**

 * Returns the sum of all elements in the sequence.

 *

 * The operation is _terminal_.

 */",f17096:m6111
58282,"@SinceKotlin(""1.5"") @WasExperimental(ExperimentalUnsignedTypes::class) public fun ULong.toString(radix: Int): String","ulongToString(this.toLong(), checkRadix(radix))","/**

 * Returns a string representation of this [Long] value in the specified [radix].

 *

 * @throws IllegalArgumentException when [radix] is not a valid radix for number to string conversion.

 */",f17067:m81
54663,"@SinceKotlin(""1.4"") public actual fun <T> Array<out T>?.contentDeepToString(): String","{
    return contentDeepToStringImpl()
}","/**

 * Returns a string representation of the contents of this array as if it is a [List].

 * Nested arrays are treated as lists too.

 * 

 * If any of arrays contains itself on any nesting level that reference

 * is rendered as `""[...]""` to prevent recursion.

 * 

 * @sample samples.collections.Arrays.ContentOperations.contentDeepToString

 */",f16713:m537
53404,"@Suppress(""UNUSED_PARAMETER"", ""unused"") @PublishedApi internal fun <R, P, T> (suspend R.(P) -> T).invokeSuspendSuperTypeWithReceiverAndParam(receiver: R, param: P, completion: Continuation<T>): Any?","{
    throw NotImplementedError(""It is intrinsic method"")
}","/**

 * Invoke 'invoke' method of suspend super type with receiver and param

 * Because callable references translated with local classes,

 * necessary to call it in special way, not in synamic way

 */",f16673:m81
49001,@ExternalKotlinTargetApi fun IdeDependencyResolver(resolvers: Iterable<IdeDependencyResolver?>): IdeDependencyResolver,"{
    val resolversList = resolvers.filterNotNull()
    if (resolversList.isEmpty()) return IdeDependencyResolver.empty
    return IdeCompositeDependencyResolver(resolversList)
}","/**

 * Creates a composite [IdeDependencyResolver] from the specified [resolvers]

 * Resolvers that are `null` will be ignored.

 * The composite will preserve the order and invoke the [resolvers] in the same order as specified.

 * The resulting set of dependencies will be the superset of all results of individual resolvers.

 */",f15731:m203
13988,"@SinceKotlin(""1.3"") public actual fun CharArray.concatToString(): String","unsafeStringFromCharArray(this, 0, size)","/**

 * Concatenates characters in this [CharArray] into a String.

 */",f3713:m669
27496,"fun getIncrementalProcessorsFromClasspath(names: Set<String>, classpath: Iterable<File>): Map<String, DeclaredProcType>","{
    val finalValues = mutableMapOf<String, DeclaredProcType>()
    classpath.forEach { entry ->
        val fromEntry = processSingleClasspathEntry(entry)
        fromEntry.filter { names.contains(it.key) }.forEach { finalValues[it.key] = it.value }
        if (finalValues.size == names.size) return finalValues
    }
    return finalValues
}",/** Checks the incremental annotation processor information for the annotation processor classpath. */,f9699:m35
16750,"fun lazyResolveWithCallableMembers(target: FirRegularClass, toPhase: FirResolvePhase)","{
    lazyResolve(target, toPhase, LLFirResolveDesignationCollector::getDesignationToResolveWithCallableMembers)
}","/**

     * Lazily resolves the [target] with all callable members to a given [toPhase].

     *

     * Might resolve additional required declarations.

     *

     * Resolution is performed under the lock specific to each declaration that is going to be resolved.

     */",f4163:m89
58945,public fun CharSequence.dropLast(n: Int): CharSequence,"{
    require(n >= 0) { ""Requested character count $n is less than zero."" }
    return take((length - n).coerceAtLeast(0))
}","/**

 * Returns a subsequence of this char sequence with the last [n] characters removed.

 * 

 * @throws IllegalArgumentException if [n] is negative.

 * 

 * @sample samples.text.Strings.drop

 */",f17097:m693
64140,@kotlin.internal.IntrinsicConstEvaluation public override fun toDouble(): Double,wasm_f64_convert_i32_s(this.toInt()),"/**

     * Converts this [Short] value to [Double].

     *

     * The resulting `Double` value represents the same numerical value as this `Short`.

     */",f17455:m1705
34346,"@Suppress(""unused"") @kotlin.native.internal.ExportForCppRuntime(""Konan_create_testSuite"") internal fun setupXCTestSuite(): XCTestSuite","{
    val nativeTestSuite = XCTestSuite.testSuiteWithName(TOP_LEVEL_SUITE)
    val args = testArguments(TEST_ARGUMENTS_KEY)
    testSettings = TestProcessor(GeneratedSuites.suites, args).process()
    check(::testSettings.isInitialized) { ""Test settings wasn't set. Check provided arguments and test suites"" }
    XCTestObservationCenter.sharedTestObservationCenter.addTestObserver(NativeTestObserver(testSettings))
    if (testSettings.runTests) {
        testSettings.testSuites.generate().forEach { nativeTestSuite.addTest(it) }
        @Suppress(""UNCHECKED_CAST"") check(testSettings.testSuites.size == (nativeTestSuite.tests as List<XCTest>).size) { ""The amount of generated XCTest suites should be equal to Kotlin test suites"" }
    }
    return nativeTestSuite
}","/**

 * This is an entry-point of XCTestSuites and XCTestCases generation.

 * Function returns the XCTest's top level TestSuite that holds all the test cases

 * with K/N tests.

 * This test suite can be run by either native launcher compiled to bundle or

 * by the other test suite (e.g. compiled as a framework).

 */",f11291:m55
57985,"@PublishedApi @SinceKotlin(""1.3"") internal fun getProgressionLastElement(start: UInt, end: UInt, step: Int): UInt","when {
    step > 0 -> if (start >= end) end else end - differenceModulo(end, start, step.toUInt())
    step < 0 -> if (start <= end) end else end + differenceModulo(start, end, (-step).toUInt())
    else -> throw kotlin.IllegalArgumentException(""Step is zero."")
}","/**

 * Calculates the final element of a bounded arithmetic progression, i.e. the last element of the progression which is in the range

 * from [start] to [end] in case of a positive [step], or from [end] to [start] in case of a negative

 * [step].

 *

 * No validation on passed parameters is performed. The given parameters should satisfy the condition:

 *

 * - either `step > 0` and `start <= end`,

 * - or `step < 0` and `start >= end`.

 *

 * @param start first element of the progression

 * @param end ending bound for the progression

 * @param step increment, or difference of successive elements in the progression

 * @return the final element of the progression

 * @suppress

 */",f17054:m41
56237,"@SinceKotlin(""1.5"") @kotlin.internal.InlineOnly @kotlin.internal.IntrinsicConstEvaluation public inline fun Int.floorDiv(other: Short): Int",this.floorDiv(other.toInt()),"/** Divides this value by the other value, flooring the result to an integer that is closer to negative infinity. */",f16842:m353
63620,"@SinceKotlin(""1.1"") @kotlin.internal.InlineOnly public actual inline fun maxOf(a: Byte, b: Byte): Byte","{
    return maxOf(a.toInt(), b.toInt()).toByte()
}","/**

 * Returns the greater of two values.

 */",f17406:m47
58611,"@Deprecated(""This `contains` operation mixing integer and floating point arguments has ambiguous semantics and is going to be removed."") @DeprecatedSinceKotlin(warningSince = ""1.3"", errorSince = ""1.4"", hiddenSince = ""1.5"") @kotlin.jvm.JvmName(""byteRangeContains"") public operator fun ClosedRange<Byte>.contains(value: Float): Boolean","{
    return value.toByteExactOrNull().let { if (it != null) contains(it) else false }
}","/**

 * Checks if the specified [value] belongs to this range.

 */",f17092:m947
14239,public fun decrementAndGet(): Int,this::value.getAndAddField(-1) - 1,"/**

     * Atomically decrements the current value by one and returns the new value.

     */",f3762:m123
54761,"@Suppress(""NOTHING_TO_INLINE"") public actual inline operator fun BooleanArray.plus(elements: BooleanArray): BooleanArray","{
    return primitiveArrayConcat(this, elements)
}","/**

 * Returns an array containing all elements of the original array and then all elements of the given [elements] array.

 */",f16713:m3035
14948,"@SinceKotlin(""1.3"") @Suppress(""ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS"") public actual fun LongArray.fill(element: Long, fromIndex: Int = 0, toIndex: Int = size): Unit","{
    arrayFill(this, fromIndex, toIndex, element)
}","/**

 * Fills this array or its subrange with the specified [element] value.

 * 

 * @param fromIndex the start of the range (inclusive) to fill, 0 by default.

 * @param toIndex the end of the range (exclusive) to fill, size of this array by default.

 * 

 * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.

 * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].

 */",f3831:m3831
52609,override fun equals(other: Any?): Boolean,"{
    if (other === this) return true
    if (other !is Set<*>) return false
    return AbstractSet.setEquals(this, other)
}","/**

     * Compares this set with another set instance with the unordered structural equality.

     *

     * @return `true`, if [other] instance is a [Set] of the same size, all elements of which are contained in this set.

     */",f16550:m33
56277,public operator fun contains(value: T): Boolean,value >= start && value < endExclusive,"/**

     * Checks whether the specified [value] belongs to the range.

     *

     * A value belongs to the open-ended range if it is greater than or equal to the [start] bound and strictly less than the [endExclusive] bound.

     */",f16846:m115
13635,public operator fun rangeTo(other: Short): IntRange,"IntRange(this, other.toInt())",/** Creates a range from this value to the specified [other] value. */,f3686:m2339
20283,public fun substitute(type: KtType): KtType,withValidityAssertion { substituteOrNull(type) ?: type },"/**

     * substitutes type parameters in a given type corresponding to internal mapping rules.

     *

     * @return substituted type if there was at least one substitution, [type] itself if there was no type parameter to substitute

     */",f5812:m49
67380,private fun transformUrlToFile(url: URL),url.toURI().toPath().toFile(),"/**

 * Transforms a given URL to a File object with proper handling of escapable characters like whitespace, hashbang.

 *

 * Example: URL containing ""some%20path"" should be transformed to a File object pointing to ""some path""

 */",f19188:m117
52688,"internal fun <T> sortArrayWith(array: Array<out T>, fromIndex: Int, toIndex: Int, comparator: Comparator<T>)","{
    if (fromIndex < toIndex - 1) {
        @Suppress(""UNCHECKED_CAST"") mergeSort(array as Array<T>, fromIndex, toIndex - 1, comparator)
    }
}","/**

 * Sorts the subarray specified by [fromIndex] (inclusive) and [toIndex] (exclusive) parameters

 * using the merge sort algorithm with the given [comparator].

 */",f16557:m725
20241,public fun KtExpression.evaluate(mode: KtConstantEvaluationMode): KtConstantValue?,"withValidityAssertion { analysisSession.compileTimeConstantProvider.evaluate(this, mode) }","/**

     * Tries to evaluate the provided expression using the specified mode.

     * Returns a [KtConstantValue] if the expression evaluates to a compile-time constant, otherwise returns null..

     */",f5801:m81
21777,private fun getExpectedTypeOfIndexingParameter(expression: PsiElement): KtType?,"{
    val arrayAccessExpression = expression.unwrapQualified<KtArrayAccessExpression> { arrayAccessExpression, currentExpression -> currentExpression in arrayAccessExpression.indexExpressions } ?: return null
    val firCall = arrayAccessExpression.getOrBuildFirSafe<FirFunctionCall>(firResolveSession) ?: return null
    val firArgument = firCall.argumentList.arguments.firstOrNull { it.psi == expression } ?: return null
    val argumentsToParameters = firCall.argumentsToSubstitutedValueParameters(substituteWithErrorTypes = false) ?: return null
    return argumentsToParameters[firArgument]?.substitutedType?.asKtType()
}","/**

     * Expected type of the indexing parameter in array access, for example, in the following code:

     * ```

     * val map = mapOf<Int, String>()

     * map[k] = v

     * ```

     * `k` is indexing parameter and its expected type is `Int`.

     */",f8638:m503
41433,@Test fun testExistingStorageIsProperlyModifiedOnSuccess(),"{
    val storageRoot = workingDir.resolve(""storage"")
    val key1 = LookupSymbolKey(""a"", ""a"")
    val key2 = LookupSymbolKey(""b"", ""b"")
    val key3 = LookupSymbolKey(""c"", ""c"")
    val key4 = LookupSymbolKey(""d"", ""d"")
    val key5 = LookupSymbolKey(""e"", ""e"")
    withLookupMapInTransaction(storageRoot, useInMemoryWrapper = false, successful = true) {
        it[key1] = setOf(1, 2)
        it[key2] = setOf(1, 2)
        it[key3] = setOf(1)
    }
    withLookupMapInTransaction(storageRoot, useInMemoryWrapper = true, successful = true) {
        it.append(key1, setOf(3))
        it.remove(key2)
        it[key3] = setOf(5)
        it.append(key4, setOf(4))
        it.append(key5, setOf(5))
    }
    withLookupMapInTransaction(storageRoot, useInMemoryWrapper = false, successful = true) {
        assertEquals(setOf(1, 2, 3), it[key1])
        assertNull(it[key2])
        assertEquals(setOf(5), it[key3])
        assertEquals(setOf(4), it[key4])
        assertEquals(setOf(5), it[key5])
    }
    withLookupMapInTransaction(storageRoot, useInMemoryWrapper = true, successful = true) {
        it.clear()
        it.append(key1, setOf(4))
    }
    withLookupMapInTransaction(storageRoot, useInMemoryWrapper = false, successful = true) {
        assertEquals(setOf(4), it[key1])
        assertNull(it[key2])
        assertNull(it[key3])
        assertNull(it[key4])
        assertNull(it[key5])
    }
}","/**

     * Covered scenarios:

     * - By existing key

     *   - set (key3)

     *   - append (key1)

     *   - remove (key2)

     * - By non-existing key

     *   - set (key5)

     *   - append (key4)

     * - clean

     */",f13038:m95
56037,"public inline fun <K, V> Map<out K, V>.filterKeys(predicate: (K) -> Boolean): Map<K, V>","{
    val result = LinkedHashMap<K, V>()
    for (entry in this) {
        if (predicate(entry.key)) {
            result.put(entry.key, entry.value)
        }
    }
    return result
}","/**

 * Returns a map containing all key-value pairs with keys matching the given [predicate].

 *

 * The returned map preserves the entry iteration order of the original map.

 * @sample samples.collections.Maps.Filtering.filterKeys

 */",f16823:m959
57681,@Test fun testStartInterceptedSuspendReference(),"{
    val done = Semaphore(0)
    TestDispatcher(""Result"").use { resumeDispatcher -> TestDispatcher(""Context"").use { contextDispatcher ->
        val switcher = DispatcherSwitcher(contextDispatcher, resumeDispatcher)
        val ref = switcher::run
        ref.startCoroutine(Continuation(contextDispatcher) { result ->
            contextDispatcher.assertThread()
            assertEquals(42, result.getOrThrow())
            done.release()
        })
        done.acquire()
    } }
}","/**

     * Makes sure that using [startCoroutine] with suspending references properly establishes intercepted context.

     */",f17003:m31
63602,"internal fun binarySearchRange(array: IntArray, needle: Int): Int","{
    var bottom = 0
    var top = array.size - 1
    var middle = -1
    var value = 0
    while (bottom <= top) {
        middle = (bottom + top) / 2
        value = array[middle]
        if (needle > value) bottom = middle + 1 else if (needle == value) return middle else top = middle - 1
    }
    return middle - (if (needle < value) 1 else 0)
}","/**

 * Returns the index of the largest element in [array] smaller or equal to the specified [needle],

 * or -1 if [needle] is smaller than the smallest element in [array].

 */",f17399:m37
16578,fun getStructureElementFor(element: KtElement): FileStructureElement,"{
    val container = getContainerKtElement(element)
    return structureElements.getOrPut(container) { createStructureElement(container) }
}","/**

     * @return [FileStructureElement] for the closest non-local declaration which contains this [element].

     */",f4135:m169
58293,"@SinceKotlin(""1.5"") @WasExperimental(ExperimentalUnsignedTypes::class) public fun String.toUShortOrNull(): UShort?",toUShortOrNull(radix = 10),"/**

 * Parses the string as an [UShort] number and returns the result

 * or `null` if the string is not a valid representation of a number.

 */",f17067:m291
54908,"@ExperimentalJsExport @ExperimentalJsCollectionsApi @SinceKotlin(""2.0"") public fun asJsReadonlySetView(): JsReadonlySet<E>",createJsReadonlySetViewFrom(this),"/**

     * Returns a view with the [JsReadonlySet] methods to consume it in JavaScript as a regular readonly Set.

     * Structural changes in the base set are synchronized with the view.

     */",f16726:m611
1322,fun onEvent(receiveEvent: (CDPEvent) -> Unit),"{
    onDebuggerEventCallback = receiveEvent
}","/**

     * Installs a listener for Chrome DevTools Protocol events.

     */",f337:m197
48524,fun findFramework(buildType: String): Framework?,"findFramework("""", buildType)",/** Returns an Objective-C framework with the empty name prefix and the given build type. Returns null if there is no such binary. */,f15652:m283
57166,"@SinceKotlin(""1.1"") @kotlin.internal.InlineOnly public actual inline fun minOf(a: Double, b: Double): Double","{
    return Math.min(a, b)
}","/**

 * Returns the smaller of two values.

 * 

 * If either value is `NaN`, returns `NaN`.

 */",f16966:m571
55759,"@SinceKotlin(""1.4"") @LowPriorityInOverloadResolution public fun <T: Any> KClass<T>.safeCast(value: Any?): T?","{
    return if (isInstance(value)) value as T else null
}","/**

 * Casts the given [value] to the class represented by this [KClass] object.

 * Returns `null` if the value is `null` or if it is not an instance of this class.

 *

 * This is an experimental function that behaves as a similar function from kotlin.reflect.full on JVM.

 *

 * @see [KClass.isInstance]

 * @see [KClass.cast]

 */",f16794:m63
54734,"@SinceKotlin(""1.3"") @Suppress(""ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS"") public actual fun BooleanArray.fill(element: Boolean, fromIndex: Int = 0, toIndex: Int = size): Unit","{
    AbstractList.checkRangeIndexes(fromIndex, toIndex, size)
    nativeFill(element, fromIndex, toIndex)
}","/**

 * Fills this array or its subrange with the specified [element] value.

 * 

 * @param fromIndex the start of the range (inclusive) to fill, 0 by default.

 * @param toIndex the end of the range (exclusive) to fill, size of this array by default.

 * 

 * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.

 * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].

 */",f16713:m2549
57061,@kotlin.internal.InlineOnly public actual inline fun println(),"{
    System.out.println()
}",/** Prints the line separator to the standard output stream. */,f16953:m273
58967,public fun String.takeLast(n: Int): String,"{
    require(n >= 0) { ""Requested character count $n is less than zero."" }
    val length = length
    return substring(length - n.coerceAtMost(length))
}","/**

 * Returns a string containing the last [n] characters from this string, or the entire string if this string is shorter.

 * 

 * @throws IllegalArgumentException if [n] is negative.

 * 

 * @sample samples.text.Strings.take

 */",f17097:m1175
57157,"@SinceKotlin(""1.4"") public actual fun maxOf(a: Long, vararg other: Long): Long","{
    var max = a
    for (e in other) max = maxOf(max, e)
    return max
}","/**

 * Returns the greater of the given values.

 */",f16966:m389
47969,internal fun Project.setupCInteropPropagatedDependencies(),"{
    val kotlin = this.multiplatformExtensionOrNull ?: return
    kotlin.forAllSharedNativeCompilations { compilation -> compilation.compileDependencyFiles += getPropagatedCInteropDependenciesOrEmpty(compilation) }
    kotlin.forAllDefaultKotlinSourceSets { sourceSet -> addIntransitiveMetadataDependencyIfPossible(sourceSet, getPropagatedCInteropDependenciesOrEmpty(sourceSet)) }
}","/**

 * Will propagate ""original""/""platform"" cinterops to intermediate source sets

 * and 'shared native' compilations if necessary.

 *

 * cinterops will be forwarded when a source set/ compilation has just a single platform

 * dependee

 *

 * e.g.

 *

 * ```

 * kotlin {

 *      sourceSets {

 *          val nativeMain by sourceSets.creating

 *          val linuxX64Main by sourceSets.getting

 *          linuxX64Main.dependsOn(nativeMain)

 *      }

 * }

 * ```

 *

 * In this example 'nativeMain' has only a single native

 * target and a single native source set depending on it.

 * All cinterops defined on linuxX64's main compilation shall be propagated

 * to the 'nativeMain' source set (and its 'shared native' compilation) if it exists.

 */",f15495:m43
57026,"@InlineOnly public inline fun <T: Closeable?, R> T.use(block: (T) -> R): R","{
    contract { callsInPlace(block, InvocationKind.EXACTLY_ONCE) }
    var exception: Throwable? = null
    try {
        return block(this)
    } catch (e: Throwable) {
        exception = e
        throw e
    } finally {
        when {
            apiVersionIsAtLeast(1, 1, 0) -> this.closeFinally(exception)
            this == null -> {}
            exception == null -> close()
            else -> try {
                close()
            } catch (closeException: Throwable) { }
        }
    }
}","/**

 * Executes the given [block] function on this resource and then closes it down correctly whether an exception

 * is thrown or not.

 *

 * @param block a function to process this [Closeable] resource.

 * @return the result of [block] function invoked on this resource.

 */",f16951:m25
40565,"fun forTwoStageExecutable(includedKlib: CompiledDependency<KLIB>, includedKlibStaticCache: CompiledDependency<KLIBStaticCache>?): Iterable<CompiledDependency<*>>","(klibDependencies.asSequence() + staticCacheDependencies + listOfNotNull(includedKlib, includedKlibStaticCache)).asIterable()",/** Dependencies needed to compile two-stage executable. */,f12864:m113
15038,"@SinceKotlin(""1.1"") @kotlin.internal.InlineOnly public actual inline fun minOf(a: Short, b: Short): Short","{
    return minOf(a.toInt(), b.toInt()).toShort()
}","/**

 * Returns the smaller of two values.

 */",f3836:m489
47890,"@Suppress(""RegExpUnnecessaryNonCapturingGroup"") internal fun String.splitQuotedArgs(): List<String>","Regex(""""""(?:[^\s""]|(?:""[^""]*""))+"""""").findAll(this).map { it.value.replace(""\"""", """") }.toList()","/**

 * Splits a string using a whitespace characters as delimiters.

 * Ignores whitespaces in quotes and drops quotes, e.g. a string

 * `foo ""bar baz"" qux=""quux""` will be split into [""foo"", ""bar baz"", ""qux=quux""].

 */",f15479:m297
56243,"@SinceKotlin(""1.5"") @kotlin.internal.InlineOnly @kotlin.internal.IntrinsicConstEvaluation public inline fun Long.floorDiv(other: Byte): Long",this.floorDiv(other.toLong()),"/** Divides this value by the other value, flooring the result to an integer that is closer to negative infinity. */",f16842:m471
14825,public actual fun LongArray.asList(): List<Long>,"{
    return object : AbstractList<Long>(), RandomAccess {
        override val size: Int get() = this@asList.size
    
        override fun isEmpty(): Boolean = this@asList.isEmpty()
    
        override fun contains(element: Long): Boolean = this@asList.contains(element)
    
        override fun get(index: Int): Long = this@asList[index]
    
        override fun indexOf(element: Long): Int = this@asList.indexOf(element)
    
        override fun lastIndexOf(element: Long): Int = this@asList.lastIndexOf(element)
    }
}","/**

 * Returns a [List] that wraps the original array.

 */",f3831:m323
59103,"@SinceKotlin(""1.5"") @WasExperimental(ExperimentalUnsignedTypes::class) @kotlin.internal.InlineOnly public inline fun minOf(a: UByte, b: UByte, c: UByte): UByte","{
    return minOf(a, minOf(b, c))
}","/**

 * Returns the smaller of three values.

 */",f17098:m389
56036,"public inline fun <K, V, R> Map<out K, V>.mapKeys(transform: (Map.Entry<K, V>) -> R): Map<R, V>","{
    return mapKeysTo(LinkedHashMap<R, V>(mapCapacity(size)), transform)
}","/**

 * Returns a new Map with entries having the keys obtained by applying the [transform] function to each entry in this

 * [Map] and the values of this map.

 *

 * In case if any two entries are mapped to the equal keys, the value of the latter one will overwrite

 * the value associated with the former one.

 *

 * The returned map preserves the entry iteration order of the original map.

 *

 * @sample samples.collections.Maps.Transformations.mapKeys

 */",f16823:m929
55896,"public fun <T: Any> generateSequence(seedFunction: () -> T?, nextFunction: (T) -> T?): Sequence<T>","GeneratorSequence(seedFunction, nextFunction)","/**

 * Returns a sequence defined by the function [seedFunction], which is invoked to produce the starting value,

 * and the [nextFunction], which is invoked to calculate the next value based on the previous one on each iteration.

 *

 * The sequence produces values until it encounters first `null` value.

 * If [seedFunction] returns `null`, an empty sequence is produced.

 *

 * The sequence can be iterated multiple times.

 *

 * @see kotlin.sequences.sequence

 *

 * @sample samples.collections.Sequences.Building.generateSequenceWithLazySeed

 */",f16815:m1363
14893,"@SinceKotlin(""1.3"") @Suppress(""ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS"") public actual fun IntArray.copyInto(destination: IntArray, destinationOffset: Int = 0, startIndex: Int = 0, endIndex: Int = size): IntArray","{
    arrayCopy(this, startIndex, destination, destinationOffset, endIndex - startIndex)
    return destination
}","/**

 * Copies this array or its subrange into the [destination] array and returns that array.

 * 

 * It's allowed to pass the same array in the [destination] and even specify the subrange so that it overlaps with the destination range.

 * 

 * @param destination the array to copy to.

 * @param destinationOffset the position in the [destination] array to copy to, 0 by default.

 * @param startIndex the beginning (inclusive) of the subrange to copy, 0 by default.

 * @param endIndex the end (exclusive) of the subrange to copy, size of this array by default.

 * 

 * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of this array indices or when `startIndex > endIndex`.

 * @throws IndexOutOfBoundsException when the subrange doesn't fit into the [destination] array starting at the specified [destinationOffset],

 * or when that index is out of the [destination] array indices range.

 * 

 * @return the [destination] array.

 */",f3831:m2337
59013,"public inline fun <R> CharSequence.foldRightIndexed(initial: R, operation: (index: Int, Char, acc: R) -> R): R","{
    var index = lastIndex
    var accumulator = initial
    while (index >= 0) {
        accumulator = operation(index, get(index), accumulator)
        --index
    }
    return accumulator
}","/**

 * Accumulates value starting with [initial] value and applying [operation] from right to left

 * to each character with its index in the original char sequence and current accumulator value.

 * 

 * Returns the specified [initial] value if the char sequence is empty.

 * 

 * @param [operation] function that takes the index of a character, the character itself

 * and current accumulator value, and calculates the next accumulator value.

 */",f17097:m2311
1496,fun JsNode.any(predicate: (JsNode) -> Boolean): Boolean,"{
    val visitor = object : RecursiveJsVisitor() {
        var matched: Boolean = false
    
        override fun visitElement(node: JsNode) {
            matched = matched || predicate(node)
            if (!matched) {
                super.visitElement(node)
            }
        }
    }
    visitor.accept(this)
    return visitor.matched
}","/**

 * Tests, if any node containing in receiver's AST matches, [predicate].

 */",f361:m81
45557,@Test fun testChecksCorrectChangingStringMetricsVersion(),"{
    val actualStringMetricsVersionAndHash = Pair(StringMetrics.VERSION, calculateFileChecksum(STRING_METRICS_RELATIVE_PATH))
    assertEquals(STRING_METRICS_EXPECTED_VERSION_AND_HASH, actualStringMetricsVersionAndHash, ""Hash of ${StringMetrics::class.qualifiedName} has been changed, please increase VERSION value. "" + ""Also you need to update hash and version in this test class."")
}","/**

     * Test checks for that the version of [StringMetrics] was increased after changes in this file

     */",f14865:m85
15040,"@SinceKotlin(""1.1"") @kotlin.internal.InlineOnly public actual inline fun minOf(a: Long, b: Long): Long","{
    return if (a <= b) a else b
}","/**

 * Returns the smaller of two values.

 */",f3836:m525
64149,@kotlin.internal.IntrinsicConstEvaluation public inline operator fun compareTo(other: Float): Int,this.toFloat().compareTo(other),"/**

     * Compares this value with the specified value for order.

     * Returns zero if this value is equal to the specified other value, a negative number if it's less than other,

     * or a positive number if it's greater than other.

     */",f17455:m1883
63571,public actual operator fun CharArray.plus(elements: CharArray): CharArray,"{
    val thisSize = size
    val arraySize = elements.size
    val result = copyOfUninitializedElements(thisSize + arraySize)
    elements.copyInto(result, thisSize)
    return result
}","/**

 * Returns an array containing all elements of the original array and then all elements of the given [elements] array.

 */",f17396:m4623
45765,"@Deprecated(""Scheduled for removal in Kotlin 2.1. Check KT-58759"", replaceWith = ReplaceWith(""project.dependencies.platform(notation, configureAction)"")) fun platform(notation: Any, configureAction: Action<in Dependency>): Dependency","project.dependencies.platform(notation, configureAction)","/**

     * @suppress

     */",f14927:m721
13871,@kotlin.internal.IntrinsicConstEvaluation public inline operator fun minus(other: Int): Char,(this.code - other).toChar(),/** Subtracts the other Int value from this value resulting a Char. */,f3703:m79
58980,"@SinceKotlin(""1.3"") public inline fun <V> CharSequence.associateWith(valueSelector: (Char) -> V): Map<Char, V>","{
    val result = LinkedHashMap<Char, V>(mapCapacity(length.coerceAtMost(128)).coerceAtLeast(16))
    return associateWithTo(result, valueSelector)
}","/**

 * Returns a [Map] where keys are characters from the given char sequence and values are

 * produced by the [valueSelector] function applied to each character.

 * 

 * If any two characters are equal, the last one gets added to the map.

 * 

 * The returned map preserves the entry iteration order of the original char sequence.

 * 

 * @sample samples.text.Strings.associateWith

 */",f17097:m1521
54641,public actual fun ByteArray.elementAt(index: Int): Byte,"{
    return elementAtOrElse(index) { throw IndexOutOfBoundsException(""index: $index, size: $size}"") }
}","/**

 * Returns an element at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this array.

 * 

 * @sample samples.collections.Collections.Elements.elementAt

 */",f16713:m55
16526,"private fun FirElementWithResolveState.tryJumpingLock(toPhase: FirResolvePhase, stateSnapshot: FirResolveState): Boolean","{
    val newState = FirInProcessOfResolvingToJumpingPhaseState(toPhase)
    val isSucceed = resolveStateFieldUpdater.compareAndSet(this, stateSnapshot, newState)
    if (!isSucceed) return false
    jumpingResolutionStatesStack.push(newState)
    return true
}","/**

     * Trying to set [FirInProcessOfResolvingToJumpingPhaseState] to [this].

     *

     * @return **true** if the state is published successfully

     *

     * @see withJumpingLockImpl

     * @see FirInProcessOfResolvingToJumpingPhaseState

     */",f4129:m643
49848,"private fun String.addAllDependenciesFromOtherConfigurations(project: Project, vararg configurationNames: String)","{
    project.configurations.named(this).configure { receiverConfiguration -> receiverConfiguration.dependencies.addAllLater(project.listProperty<Dependency> { configurationNames.map { project.configurations.getByName(it) }.flatMap { it.allDependencies } }) }
}","/**

 * Adds `allDependencies` of configurations mentioned in `configurationNames` to configuration named [this] in

 * a lazy manner

 */",f15980:m235
37683,"internal fun Map<SourceFile, MutableList<CallableMemberDescriptor>>.makeFilesOrderStable()",this.entries.sortedBy { it.key.name },"/**

 * Sort order of files. Order of declarations will be stabilized in the corresponding functions later.

 */",f11829:m2315
49051,"@Suppress(""unused"") @ExternalKotlinTargetApi fun IdeMultiplatformImport.registerExtrasSerializationExtension(builder: IdeaKotlinExtrasSerializationExtensionBuilder.() -> Unit)","{
    registerExtrasSerializationExtension(IdeaKotlinExtrasSerializationExtension(builder))
}","/**

 * Convenience shortcut method for

 * `registerExtrasSerializationExtension(IdeaKotlinExtrasSerializationExtension(builder))`

 * see [IdeMultiplatformImport.registerExtrasSerializationExtension]

 */",f15735:m695
57263,"@SinceKotlin(""1.4"") @kotlin.internal.InlineOnly public actual inline infix fun LongArray?.contentEquals(other: LongArray?): Boolean","{
    return java.util.Arrays.equals(this, other)
}","/**

 * Checks if the two specified arrays are *structurally* equal to one another.

 * 

 * Two arrays are considered structurally equal if they have the same size, and elements at corresponding indices are equal.

 * 

 * The arrays are also considered structurally equal if both are `null`.

 * 

 * @param other the array to compare with this array.

 * @return `true` if the two arrays are structurally equal, `false` otherwise.

 * 

 * @sample samples.collections.Arrays.ContentOperations.intArrayContentEquals

 */",f16970:m1277
58553,"@SinceKotlin(""1.5"") @WasExperimental(ExperimentalUnsignedTypes::class) public fun UInt.coerceAtMost(maximumValue: UInt): UInt","{
    return if (this > maximumValue) maximumValue else this
}","/**

 * Ensures that this value is not greater than the specified [maximumValue].

 * 

 * @return this value if it's less than or equal to the [maximumValue] or the [maximumValue] otherwise.

 * 

 * @sample samples.comparisons.ComparableOps.coerceAtMostUnsigned

 */",f17090:m941
56014,"@SinceKotlin(""1.3"") @kotlin.internal.InlineOnly public inline fun <M, R> M.ifEmpty(defaultValue: () -> R): R where M : Map<*, *>, M : R","{
    contract { callsInPlace(defaultValue, InvocationKind.AT_MOST_ONCE) }
    return if (isEmpty()) defaultValue() else this
}","/**

 * Returns this map if it's not empty

 * or the result of calling [defaultValue] function if the map is empty.

 *

 * @sample samples.collections.Maps.Usage.mapIfEmpty

 */",f16823:m459
57196,"@SinceKotlin(""1.4"") @OptIn(kotlin.experimental.ExperimentalTypeInference::class) @OverloadResolutionByLambdaReturnType @kotlin.jvm.JvmName(""sumOfBigDecimal"") @kotlin.internal.InlineOnly public inline fun <T> Iterable<T>.sumOf(selector: (T) -> java.math.BigDecimal): java.math.BigDecimal","{
    var sum: java.math.BigDecimal = 0.toBigDecimal()
    for (element in this) {
        sum += selector(element)
    }
    return sum
}","/**

 * Returns the sum of all values produced by [selector] function applied to each element in the collection.

 */",f16967:m271
52879,"@SinceKotlin(""1.4"") public actual fun Long.countOneBits(): Int",high.countOneBits() + low.countOneBits(),"/**

 * Counts the number of set bits in the binary representation of this [Long] number.

 */",f16581:m353
56862,"@SinceKotlin(""1.2"") @kotlin.internal.InlineOnly public actual inline fun Float.Companion.fromBits(bits: Int): Float",java.lang.Float.intBitsToFloat(bits),"/**

 * Returns the [Float] value corresponding to a given bit representation.

 */",f16929:m177
40410,fun runTest(swiftFilePath: String),"{
    Assumptions.assumeTrue(targets.hostTarget.family.isAppleFamily && targets.testTarget.family.isAppleFamily)
    val testDirectory = getAbsoluteFile(swiftFilePath).resolve(""golden_result"")
    require(testDirectory.exists() && testDirectory.isDirectory())
    val swiftFile = testDirectory.walk().find { it.extension == ""swift"" } ?: error(""Could not find swift file for test $testDirectory"")
    val cHeader = testDirectory.walk().find { it.extension == ""h"" } ?: error(""Could not find header for test $testDirectory"")
    val configs = testRunSettings.configurables as AppleConfigurables
    val swiftTarget = configs.targetTriple.withOSVersion(configs.osVersionMin).toString()
    val bridgeModuleFile = createModuleMap(buildDir, cHeader)
    val kotlinRuntimeModuleMapFile = Distribution(KotlinNativePaths.homePath.absolutePath).kotlinRuntimeForSwiftModuleMap
    val args = listOf(""-typecheck"", swiftFile.absolutePath, ""-Xcc"", ""-fmodule-map-file=${bridgeModuleFile.absolutePath}"", ""-Xcc"", ""-fmodule-map-file=${kotlinRuntimeModuleMapFile}"", ""-module-name=main"", ""-sdk"", configs.absoluteTargetSysRoot, ""-target"", swiftTarget)
    val (exitCode, swiftcOutput, _, _) = invokeSwiftC(testRunSettings, args)
    assertEquals(ExitCode.OK, exitCode, ""swift type checked resulted in: $swiftcOutput"")
}","/**

    This test is the simplest possible solutions for task KT-65559



    One reading this test could find themselves confused, with following questions:

    1/ what does it do

    2/ why it is placed in native-test infra

    3/ what actually we do test



    This comment wil try to answer all those questions.



    What we are trying to achieve:

    There is a SwiftExport artefact, and we have some integration tests for it.

    But our integration tests check only one thing - that our current implementation generates expected source files.

    But we do not compile that resulted files, as that actions requires macOS agents with swift installed,

    and we want to keep our day2day tests as quick as possible.



    So, we have construct this test - it will take golden data that we are expecting to receive from SwiftExport,

    and verify with swift compiler that we expect valid code. This way we have separated tests that verify code generation

    from tests that verify code validity. That separation may not be desired, but that separation allows us to keep tests for

    code generation fast and TeamCity agent agnostic.



    We do plan to refactor this, and extract infra for running swiftc and xcode into separate module, that will be shared

    between SwiftExport, ObjectiveCExport, Kotlin/Native and KGP tests. But currently - the following solution is the simplest one.

     */",f12840:m47
14251,public fun decrementAndGet(): Long,this::value.getAndAddField(-1L) - 1L,"/**

     * Atomically decrements the current value by one and returns the new value.

     */",f3762:m281
40564,fun forOneStageExecutable(): Iterable<CompiledDependency<*>>,(klibDependencies.asSequence() + staticCacheDependencies).asIterable(),/** Dependencies needed to compile one-stage executable. */,f12864:m105
23026,"fun Project.createGradlePluginVariant(variant: GradlePluginVariant, commonSourceSet: SourceSet, isGradlePlugin: Boolean = true): SourceSet","{
    val variantSourceSet = sourceSets.create(variant.sourceSetName) {
        excludeGradleCommonDependencies(this)
        wireGradleVariantToCommonGradleVariant(this, commonSourceSet)
    }
    plugins.withType<JavaLibraryPlugin>().configureEach {
        extensions.configure<JavaPluginExtension> {
            registerFeature(variantSourceSet.name) {
                usingSourceSet(variantSourceSet)
                if (isGradlePlugin) {
                    capability(project.group.toString(), project.name, project.version.toString())
                }
                if (kotlinBuildProperties.publishGradlePluginsJavadoc) {
                    withJavadocJar()
                }
                withSourcesJar()
            }
            configurations.named(variantSourceSet.apiElementsConfigurationName, commonVariantAttributes())
            configurations.named(variantSourceSet.runtimeElementsConfigurationName, commonVariantAttributes())
            configurations.create(variantSourceSet.embeddedConfigurationName) {
                isCanBeConsumed = false
                isCanBeResolved = true
                attributes {
                    attribute(Usage.USAGE_ATTRIBUTE, objects.named(Usage.JAVA_RUNTIME))
                    attribute(LibraryElements.LIBRARY_ELEMENTS_ATTRIBUTE, objects.named(LibraryElements.JAR))
                }
            }
        }
        tasks.named<Jar>(variantSourceSet.sourcesJarTaskName) {
            addEmbeddedSources()
            addEmbeddedSources(variantSourceSet.embeddedConfigurationName)
        }
    }
    plugins.withId(""java-gradle-plugin"") { tasks.named<Copy>(variantSourceSet.processResourcesTaskName) {
        val copyPluginDescriptors = rootSpec.addChild()
        copyPluginDescriptors.into(""META-INF/gradle-plugins"")
        copyPluginDescriptors.from(tasks.named(""pluginDescriptors""))
    } }
    configurations.configureEach { if (this@configureEach.name.startsWith(variantSourceSet.name) && (isCanBeResolved || isCanBeConsumed)) {
        attributes { attribute(GradlePluginApiVersion.GRADLE_PLUGIN_API_VERSION_ATTRIBUTE, objects.named(variant.minimalSupportedGradleVersion)) }
    } }
    tasks.named<KotlinJvmCompile>(""compile${variantSourceSet.name.replaceFirstChar { it.uppercase() }}Kotlin"") { compilerOptions.moduleName.set(this@createGradlePluginVariant.name) }
    dependencies {
        variantSourceSet.compileOnlyConfigurationName(kotlinStdlib())
        variantSourceSet.compileOnlyConfigurationName(""dev.gradleplugins:gradle-api:${variant.gradleApiVersion}"")
        if (this@createGradlePluginVariant.name !in testPlugins) {
            variantSourceSet.apiConfigurationName(project("":kotlin-gradle-plugin-api"")) { capabilities { requireCapability(""org.jetbrains.kotlin:kotlin-gradle-plugin-api-${variant.sourceSetName}"") } }
        }
    }
    registerValidatePluginTasks(variantSourceSet)
    return variantSourceSet
}","/**

 * Adding plugin variants: https://docs.gradle.org/current/userguide/implementing_gradle_plugins.html#plugin-with-variants

 */",f8830:m881
48539,"@JvmOverloads fun staticLib(namePrefix: String, buildTypes: Collection<NativeBuildType> = NativeBuildType.DEFAULT_BUILD_TYPES, configure: Action<StaticLibrary>)","staticLib(namePrefix, buildTypes) { configure.execute(this) }",/** Creates a static library with the given [namePrefix] for each build type and configures it. */,f15652:m431
58929,public inline fun CharSequence.indexOfFirst(predicate: (Char) -> Boolean): Int,"{
    for (index in indices) {
        if (predicate(this[index])) {
            return index
        }
    }
    return -1
}","/**

 * Returns index of the first character matching the given [predicate], or -1 if the char sequence does not contain such character.

 */",f17097:m307
17448,"protected open fun doTestByMainFile(mainFile: KtFile, mainModule: KtTestModule, testServices: TestServices)","{
    throw UnsupportedOperationException(""The test case is not fully implemented. "" + ""'${::doTestByMainFile.name}', '${::doTestByMainModuleAndOptionalMainFile.name}' or '${::doTest.name}' should be overridden"")
}","/**

     * Consider implementing this method if you can choose some main file in your test case. It can be, for example, a file with a caret.

     *

     * Examples of use cases:

     *

     * - Collect diagnostics of the file

     * - Get an element at the caret and invoke some logic

     * - Do some operations on [mainFile] and dump a state of other files in [mainModule]

     *

     * Only one [KtFile] can be the main one.

     *

     * The main file is selected based on the following rules:

     *

     * - A single file in the [main][isMainModule] module

     * - A single file in the project

     * - The file has a selected expression

     * - The file has a caret

     * - The file name is equal to ""main"" or equal to the defined [AnalysisApiTestDirectives.MAIN_FILE_NAME]

     *

     * @see findMainFile

     * @see isMainFile

     * @see AnalysisApiTestDirectives.MAIN_FILE_NAME

     */",f5235:m141
14894,"@SinceKotlin(""1.3"") @Suppress(""ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS"") public actual fun LongArray.copyInto(destination: LongArray, destinationOffset: Int = 0, startIndex: Int = 0, endIndex: Int = size): LongArray","{
    arrayCopy(this, startIndex, destination, destinationOffset, endIndex - startIndex)
    return destination
}","/**

 * Copies this array or its subrange into the [destination] array and returns that array.

 * 

 * It's allowed to pass the same array in the [destination] and even specify the subrange so that it overlaps with the destination range.

 * 

 * @param destination the array to copy to.

 * @param destinationOffset the position in the [destination] array to copy to, 0 by default.

 * @param startIndex the beginning (inclusive) of the subrange to copy, 0 by default.

 * @param endIndex the end (exclusive) of the subrange to copy, size of this array by default.

 * 

 * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of this array indices or when `startIndex > endIndex`.

 * @throws IndexOutOfBoundsException when the subrange doesn't fit into the [destination] array starting at the specified [destinationOffset],

 * or when that index is out of the [destination] array indices range.

 * 

 * @return the [destination] array.

 */",f3831:m2383
58585,"@SinceKotlin(""1.4"") @kotlin.internal.InlineOnly public inline fun IntRange.randomOrNull(): Int?","{
    return randomOrNull(Random)
}","/**

 * Returns a random element from this range, or `null` if this range is empty.

 */",f17092:m451
59030,"@SinceKotlin(""1.7"") @kotlin.jvm.JvmName(""minOrThrow"") @Suppress(""CONFLICTING_OVERLOADS"") public fun CharSequence.min(): Char","{
    if (isEmpty()) throw NoSuchElementException()
    var min = this[0]
    for (i in 1 .. lastIndex) {
        val e = this[i]
        if (min > e) min = e
    }
    return min
}","/**

 * Returns the smallest character.

 * 

 * @throws NoSuchElementException if the char sequence is empty.

 */",f17097:m2947
45643,fun javacOptions(action: Action<KaptJavacOption>),"{
    javacOptions { action.execute(this) }
}","/**

     * Configures the [KaptJavacOption] used for annotation processing.

     */",f14908:m267
58824,"@SinceKotlin(""1.7"") @kotlin.jvm.JvmName(""maxOrThrow"") @Suppress(""CONFLICTING_OVERLOADS"") public fun Sequence<Float>.max(): Float","{
    val iterator = iterator()
    if (!iterator.hasNext()) throw NoSuchElementException()
    var max = iterator.next()
    while (iterator.hasNext()) {
        val e = iterator.next()
        max = maxOf(max, e)
    }
    return max
}","/**

 * Returns the largest element.

 * 

 * If any of elements is `NaN` returns `NaN`.

 *

 * The operation is _terminal_.

 * 

 * @throws NoSuchElementException if the sequence is empty.

 */",f17096:m2709
14938,internal fun IntArray.copyOfUninitializedElements(newSize: Int): IntArray,"{
    return copyOfUninitializedElements(0, newSize)
}","/**

 * Returns new array which is a copy of the original array with new elements filled with **lateinit** _uninitialized_ values.

 * Attempts to read _uninitialized_ values from this array work in implementation-dependent manner,

 * either throwing exception or returning some kind of implementation-specific default value.

 */",f3831:m3603
64186,public operator fun rangeTo(other: Short): IntRange,"IntRange(this, other.toInt())",/** Creates a range from this value to the specified [other] value. */,f17455:m2349
58008,"@SinceKotlin(""1.5"") @WasExperimental(ExperimentalUnsignedTypes::class, ExperimentalStdlibApi::class) @kotlin.internal.InlineOnly public inline fun UByte.takeHighestOneBit(): UByte",toInt().takeHighestOneBit().toUByte(),"/**

 * Returns a number having a single bit set in the position of the most significant set bit of this [UByte] number,

 * or zero, if this number is zero.

 */",f17056:m357
58227,@kotlin.internal.InlineOnly public inline operator fun plus(other: ULong): ULong,ULong(this.data.plus(other.data)),/** Adds the other value to this value. */,f17066:m165
58829,"@SinceKotlin(""1.4"") @OptIn(kotlin.experimental.ExperimentalTypeInference::class) @OverloadResolutionByLambdaReturnType @kotlin.internal.InlineOnly public inline fun <T> Sequence<T>.maxOf(selector: (T) -> Float): Float","{
    val iterator = iterator()
    if (!iterator.hasNext()) throw NoSuchElementException()
    var maxValue = selector(iterator.next())
    while (iterator.hasNext()) {
        val v = selector(iterator.next())
        maxValue = maxOf(maxValue, v)
    }
    return maxValue
}","/**

 * Returns the largest value among all values produced by [selector] function

 * applied to each element in the sequence.

 * 

 * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.

 *

 * The operation is _terminal_.

 * 

 * @throws NoSuchElementException if the sequence is empty.

 */",f17096:m2955
58544,"@SinceKotlin(""1.5"") @WasExperimental(ExperimentalUnsignedTypes::class) public infix fun ULongProgression.step(step: Long): ULongProgression","{
    checkStepIsPositive(step > 0, step)
    return ULongProgression.fromClosedRange(first, last, if (this.step > 0) step else -step)
}","/**

 * Returns a progression that goes over the same range with the given step.

 * 

 * @sample samples.ranges.Ranges.stepULong

 */",f17090:m717
58144,@kotlin.internal.InlineOnly public inline operator fun compareTo(other: ULong): Int,this.toULong().compareTo(other),"/**

     * Compares this value with the specified value for order.

     * Returns zero if this value is equal to the specified other value, a negative number if it's less than other,

     * or a positive number if it's greater than other.

     */",f17063:m131
64148,@kotlin.internal.IntrinsicConstEvaluation public inline operator fun compareTo(other: Long): Int,this.toLong().compareTo(other),"/**

     * Compares this value with the specified value for order.

     * Returns zero if this value is equal to the specified other value, a negative number if it's less than other,

     * or a positive number if it's greater than other.

     */",f17455:m1865
58554,"@SinceKotlin(""1.5"") @WasExperimental(ExperimentalUnsignedTypes::class) public fun ULong.coerceAtMost(maximumValue: ULong): ULong","{
    return if (this > maximumValue) maximumValue else this
}","/**

 * Ensures that this value is not greater than the specified [maximumValue].

 * 

 * @return this value if it's less than or equal to the [maximumValue] or the [maximumValue] otherwise.

 * 

 * @sample samples.comparisons.ComparableOps.coerceAtMostUnsigned

 */",f17090:m967
59045,public inline fun CharSequence.none(predicate: (Char) -> Boolean): Boolean,"{
    for (element in this) if (predicate(element)) return false
    return true
}","/**

 * Returns `true` if no characters match the given [predicate].

 * 

 * @sample samples.collections.Collections.Aggregates.noneWithPredicate

 */",f17097:m3529
235,"fun renameLocalNames(context: NamingContext, function: JsFunction)","{
    for (name in collectDefinedNames(function.body)) {
        val temporaryName = JsScope.declareTemporaryName(name.ident).apply { staticRef = name.staticRef }
        context.replaceName(name, temporaryName.makeRef())
    }
}","/**

 * Makes function local names fresh in context

 */",f106:m123
14015,"@SinceKotlin(""1.1"") @kotlin.internal.InlineOnly public actual inline fun String.toShort(radix: Int): Short",toShortOrNull(radix) ?: throw NumberFormatException(),"/**

 * Parses the string as a [Short] number and returns the result.

 * @throws NumberFormatException if the string is not a valid representation of a number.

 * @throws IllegalArgumentException when [radix] is not a valid radix for string to number conversion.

 */",f3714:m173
54794,public actual fun FloatArray.toTypedArray(): Array<Float>,"{
    return js(""[]"").slice.call(this)
}","/**

 * Returns a *typed* object array containing all of the elements of this primitive array.

 */",f16713:m3807
58555,"@SinceKotlin(""1.5"") @WasExperimental(ExperimentalUnsignedTypes::class) public fun UByte.coerceAtMost(maximumValue: UByte): UByte","{
    return if (this > maximumValue) maximumValue else this
}","/**

 * Ensures that this value is not greater than the specified [maximumValue].

 * 

 * @return this value if it's less than or equal to the [maximumValue] or the [maximumValue] otherwise.

 * 

 * @sample samples.comparisons.ComparableOps.coerceAtMostUnsigned

 */",f17090:m993
56613,public actual fun <T> MutableList<T>.sortWith(comparator: Comparator<in T>): Unit,"{
    if (size > 1) java.util.Collections.sort(this, comparator)
}","/**

 * Sorts elements in the list in-place according to the order specified with [comparator].

 *

 * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.

 *

 * @sample samples.collections.Collections.Sorting.sortMutableListWith

 */",f16918:m67
58769,public fun <T> Sequence<T>.take(n: Int): Sequence<T>,"{
    require(n >= 0) { ""Requested element count $n is less than zero."" }
    return when {
        n == 0 -> emptySequence()
        this is DropTakeSequence -> this.take(n)
        else -> TakeSequence(this, n)
    }
}","/**

 * Returns a sequence containing first [n] elements.

 *

 * The operation is _intermediate_ and _stateless_.

 * 

 * @throws IllegalArgumentException if [n] is negative.

 * 

 * @sample samples.collections.Collections.Transformations.take

 */",f17096:m1101
57081,public fun File.readText(charset: Charset = Charsets.UTF_8): String,reader(charset).use { it.readText() },"/**

 * Gets the entire content of this file as a String using UTF-8 or specified [charset].

 *

 * This method is not recommended on huge files. It has an internal limitation of 2 GB file size.

 *

 * @param charset character set to use.

 * @return the entire content of this file as a String.

 */",f16956:m245
59079,"public infix fun CharSequence.zip(other: CharSequence): List<Pair<Char, Char>>","{
    return zip(other) { c1, c2 -> c1 to c2 }
}","/**

 * Returns a list of pairs built from the characters of `this` and the [other] char sequences with the same index

 * The returned list has length of the shortest char sequence.

 * 

 * @sample samples.text.Strings.zip

 */",f17097:m4827
58713,"public fun Short.coerceIn(minimumValue: Short, maximumValue: Short): Short","{
    if (minimumValue > maximumValue) throw IllegalArgumentException(""Cannot coerce value to an empty range: maximum $maximumValue is less than minimum $minimumValue."")
    if (this < minimumValue) return minimumValue
    if (this > maximumValue) return maximumValue
    return this
}","/**

 * Ensures that this value lies in the specified range [minimumValue]..[maximumValue].

 * 

 * @return this value if it's in the range, or [minimumValue] if this value is less than [minimumValue], or [maximumValue] if this value is greater than [maximumValue].

 * 

 * @sample samples.comparisons.ComparableOps.coerceIn

 */",f17092:m2783
17171,fun File.hasLlFirDivergenceDirective(): Boolean,useLines { findDirectiveInLines(it.iterator()) },"/**

 * Checks whether the [File] contains a legal `LL_FIR_DIVERGENCE` directive without reading the whole file.

 */",f5176:m25
21179,"private fun getDefaultJdkModuleRoots(javaModuleFinder: CliJavaModuleFinder, javaModuleGraph: JavaModuleGraph): List<JavaRoot>","{
    return javaModuleGraph.getAllDependencies(javaModuleFinder.computeDefaultRootModules()).flatMap { moduleName ->
        val module = javaModuleFinder.findModule(moduleName) ?: return@flatMap emptyList<JavaRoot>()
        val result = module.getJavaModuleRoots()
        result
    }
}","/**

     * Computes the [JavaRoot]s of the JDK's default modules.

     *

     * @see ClasspathRootsResolver.addModularRoots

     */",f8501:m583
13477,@kotlin.internal.IntrinsicConstEvaluation public inline operator fun compareTo(other: Short): Int,this.toShort().compareTo(other),"/**

     * Compares this value with the specified value for order.

     * Returns zero if this value is equal to the specified other value, a negative number if it's less than other,

     * or a positive number if it's greater than other.

     */",f3686:m101
57014,@kotlin.internal.InlineOnly public inline fun Reader.buffered(bufferSize: Int = DEFAULT_BUFFER_SIZE): BufferedReader,"if (this is BufferedReader) this else BufferedReader(this, bufferSize)","/** Returns a buffered reader wrapping this Reader, or this Reader itself if it is already buffered. */",f16950:m37
57174,"@SinceKotlin(""1.4"") public actual fun <T: Comparable<T>> minOf(a: T, vararg other: T): T","{
    var min = a
    for (e in other) min = minOf(min, e)
    return min
}","/**

 * Returns the smaller of the given values.

 * 

 * If there are multiple equal minimal values, returns the first of them.

 */",f16966:m729
56220,"@SinceKotlin(""1.5"") @kotlin.internal.InlineOnly @kotlin.internal.IntrinsicConstEvaluation public inline fun Byte.mod(other: Byte): Byte",this.toInt().mod(other.toInt()).toByte(),"/**

 * Calculates the remainder of flooring division of this value (dividend) by the other value (divisor).

 *

 * The result is either zero or has the same sign as the _divisor_ and has the absolute value less than the absolute value of the divisor.

 */",f16842:m43
40158,"private fun transformToNativeIr(module: TestModule, inputArtifact: ClassicFrontendOutputArtifact): IrBackendInput","{
    val (psiFiles, analysisResult, project, _) = inputArtifact
    val configuration = testServices.compilerConfigurationProvider.getCompilerConfiguration(module)
    val sourceFiles: List<KtFile> = psiFiles.values.toList()
    val translator = Psi2IrTranslator(configuration.languageVersionSettings, Psi2IrConfiguration(ignoreErrors = CodegenTestDirectives.IGNORE_ERRORS in module.directives, configuration.partialLinkageConfig.isEnabled), configuration.irMessageLogger::checkNoUnboundSymbols)
    val manglerDesc = KonanManglerDesc
    val konanIdSignaturerClass = kotlinNativeClass(""org.jetbrains.kotlin.backend.konan.serialization.KonanIdSignaturer"")
    val konanIdSignaturerConstructor = konanIdSignaturerClass.constructors.single()
    val konanIdSignaturerClassInstance = konanIdSignaturerConstructor.call(manglerDesc) as IdSignatureComposer
    val symbolTable = SymbolTable(konanIdSignaturerClassInstance, IrFactoryImpl)
    val generatorContext = translator.createGeneratorContext(analysisResult.moduleDescriptor, analysisResult.bindingContext, symbolTable)
    val konanStubGeneratorExtensionsClass = kotlinNativeClass(""org.jetbrains.kotlin.backend.konan.KonanStubGeneratorExtensions"")
    val stubGenerator = DeclarationStubGeneratorImpl(analysisResult.moduleDescriptor, symbolTable, generatorContext.irBuiltIns, DescriptorByIdSignatureFinderImpl(analysisResult.moduleDescriptor, manglerDesc), konanStubGeneratorExtensionsClass.objectInstance as StubGeneratorExtensions).apply { unboundSymbolGeneration = true }
    val irDeserializer = object : IrDeserializer {
        override fun getDeclaration(symbol: IrSymbol) = stubGenerator.getDeclaration(symbol)
    
        override fun resolveBySignatureInModule(signature: IdSignature, kind: IrDeserializer.TopLevelSymbolKind, moduleName: Name): Nothing = shouldNotBeCalled()
    
        override fun postProcess(inOrAfterLinkageStep: Boolean) = Unit
    }
    val pluginExtensions = IrGenerationExtension.getInstances(project)
    val moduleFragment = translator.generateModuleFragment(generatorContext, sourceFiles, irProviders = listOf(irDeserializer), linkerExtensions = pluginExtensions)
    val pluginContext = IrPluginContextImpl(generatorContext.moduleDescriptor, generatorContext.bindingContext, generatorContext.languageVersionSettings, generatorContext.symbolTable, generatorContext.typeTranslator, generatorContext.irBuiltIns, linker = irDeserializer, diagnosticReporter = configuration.irMessageLogger)
    return IrBackendInput.NativeBackendInput(moduleFragment, pluginContext, diagnosticReporter = DiagnosticReporterFactory.createReporter(), descriptorMangler = (pluginContext.symbolTable as SymbolTable).signaturer!!.mangler, irMangler = KonanManglerIr, firMangler = null, metadataSerializer = null)
}","/**

     * Mostly mimics [org.jetbrains.kotlin.backend.konan.psiToIr], since direct call is impossible due to:

     * - prohibited import of module `:kotlin-native:backend.native` here to `:native:native.tests`

     * - invocation via reflection is complicated due to moving [com.intellij.openapi.project.Project] to another subpackage during compiler

     * JAR embedding.

     *

     * It's unlikely that [org.jetbrains.kotlin.backend.konan.psiToIr] would be ever significantly changed before reaching its end-of-life,

     * so it's plausible to have a reduced copy here in the test pipeline.

     */",f12813:m111
58823,"@SinceKotlin(""1.7"") @kotlin.jvm.JvmName(""maxOrThrow"") @Suppress(""CONFLICTING_OVERLOADS"") public fun Sequence<Double>.max(): Double","{
    val iterator = iterator()
    if (!iterator.hasNext()) throw NoSuchElementException()
    var max = iterator.next()
    while (iterator.hasNext()) {
        val e = iterator.next()
        max = maxOf(max, e)
    }
    return max
}","/**

 * Returns the largest element.

 * 

 * If any of elements is `NaN` returns `NaN`.

 *

 * The operation is _terminal_.

 * 

 * @throws NoSuchElementException if the sequence is empty.

 */",f17096:m2663
13517,public operator fun rangeTo(other: Short): IntRange,"IntRange(this.toInt(), other.toInt())",/** Creates a range from this value to the specified [other] value. */,f3686:m611
56901,"public actual fun <T> lazy(mode: LazyThreadSafetyMode, initializer: () -> T): Lazy<T>","when (mode) {
    LazyThreadSafetyMode.SYNCHRONIZED -> SynchronizedLazyImpl(initializer)
    LazyThreadSafetyMode.PUBLICATION -> SafePublicationLazyImpl(initializer)
    LazyThreadSafetyMode.NONE -> UnsafeLazyImpl(initializer)
}","/**

 * Creates a new instance of the [Lazy] that uses the specified initialization function [initializer]

 * and thread-safety [mode].

 *

 * If the initialization of a value throws an exception, it will attempt to reinitialize the value at next access.

 *

 * Note that when the [LazyThreadSafetyMode.SYNCHRONIZED] mode is specified the returned instance uses itself

 * to synchronize on. Do not synchronize from external code on the returned instance as it may cause accidental deadlock.

 * Also this behavior can be changed in the future.

 */",f16934:m45
14905,public actual fun DoubleArray.copyOf(): DoubleArray,"{
    return this.copyOfUninitializedElements(size)
}","/**

 * Returns new array which is a copy of the original array.

 * 

 * @sample samples.collections.Arrays.CopyOfOperations.copyOf

 */",f3831:m2721
58023,@kotlin.internal.InlineOnly public inline operator fun plus(other: UByte): UInt,this.toUInt().plus(other.toUInt()),/** Adds the other value to this value. */,f17058:m147
14017,"@SinceKotlin(""1.1"") @kotlin.internal.InlineOnly public actual inline fun String.toInt(radix: Int): Int",toIntOrNull(radix) ?: throw NumberFormatException(),"/**

 * Parses the string as an [Int] number and returns the result.

 * @throws NumberFormatException if the string is not a valid representation of a number.

 * @throws IllegalArgumentException when [radix] is not a valid radix for string to number conversion.

 */",f3714:m205
56557,@kotlin.internal.InlineOnly public inline fun <T> Lock.withLock(action: () -> T): T,"{
    contract { callsInPlace(action, InvocationKind.EXACTLY_ONCE) }
    lock()
    try {
        return action()
    } finally {
        unlock()
    }
}","/**

 * Executes the given [action] under this lock.

 * @return the return value of the action.

 */",f16896:m25
45559,@Test fun testChecksCorrectChangingNumericalMetricsVersion(),"{
    val actualNumericalMetricsVersionAndHash = Pair(NumericalMetrics.VERSION, calculateFileChecksum(NUMERICAL_METRICS_RELATIVE_PATH))
    assertEquals(NUMERICAL_METRICS_EXPECTED_VERSION_AND_HASH, actualNumericalMetricsVersionAndHash, ""Hash of ${NumericalMetrics::class.qualifiedName} has been changed, please increase VERSION value. "" + ""Also you need to update hash and version in this test class."")
}","/**

     * Test checks for that the version of [NumericalMetrics] was increased after changes in this file

     */",f14865:m141
64135,"@Deprecated(""Direct conversion to Char is deprecated. Use toInt().toChar() or Char constructor instead."", ReplaceWith(""this.toInt().toChar()"")) @DeprecatedSinceKotlin(warningSince = ""1.5"", errorSince = ""2.3"") @kotlin.internal.IntrinsicConstEvaluation public override fun toChar(): Char",reinterpretAsInt().reinterpretAsChar(),"/**

     * Converts this [Short] value to [Char].

     *

     * The resulting `Char` code is equal to this value reinterpreted as an unsigned number,

     * i.e. it has the same binary representation as this `Short`.

     */",f17455:m1605
58258,@kotlin.internal.InlineOnly public inline infix fun and(other: ULong): ULong,ULong(this.data and other.data),/** Performs a bitwise AND operation between the two values. */,f17066:m537
21354,private inline fun <reified T: FirCallableDeclaration> T.unwrapInheritanceSubstitutionOverrideIfNeeded(): T?,"{
    val containingClass = getContainingClass(rootSession) ?: return null
    val originalDeclaration = originalForSubstitutionOverride ?: return null
    val allowedTypeParameters = buildSet {
        originalDeclaration.typeParameters.mapTo(this) { it.symbol.toLookupTag() }
        containingClass.typeParameters.mapNotNullTo(this) { (it as? FirOuterClassTypeParameterRef)?.symbol?.toLookupTag() }
    }
    val usedTypeParameters = collectReferencedTypeParameters(originalDeclaration)
    return if (allowedTypeParameters.containsAll(usedTypeParameters)) {
        originalDeclaration
    } else {
        null
    }
}","/**

     * We want to unwrap a SUBSTITUTION_OVERRIDE wrapper if it doesn't affect the declaration's signature in any way. If the signature

     * is somehow changed, then we want to keep the wrapper.

     *

     * Such substitute overrides happen because of inheritance.

     *

     * If the declaration references only its own type parameters, or parameters from the outer declarations, then

     * we consider that it's signature will not be changed by the SUBSTITUTION_OVERRIDE, so the wrapper can be unwrapped.

     *

     * This have a few caveats when it comes to the inner classes. TODO Provide a reference to some more in-detail description of that.

     *

     * @receiver A declaration that needs to be unwrapped.

     * @return An unsubstituted declaration ([originalForSubstitutionOverride]]) if it exists and if it does not have any change

     * in signature; `null` otherwise.

     */",f8536:m1095
57362,public actual operator fun LongArray.plus(elements: LongArray): LongArray,"{
    val thisSize = size
    val arraySize = elements.size
    val result = java.util.Arrays.copyOf(this, thisSize + arraySize)
    System.arraycopy(elements, 0, result, thisSize, arraySize)
    return result
}","/**

 * Returns an array containing all elements of the original array and then all elements of the given [elements] array.

 */",f16970:m3875
43428,"infix fun <A, B> Iterable<A>.x(that: Iterable<B>): Sequence<Pair<A, B>>","sequence { for (a in this@x) {
    for (b in that) {
        yield(a to b)
    }
} }","/**

 * Cartesian product of two collections.

 * Returns a sequence of all possible pairs between elements from [this] and [that]

 */",f13431:m63
58746,public inline fun <T> Sequence<T>.indexOfFirst(predicate: (T) -> Boolean): Int,"{
    var index = 0
    for (item in this) {
        checkIndexOverflow(index)
        if (predicate(item)) return index
        index++
    }
    return -1
}","/**

 * Returns index of the first element matching the given [predicate], or -1 if the sequence does not contain such element.

 *

 * The operation is _terminal_.

 */",f17096:m405
58791,"@SinceKotlin(""1.4"") @OptIn(kotlin.experimental.ExperimentalTypeInference::class) @OverloadResolutionByLambdaReturnType @kotlin.jvm.JvmName(""flatMapIndexedIterable"") public fun <T, R> Sequence<T>.flatMapIndexed(transform: (index: Int, T) -> Iterable<R>): Sequence<R>","{
    return flatMapIndexed(this, transform, Iterable<R>::iterator)
}","/**

 * Returns a single sequence of all elements yielded from results of [transform] function being invoked on each element

 * and its index in the original sequence.

 *

 * The operation is _intermediate_ and _stateless_.

 * 

 * @sample samples.collections.Collections.Transformations.flatMapIndexed

 */",f17096:m1757
63490,"@SinceKotlin(""1.3"") @Suppress(""ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS"") public actual fun CharArray.copyInto(destination: CharArray, destinationOffset: Int = 0, startIndex: Int = 0, endIndex: Int = size): CharArray","{
    AbstractList.checkRangeIndexes(startIndex, endIndex, this.size)
    val rangeSize = endIndex - startIndex
    AbstractList.checkRangeIndexes(destinationOffset, destinationOffset + rangeSize, destination.size)
    kotlin.wasm.internal.copyWasmArray(this.storage, destination.storage, startIndex, destinationOffset, rangeSize)
    return destination
}","/**

 * Copies this array or its subrange into the [destination] array and returns that array.

 * 

 * It's allowed to pass the same array in the [destination] and even specify the subrange so that it overlaps with the destination range.

 * 

 * @param destination the array to copy to.

 * @param destinationOffset the position in the [destination] array to copy to, 0 by default.

 * @param startIndex the beginning (inclusive) of the subrange to copy, 0 by default.

 * @param endIndex the end (exclusive) of the subrange to copy, size of this array by default.

 * 

 * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of this array indices or when `startIndex > endIndex`.

 * @throws IndexOutOfBoundsException when the subrange doesn't fit into the [destination] array starting at the specified [destinationOffset],

 * or when that index is out of the [destination] array indices range.

 * 

 * @return the [destination] array.

 */",f17396:m2613
57479,"@SinceKotlin(""1.4"") @OptIn(kotlin.experimental.ExperimentalTypeInference::class) @OverloadResolutionByLambdaReturnType @kotlin.jvm.JvmName(""sumOfBigInteger"") @kotlin.internal.InlineOnly public inline fun CharArray.sumOf(selector: (Char) -> java.math.BigInteger): java.math.BigInteger","{
    var sum: java.math.BigInteger = 0.toBigInteger()
    for (element in this) {
        sum += selector(element)
    }
    return sum
}","/**

 * Returns the sum of all values produced by [selector] function applied to each element in the array.

 */",f16970:m6177
12267,internal fun Compilation.createTempSource(): File,"{
    val result = Files.createTempFile(null, "".${language.sourceFileExtension}"").toFile()
    result.deleteOnExit()
    result.bufferedWriter().use { writer -> writer.appendPreamble(this) }
    return result
}","/**

 * Creates temporary source file which includes the library.

 */",f3631:m741
54782,"@Deprecated(""Use other sorting functions from the Standard Library"") @DeprecatedSinceKotlin(warningSince = ""1.6"") @kotlin.internal.InlineOnly public inline fun ShortArray.sort(noinline comparison: (a: Short, b: Short) -> Int): Unit","{
    nativeSort(comparison)
}","/**

 * Sorts the array in-place according to the order specified by the given [comparison] function.

 */",f16713:m3577
56513,"@SinceKotlin(""1.4"") @kotlin.internal.InlineOnly public actual inline fun StringBuilder.insertRange(index: Int, value: CharArray, startIndex: Int, endIndex: Int): StringBuilder","this.insert(index, value, startIndex, endIndex - startIndex)","/**

 * Inserts characters in a subarray of the specified character array [value] into this string builder at the specified [index] and returns this instance.

 *

 * The inserted characters go in same order as in the [value] array, starting at [index].

 *

 * @param index the position in this string builder to insert at.

 * @param value the array from which characters are inserted.

 * @param startIndex the beginning (inclusive) of the subarray to insert.

 * @param endIndex the end (exclusive) of the subarray to insert.

 *

 * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of the [value] array indices or when `startIndex > endIndex`.

 * @throws IndexOutOfBoundsException if [index] is less than zero or greater than the length of this string builder.

 */",f16890:m323
58869,"@SinceKotlin(""1.4"") public fun <S, T: S> Sequence<T>.runningReduce(operation: (acc: S, T) -> S): Sequence<S>","{
    return sequence {
        val iterator = iterator()
        if (iterator.hasNext()) {
            var accumulator: S = iterator.next()
            yield(accumulator)
            while (iterator.hasNext()) {
                accumulator = operation(accumulator, iterator.next())
                yield(accumulator)
            }
        }
    }
}","/**

 * Returns a sequence containing successive accumulation values generated by applying [operation] from left to right

 * to each element and current accumulator value that starts with the first element of this sequence.

 * 

 * Note that `acc` value passed to [operation] function should not be mutated;

 * otherwise it would affect the previous value in resulting sequence.

 * 

 * @param [operation] function that takes current accumulator value and the element, and calculates the next accumulator value.

 *

 * The operation is _intermediate_ and _stateless_.

 * 

 * @sample samples.collections.Collections.Aggregates.runningReduce

 */",f17096:m4697
58510,"@SinceKotlin(""1.4"") public inline fun <K, V, M: Map<out K, V>> M.onEachIndexed(action: (index: Int, Map.Entry<K, V>) -> Unit): M","{
    return apply { entries.forEachIndexed(action) }
}","/**

 * Performs the given [action] on each entry, providing sequential index with the entry,

 * and returns the map itself afterwards.

 * @param [action] function that takes the index of an entry and the entry itself

 * and performs the action on the entry.

 */",f17089:m1133
58702,public fun Float.coerceAtLeast(minimumValue: Float): Float,"{
    return if (this < minimumValue) minimumValue else this
}","/**

 * Ensures that this value is not less than the specified [minimumValue].

 * 

 * @return this value if it's greater than or equal to the [minimumValue] or the [minimumValue] otherwise.

 * 

 * @sample samples.comparisons.ComparableOps.coerceAtLeast

 */",f17092:m2517
63537,"@SinceKotlin(""1.3"") @Suppress(""ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS"") public actual fun ByteArray.fill(element: Byte, fromIndex: Int = 0, toIndex: Int = size): Unit","{
    AbstractList.checkRangeIndexes(fromIndex, toIndex, size)
    for (index in fromIndex until toIndex) {
        this[index] = element
    }
}","/**

 * Fills this array or its subrange with the specified [element] value.

 * 

 * @param fromIndex the start of the range (inclusive) to fill, 0 by default.

 * @param toIndex the end of the range (exclusive) to fill, size of this array by default.

 * 

 * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.

 * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].

 */",f17396:m3799
58995,"@SinceKotlin(""1.1"") public inline fun <K> CharSequence.groupingBy(crossinline keySelector: (Char) -> K): Grouping<Char, K>","{
    return object : Grouping<Char, K> {
        override fun sourceIterator(): Iterator<Char> = this@groupingBy.iterator()
    
        override fun keyOf(element: Char): K = keySelector(element)
    }
}","/**

 * Creates a [Grouping] source from a char sequence to be used later with one of group-and-fold operations

 * using the specified [keySelector] function to extract a key from each character.

 * 

 * @sample samples.collections.Grouping.groupingByEachCount

 */",f17097:m1907
59059,"@SinceKotlin(""1.4"") public inline fun CharSequence.runningReduceIndexed(operation: (index: Int, acc: Char, Char) -> Char): List<Char>","{
    if (isEmpty()) return emptyList()
    var accumulator = this[0]
    val result = ArrayList<Char>(length).apply { add(accumulator) }
    for (index in 1 until length) {
        accumulator = operation(index, accumulator, this[index])
        result.add(accumulator)
    }
    return result
}","/**

 * Returns a list containing successive accumulation values generated by applying [operation] from left to right

 * to each character, its index in the original char sequence and current accumulator value that starts with the first character of this char sequence.

 * 

 * Note that `acc` value passed to [operation] function should not be mutated;

 * otherwise it would affect the previous value in resulting list.

 * 

 * @param [operation] function that takes the index of a character, current accumulator value

 * and the character itself, and calculates the next accumulator value.

 * 

 * @sample samples.collections.Collections.Aggregates.runningReduce

 */",f17097:m4083
58542,"@SinceKotlin(""1.5"") @WasExperimental(ExperimentalUnsignedTypes::class) public fun ULongProgression.reversed(): ULongProgression","{
    return ULongProgression.fromClosedRange(last, first, -step)
}","/**

 * Returns a progression that goes over the same range in the opposite direction with the same step.

 */",f17090:m675
30854,"private fun decapitalizeWithUnderscores(str: String, asciiOnly: Boolean): String?","{
    val words = str.split(""_"").filter { it.isNotEmpty() }
    if (words.size <= 1) return null
    val builder = StringBuilder()
    words.forEachIndexed { index, word -> if (index == 0) {
        builder.append(toLowerCase(word, asciiOnly))
    } else {
        builder.append(toUpperCase(word.first().toString(), asciiOnly))
        builder.append(toLowerCase(word.drop(1), asciiOnly))
    } }
    return builder.toString()
}","/**

 * FOOBAR -> null

 * FOO_BAR -> ""fooBar""

 * FOO_BAR_BAZ -> ""fooBarBaz""

 * ""__F_BAR"" -> ""fBar""

 * ""_F_BAR"" -> ""fBar""

 * ""F_BAR"" -> ""fBar""

 */",f10787:m125
14886,"@SinceKotlin(""1.4"") public actual fun FloatArray?.contentToString(): String","{
    return this?.joinToString("", "", ""["", ""]"") ?: ""null""
}","/**

 * Returns a string representation of the contents of the specified array as if it is [List].

 * 

 * @sample samples.collections.Arrays.ContentOperations.contentToString

 */",f3831:m2117
56451,public operator fun compareTo(other: ValueTimeMark): Int,(this - other).compareTo(Duration.ZERO),"/**

             * Compares this time mark with the [other] time mark for order.

             *

             * - Returns zero if this time mark represents *the same moment* of time as the [other] time mark.

             * - Returns a negative number if this time mark is *earlier* than the [other] time mark.

             * - Returns a positive number if this time mark is *later* than the [other] time mark.

             */",f16867:m183
58784,"public fun <T, C: MutableCollection<in T>> Sequence<T>.toCollection(destination: C): C","{
    for (item in this) {
        destination.add(item)
    }
    return destination
}","/**

 * Appends all elements to the given [destination] collection.

 *

 * The operation is _terminal_.

 */",f17096:m1569
56334,"@SinceKotlin(""1.9"") @WasExperimental(ExperimentalStdlibApi::class) @kotlin.internal.InlineOnly public inline operator fun <T, R> R.contains(element: T?): Boolean where T : Any, R : OpenEndRange<T>, R : Iterable<T>",element != null && contains(element),"/**

 * Returns `true` if this iterable range contains the specified [element].

 *

 * Always returns `false` if the [element] is `null`.

 */",f16848:m523
14946,"@SinceKotlin(""1.3"") @Suppress(""ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS"") public actual fun ShortArray.fill(element: Short, fromIndex: Int = 0, toIndex: Int = size): Unit","{
    arrayFill(this, fromIndex, toIndex, element)
}","/**

 * Fills this array or its subrange with the specified [element] value.

 * 

 * @param fromIndex the start of the range (inclusive) to fill, 0 by default.

 * @param toIndex the end of the range (exclusive) to fill, size of this array by default.

 * 

 * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.

 * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].

 */",f3831:m3771
53132,public actual fun String.toDoubleOrNull(): Double?,(+(this.asDynamic())).unsafeCast<Double>().takeIf { !(it.isNaN() && !this.isNaN() || it == 0.0 && this.isBlank()) },"/**

 * Parses the string as a [Double] number and returns the result

 * or `null` if the string is not a valid representation of a number.

 */",f16618:m171
54811,"@SinceKotlin(""1.1"") @kotlin.internal.InlineOnly public actual inline fun maxOf(a: Double, b: Double, c: Double): Double","{
    return JsMath.max(a, b, c)
}","/**

 * Returns the greater of three values.

 * 

 * If any value is `NaN`, returns `NaN`.

 */",f16714:m279
14522,fun parseFloat(string: String): Float,"parse(string, Float.NEGATIVE_INFINITY, Float.POSITIVE_INFINITY, Float.NaN, 0.0f, FLOAT_MAX_EXP, FLOAT_MIN_EXP, ::parseFloatImpl, HexStringParser::parseFloat)","/**

     * Adaptor for parsing string and returning the closest Float value to the real number in the string.

     *

     * @param string the String that will be parsed to a Float

     * @return the Float number closest to the real number

     * @exception NumberFormatException if the String doesn't represent a number of type Float

     */",f3789:m163
56218,"@SinceKotlin(""1.6"") @WasExperimental(ExperimentalStdlibApi::class) public fun Short.rotateRight(bitCount: Int): Short",(toInt().shl(16 - (bitCount and 15)) or (toInt() and 0xFFFF).ushr(bitCount and 15)).toShort(),"/**

 * Rotates the binary representation of this [Short] number right by the specified [bitCount] number of bits.

 * The least significant bits pushed out from the right side reenter the number as the most significant bits on the left side.

 *

 * Rotating the number right by a negative bit count is the same as rotating it left by the negated bit count:

 * `number.rotateRight(-n) == number.rotateLeft(n)`

 *

 * Rotating by a multiple of [Short.SIZE_BITS] (16) returns the same number, or more generally

 * `number.rotateRight(n) == number.rotateRight(n % 16)`

 */",f16841:m507
57122,override fun step(): File?,"{
    if (!failed && fileList == null) {
        if (onEnter?.invoke(root) == false) {
            return null
        }
        fileList = root.listFiles()
        if (fileList == null) {
            onFail?.invoke(root, AccessDeniedException(file = root, reason = ""Cannot list files in a directory""))
            failed = true
        }
    }
    if (fileList != null && fileIndex < fileList!!.size) {
        return fileList!![fileIndex++]
    } else if (!rootVisited) {
        rootVisited = true
        return root
    } else {
        onLeave?.invoke(root)
        return null
    }
}","/** First all children, then root directory */",f16960:m253
58734,public fun <T> Sequence<T>.elementAt(index: Int): T,"{
    return elementAtOrElse(index) { throw IndexOutOfBoundsException(""Sequence doesn't contain element at index $index."") }
}","/**

 * Returns an element at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this sequence.

 *

 * The operation is _terminal_.

 * 

 * @sample samples.collections.Collections.Elements.elementAt

 */",f17096:m55
20200,public fun KtExpression.isDefinitelyNotNull(): Boolean,withValidityAssertion { analysisSession.expressionTypeProvider.isDefinitelyNotNull(this) },"/**

     * Returns `true` if this expression is definitely not null. See [isDefinitelyNull] for examples.

     */",f5788:m183
38027,public fun createFunctionBodyFromRequest(request: BridgeRequest): SirFunctionBody,"{
    val callee = request.cDeclarationName()
    val calleeArguments = request.callable.allParameters.map { it.name }
    val callSite = ""$callee(${calleeArguments.joinToString(separator = "", "")})""
    val callStatement = if (request.callable.returnType.isVoid) callSite else ""return $callSite""
    return SirFunctionBody(listOf(callStatement))
}","/**

 * Generates the body of a function from a given request.

 *

 * @param request the BridgeRequest object that contains information about the function and the bridge

 * @return the generated SirFunctionBody object representing the body of the function

 */",f12043:m61
30903,inline fun <T> Collection<T>.memoryOptimizedFilter(predicate: (T) -> Boolean): List<T>,"{
    return filterTo(ArrayList(), predicate).compactIfPossible()
}","/**

 * A memory-optimized version of [Iterable.filter].

 * @see Iterable.filter

 */",f10791:m85
42684,"fun CompiledProject.assertTestResults(@TestDataFile assertionFileName: String, vararg testReportNames: String)","assertTestResults(resourcesRootFile.resolve(assertionFileName), *testReportNames)","/**

     * @param assertionFileName path to xml with expected test results, relative to test resources root

     */",f13358:m1575
14855,"@Deprecated(""Use Kotlin compiler 1.4 to avoid deprecation warning."") @SinceKotlin(""1.1"") @DeprecatedSinceKotlin(hiddenSince = ""1.4"") public fun ByteArray.contentHashCode(): Int","{
    return this.contentHashCode()
}","/**

 * Returns a hash code based on the contents of this array as if it is [List].

 */",f3831:m1425
54770,public actual fun CharArray.sort(): Unit,"{
    nativeSort(::primitiveCompareTo)
}","/**

 * Sorts the array in-place.

 * 

 * @sample samples.collections.Arrays.Sorting.sortArray

 */",f16713:m3193
30676,fun asString(): String,"{
    fun FqName.escapeSlashes(): String {
        val res = asString()
        if (res.contains('/')) {
            return ""`$res`""
        }
        return res
    }
    return if (packageFqName.isRoot) {
        relativeClassName.escapeSlashes()
    } else {
        buildString {
            append(packageFqName.asString().replace('.', '/'))
            append(""/"")
            append(relativeClassName.escapeSlashes())
        }
    }
}","/**

     * @return a string where packages are delimited by '/' and classes by '.', e.g. ""kotlin/Map.Entry""

     */",f10756:m147
55965,"public fun <T, R> Array<out Pair<T, R>>.unzip(): Pair<List<T>, List<R>>","{
    val listT = ArrayList<T>(size)
    val listR = ArrayList<R>(size)
    for (pair in this) {
        listT.add(pair.first)
        listR.add(pair.second)
    }
    return listT to listR
}","/**

 * Returns a pair of lists, where

 * *first* list is built from the first values of each pair from this array,

 * *second* list is built from the second values of each pair from this array.

 * @sample samples.collections.Arrays.Transformations.unzipArray

 */",f16821:m53
14247,public fun getAndAdd(delta: Long): Long,this::value.getAndAddField(delta),"/**

     * Atomically adds the [given value][delta] to the current value and returns the old value.

     */",f3762:m241
50446,@Test fun `await FinaliseDsl Stage in coroutine`(),"{
    val project = buildProject()
    project.startKotlinPluginLifecycle()
    project.launch {
        assertEquals(KotlinPluginLifecycle.Stage.EvaluateBuildscript, project.kotlinPluginLifecycle.stage)
        FinaliseDsl.await()
        assertEquals(KotlinPluginLifecycle.Stage.FinaliseDsl, project.kotlinPluginLifecycle.stage)
    }
    project.evaluate()
}","/**

     * Shows how a stage like [FinaliseDsl] can be awaited using [await]:

     * A coroutine using [await] will suspend the execution until this [KotlinPluginLifecycle.Stage] was reached.

     * Note: The semantics is 'the stage was reached' **not** 'the stage was completed'

     */",f16110:m179
14011,"@SinceKotlin(""1.4"") @kotlin.internal.InlineOnly public actual inline fun String?.toBoolean(): Boolean","this.equals(""true"", ignoreCase = true)","/**

 * Returns `true` if this string is not `null` and its content is equal to the word ""true"", ignoring case, and `false` otherwise.

 *

 * There are also strict versions of the function available on non-nullable String, [toBooleanStrict] and [toBooleanStrictOrNull].

 */",f3714:m109
63595,public actual fun FloatArray.toTypedArray(): Array<Float>,"{
    return Array(size) { index -> this[index] }
}","/**

 * Returns a *typed* object array containing all of the elements of this primitive array.

 */",f17396:m5209
13595,@kotlin.internal.IntrinsicConstEvaluation public inline operator fun compareTo(other: Short): Int,this.compareTo(other.toInt()),"/**

     * Compares this value with the specified value for order.

     * Returns zero if this value is equal to the specified other value, a negative number if it's less than other,

     * or a positive number if it's greater than other.

     */",f3686:m1829
56106,"@SinceKotlin(""1.4"") public fun <T> MutableList<T>.removeLastOrNull(): T?",if (isEmpty()) null else removeAt(lastIndex),"/**

 * Removes the last element from this mutable list and returns that removed element, or returns `null` if this list is empty.

 */",f16825:m517
13537,@kotlin.internal.IntrinsicConstEvaluation public inline operator fun compareTo(other: Int): Int,this.toInt().compareTo(other),"/**

     * Compares this value with the specified value for order.

     * Returns zero if this value is equal to the specified other value, a negative number if it's less than other,

     * or a positive number if it's greater than other.

     */",f3686:m985
14164,public operator fun iterator(): ByteIterator,"{
    return ImmutableBlobIteratorImpl(this)
}",/** Creates an iterator over the elements of the array. */,f3746:m53
63558,public actual operator fun LongArray.plus(elements: Collection<Long>): LongArray,"{
    var index = size
    val result = copyOfUninitializedElements(index + elements.size)
    for (element in elements) result[index++] = element
    return result
}","/**

 * Returns an array containing all elements of the original array and then all elements of the given [elements] collection.

 */",f17396:m4347
27519,fun invalidateAggregating(),"{
    aggregatingGenerated.forEach { it.delete() }
    aggregatingGenerated.clear()
    aggregatedTypes.clear()
}","/**

     * Invalidates all data collected about aggregating APs, making the cache ready for the next round of data collection. Also,

     * all files generated by aggregating APs are deleted.

     */",f9701:m117
16619,"fun KtElement.getDiagnostics(firResolveSession: LLFirResolveSession, filter: DiagnosticCheckerFilter): Collection<KtPsiDiagnostic>","firResolveSession.getDiagnostics(this, filter)","/**

 * Returns a list of Diagnostics compiler finds for given [KtElement]

 * This operation could be performance affective because it create FIleStructureElement and resolve non-local declaration into BODY phase

 */",f4145:m143
64088,@kotlin.internal.IntrinsicConstEvaluation public inline operator fun compareTo(other: Int): Int,this.toInt().compareTo(other),"/**

     * Compares this value with the specified value for order.

     * Returns zero if this value is equal to the specified other value, a negative number if it's less than other,

     * or a positive number if it's greater than other.

     */",f17455:m985
58528,"@SinceKotlin(""1.5"") @WasExperimental(ExperimentalStdlibApi::class, ExperimentalUnsignedTypes::class) public fun ULongRange.randomOrNull(random: Random): ULong?","{
    if (isEmpty()) return null
    return random.nextULong(this)
}","/**

 * Returns a random element from this range using the specified source of randomness, or `null` if this range is empty.

 */",f17090:m383
16589,private fun FirSimpleFunction.inBodyInvalidation(): Boolean,"{
    val body = body ?: return false
    invalidateBody(body)
    return true
}","/**

 * Drop body and all related stuff.

 * We should drop:

 * * body

 * * control flow graph reference, because it depends on the body

 * * reduce phase if needed

 *

 * Depends on the body, but we shouldn't drop:

 * * implicit type, because the change mustn't change the resulting type

 * * contract, because a change inside a contract description is OOBM, so this function won't be called in this case

 *

 * Also, we shouldn't update somehow value parameters because they have their own ""bodies"" (a default value) and

 * changes in them are OOBM, so it is not our case.

 *

 * @return **false** if it is an out-of-block change

 */",f4136:m61
58792,"@SinceKotlin(""1.4"") @OptIn(kotlin.experimental.ExperimentalTypeInference::class) @OverloadResolutionByLambdaReturnType @kotlin.jvm.JvmName(""flatMapIndexedSequence"") public fun <T, R> Sequence<T>.flatMapIndexed(transform: (index: Int, T) -> Sequence<R>): Sequence<R>","{
    return flatMapIndexed(this, transform, Sequence<R>::iterator)
}","/**

 * Returns a single sequence of all elements yielded from results of [transform] function being invoked on each element

 * and its index in the original sequence.

 *

 * The operation is _intermediate_ and _stateless_.

 * 

 * @sample samples.collections.Collections.Transformations.flatMapIndexed

 */",f17096:m1789
58228,@kotlin.internal.InlineOnly public inline operator fun minus(other: UByte): ULong,this.minus(other.toULong()),/** Subtracts the other value from this value. */,f17066:m173
58934,public inline fun CharSequence.lastOrNull(predicate: (Char) -> Boolean): Char?,"{
    for (index in this.indices.reversed()) {
        val element = this[index]
        if (predicate(element)) return element
    }
    return null
}","/**

 * Returns the last character matching the given [predicate], or `null` if no such character was found.

 * 

 * @sample samples.text.Strings.last

 */",f17097:m429
13599,@kotlin.internal.IntrinsicConstEvaluation public inline operator fun compareTo(other: Double): Int,this.toDouble().compareTo(other),"/**

     * Compares this value with the specified value for order.

     * Returns zero if this value is equal to the specified other value, a negative number if it's less than other,

     * or a positive number if it's greater than other.

     */",f3686:m1901
58151,@kotlin.internal.InlineOnly public inline operator fun minus(other: UInt): UInt,UInt(this.data.minus(other.data)),/** Subtracts the other value from this value. */,f17063:m185
59102,"@SinceKotlin(""1.5"") @WasExperimental(ExperimentalUnsignedTypes::class) @kotlin.internal.InlineOnly public inline fun minOf(a: ULong, b: ULong, c: ULong): ULong","{
    return minOf(a, minOf(b, c))
}","/**

 * Returns the smaller of three values.

 */",f17098:m369
48506,"fun findStaticLib(namePrefix: String, buildType: String): StaticLibrary?","findStaticLib(namePrefix, NativeBuildType.valueOf(buildType.toUpperCaseAsciiOnly()))",/** Returns a static library with the given [namePrefix] and the given build type. Returns null if there is no such binary. */,f15652:m165
17572,private fun KtModule.addToLibraryCacheIfNeeded(libraryCache: LibraryCache),"{
    if (this is KtBinaryModule) {
        libraryCache.put(getBinaryRoots().toSet(), this)
    }
}","/**

     * A main module may be a binary library module, which may be a dependency of subsequent main modules. We need to add such a module to

     * the library cache before it is processed as a dependency. Otherwise, when another module's binary dependency is processed,

     * [addLibraryDependencies] will create a *duplicate* binary library module with the same roots and name as the already existing binary

     * library module.

     */",f5271:m197
63646,"@SinceKotlin(""1.1"") @kotlin.internal.InlineOnly public actual inline fun minOf(a: Double, b: Double): Double","{
    return when {
        a.isNaN() -> a
        b.isNaN() -> b
        else -> if (a.compareTo(b) <= 0) a else b
    }
}","/**

 * Returns the smaller of two values.

 * 

 * If either value is `NaN`, returns `NaN`.

 */",f17406:m573
64089,@kotlin.internal.IntrinsicConstEvaluation public inline operator fun compareTo(other: Long): Int,this.toLong().compareTo(other),"/**

     * Compares this value with the specified value for order.

     * Returns zero if this value is equal to the specified other value, a negative number if it's less than other,

     * or a positive number if it's greater than other.

     */",f17455:m1003
57250,"public fun FloatArray.binarySearch(element: Float, fromIndex: Int = 0, toIndex: Int = size): Int","{
    return java.util.Arrays.binarySearch(this, fromIndex, toIndex, element)
}","/**

 * Searches the array or the range of the array for the provided [element] using the binary search algorithm.

 * The array is expected to be sorted, otherwise the result is undefined.

 * 

 * If the array contains multiple elements equal to the specified [element], there is no guarantee which one will be found.

 * 

 * @param element the to search for.

 * @param fromIndex the start of the range (inclusive) to search in, 0 by default.

 * @param toIndex the end of the range (exclusive) to search in, size of this array by default.

 * 

 * @return the index of the element, if it is contained in the array within the specified range;

 * otherwise, the inverted insertion point `(-insertion point - 1)`.

 * The insertion point is defined as the index at which the element should be inserted,

 * so that the array (or the specified subrange of array) still remains sorted.

 * 

 * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.

 * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].

 */",f16970:m761
56001,"public fun <K, V> mutableMapOf(vararg pairs: Pair<K, V>): MutableMap<K, V>","LinkedHashMap<K, V>(mapCapacity(pairs.size)).apply { putAll(pairs) }","/**

 * Returns a new [MutableMap] with the specified contents, given as a list of pairs

 * where the first component is the key and the second is the value.

 *

 * If multiple pairs have the same key, the resulting map will contain the value from the last of those pairs.

 *

 * Entries of the map are iterated in the order they were specified.

 *

 * @sample samples.collections.Maps.Instantiation.mutableMapFromPairs

 * @sample samples.collections.Maps.Instantiation.emptyMutableMap

 */",f16823:m173
57162,"@SinceKotlin(""1.1"") @kotlin.internal.InlineOnly public actual inline fun minOf(a: Short, b: Short): Short","{
    return Math.min(a.toInt(), b.toInt()).toShort()
}","/**

 * Returns the smaller of two values.

 */",f16966:m495
59095,"@SinceKotlin(""1.4"") @ExperimentalUnsignedTypes public fun maxOf(a: UByte, vararg other: UByte): UByte","{
    var max = a
    for (e in other) max = maxOf(max, e)
    return max
}","/**

 * Returns the greater of the given values.

 */",f17098:m233
58512,"public fun <K, V> Map<out K, V>.asSequence(): Sequence<Map.Entry<K, V>>","{
    return entries.asSequence()
}","/**

 * Creates a [Sequence] instance that wraps the original map returning its entries when being iterated.

 * 

 * @sample samples.collections.Sequences.Building.sequenceFromMap

 */",f17089:m1171
51938,fun ScriptingHostConfiguration?.withDefaultsFrom(defaults: ScriptingHostConfiguration): ScriptingHostConfiguration,"when {
    this == defaults || defaults.isEmpty() -> this ?: defaults
    this == null || this.isEmpty() -> defaults
    else -> ScriptingHostConfiguration(defaults, this)
}","/**

 * Add the values not explicitly set in the receiver from the [defaults] configuration

 */",f16416:m91
56484,"@SinceKotlin(""1.1"") @kotlin.internal.InlineOnly public actual inline fun String.toInt(radix: Int): Int","java.lang.Integer.parseInt(this, checkRadix(radix))","/**

 * Parses the string as an [Int] number and returns the result.

 * @throws NumberFormatException if the string is not a valid representation of a number.

 * @throws IllegalArgumentException when [radix] is not a valid radix for string to number conversion.

 */",f16885:m193
14174,@ExperimentalNativeApi @OptIn(FreezingIsDeprecated::class) public fun setUnhandledExceptionHook(hook: ReportUnhandledExceptionHook?): ReportUnhandledExceptionHook?,"{
    try {
        return UnhandledExceptionHookHolder.hook.getAndSet(hook)
    } catch (e: InvalidMutabilityException) {
        throw InvalidMutabilityException(""Unhandled exception hook must be frozen"")
    }
}","/**

 * Installs an unhandled exception hook and returns an old hook, or `null` if no user-defined hooks were previously set.

 *

 * The hook is invoked whenever there is an uncaught exception reaching the boundaries of the Kotlin world,

 * i.e. top-level `main()`, worker boundary, or when Objective-C to Kotlin call not marked with `@Throws` throws an exception.

 *

 * The hook is in full control of how to process an unhandled exception and proceed further.

 * For hooks that terminate an application, it is recommended to use [terminateWithUnhandledException] to

 * be consistent with a default behaviour when no hooks are set.

 *

 * Set or default hook is also invoked by [processUnhandledException].

 * With the legacy MM the hook must be a frozen lambda so that it could be called from any thread/worker.

 */",f3747:m71
13249,"private fun getVarOfTypeFor(primitiveType: KotlinClassifierType, nullable: Boolean): ClassifierStubType","{
    val typeVarOf = ""${primitiveType.classifier.topLevelName}VarOf""
    val classifier = Classifier.topLevel(cInteropPackage, typeVarOf)
    return ClassifierStubType(classifier, listOf(TypeArgumentStub(primitiveType.toStubIrType())), nullable = nullable)
}","/**

     * @param primitiveType primitive type from kotlin package.

     * @return kotlinx.cinterop.[primitiveType]VarOf<[primitiveType]>

     */",f3652:m253
14895,"@SinceKotlin(""1.3"") @Suppress(""ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS"") public actual fun FloatArray.copyInto(destination: FloatArray, destinationOffset: Int = 0, startIndex: Int = 0, endIndex: Int = size): FloatArray","{
    arrayCopy(this, startIndex, destination, destinationOffset, endIndex - startIndex)
    return destination
}","/**

 * Copies this array or its subrange into the [destination] array and returns that array.

 * 

 * It's allowed to pass the same array in the [destination] and even specify the subrange so that it overlaps with the destination range.

 * 

 * @param destination the array to copy to.

 * @param destinationOffset the position in the [destination] array to copy to, 0 by default.

 * @param startIndex the beginning (inclusive) of the subrange to copy, 0 by default.

 * @param endIndex the end (exclusive) of the subrange to copy, size of this array by default.

 * 

 * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of this array indices or when `startIndex > endIndex`.

 * @throws IndexOutOfBoundsException when the subrange doesn't fit into the [destination] array starting at the specified [destinationOffset],

 * or when that index is out of the [destination] array indices range.

 * 

 * @return the [destination] array.

 */",f3831:m2429
13540,@kotlin.internal.IntrinsicConstEvaluation public inline operator fun compareTo(other: Double): Int,this.toDouble().compareTo(other),"/**

     * Compares this value with the specified value for order.

     * Returns zero if this value is equal to the specified other value, a negative number if it's less than other,

     * or a positive number if it's greater than other.

     */",f3686:m1039
34722,private fun resolveSupertypesTree(values: List<Supertypes>): List<SupertypesTree>,"{
    return values.mapIndexed { index: Int, supertypes: Supertypes ->
        val classifierIndex = classifiers.classifierIndices[index]
        val resolver = SimpleCirSupertypesResolver(classifiers.classifierIndices[index], classifiers.commonDependencies)
        val nodes = supertypes.filterIsInstance<CirClassType>().map { type -> createTypeNode(classifierIndex, resolver, type) }
        SupertypesTree(nodes)
    }
}","/**

     * For every supertype listed in [values] a full [SupertypesTree] will be resolved.

     * This tree represents the supertype-hierarchy:

     *

     * ```

     * interface A

     * interface B: A

     * interface C: B, A

     * ```

     *

     * will become a tree like

     * ```

     *               C

     *              |\

     *             |  \

     *            B    A

     *            |

     *            A

     *

     * ```

     *

     */",f11393:m111
13857,"@OptIn(kotlin.ExperimentalStdlibApi::class, FreezingIsDeprecated::class) public actual fun <T> lazy(mode: LazyThreadSafetyMode, initializer: () -> T): Lazy<T>","when (mode) {
    LazyThreadSafetyMode.SYNCHRONIZED -> SynchronizedLazyImpl(initializer)
    LazyThreadSafetyMode.PUBLICATION -> SafePublicationLazyImpl(initializer)
    LazyThreadSafetyMode.NONE -> UnsafeLazyImpl(initializer)
}","/**

 * Creates a new instance of the [Lazy] that uses the specified initialization function [initializer]

 * and thread-safety [mode].

 *

 * If the initialization of a value throws an exception, it will attempt to reinitialize the value at next access.

 *

 * Note that when the [LazyThreadSafetyMode.SYNCHRONIZED] mode is specified the returned instance uses itself

 * to synchronize on. Do not synchronize from external code on the returned instance as it may cause accidental deadlock.

 * Also this behavior can be changed in the future.

 */",f3698:m49
47671,@ExperimentalKotlinGradlePluginApi fun mainRun(configure: KotlinJvmRunDsl.() -> Unit),project.launch { mainRun.await()?.configure() },"/**

     * ### ⚠️ KotlinJvmTarget 'mainRun' is experimental

     * The [KotlinJvmTarget], by default, creates a 'run' task called {targetName}Run, which will allows simple

     * execution of the targets 'main' code.

     *

     * e.g.

     * ```kotlin

     * // build.gradle.kts

     * kotlin {

     *     jvm().mainRun {

     *         mainClass.set(""FooKt"")

     *     }

     * }

     *

     * // src/jvmMain/Foo

     * fun main() {

     *     println(""Hello from foo"")

     * }

     * ```

     *

     * will be executable using

     * ```text

     * ./gradlew jvmRun

     * > ""Hello from foo""

     * ```

     *

     * ### Running a different 'mainClass' from CLI:

     * The execution of the main code allows providing a different 'mainClass' via CLI. *

     * It accepts System Properties and Gradle Properties. However, when Gradle Configuration Cache is used,

     * System Properties are the preferred way.

     *

     * ```text

     * ./gradlew jvmRun -DmainClass=""BarKt""

     *                    ^

     *                    Will execute the 'src/jvmMain/kotlin/Bar' main method.

     * ```

     */",f15413:m117
53406,"@SinceKotlin(""1.3"") @InlineOnly public actual inline fun <R, T> (suspend R.() -> T).startCoroutineUninterceptedOrReturn(receiver: R, completion: Continuation<T>): Any?","{
    val a = this.asDynamic()
    return if (jsTypeOf(a) == ""function"") a(receiver, completion) else this.invokeSuspendSuperTypeWithReceiver(receiver, completion)
}","/**

 * Starts unintercepted coroutine with receiver type [R] and result type [T] and executes it until its first suspension.

 * Returns the result of the coroutine or throws its exception if it does not suspend or [COROUTINE_SUSPENDED] if it suspends.

 * In the latter case, the [completion] continuation is invoked when coroutine completes with result or exception.

 *

 * The coroutine is started directly in the invoker's thread without going through the [ContinuationInterceptor] that might

 * be present in the completion's [CoroutineContext]. It is the invoker's responsibility to ensure that a proper invocation

 * context is established.

 *

 * This function is designed to be used from inside of [suspendCoroutineUninterceptedOrReturn] to resume the execution of a suspended

 * coroutine using a reference to the suspending function.

 */",f16673:m155
15581,"fun getAllVirtualFilesFromJar(jar: Path, jarFileSystem: CoreJarFileSystem = CoreJarFileSystem(), includeRoot: Boolean = true): Collection<VirtualFile>","{
    return jarFileSystem.refreshAndFindFileByPath(jar.toString() + JAR_SEPARATOR)?.let { getAllVirtualFilesFromRoot(it, includeRoot) } ?: emptySet()
}","/**

     * Get all [VirtualFile]s inside the given [jar] (of [Path])

     *

     * Note that, if [CoreJarFileSystem] is not given, a fresh instance will be used, which will create fresh instances of [VirtualFile],

     *   resulting in potential hash mismatch (e.g., if used in scope membership check).

     *

     * By default, given [jar], the root, will be included. Pass [includeRoot = false] if not needed.

     *   Note that, thought, [JvmPackagePartProvider#addRoots] is checking if the root file is in the scope when loading Kotlin modules.

     *   Thus, if this util is used to populate files for the scope of the Kotlin module as a library, the root should be added too.

     */",f3909:m41
53153,"@SinceKotlin(""1.9"") @Suppress(""ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS"") public actual fun String.regionMatches(thisOffset: Int, other: String, otherOffset: Int, length: Int, ignoreCase: Boolean = false): Boolean","regionMatchesImpl(thisOffset, other, otherOffset, length, ignoreCase)","/**

 * Returns `true` if the specified range in this string is equal to the specified range in another string.

 * @param thisOffset the start offset in this string of the substring to compare.

 * @param other the string against a substring of which the comparison is performed.

 * @param otherOffset the start offset in the other string of the substring to compare.

 * @param length the length of the substring to compare.

 */",f16624:m201
43516,fun TestProject.makeSnapshotTo(destinationPath: String),"{
    if (isTeamCityRun) fail(""Please remove `makeSnapshotTo()` call from test. It is utility for local debugging only!"")
    val dest = Paths.get(destinationPath).resolve(projectName).resolve(gradleVersion.version).also {
        if (it.exists()) it.deleteRecursively()
        it.createDirectories()
    }
    projectPath.copyRecursively(dest)
    dest.resolve(""gradle.properties"").append(""""""
    
                kotlin_version=${buildOptions.kotlinVersion}
    
                test_fixes_version=${TestVersions.Kotlin.CURRENT}
    
                """""".trimIndent())
    dest.resolve(""run.sh"").run {
        writeText(""""""
        
                    |#!/usr/bin/env sh
        
                    |${formatEnvironmentForScript(envCommand = ""export"")}
        
                    |./gradlew ${buildOptions.toArguments(gradleVersion).joinToString(separator = "" "")} ${'$'}@ 
        
                    |"""""".trimMargin())
        setPosixFilePermissions(setOf(PosixFilePermission.OWNER_EXECUTE, PosixFilePermission.OWNER_READ, PosixFilePermission.OWNER_WRITE))
    }
    dest.resolve(""run.bat"").run { writeText(""""""
    
                |@rem Executing Gradle build
    
                |${formatEnvironmentForScript(envCommand = ""set"")}
    
                |gradlew.bat ${buildOptions.toArguments(gradleVersion).joinToString(separator = "" "")} %* 
    
                |"""""".trimMargin()) }
    val wrapperDir = dest.resolve(""gradle"").resolve(""wrapper"").apply { createDirectories() }
    wrapperDir.resolve(""gradle-wrapper.properties"").writeText(""""""
    
                distributionUrl=https\://services.gradle.org/distributions/gradle-${gradleVersion.version}-bin.zip
    
                """""".trimIndent())
    val projectRoot = Paths.get(""../../../"")
    projectRoot.resolve(""gradle"").resolve(""wrapper"").resolve(""gradle-wrapper.jar"").run { copyTo(wrapperDir.resolve(fileName)) }
    projectRoot.resolve(""gradlew"").run { copyTo(dest.resolve(fileName)) }
    projectRoot.resolve(""gradlew.bat"").run { copyTo(dest.resolve(fileName)) }
}","/**

 * Makes a snapshot of the current state of [TestProject] into [destinationPath].

 *

 * Method copies all files into `destinationPath/testProjectName/GradleVersion` directory

 * and setup buildable project.

 *

 * To run task with the same build option as test - use `run.sh` (or `run.bat`) script.

 */",f13453:m29
22873,private fun Path.toExpectedPath(): Path,"{
    val artifactDirPath = localRepoPath.relativize(this).parent.parent
    val expectedFileName = ""${artifactDirPath.fileName}.pom""
    return expectedRepoPath.resolve(artifactDirPath.resolve(expectedFileName))
}","/**

     * convert:

     * ${mavenLocal}/org/jetbrains/kotlin/artifact/version/artifact-version.pom

     * to:

     * ${expectedRepository}/org/jetbrains/kotlin/artifact/artifact.pom

     */",f8802:m205
56189,"@kotlin.internal.InlineOnly public inline fun <T: Any> checkNotNull(value: T?, lazyMessage: () -> Any): T","{
    contract { returns() implies (value != null) }
    if (value == null) {
        val message = lazyMessage()
        throw IllegalStateException(message.toString())
    } else {
        return value
    }
}","/**

 * Throws an [IllegalStateException] with the result of calling [lazyMessage]  if the [value] is null. Otherwise

 * returns the not null value.

 *

 * @sample samples.misc.Preconditions.failCheckWithLazyMessage

 */",f16839:m231
63625,"@SinceKotlin(""1.1"") @kotlin.internal.InlineOnly public actual inline fun maxOf(a: Double, b: Double): Double","{
    return if (a.compareTo(b) >= 0) a else b
}","/**

 * Returns the greater of two values.

 * 

 * If either value is `NaN`, returns `NaN`.

 */",f17406:m141
57462,"@SinceKotlin(""1.4"") @OptIn(kotlin.experimental.ExperimentalTypeInference::class) @OverloadResolutionByLambdaReturnType @kotlin.jvm.JvmName(""sumOfBigDecimal"") @kotlin.internal.InlineOnly public inline fun <T> Array<out T>.sumOf(selector: (T) -> java.math.BigDecimal): java.math.BigDecimal","{
    var sum: java.math.BigDecimal = 0.toBigDecimal()
    for (element in this) {
        sum += selector(element)
    }
    return sum
}","/**

 * Returns the sum of all values produced by [selector] function applied to each element in the array.

 */",f16970:m5633
56089,public fun <T> MutableCollection<in T>.addAll(elements: Sequence<T>): Boolean,"{
    var result: Boolean = false
    for (item in elements) {
        if (add(item)) result = true
    }
    return result
}","/**

 * Adds all elements of the given [elements] sequence to this [MutableCollection].

 */",f16825:m247
16525,"private fun FirElementWithResolveState.withJumpingLockImpl(toPhase: FirResolvePhase, actionUnderLock: () -> Unit, actionOnCycle: () -> Unit)","{
    while (true) {
        checkCanceled()
        @OptIn(ResolveStateAccess::class) val currentState = resolveState
        if (currentState.resolvePhase >= toPhase) {
            return
        }
        when (currentState) {
            is FirResolvedToPhaseState -> {
                if (!tryJumpingLock(toPhase, currentState)) continue
                var exceptionOccurred = false
                try {
                    actionUnderLock()
                } catch (e: Throwable) {
                    exceptionOccurred = true
                    throw e
                } finally {
                    val newPhase = if (!exceptionOccurred) toPhase else currentState.resolvePhase
                    jumpingUnlock(toPhase = newPhase)
                }
                return
            }
            is FirInProcessOfResolvingToJumpingPhaseState -> {
                val previousState = jumpingResolutionStatesStack.peek()
                if (previousState != null) {
                    previousState.waitingFor = currentState
                    var nextState: FirInProcessOfResolvingToJumpingPhaseState? = currentState
                    while (nextState != null) {
                        if (nextState === previousState) {
                            previousState.waitingFor = null
                            return actionOnCycle()
                        }
                        nextState = nextState.waitingFor
                    }
                }
                try {
                    currentState.latch.await(DEFAULT_LOCKING_INTERVAL, TimeUnit.MILLISECONDS)
                } finally {
                    previousState?.waitingFor = null
                }
            }
            is FirInProcessOfResolvingToPhaseStateWithoutBarrier, is FirInProcessOfResolvingToPhaseStateWithBarrier -> {
                errorWithFirSpecificEntries(""$currentState state are not allowed to be inside jumping lock"", fir = this)
            }
        }
    }
}","/**

     * Locks an a [FirElementWithResolveState] to resolve from `toPhase - 1` to [toPhase] and

     * then updates the [FirElementWithResolveState.resolveState] to a

     * [toPhase] if no exceptions were found during [actionUnderLock].

     *

     * If [FirElementWithResolveState] is already at least at [toPhase], does nothing.

     *

     * ### Happy path:

     *  1. Marks [FirElementWithResolveState] as in a process of resolve

     *  2. Performs the resolve by calling [actionUnderLock]

     *  3. Updates the resolve phase to [toPhase] if there is no exceptions

     *  4. Notifies other threads waiting on the same lock that this thread already resolved the declaration,

     *  so other threads can continue its execution

     *

     *  ### Cycle handling

     *  During step 1 we can realize someone already set [FirInProcessOfResolvingToJumpingPhaseState]

     *  for the current [FirElementWithResolveState], so there is a room for a possible deadlock.

     *

     *  The requirement for the deadlock is not empty [jumpingResolutionStatesStack] as we should already hold another lock.

     *  Otherwise, we can just wait on the [latch][FirInProcessOfResolvingToJumpingPhaseState.latch].

     *

     *  In the case of not empty [jumpingResolutionStatesStack], we have the following algorithm:

     *  1. Set [waitingFor][FirInProcessOfResolvingToJumpingPhaseState.waitingFor] for the previous state

     *  as we have an intention to take the next lock

     *  2. Iterate over all [waitingFor][FirInProcessOfResolvingToJumpingPhaseState.waitingFor] recursively

     *  to detect the possible cycle

     *  3. Execute [actionOnCycle] without the lock in the case of cycle or waining on

     *  the [latch][FirInProcessOfResolvingToJumpingPhaseState.latch] to try to take the lock again later

     *

     * @param actionUnderLock will be executed once under the lock if [this] is not yet resolved to [toPhase] phase and there are no cycles

     * @param actionOnCycle will be executed once without the lock if [this] is not yet resolved to [toPhase] phase and a resolution cycle is found

     *

     *  @see withJumpingLock

     */",f4129:m437
58780,"public inline fun <T, K, V, M: MutableMap<in K, in V>> Sequence<T>.associateByTo(destination: M, keySelector: (T) -> K, valueTransform: (T) -> V): M","{
    for (element in this) {
        destination.put(keySelector(element), valueTransform(element))
    }
    return destination
}","/**

 * Populates and returns the [destination] mutable map with key-value pairs,

 * where key is provided by the [keySelector] function and

 * and value is provided by the [valueTransform] function applied to elements of the given sequence.

 * 

 * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.

 *

 * The operation is _terminal_.

 * 

 * @sample samples.collections.Collections.Transformations.associateByToWithValueTransform

 */",f17096:m1427
64185,public operator fun rangeTo(other: Byte): IntRange,"IntRange(this, other.toInt())",/** Creates a range from this value to the specified [other] value. */,f17455:m2341
10020,"private fun produceObjCFramework(engine: PhaseEngine<PhaseContext>, config: KonanConfig, environment: KotlinCoreEnvironment)","{
    val frontendOutput = engine.runFrontend(config, environment) ?: return
    val objCExportedInterface = engine.runPhase(ProduceObjCExportInterfacePhase, frontendOutput)
    engine.runPhase(CreateObjCFrameworkPhase, CreateObjCFrameworkInput(frontendOutput.moduleDescriptor, objCExportedInterface))
    if (config.omitFrameworkBinary) {
        return
    }
    val (psiToIrOutput, objCCodeSpec) = engine.runPsiToIr(frontendOutput, isProducingLibrary = false) { it.runPhase(CreateObjCExportCodeSpecPhase, objCExportedInterface) }
    require(psiToIrOutput is PsiToIrOutput.ForBackend)
    val backendContext = createBackendContext(config, frontendOutput, psiToIrOutput) {
        it.objCExportedInterface = objCExportedInterface
        it.objCExportCodeSpec = objCCodeSpec
    }
    engine.runBackend(backendContext, psiToIrOutput.irModule)
}","/**

     * Create an Objective-C framework which is a directory consisting of

     * - Objective-C header

     * - Info.plist

     * - Binary (if -Xomit-framework-binary is not passed).

     */",f3405:m109
63543,"@SinceKotlin(""1.3"") @Suppress(""ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS"") public actual fun BooleanArray.fill(element: Boolean, fromIndex: Int = 0, toIndex: Int = size): Unit","{
    AbstractList.checkRangeIndexes(fromIndex, toIndex, size)
    for (index in fromIndex until toIndex) {
        this[index] = element
    }
}","/**

 * Fills this array or its subrange with the specified [element] value.

 * 

 * @param fromIndex the start of the range (inclusive) to fill, 0 by default.

 * @param toIndex the end of the range (exclusive) to fill, size of this array by default.

 * 

 * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.

 * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].

 */",f17396:m4015
11462,"operator fun setValue(thisRef: Any?, property: KProperty<*>, value: T)","{
    this.value = value
}","/** Sets the [value] to the [ArgumentValueDelegate.value] property from the delegated property setter.

     * This operation is possible only after command line arguments were parsed with [ArgParser.parse]

     * @throws IllegalStateException in case of resetting value before command line arguments are parsed.

     */",f3554:m121
58180,@kotlin.internal.InlineOnly public inline infix fun or(other: UInt): UInt,UInt(this.data or other.data),/** Performs a bitwise OR operation between the two values. */,f17063:m543
58572,"@SinceKotlin(""1.7"") public fun CharProgression.firstOrNull(): Char?","{
    return if (isEmpty()) null else this.first
}","/**

 * Returns the first element, or `null` if the progression is empty.

 */",f17092:m141
58024,@kotlin.internal.InlineOnly public inline operator fun plus(other: UShort): UInt,this.toUInt().plus(other.toUInt()),/** Adds the other value to this value. */,f17058:m153
14924,"public actual fun BooleanArray.copyOfRange(fromIndex: Int, toIndex: Int): BooleanArray","{
    checkCopyOfRangeArguments(fromIndex, toIndex, size)
    return copyOfUninitializedElements(fromIndex, toIndex)
}","/**

 * Returns a new array which is a copy of the specified range of the original array.

 * 

 * @param fromIndex the start of the range (inclusive) to copy.

 * @param toIndex the end of the range (exclusive) to copy.

 * 

 * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.

 * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].

 */",f3831:m3205
54777,"@SinceKotlin(""1.4"") @Suppress(""ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS"") public actual fun LongArray.sort(fromIndex: Int = 0, toIndex: Int = size): Unit","{
    AbstractList.checkRangeIndexes(fromIndex, toIndex, size)
    sortArrayWith(this.unsafeCast<Array<Long>>(), fromIndex, toIndex, naturalOrder())
}","/**

 * Sorts a range in the array in-place.

 * 

 * @param fromIndex the start of the range (inclusive) to sort, 0 by default.

 * @param toIndex the end of the range (exclusive) to sort, size of this array by default.

 * 

 * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.

 * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].

 * 

 * @sample samples.collections.Arrays.Sorting.sortRangeOfArray

 */",f16713:m3409
14869,"@SinceKotlin(""1.4"") public actual fun DoubleArray?.contentHashCode(): Int","{
    if (this === null) return 0
    var result = 1
    for (element in this) result = 31 * result + element.hashCode()
    return result
}","/**

 * Returns a hash code based on the contents of this array as if it is [List].

 */",f3831:m1729
48538,"@JvmOverloads fun staticLib(buildTypes: Collection<NativeBuildType> = NativeBuildType.DEFAULT_BUILD_TYPES, configure: StaticLibrary.() -> Unit = {})","createBinaries("""", project.name, NativeOutputKind.STATIC, buildTypes, ::StaticLibrary, configure)",/** Creates a static library with the empty name prefix for each build type and configures it. */,f15652:m417
14776,"internal fun binarySearchRange(array: IntArray, needle: Int): Int","{
    var bottom = 0
    var top = array.size - 1
    var middle = -1
    var value = 0
    while (bottom <= top) {
        middle = (bottom + top) / 2
        value = array[middle]
        if (needle > value) bottom = middle + 1 else if (needle == value) return middle else top = middle - 1
    }
    return middle - (if (needle < value) 1 else 0)
}","/**

 * Returns the index of the largest element in [array] smaller or equal to the specified [needle],

 * or -1 if [needle] is smaller than the smallest element in [array].

 */",f3823:m37
33534,"@SinceKotlin(""1.1"") fun KType.isSupertypeOf(other: KType): Boolean","{
    return other.isSubtypeOf(this)
}","/**

 * Returns `true` if `this` type is the same or is a supertype of [other], `false` otherwise.

 */",f11200:m83
58631,"@kotlin.jvm.JvmName(""shortRangeContains"") @SinceKotlin(""1.9"") @WasExperimental(ExperimentalStdlibApi::class) public operator fun OpenEndRange<Short>.contains(value: Long): Boolean","{
    return value.toShortExactOrNull().let { if (it != null) contains(it) else false }
}","/**

 * Checks if the specified [value] belongs to this range.

 */",f17092:m1315
21682,private fun KtElement.getContainingDotQualifiedExpressionForSelectorExpression(): KtQualifiedExpression?,"{
    val parent = parent
    if (parent is KtDotQualifiedExpression && parent.selectorExpression == this) return parent
    if (parent is KtSafeQualifiedExpression && parent.selectorExpression == this) return parent
    return null
}","/**

     * When resolving selector expression of a [KtDotQualifiedExpression], we instead resolve the containing qualified expression. This way

     * the corresponding FIR element is the `FirFunctionCall` or `FirPropertyAccessExpression`, etc.

     */",f8624:m697
58886,public operator fun <T> Sequence<T>.minus(elements: Sequence<T>): Sequence<T>,"{
    return object : Sequence<T> {
        override fun iterator(): Iterator<T> {
            val other = elements.toList()
            if (other.isEmpty()) return this@minus.iterator() else return this@minus.filterNot { it in other }.iterator()
        }
    }
}","/**

 * Returns a sequence containing all elements of original sequence except the elements contained in the given [elements] sequence.

 * 

 * Note that the source sequence and the sequence being subtracted are iterated only when an `iterator` is requested from

 * the resulting sequence. Changing any of them between successive calls to `iterator` may affect the result.

 * 

 * The operation is _intermediate_ for this sequence and _terminal_ and _stateful_ for the [elements] sequence.

 */",f17096:m5333
70407,"private fun report(diagnostic: Diagnostic, ctxt: VariableContext)","{
    val instruction = ctxt.instruction
    if (instruction.copies.isEmpty()) {
        trace.report(diagnostic)
        return
    }
    val previouslyReported = ctxt.reportedDiagnosticMap
    previouslyReported[instruction] = diagnostic.factory
    var alreadyReported = false
    var sameErrorForAllCopies = true
    for (copy in instruction.copies) {
        val previouslyReportedErrorFactory = previouslyReported[copy]
        if (previouslyReportedErrorFactory != null) {
            alreadyReported = true
        }
        if (previouslyReportedErrorFactory !== diagnostic.factory) {
            sameErrorForAllCopies = false
        }
    }
    if (mustBeReportedOnAllCopies(diagnostic.factory)) {
        if (sameErrorForAllCopies) {
            trace.report(diagnostic)
        }
    } else {
        if (!alreadyReported) {
            trace.report(diagnostic)
        }
    }
}","/**

     * The method provides reporting of the same diagnostic only once for copied instructions

     * (depends on whether it should be reported for all or only for one of the copies)

     */",f19635:m2617
29673,"fun get(irType: IrType, scope: IrParcelerScope?, parcelizeType: IrType, strict: Boolean = false, toplevel: Boolean = false): IrParcelSerializer","{
    fun strict() = strict && !irType.hasAnnotation(RAWVALUE_ANNOTATION_FQNAME)
    scope.getCustomSerializer(irType)?.let { parceler -> return IrCustomParcelSerializer(parceler) }
    val classifier = irType.erasedUpperBound
    val classifierFqName = classifier.fqNameWhenAvailable?.asString()
    when (classifierFqName) {
        ""kotlin.String"", ""java.lang.String"" -> return stringSerializer
        ""kotlin.CharSequence"", ""java.lang.CharSequence"" -> return charSequenceSerializer
        ""android.os.Bundle"" -> return bundleSerializer
        ""android.os.PersistableBundle"" -> return persistableBundleSerializer
        ""kotlin.Byte"", ""java.lang.Byte"" -> return wrapNullableSerializerIfNeeded(irType, byteSerializer)
        ""kotlin.Boolean"", ""java.lang.Boolean"" -> return wrapNullableSerializerIfNeeded(irType, booleanSerializer)
        ""kotlin.Char"", ""java.lang.Character"" -> return wrapNullableSerializerIfNeeded(irType, charSerializer)
        ""kotlin.Short"", ""java.lang.Short"" -> return wrapNullableSerializerIfNeeded(irType, shortSerializer)
        ""kotlin.Int"", ""java.lang.Integer"" -> return wrapNullableSerializerIfNeeded(irType, intSerializer)
        ""kotlin.Long"", ""java.lang.Long"" -> return wrapNullableSerializerIfNeeded(irType, longSerializer)
        ""kotlin.Float"", ""java.lang.Float"" -> return wrapNullableSerializerIfNeeded(irType, floatSerializer)
        ""kotlin.Double"", ""java.lang.Double"" -> return wrapNullableSerializerIfNeeded(irType, doubleSerializer)
        ""java.io.FileDescriptor"" -> return wrapNullableSerializerIfNeeded(irType, fileDescriptorSerializer)
        ""android.util.Size"" -> return wrapNullableSerializerIfNeeded(irType, sizeSerializer)
        ""android.util.SizeF"" -> return wrapNullableSerializerIfNeeded(irType, sizeFSerializer)
        ""kotlin.IntArray"" -> if (!scope.hasCustomSerializer(irBuiltIns.intType)) return intArraySerializer
        ""kotlin.BooleanArray"" -> if (!scope.hasCustomSerializer(irBuiltIns.booleanType)) return booleanArraySerializer
        ""kotlin.ByteArray"" -> if (!scope.hasCustomSerializer(irBuiltIns.byteType)) return byteArraySerializer
        ""kotlin.CharArray"" -> if (!scope.hasCustomSerializer(irBuiltIns.charType)) return charArraySerializer
        ""kotlin.FloatArray"" -> if (!scope.hasCustomSerializer(irBuiltIns.floatType)) return floatArraySerializer
        ""kotlin.DoubleArray"" -> if (!scope.hasCustomSerializer(irBuiltIns.doubleType)) return doubleArraySerializer
        ""kotlin.LongArray"" -> if (!scope.hasCustomSerializer(irBuiltIns.longType)) return longArraySerializer
        ""android.util.SparseBooleanArray"" -> if (!scope.hasCustomSerializer(irBuiltIns.booleanType)) return sparseBooleanArraySerializer
    }
    when (classifierFqName) {
        ""kotlin.Array"", ""kotlin.ShortArray"", ""kotlin.IntArray"", ""kotlin.BooleanArray"", ""kotlin.ByteArray"", ""kotlin.CharArray"", ""kotlin.FloatArray"", ""kotlin.DoubleArray"", ""kotlin.LongArray"" -> {
            val elementType = irType.getArrayElementType(irBuiltIns)
            if (!scope.hasCustomSerializer(elementType)) { when (elementType.erasedUpperBound.fqNameWhenAvailable?.asString()) {
                ""java.lang.String"", ""kotlin.String"" -> return stringArraySerializer
                ""android.os.IBinder"" -> return iBinderArraySerializer
            } }
            val arrayType = if (classifier.defaultType.isPrimitiveArray()) classifier.defaultType else irBuiltIns.arrayClass.typeWith(elementType)
            return wrapNullableSerializerIfNeeded(irType, IrArrayParcelSerializer(arrayType, elementType, get(elementType, scope, parcelizeType, strict())))
        }
        ""android.util.SparseBooleanArray"" -> return IrSparseArrayParcelSerializer(classifier, irBuiltIns.booleanType, get(irBuiltIns.booleanType, scope, parcelizeType, strict()))
        ""android.util.SparseIntArray"" -> return IrSparseArrayParcelSerializer(classifier, irBuiltIns.intType, get(irBuiltIns.intType, scope, parcelizeType, strict()))
        ""android.util.SparseLongArray"" -> return IrSparseArrayParcelSerializer(classifier, irBuiltIns.longType, get(irBuiltIns.longType, scope, parcelizeType, strict()))
        ""android.util.SparseArray"" -> {
            val elementType = (irType as IrSimpleType).arguments.single().upperBound(irBuiltIns)
            return IrSparseArrayParcelSerializer(classifier, elementType, get(elementType, scope, parcelizeType, strict()))
        }
        ""kotlin.collections.MutableList"", ""kotlin.collections.List"", ""java.util.List"", ""kotlin.collections.ArrayList"", ""java.util.ArrayList"", ""kotlin.collections.ArrayDeque"", ""java.util.ArrayDeque"", ""kotlin.collections.MutableSet"", ""kotlin.collections.Set"", ""java.util.Set"", ""kotlin.collections.HashSet"", ""java.util.HashSet"", ""kotlin.collections.LinkedHashSet"", ""java.util.LinkedHashSet"", ""java.util.NavigableSet"", ""java.util.SortedSet"" -> {
            val elementType = (irType as IrSimpleType).arguments.single().upperBound(irBuiltIns)
            if (!scope.hasCustomSerializer(elementType) && classifierFqName in setOf(""kotlin.collections.List"", ""kotlin.collections.MutableList"", ""kotlin.collections.ArrayList"", ""java.util.List"", ""java.util.ArrayList"")) { when (elementType.erasedUpperBound.fqNameWhenAvailable?.asString()) {
                ""android.os.IBinder"" -> return iBinderListSerializer
                ""kotlin.String"", ""java.lang.String"" -> return stringListSerializer
            } }
            return wrapNullableSerializerIfNeeded(irType, IrListParcelSerializer(classifier, elementType, get(elementType, scope, parcelizeType, strict())))
        }
        ""kotlin.collections.MutableMap"", ""kotlin.collections.Map"", ""java.util.Map"", ""kotlin.collections.HashMap"", ""java.util.HashMap"", ""kotlin.collections.LinkedHashMap"", ""java.util.LinkedHashMap"", ""java.util.SortedMap"", ""java.util.NavigableMap"", ""java.util.TreeMap"", ""java.util.concurrent.ConcurrentHashMap"" -> {
            val keyType = (irType as IrSimpleType).arguments[0].upperBound(irBuiltIns)
            val valueType = irType.arguments[1].upperBound(irBuiltIns)
            val parceler = IrMapParcelSerializer(classifier, keyType, valueType, get(keyType, scope, parcelizeType, strict()), get(valueType, scope, parcelizeType, strict()))
            return wrapNullableSerializerIfNeeded(irType, parceler)
        }
    }
    when {
        classifier.isSubclassOfFqName(""android.os.Parcelable"") && !(toplevel && (classifier.isObject || classifier.isEnumClass)) -> {
            return if (classifier.modality == Modality.FINAL && classifier.psiElement != null && (classifier.isParcelize || classifier.hasCreatorField)) {
                wrapNullableSerializerIfNeeded(irType, IrEfficientParcelableParcelSerializer(classifier))
            } else {
                IrGenericParcelableParcelSerializer(parcelizeType)
            }
        }
        classifier.isSubclassOfFqName(""android.os.IBinder"") -> return iBinderSerializer
        classifier.isObject -> return IrObjectParcelSerializer(classifier)
        classifier.isEnumClass -> return wrapNullableSerializerIfNeeded(irType, IrEnumParcelSerializer(classifier))
        classifier.isSubclassOfFqName(""java.io.Serializable"") || irType.isFunctionTypeOrSubtype() || irType.isSuspendFunctionTypeOrSubtype() -> return serializableSerializer
        strict() -> throw IllegalArgumentException(""Illegal type, could not find a specific serializer for ${irType.render()}"")
        else -> return IrGenericValueParcelSerializer(parcelizeType)
    }
}","/**

     * Resolve the given [irType] to a corresponding [IrParcelSerializer]. This depends on the TypeParcelers which

     * are currently in [scope], as well as the type of the enclosing Parceleable class [parcelizeType], which is needed

     * to get a class loader for reflection based serialization. Beyond this, we need to know whether to allow

     * using read/writeValue for serialization (if [strict] is false). Beyond this, we need to know whether we are

     * producing parcelers for properties of a Parcelable (if [toplevel] is true), or for a complete Parcelable.

     */",f10484:m33
57283,"@SinceKotlin(""1.4"") @kotlin.internal.InlineOnly public actual inline fun DoubleArray?.contentToString(): String","{
    return java.util.Arrays.toString(this)
}","/**

 * Returns a string representation of the contents of the specified array as if it is [List].

 * 

 * @sample samples.collections.Arrays.ContentOperations.contentToString

 */",f16970:m1759
30818,inline fun <T> Iterable<T>.atMostOne(predicate: (T) -> Boolean): T?,this.filter(predicate).atMostOne(),"/**

 * Returns at most one element from the iterable that satisfies the given predicate.

 *

 * If there are no elements that satisfy [predicate], returns `null`.

 *

 * If there is exactly one element that satisfies [predicate], returns that element.

 *

 * If there are more such elements, throws an exception.

 */",f10781:m135
16227,override fun handleCycleInResolution(target: FirElementWithResolveState),"{
    requireWithAttachment(target is FirCallableDeclaration, { ""Resolution cycle is supposed to be only for callable declaration"" }) { withFirEntry(""target"", target) }
    llImplicitBodyResolveComputationSession.pushCycledSymbol(target.symbol)
}","/**

     * @see org.jetbrains.kotlin.analysis.low.level.api.fir.element.builder.LLFirReturnTypeCalculatorWithJump.resolveDeclaration

     */",f4086:m327
58777,"public inline fun <T, K> Sequence<T>.associateBy(keySelector: (T) -> K): Map<K, T>","{
    return associateByTo(LinkedHashMap<K, T>(), keySelector)
}","/**

 * Returns a [Map] containing the elements from the given sequence indexed by the key

 * returned from [keySelector] function applied to each element.

 * 

 * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.

 * 

 * The returned map preserves the entry iteration order of the original sequence.

 *

 * The operation is _terminal_.

 * 

 * @sample samples.collections.Collections.Transformations.associateBy

 */",f17096:m1329
56246,"@SinceKotlin(""1.5"") @kotlin.internal.InlineOnly @kotlin.internal.IntrinsicConstEvaluation public inline fun Long.mod(other: Short): Short",this.mod(other.toLong()).toShort(),"/**

 * Calculates the remainder of flooring division of this value (dividend) by the other value (divisor).

 *

 * The result is either zero or has the same sign as the _divisor_ and has the absolute value less than the absolute value of the divisor.

 */",f16842:m521
52054,fun ScriptEvaluationConfiguration.Builder.refineConfigurationBeforeEvaluate(handler: RefineScriptEvaluationConfigurationHandler),"{
    ScriptEvaluationConfiguration.refineConfigurationBeforeEvaluate.append(RefineEvaluationConfigurationData(handler))
}","/**

 * A helper to enable passing lambda directly to the refinement ""keyword""

 */",f16431:m251
51539,override fun toString(): String,"{
    val args = arguments.toList().joinToString { (k, v) -> ""$k = $v"" }
    return ""@$className($args)""
}","/**

     * Returns string representation of this instance with `@` sign, [className], and [arguments] in parentheses.

     */",f16336:m69
52653,actual override fun clear(): Unit,"{
    val it = iterator()
    while (it.hasNext()) {
        it.next()
        it.remove()
    }
}","/**

     * Removes all elements from this collection.

     */",f16554:m119
15388,@Test fun expD(),"{
    assertTrue(""Incorrect answer returned for simple power"", abs(exp(4.0) - E * E * E * E) < 0.1)
    assertTrue(""Incorrect answer returned for larger power"", ln(abs(exp(5.5)) - 5.5) < 10.0)
}","/**

     * Tests kotlin.math.exp(Double)

     */",f3868:m515
55924,"public fun <K, V> Map<K, V>.withDefault(defaultValue: (key: K) -> V): Map<K, V>","when (this) {
    is MapWithDefault -> this.map.withDefault(defaultValue)
    else -> MapWithDefaultImpl(this, defaultValue)
}","/**

 * Returns a wrapper of this read-only map, having the implicit default value provided with the specified function [defaultValue].

 *

 * This implicit default value is used when the original map doesn't contain a value for the key specified

 * and a value is obtained with [Map.getValue] function, for example when properties are delegated to the map.

 *

 * When this map already has an implicit default value provided with a former call to [withDefault], it is being replaced by this call.

 */",f16818:m53
58036,@kotlin.internal.InlineOnly public inline operator fun div(other: UShort): UInt,this.toUInt().div(other.toUInt()),"/** Divides this value by the other value, truncating the result to an integer that is closer to zero. */",f17058:m231
63284,"internal fun encodeUtf8(string: String, startIndex: Int, endIndex: Int, throwOnMalformed: Boolean): ByteArray","{
    require(startIndex >= 0 && endIndex <= string.length && startIndex <= endIndex)
    val bytes = ByteArray((endIndex - startIndex) * MAX_BYTES_PER_CHAR)
    var byteIndex = 0
    var charIndex = startIndex
    while (charIndex < endIndex) {
        val code = string[charIndex++].code
        when {
            code < 0x80 -> bytes[byteIndex++] = code.toByte()
            code < 0x800 -> {
                bytes[byteIndex++] = ((code shr 6) or 0xC0).toByte()
                bytes[byteIndex++] = ((code and 0x3F) or 0x80).toByte()
            }
            code < 0xD800 || code >= 0xE000 -> {
                bytes[byteIndex++] = ((code shr 12) or 0xE0).toByte()
                bytes[byteIndex++] = (((code shr 6) and 0x3F) or 0x80).toByte()
                bytes[byteIndex++] = ((code and 0x3F) or 0x80).toByte()
            }
            else -> {
                val codePoint = codePointFromSurrogate(string, code, charIndex, endIndex, throwOnMalformed)
                if (codePoint <= 0) {
                    bytes[byteIndex++] = REPLACEMENT_BYTE_SEQUENCE[0]
                    bytes[byteIndex++] = REPLACEMENT_BYTE_SEQUENCE[1]
                    bytes[byteIndex++] = REPLACEMENT_BYTE_SEQUENCE[2]
                } else {
                    bytes[byteIndex++] = ((codePoint shr 18) or 0xF0).toByte()
                    bytes[byteIndex++] = (((codePoint shr 12) and 0x3F) or 0x80).toByte()
                    bytes[byteIndex++] = (((codePoint shr 6) and 0x3F) or 0x80).toByte()
                    bytes[byteIndex++] = ((codePoint and 0x3F) or 0x80).toByte()
                    charIndex++
                }
            }
        }
    }
    return if (bytes.size == byteIndex) bytes else bytes.copyOf(byteIndex)
}","/**

 * Encodes the [string] using UTF-8 and returns the resulting [ByteArray].

 *

 * @param string the string to encode.

 * @param startIndex the start offset (inclusive) of the substring to encode.

 * @param endIndex the end offset (exclusive) of the substring to encode.

 * @param throwOnMalformed whether to throw on malformed char sequence or replace by the [REPLACEMENT_BYTE_SEQUENCE].

 *

 * @throws CharacterCodingException if the char sequence is malformed and [throwOnMalformed] is true.

 */",f17358:m305
10434,override fun recalculate(),"{
    myOutput.walkStrength = strength
    myOutput.stay = !isInput()
    if (myOutput.stay) execute()
}","/**

   * Calculate the walkabout strength, the stay flag, and, if it is

   * 'stay', the value for the current output of this constraint. Assume

   * this constraint is satisfied.

   */",f3476:m439
48534,"@JvmOverloads fun executable(buildTypes: Collection<NativeBuildType> = NativeBuildType.DEFAULT_BUILD_TYPES, configure: Executable.() -> Unit = {})","createBinaries("""", project.name, NativeOutputKind.EXECUTABLE, buildTypes, ::Executable, configure)",/** Creates an executable with the empty name prefix for each build type and configures it. */,f15652:m357
28269,@OptIn(FrontendInternals::class) fun ResolutionFacade.getLanguageVersionSettings(): LanguageVersionSettings,frontendService<LanguageVersionSettings>(),"/**

 * Helper methods for commonly used frontend components.

 * Use them to avoid explicit opt-ins.

 * Before adding a new helper method please make sure component doesn't have fragile invariants that can be violated by external use.

 */",f9973:m23
52874,"@SinceKotlin(""1.4"") public actual fun Int.countTrailingZeroBits(): Int",Int.SIZE_BITS - (this or -this).inv().countLeadingZeroBits(),"/**

 * Counts the number of consecutive least significant bits that are zero in the binary representation of this [Int] number.

 */",f16581:m239
56514,"@SinceKotlin(""1.4"") @kotlin.internal.InlineOnly public actual inline fun StringBuilder.insertRange(index: Int, value: CharSequence, startIndex: Int, endIndex: Int): StringBuilder","this.insert(index, value, startIndex, endIndex)","/**

 * Inserts characters in a subsequence of the specified character sequence [value] into this string builder at the specified [index] and returns this instance.

 *

 * The inserted characters go in the same order as in the [value] character sequence, starting at [index].

 *

 * @param index the position in this string builder to insert at.

 * @param value the character sequence from which a subsequence is inserted.

 * @param startIndex the beginning (inclusive) of the subsequence to insert.

 * @param endIndex the end (exclusive) of the subsequence to insert.

 *

 * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of the [value] character sequence indices or when `startIndex > endIndex`.

 * @throws IndexOutOfBoundsException if [index] is less than zero or greater than the length of this string builder.

 */",f16890:m359
14988,public actual fun <T: Comparable<T>> Array<out T>.sort(): Unit,"{
    if (size > 1) sortArray(this, 0, size)
}","/**

 * Sorts the array in-place according to the natural order of its elements.

 * 

 * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.

 * 

 * @sample samples.collections.Arrays.Sorting.sortArrayOfComparable

 */",f3831:m4681
58888,"public inline fun <T> Sequence<T>.partition(predicate: (T) -> Boolean): Pair<List<T>, List<T>>","{
    val first = ArrayList<T>()
    val second = ArrayList<T>()
    for (element in this) {
        if (predicate(element)) {
            first.add(element)
        } else {
            second.add(element)
        }
    }
    return Pair(first, second)
}","/**

 * Splits the original sequence into pair of lists,

 * where *first* list contains elements for which [predicate] yielded `true`,

 * while *second* list contains elements for which [predicate] yielded `false`.

 *

 * The operation is _terminal_.

 * 

 * @sample samples.collections.Sequences.Transformations.partition

 */",f17096:m5393
13554,@kotlin.internal.IntrinsicConstEvaluation public inline operator fun times(other: Short): Int,this.toInt() * other.toInt(),/** Multiplies this value by the other value. */,f3686:m1187
63456,"@SinceKotlin(""1.4"") public actual fun ByteArray?.contentHashCode(): Int","{
    if (this === null) return 0
    var result = 1
    for (element in this) result = 31 * result + element.hashCode()
    return result
}","/**

 * Returns a hash code based on the contents of this array as if it is [List].

 */",f17396:m1609
64104,@kotlin.internal.IntrinsicConstEvaluation public inline operator fun times(other: Byte): Int,this.toInt() * other.toInt(),/** Multiplies this value by the other value. */,f17455:m1177
14019,"@SinceKotlin(""1.1"") @kotlin.internal.InlineOnly public actual inline fun String.toLong(radix: Int): Long",toLongOrNull(radix) ?: throw NumberFormatException(),"/**

 * Parses the string as a [Long] number and returns the result.

 * @throws NumberFormatException if the string is not a valid representation of a number.

 * @throws IllegalArgumentException when [radix] is not a valid radix for string to number conversion.

 */",f3714:m237
56161,"@kotlin.internal.InlineOnly @SinceKotlin(""1.1"") public inline fun <T> T.takeUnless(predicate: (T) -> Boolean): T?","{
    contract { callsInPlace(predicate, InvocationKind.EXACTLY_ONCE) }
    return if (!predicate(this)) this else null
}","/**

 * Returns `this` value if it _does not_ satisfy the given [predicate] or `null`, if it does.

 *

 * For detailed usage information see the documentation for [scope functions](https://kotlinlang.org/docs/reference/scope-functions.html#takeif-and-takeunless).

 */",f16833:m257
30848,fun <T> List<T>.compactIfPossible(): List<T>,"when (size) {
    0 -> emptyList()
    1 -> listOf(first())
    else -> apply { if (this is ArrayList<*>) trimToSize() }
}","/**

 * The same as [org.jetbrains.kotlin.utils.compact] extension function, but it could be used with the

 * immutable list type (without [java.util.ArrayList.trimToSize] for the collections with more than 1 element)

 * @see org.jetbrains.kotlin.utils.compact

 */",f10785:m185
63292,"internal fun decomposeCodePoint(codePoint: Int, outputCodePoints: IntArray, fromIndex: Int): Int","{
    val decomposition = getDecomposition(codePoint)
    if (decomposition == null) {
        outputCodePoints[fromIndex] = codePoint
        return 1
    } else {
        decomposition.copyInto(outputCodePoints, fromIndex)
        return decomposition.size
    }
}","/**

 * Decomposes the given codepoint. Saves the decomposition into [outputCodepoints] array starting with [fromIndex].

 * Returns the length of the decomposition.

 */",f17362:m559
63481,"@SinceKotlin(""1.4"") public actual fun CharArray?.contentToString(): String","{
    return this?.joinToString("", "", ""["", ""]"") ?: ""null""
}","/**

 * Returns a string representation of the contents of the specified array as if it is [List].

 * 

 * @sample samples.collections.Arrays.ContentOperations.contentToString

 */",f17396:m2177
59105,"@SinceKotlin(""1.4"") @ExperimentalUnsignedTypes public fun minOf(a: UInt, vararg other: UInt): UInt","{
    var min = a
    for (e in other) min = minOf(min, e)
    return min
}","/**

 * Returns the smaller of the given values.

 */",f17098:m429
64884,"@Suppress(""INVISIBLE_REFERENCE"", ""INVISIBLE_MEMBER"") @InlineOnly public inline fun currentStackTrace(): Array<StackTraceElement>","@Suppress(""PLATFORM_CLASS_MAPPED_TO_KOTLIN"") (java.lang.Exception() as java.lang.Throwable).stackTrace","/**

 * Returns an array of stack trace elements, each representing one stack frame.

 * The first element of the array (assuming the array is not empty) represents the top of the

 * stack, which is the place where [currentStackTrace] function was called from.

 */",f17532:m209
23555,fun IrSimpleType.argumentTypesOrUpperBounds(): List<IrType>,"{
    val params = this.classOrUpperBound()!!.owner.typeParameters
    return arguments.mapIndexed { index, argument -> argument.typeOrNull ?: params[index].representativeUpperBound }
}","/**

 * Replaces star projections with representativeUpperBound of respective type parameter

 * to mimic behaviour of old FE (see StarProjectionImpl.getType())

 */",f8987:m533
57268,"@SinceKotlin(""1.4"") @kotlin.internal.InlineOnly public actual inline fun <T> Array<out T>?.contentHashCode(): Int","{
    return java.util.Arrays.hashCode(this)
}","/**

 * Returns a hash code based on the contents of this array as if it is [List].

 */",f16970:m1465
14524,"@Suppress(""UNCHECKED_CAST"") private inline fun <reified T> unaryMinus(value: T): T","{
    return when (value) {
        is Float -> -value as T
        is Double -> -value as T
        else -> throw NumberFormatException()
    }
}","/**

     * To unify the logic of Double and Float parsing we need a common method to calculate a negative value.

     * Unfortunately in this case we need to make uncheck cast to generic type T to have a proper return type.

     */",f3789:m303
58665,public infix fun CharProgression.step(step: Int): CharProgression,"{
    checkStepIsPositive(step > 0, step)
    return CharProgression.fromClosedRange(first, last, if (this.step > 0) step else -step)
}","/**

 * Returns a progression that goes over the same range with the given step.

 * 

 * @sample samples.ranges.Ranges.stepChar

 */",f17092:m1953
58850,"@SinceKotlin(""1.4"") @OptIn(kotlin.experimental.ExperimentalTypeInference::class) @OverloadResolutionByLambdaReturnType @kotlin.internal.InlineOnly public inline fun <T> Sequence<T>.minOfOrNull(selector: (T) -> Float): Float?","{
    val iterator = iterator()
    if (!iterator.hasNext()) return null
    var minValue = selector(iterator.next())
    while (iterator.hasNext()) {
        val v = selector(iterator.next())
        minValue = minOf(minValue, v)
    }
    return minValue
}","/**

 * Returns the smallest value among all values produced by [selector] function

 * applied to each element in the sequence or `null` if there are no elements.

 * 

 * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.

 *

 * The operation is _terminal_.

 */",f17096:m3913
44857,@Provides @Singleton @ForApplication fun provideApplicationContext(): Context,"{
    return application
}","/**

     * Allow the application context to be injected but require that it be annotated with

     * [@Annotation][ForApplication] to explicitly differentiate it from an activity context.

     */",f14350:m61
56975,"@SinceKotlin(""1.3"") public fun java.util.Random.asKotlinRandom(): Random",(this as? KotlinRandom)?.impl ?: PlatformRandom(this),"/**

 * Creates a Kotlin [Random] instance that uses the specified [java.util.Random][java.util.Random] generator as a randomness source.

 */",f16945:m35
20252,public fun KtElement.collectCallCandidates(): List<KtCallCandidateInfo>,withValidityAssertion { analysisSession.callResolver.collectCallCandidates(this) },"/**

     * Returns all the candidates considered during [overload resolution](https://kotlinlang.org/spec/overload-resolution.html) for the call

     * corresponding to this [KtElement].

     *

     * [resolveCall] only returns the final result of overload resolution, i.e., the selected callable after considering candidate

     * applicability and choosing the most specific candidate.

     */",f5805:m51
52616,override actual fun add(element: E): Boolean,"{
    add(size, element)
    return true
}","/**

     * Adds the specified element to the end of this list.

     *

     * @return `true` because the list is always modified as the result of this operation.

     */",f16553:m73
56520,"@SinceKotlin(""1.4"") @kotlin.internal.InlineOnly public actual inline fun StringBuilder.appendLine(value: Long): StringBuilder",append(value).appendLine(),"/** Appends [value] to this [StringBuilder], followed by a line feed character (`\n`). */",f16890:m447
54814,"@SinceKotlin(""1.4"") public actual fun maxOf(a: Short, vararg other: Short): Short","{
    var max = a
    for (e in other) max = maxOf(max, e)
    return max
}","/**

 * Returns the greater of the given values.

 */",f16714:m345
63265,"@SinceKotlin(""1.2"") public actual fun Long.toString(radix: Int): String","{
    val isNegative = this < 0
    val absValue = if (isNegative) -this else this
    val absValueString = ulongToString(absValue, checkRadix(radix))
    return if (isNegative) ""-$absValueString"" else absValueString
}","/**

 * Returns a string representation of this [Long] value in the specified [radix].

 *

 * @throws IllegalArgumentException when [radix] is not a valid radix for number to string conversion.

 */",f17352:m257
56973,private fun <T> createSimpleCoroutineForSuspendFunction(completion: Continuation<T>): Continuation<T>,"{
    val context = completion.context
    return if (context === EmptyCoroutineContext) object : RestrictedContinuationImpl(completion as Continuation<Any?>) {
        override fun invokeSuspend(result: Result<Any?>): Any? {
            return result.getOrThrow()
        }
    } else object : ContinuationImpl(completion as Continuation<Any?>, context) {
        override fun invokeSuspend(result: Result<Any?>): Any? {
            return result.getOrThrow()
        }
    }
}","/**

 * This function is used when [startCoroutineUninterceptedOrReturn] encounters suspending lambda that does not extend BaseContinuationImpl.

 *

 * It happens in two cases:

 *   1. Callable reference to suspending function or tail-call lambdas,

 *   2. Suspending function reference implemented by Java code.

 *

 * This function is the same as above, but does not run lambda itself - the caller is expected to call [invoke] manually.

 */",f16944:m487
59156,"@SinceKotlin(""1.1"") public fun <T> minOf(a: T, b: T, comparator: Comparator<in T>): T","{
    return if (comparator.compare(a, b) <= 0) a else b
}","/**

 * Returns the smaller of two values according to the order specified by the given [comparator].

 * 

 * If values are equal, returns the first one.

 */",f17100:m625
64415,@kotlin.internal.IntrinsicConstEvaluation public inline operator fun minus(other: Int): Char,(this.code - other).toChar(),/** Subtracts the other Int value from this value resulting a Char. */,f17463:m73
57318,"@JvmName(""copyOfRangeInline"") @kotlin.internal.InlineOnly public actual inline fun FloatArray.copyOfRange(fromIndex: Int, toIndex: Int): FloatArray","{
    return if (kotlin.internal.apiVersionIsAtLeast(1, 3, 0)) {
        copyOfRangeImpl(fromIndex, toIndex)
    } else {
        if (toIndex > size) throw IndexOutOfBoundsException(""toIndex: $toIndex, size: $size"")
        java.util.Arrays.copyOfRange(this, fromIndex, toIndex)
    }
}","/**

 * Returns a new array which is a copy of the specified range of the original array.

 * 

 * @param fromIndex the start of the range (inclusive) to copy.

 * @param toIndex the end of the range (exclusive) to copy.

 * 

 * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.

 * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].

 */",f16970:m2871
40854,"private fun compareStringsAsVersions(version1: String, version2: String): Int","{
    val splitVersion1 = version1.split('.').map { it.toInt() }
    val splitVersion2 = version2.split('.').map { it.toInt() }
    val minimalLength = min(splitVersion1.size, splitVersion2.size)
    for (index in 0 until minimalLength) {
        if (splitVersion1[index] < splitVersion2[index]) return -1
        if (splitVersion1[index] > splitVersion2[index]) return 1
    }
    return splitVersion1.size.compareTo(splitVersion2.size)
}","/**

 * Compares two strings assuming that both are representing numeric version strings.

 * Examples of numeric version strings: ""12.4.1.2"", ""9"", ""0.5"".

 */",f12940:m33
24836,"private fun IrExpressionBody.transformDefaultValue(originalFunction: IrFunction, newFunction: IrFunction)","{
    transformChildrenVoid(object : IrElementTransformerVoid() {
        override fun visitGetValue(expression: IrGetValue): IrExpression {
            val original = super.visitGetValue(expression)
            val valueParameter = (expression.symbol.owner as? IrValueParameter) ?: return original
            val parameterIndex = valueParameter.index
            if (parameterIndex < 0 || valueParameter.parent != originalFunction) {
                return super.visitGetValue(expression)
            }
            return irGet(newFunction.valueParameters[parameterIndex])
        }
    })
}","/**

     *  Expressions for default values can use other parameters.

     *  In such cases we need to ensure that default values expressions use parameters of the new

     *  function (new/copied value parameters).

     *

     *  Example:

     *  fun Foo(a: String, b: String = a) {...}

     */",f9220:m493
53049,"public actual fun <T> lazy(mode: LazyThreadSafetyMode, initializer: () -> T): Lazy<T>",UnsafeLazyImpl(initializer),"/**

 * Creates a new instance of the [Lazy] that uses the specified initialization function [initializer].

 *

 * The [mode] parameter is ignored. */",f16610:m39
10475,fun projectionTest(n: Int),"{
    val planner = Planner()
    var scale = Variable(""scale"", 10)
    var offset = Variable(""offset"", 1000)
    var src: Variable? = null
    var dst: Variable? = null
    var dests = OrderedCollection<Variable>()
    for (i in 0 until n) {
        src = Variable(""src$i"", i)
        dst = Variable(""dst$i"", i)
        dests.add(dst)
        planner.add(StayConstraint(src, Strength.NORMAL))
        planner.add(ScaleConstraint(src, scale, offset, dst, Strength.REQUIRED))
    }
    planner.change(src!!, 17)
    if (dst!!.value != 1170) alert(""Projection 1 failed"")
    planner.change(dst, 1050)
    if (src.value != 5) alert(""Projection 2 failed"")
    planner.change(scale, 5)
    for (i in 0 until n - 1) {
        if (dests.at(i).value != i * 5 + 1000) alert(""Projection 3 failed"")
    }
    planner.change(offset, 2000)
    for (i in 0 until n - 1) {
        if (dests.at(i).value != i * 5 + 2000) alert(""Projection 4 failed"")
    }
}","/**

   * This test constructs a two sets of variables related to each

   * other by a simple linear transformation (scale and offset). The

   * time is measured to change a variable on either side of the

   * mapping and to change the scale and offset factors.

   */",f3476:m1519
57279,"@SinceKotlin(""1.4"") @kotlin.internal.InlineOnly public actual inline fun ShortArray?.contentToString(): String","{
    return java.util.Arrays.toString(this)
}","/**

 * Returns a string representation of the contents of the specified array as if it is [List].

 * 

 * @sample samples.collections.Arrays.ContentOperations.contentToString

 */",f16970:m1671
59072,"@SinceKotlin(""1.2"") public fun <R> CharSequence.chunkedSequence(size: Int, transform: (CharSequence) -> R): Sequence<R>","{
    return windowedSequence(size, size, partialWindows = true, transform = transform)
}","/**

 * Splits this char sequence into several char sequences each not exceeding the given [size]

 * and applies the given [transform] function to an each.

 * 

 * @return sequence of results of the [transform] applied to an each char sequence.

 * 

 * Note that the char sequence passed to the [transform] function is ephemeral and is valid only inside that function.

 * You should not store it or allow it to escape in some way, unless you made a snapshot of it.

 * The last char sequence may have fewer characters than the given [size].

 * 

 * @param size the number of elements to take in each char sequence, must be positive and can be greater than the number of elements in this char sequence.

 * 

 * @sample samples.text.Strings.chunkedTransformToSequence

 */",f17097:m4507
45742,"fun <T: Dependency> api(dependency: T, configure: Action<T>)",api(dependency) { configure.execute(this) },"/**

     * Adds an `api` dependency to this entity.

     *

     * @see [HasKotlinDependencies.apiConfigurationName]

     *

     * @param dependency The dependency to add.

     * @param configure Additional configuration for the [dependency].

     * @return The added [dependency].

     */",f14927:m137
56425,"@SinceKotlin(""1.9"") @WasExperimental(ExperimentalTime::class) public inline fun <T> TimeSource.Monotonic.measureTimedValue(block: () -> T): TimedValue<T>","{
    contract { callsInPlace(block, InvocationKind.EXACTLY_ONCE) }
    val mark = markNow()
    val result = block()
    return TimedValue(result, mark.elapsedNow())
}","/**

 * Executes the given function [block] and returns an instance of [TimedValue] class, containing both

 * the result of function execution and the duration of elapsed time interval.

 *

 * The elapsed time is measured with the specified `this` [TimeSource.Monotonic] instance.

 */",f16862:m207
58813,public fun <T> Sequence<T>.toMutableSet(): MutableSet<T>,"{
    val set = LinkedHashSet<T>()
    for (item in this) set.add(item)
    return set
}","/**

 * Returns a new [MutableSet] containing all distinct elements from the given sequence.

 * 

 * The returned set preserves the element iteration order of the original sequence.

 *

 * The operation is _terminal_.

 */",f17096:m2405
58603,@kotlin.internal.InlineOnly public inline operator fun LongRange.contains(value: Byte): Boolean,"{
    return (this as ClosedRange<Long>).contains(value)
}","/**

 * Checks if the specified [value] belongs to this range.

 */",f17092:m795
14010,"@SinceKotlin(""1.1"") @kotlin.internal.InlineOnly public actual inline fun Long.toString(radix: Int): String","longToString(this, checkRadix(radix))","/**

 * Returns a string representation of this [Long] value in the specified [radix].

 *

 * @throws IllegalArgumentException when [radix] is not a valid radix for number to string conversion.

 */",f3714:m91
63415,public actual fun ShortArray.asList(): List<Short>,"{
    return object : AbstractList<Short>(), RandomAccess {
        override val size: Int get() = this@asList.size
    
        override fun isEmpty(): Boolean = this@asList.isEmpty()
    
        override fun contains(element: Short): Boolean = this@asList.contains(element)
    
        override fun get(index: Int): Short = this@asList[index]
    
        override fun indexOf(element: Short): Int = this@asList.indexOf(element)
    
        override fun lastIndexOf(element: Short): Int = this@asList.lastIndexOf(element)
    }
}","/**

 * Returns a [List] that wraps the original array.

 */",f17396:m267
64052,@kotlin.internal.IntrinsicConstEvaluation public inline operator fun div(other: Short): Int,this.toInt() / other.toInt(),"/** Divides this value by the other value, truncating the result to an integer that is closer to zero. */",f17455:m381
21769,private fun FirNamedReference.findOuterPropertyAccessExpression(): FirExpression?,"{
    val referenceExpression = psi as? KtExpression ?: return null
    val outerExpression = referenceExpression.getOutermostParenthesizerOrThis().parent as? KtElement ?: return null
    return when (val outerFirElement = outerExpression.getOrBuildFir(firResolveSession)) {
        is FirVariableAssignment -> outerFirElement.lValue
        is FirPropertyAccessExpression -> outerFirElement
        is FirImplicitInvokeCall -> outerFirElement.explicitReceiver
        is FirSafeCallExpression -> {
            if (outerFirElement.selector is FirPropertyAccessExpression) outerFirElement else null
        }
        else -> null
    }
}","/**

     * Finds an outer expression for [this] named reference in cases when it is a part of a property access.

     *

     * Otherwise, return null.

     */",f8638:m259
55665,"@ExperimentalStdlibApi private fun String.hexToByte(startIndex: Int = 0, endIndex: Int = length, format: HexFormat = HexFormat.Default): Byte","hexToIntImpl(startIndex, endIndex, format, maxDigits = 2).toByte()","/**

 * Parses a `Byte` value from this string using the specified [format].

 *

 * Note that only [HexFormat.NumberHexFormat] affects parsing,

 * and parsing is performed in case-insensitive manner.

 *

 * @param startIndex the beginning (inclusive) of the substring to parse, 0 by default.

 * @param endIndex the end (exclusive) of the substring to parse, length of this string by default.

 * @param format the [HexFormat] to use for parsing, [HexFormat.Default] by default.

 *

 * @throws IndexOutOfBoundsException when [startIndex] or [endIndex] is out of range of this string indices.

 * @throws IllegalArgumentException when `startIndex > endIndex`.

 * @throws IllegalArgumentException if the substring does not comply with the specified [format].

 */",f16779:m1291
63465,"@Deprecated(""Use Kotlin compiler 1.4 to avoid deprecation warning."") @SinceKotlin(""1.1"") @DeprecatedSinceKotlin(hiddenSince = ""1.4"") public fun ByteArray.contentToString(): String","{
    return this.contentToString()
}","/**

 * Returns a string representation of the contents of the specified array as if it is [List].

 * 

 * @sample samples.collections.Arrays.ContentOperations.contentToString

 */",f17396:m1825
14023,"@SinceKotlin(""1.1"") public actual fun String.toDoubleOrNull(): Double?","{
    try {
        return toDouble()
    } catch (e: NumberFormatException) {
        return null
    }
}","/**

 * Parses the string as a [Double] number and returns the result

 * or `null` if the string is not a valid representation of a number.

 */",f3714:m307
57028,public operator fun BufferedInputStream.iterator(): ByteIterator,"object : ByteIterator() {
    var nextByte = -1

    var nextPrepared = false

    var finished = false

    private fun prepareNext() {
        if (!nextPrepared && !finished) {
            nextByte = read()
            nextPrepared = true
            finished = (nextByte == -1)
        }
    }

    public override fun hasNext(): Boolean {
        prepareNext()
        return !finished
    }

    public override fun nextByte(): Byte {
        prepareNext()
        if (finished) throw NoSuchElementException(""Input stream is over."")
        val res = nextByte.toByte()
        nextPrepared = false
        return res
    }
}",/** Returns an [Iterator] of bytes read from this input stream. */,f16952:m27
64469,"@ExperimentalPathApi @SinceKotlin(""1.8"") public fun Path.deleteRecursively(): Unit","{
    val suppressedExceptions = this.deleteRecursivelyImpl()
    if (suppressedExceptions.isNotEmpty()) {
        throw FileSystemException(""Failed to delete one or more files. See suppressed exceptions for details."").apply { suppressedExceptions.forEach { addSuppressed(it) } }
    }
}","/**

 * Recursively deletes this directory and its content.

 * Note that if this function throws, partial deletion may have taken place.

 *

 * If the entry located by this path is a directory, this function recursively deletes its content and the directory itself.

 * Otherwise, this function deletes only the entry.

 * Symbolic links are not followed to their targets.

 * This function does nothing if the entry located by this path does not exist.

 *

 * If the underlying platform supports [SecureDirectoryStream],

 * traversal of the file tree and removal of entries are performed using it.

 * Otherwise, directories in the file tree are opened with the less secure [Files.newDirectoryStream].

 * Note that on a platform that supports symbolic links and does not support [SecureDirectoryStream],

 * it is possible for a recursive delete to delete files and directories that are outside the directory being deleted.

 * This can happen if, after checking that an entry is a directory (and not a symbolic link), that directory is replaced

 * by a symbolic link to an outside directory before the call that opens the directory to read its entries.

 *

 * If an exception occurs attempting to read, open or delete any entry under the given file tree,

 * this method skips that entry and continues. Such exceptions are collected and, after attempting to delete all entries,

 * an [IOException] is thrown containing those exceptions as suppressed exceptions.

 * Maximum of `64` exceptions are collected. After reaching that amount, thrown exceptions are ignored and not collected.

 *

 * @throws IOException if any entry in the file tree can't be deleted for any reason.

 */",f17471:m565
36441,@Test fun `test single native target in hierarchy`(),"{
    val result = commonize {
        outputTarget(""(a, b)"", ""(c, d)"", ""(a, b, c, d)"")
        simpleSingleSourceTarget(""a"", """"""class A"""""")
    }
    result.assertCommonized(""(a,b)"", ""expect class A()"")
    result.assertCommonized(""((a, b), (c, d))"", ""expect class A()"")
}","/**

     * Following the simple design principle:

     * Absent/Unsupported targets shall result in the same output as a request only mentioning supported targets

     */",f11590:m33
64453,"@SinceKotlin(""1.5"") @WasExperimental(ExperimentalPathApi::class) @Throws(IOException::class) public fun Path.writeText(text: CharSequence, charset: Charset = Charsets.UTF_8, vararg options: OpenOption)","{
    Files.newOutputStream(this, *options).use { out ->
        if (text is String) {
            out.writeTextImpl(text, charset)
            return@use
        }
        val encoder = charset.newReplaceEncoder()
        val charBuffer = if (text is CharBuffer) text.asReadOnlyBuffer() else CharBuffer.wrap(text)
        val byteBuffer = byteBufferForEncoding(chunkSize = minOf(text.length, DEFAULT_BUFFER_SIZE), encoder)
        while (charBuffer.hasRemaining()) {
            encoder.encode(charBuffer, byteBuffer, true).also { check(!it.isError) }
            out.write(byteBuffer.array(), 0, byteBuffer.position())
            byteBuffer.clear()
        }
    }
}","/**

 * Sets the content of this file as [text] encoded using UTF-8 or the specified [charset].

 *

 * By default, the file will be overwritten if it already exists, but you can control this behavior

 * with [options].

 *

 * @param text text to write into file.

 * @param charset character set to use for writing text, UTF-8 by default.

 * @param options options to determine how the file is opened.

 */",f17469:m317
17439,fun <R> withDummyApplication(action: () -> R): R,"{
    val previousApplication = ApplicationManager.getApplication()
    val disposable = Disposer.newDisposable(""Application disposable for dummy application from Analysis API test framework"")
    try {
        MockApplication.setUp(disposable)
        return action()
    } finally {
        Disposer.dispose(disposable)
        resetApplicationToNull(previousApplication)
        require(ApplicationManager.getApplication() === previousApplication) { ""The managed application should have been reset to the previous application or `null`."" }
    }
}","/**

 * Executes [action] with a dummy application available via [ApplicationManager.getApplication]. This function should **only** be used if

 * an application is needed to avoid null pointer exceptions from [ApplicationManager.getApplication] when used in simple situations. Do not

 * use this function if you need a properly set up application and project.

 */",f5234:m59
67782,private fun forceResolveTypeContents(type: KotlinType),"{
    type.annotations
    if (type.isFlexible()) {
        forceResolveTypeContents(type.asFlexibleType().lowerBound)
        forceResolveTypeContents(type.asFlexibleType().upperBound)
    } else {
        type.constructor
        for (projection in type.arguments) {
            if (!projection.isStarProjection) {
                forceResolveTypeContents(projection.type)
            }
        }
    }
}","/**

     *  This function is light version of ForceResolveUtil.forceResolveAllContents

     *  We can't use ForceResolveUtil.forceResolveAllContents here because it runs ForceResolveUtil.forceResolveAllContents(getConstructor()),

     *  which is unsafe for some cyclic cases. For Example:

     *  class A: List<A.B> {

     *    class B

     *  }

     *  Here when we resolve class B, we should resolve supertype for A and we shouldn't start resolve for class B,

     *  otherwise it would be a cycle.

     *  Now there is no cycle here because member scope for A is very clever and can get lazy descriptor for class B without resolving it.

     *

     *  todo: find another way after release

     */",f19246:m425
58992,"public inline fun <K, V> CharSequence.groupBy(keySelector: (Char) -> K, valueTransform: (Char) -> V): Map<K, List<V>>","{
    return groupByTo(LinkedHashMap<K, MutableList<V>>(), keySelector, valueTransform)
}","/**

 * Groups values returned by the [valueTransform] function applied to each character of the original char sequence

 * by the key returned by the given [keySelector] function applied to the character

 * and returns a map where each group key is associated with a list of corresponding values.

 * 

 * The returned map preserves the entry iteration order of the keys produced from the original char sequence.

 * 

 * @sample samples.collections.Collections.Transformations.groupByKeysAndValues

 */",f17097:m1811
56854,@kotlin.internal.InlineOnly public actual inline fun Float.isInfinite(): Boolean,java.lang.Float.isInfinite(this),"/**

 * Returns `true` if this value is infinitely large in magnitude.

 */",f16929:m59
64877,"@Deprecated(""Provided for binary compatibility"", level = DeprecationLevel.HIDDEN) @JvmName(""assertFailsWith"") public fun <T: Throwable> assertFailsWithNoInline(exceptionClass: KClass<T>, message: String?, block: () -> Unit): T","assertFailsWith(exceptionClass, message, block)",/** @suppress */,f17532:m99
63520,"internal fun ShortArray.copyOfUninitializedElements(fromIndex: Int, toIndex: Int): ShortArray","{
    val newSize = toIndex - fromIndex
    if (newSize < 0) {
        throw IllegalArgumentException(""$fromIndex > $toIndex"")
    }
    val result = ShortArray(newSize)
    this.copyInto(result, 0, fromIndex, toIndex.coerceAtMost(size))
    return result
}","/**

 * Returns new array which is a copy of the original array's range between [fromIndex] (inclusive)

 * and [toIndex] (exclusive) with new elements filled with **lateinit** _uninitialized_ values.

 * Attempts to read _uninitialized_ values from this array work in implementation-dependent manner,

 * either throwing exception or returning some kind of implementation-specific default value.

 */",f17396:m3377
56096,public fun <T> MutableCollection<in T>.retainAll(elements: Array<out T>): Boolean,"{
    if (elements.isNotEmpty()) return retainAll(elements.asList()) else return retainNothing()
}","/**

 * Retains only elements of this [MutableCollection] that are contained in the given [elements] array.

 */",f16825:m355
13061,"@Deprecated(WASM_TARGET_IS_DEPRECATED, level = DeprecationLevel.ERROR) public fun allocateArena(): Arena",error(WASM_TARGET_IS_DEPRECATED),"/**

 * @Retain annotation is required to preserve functions from internalization and DCE.

 */",f3639:m71
27060,override fun visitFunctionExpression(expression: IrFunctionExpression),"{
    if (expression.type.isSyntheticComposableFunction()) {
        expression.function.mark()
    }
    super.visitFunctionExpression(expression)
}","/**

     * This function propagates the special function type kind for composable to function expressions like lambda expression.

     */",f9539:m173
14996,"@SinceKotlin(""1.4"") @Suppress(""ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS"") public actual fun CharArray.sort(fromIndex: Int = 0, toIndex: Int = size): Unit","{
    AbstractList.checkRangeIndexes(fromIndex, toIndex, size)
    sortArray(this, fromIndex, toIndex)
}","/**

 * Sorts a range in the array in-place.

 * 

 * @param fromIndex the start of the range (inclusive) to sort, 0 by default.

 * @param toIndex the end of the range (exclusive) to sort, size of this array by default.

 * 

 * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.

 * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].

 * 

 * @sample samples.collections.Arrays.Sorting.sortRangeOfArray

 */",f3831:m4959
56230,"@SinceKotlin(""1.5"") @kotlin.internal.InlineOnly @kotlin.internal.IntrinsicConstEvaluation public inline fun Short.mod(other: Short): Short",this.toInt().mod(other.toInt()).toShort(),"/**

 * Calculates the remainder of flooring division of this value (dividend) by the other value (divisor).

 *

 * The result is either zero or has the same sign as the _divisor_ and has the absolute value less than the absolute value of the divisor.

 */",f16842:m223
53156,public actual fun CharSequence.repeat(n: Int): String,"{
    require(n >= 0) { ""Count 'n' must be non-negative, but was $n."" }
    return when (n) {
        0 -> """"
        1 -> this.toString()
        else -> {
            var result = """"
            if (!isEmpty()) {
                var s = this.toString()
                var count = n
                while (true) {
                    if ((count and 1) == 1) {
                        result += s
                    }
                    count = count ushr 1
                    if (count == 0) {
                        break
                    }
                    s += s
                }
            }
            return result
        }
    }
}","/**

 * Returns a string containing this char sequence repeated [n] times.

 * @throws [IllegalArgumentException] when n < 0.

 * @sample samples.text.Strings.repeat

 */",f16624:m291
57336,"@Suppress(""ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS"") public actual fun FloatArray.fill(element: Float, fromIndex: Int = 0, toIndex: Int = size): Unit","{
    java.util.Arrays.fill(this, fromIndex, toIndex, element)
}","/**

 * Fills this array or its subrange with the specified [element] value.

 * 

 * @param fromIndex the start of the range (inclusive) to fill, 0 by default.

 * @param toIndex the end of the range (exclusive) to fill, size of this array by default.

 * 

 * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.

 * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].

 */",f16970:m3315
16048,private fun OverloadCandidate.preserveCalleeInapplicability(),"{
    val callSite = candidate.callInfo.callSite
    val calleeReference = callSite.toReference(firSession) as? FirDiagnosticHolder ?: return
    val diagnostic = calleeReference.diagnostic as? ConeInapplicableCandidateError ?: return
    if (diagnostic.applicability != CandidateApplicability.INAPPLICABLE) return
    candidate.addDiagnostic(InapplicableCandidate)
}","/**

     * Post-processes a candidate to carry the callee's inapplicability over into the candidate. Without this post-processing, an issue may

     * arise where [getAllCandidates] produces ""applicable"" candidates with inapplicable callee references.

     *

     * For example, a function call `generic<String, String>` of function `fun <A, B, C> generic() { }` is correctly marked as inapplicable

     * by the compiler (due to the missing type argument), but the `firFile` built during [getAllCandidates] will contain an inapplicable

     * function call `generic<String, String, ERROR>` (with the missing type argument inferred as an error type). The *subsequent*

     * resolution by `bodyResolveComponents.callResolver.collectAllCandidates` feeds this call to

     * [org.jetbrains.kotlin.fir.resolve.calls.CandidateFactory], which doesn't make any guarantees for inapplicable calls. Hence, the

     * resulting candidate is *not* marked as inapplicable and needs to be post-processed.

     */",f4044:m255
58846,"@SinceKotlin(""1.4"") @OptIn(kotlin.experimental.ExperimentalTypeInference::class) @OverloadResolutionByLambdaReturnType @kotlin.internal.InlineOnly public inline fun <T> Sequence<T>.minOf(selector: (T) -> Double): Double","{
    val iterator = iterator()
    if (!iterator.hasNext()) throw NoSuchElementException()
    var minValue = selector(iterator.next())
    while (iterator.hasNext()) {
        val v = selector(iterator.next())
        minValue = minOf(minValue, v)
    }
    return minValue
}","/**

 * Returns the smallest value among all values produced by [selector] function

 * applied to each element in the sequence.

 * 

 * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.

 *

 * The operation is _terminal_.

 * 

 * @throws NoSuchElementException if the sequence is empty.

 */",f17096:m3717
16682,"private fun rebindDelegate(newTarget: FirProperty, oldTarget: FirProperty)","{
    val delegate = newTarget.delegate ?: return
    requireWithAttachment(delegate is FirWrappedDelegateExpression, { ""Unexpected delegate type: ${delegate::class.simpleName}"" }) {
        withFirEntry(""newTarget"", newTarget)
        withFirEntry(""oldTarget"", oldTarget)
        withFirEntry(""delegate"", delegate)
    }
    val delegateProvider = delegate.provideDelegateCall
    rebindArgumentList(delegateProvider.argumentList, newTarget = newTarget.symbol, oldTarget = oldTarget.symbol, isSetter = false, canHavePropertySymbolAsThisReference = false)
}","/**

 * This function is required to correctly rebind symbols

 * after [generateAccessorsByDelegate][org.jetbrains.kotlin.fir.builder.generateAccessorsByDelegate]

 * for correct work

 *

 * @see org.jetbrains.kotlin.fir.builder.generateAccessorsByDelegate

 */",f4161:m481
20120,"@OptIn(ExperimentalContracts::class, KtAnalysisApiInternals::class) public inline fun KtAnalysisSession.buildSubstitutor(build: KtSubstitutorBuilder.() -> Unit): KtSubstitutor","{
    contract { callsInPlace(build, InvocationKind.EXACTLY_ONCE) }
    return analysisSession.substitutorFactory.buildSubstitutor(KtSubstitutorBuilder(token).apply(build))
}","/**

 * Creates new [KtSubstitutor] using substitutions specified inside [build] lambda

 */",f5774:m49
52420,override operator fun contains(ch: Int): Boolean,"{
    if (nonBitSet == null) {
        return alt xor bits_.get(ch)
    } else {
        return alt xor nonBitSet!!.contains(ch)
    }
}","/**

     * Returns `true` if character class contains symbol specified,

     * `false` otherwise. Note: #setNegative() method changes the

     * meaning of contains method;



     * @param ch

     * *

     * @return `true` if character class contains symbol specified;

     *     */",f16502:m975
14029,"@SinceKotlin(""1.4"") @kotlin.internal.InlineOnly public actual inline fun StringBuilder.appendLine(value: Double): StringBuilder",append(value).appendLine(),"/** Appends [value] to this [StringBuilder], followed by a line feed character (`\n`). */",f3715:m69
41159,"fun saveClassToCache(kotlinClassInfo: KotlinClassInfo, sourceFiles: List<File>?, changesCollector: ChangesCollector)","{
    val className = kotlinClassInfo.className
    dirtyOutputClassesMap.notDirty(className)
    if (sourceFiles != null) {
        sourceFiles.forEach { sourceToClassesMap.append(it, className) }
        if (!icContext.useCompilerMapsOnly) internalNameToSource[className.internalName] = sourceFiles
    }
    if (kotlinClassInfo.classId.isLocal) return
    when (kotlinClassInfo.classKind) {
        KotlinClassHeader.Kind.FILE_FACADE -> {
            if (sourceFiles != null) {
                assert(sourceFiles.size == 1) { ""Package part from several source files: $sourceFiles"" }
            }
            packagePartMap.addPackagePart(className)
            protoMap.process(kotlinClassInfo, changesCollector)
            if (!icContext.useCompilerMapsOnly) {
                constantsMap.process(kotlinClassInfo, changesCollector)
                inlineFunctionsMap.process(kotlinClassInfo, changesCollector)
            }
        }
        KotlinClassHeader.Kind.MULTIFILE_CLASS -> {
            val partNames = kotlinClassInfo.classHeaderData.toList()
            check(partNames.isNotEmpty()) { ""Multifile class has no parts: $className"" }
            multifileFacadeToParts[className] = partNames
            if (className in protoMap) {
                changesCollector.collectSignature(className.fqNameForClassNameWithoutDollars, areSubclassesAffected = true)
            }
            protoMap.remove(className, changesCollector)
            classFqNameToSourceMap.remove(className.fqNameForClassNameWithoutDollars)
            if (!icContext.useCompilerMapsOnly) {
                classAttributesMap.remove(className.fqNameForClassNameWithoutDollars)
                internalNameToSource.remove(className.internalName)
                constantsMap.process(kotlinClassInfo, changesCollector)
                inlineFunctionsMap.process(kotlinClassInfo, changesCollector)
            }
        }
        KotlinClassHeader.Kind.MULTIFILE_CLASS_PART -> {
            if (sourceFiles != null) {
                assert(sourceFiles.size == 1) { ""Multifile class part from several source files: $sourceFiles"" }
            }
            packagePartMap.addPackagePart(className)
            partToMultifileFacade[className] = kotlinClassInfo.multifileClassName!!
            protoMap.process(kotlinClassInfo, changesCollector)
            if (!icContext.useCompilerMapsOnly) {
                constantsMap.process(kotlinClassInfo, changesCollector)
                inlineFunctionsMap.process(kotlinClassInfo, changesCollector)
            }
        }
        KotlinClassHeader.Kind.CLASS -> {
            if (!icContext.useCompilerMapsOnly) {
                addToClassStorage(kotlinClassInfo.protoData as ClassProtoData, sourceFiles?.let { sourceFiles.single() })
            }
            protoMap.process(kotlinClassInfo, changesCollector)
            if (!icContext.useCompilerMapsOnly) {
                constantsMap.process(kotlinClassInfo, changesCollector)
                inlineFunctionsMap.process(kotlinClassInfo, changesCollector)
            }
        }
        KotlinClassHeader.Kind.UNKNOWN, KotlinClassHeader.Kind.SYNTHETIC_CLASS -> { }
    }
}","/**

     * Saves information about the given (Kotlin) class to this cache, and stores changes between this class and its previous version into

     * the given [ChangesCollector].

     *

     * @param kotlinClassInfo Information about a Kotlin class

     * @param sourceFiles The source files that the given class was generated from, or `null` if this information is not available

     * @param changesCollector A [ChangesCollector]

     */",f12990:m243
56119,protected open fun <T> toArray(array: Array<T>): Array<T>,"collectionToArray(this, array)","/**

     * Fills the provided [array] or creates new array of the same type

     * and fills it with the elements of this collection.

     *

     * If this collection doesn't fit in the provided [array],

     * a new array is created with the same array type and the size of this collection,

     * and filled with this collection elements.

     * Otherwise, the specified [array] is filled starting from index 0.

     * The value of the elements following the collection elements is unspecified.

     *

     * @return An array containing all elements of this collection.

     */",f16829:m71
63422,"@SinceKotlin(""1.1"") @kotlin.internal.LowPriorityInOverloadResolution public actual infix fun <T> Array<out T>.contentDeepEquals(other: Array<out T>): Boolean","{
    return this.contentDeepEquals(other)
}","/**

 * Checks if the two specified arrays are *deeply* equal to one another.

 * 

 * Two arrays are considered deeply equal if they have the same size, and elements at corresponding indices are deeply equal.

 * That is, if two corresponding elements are nested arrays, they are also compared deeply.

 * Elements of other types are compared for equality using the [equals][Any.equals] function.

 * For floating point numbers, this means `NaN` is equal to itself and `-0.0` is not equal to `0.0`.

 * 

 * If any of the arrays contain themselves at any nesting level, the behavior is undefined.

 * 

 * @param other the array to compare deeply with this array.

 * @return `true` if the two arrays are deeply equal, `false` otherwise.

 * 

 * @sample samples.collections.Arrays.ContentOperations.contentDeepEquals

 */",f17396:m463
13851,public inline fun <reified T: Enum<T>> enumValueOf(name: String): T,enumValueOfIntrinsic<T>(name),"/**

 * Returns an enum entry with specified name.

 */",f3692:m71
63650,"@SinceKotlin(""1.1"") @kotlin.internal.InlineOnly public actual inline fun minOf(a: Int, b: Int, c: Int): Int","{
    return minOf(a, minOf(b, c))
}","/**

 * Returns the smaller of three values.

 */",f17406:m659
63416,public actual fun IntArray.asList(): List<Int>,"{
    return object : AbstractList<Int>(), RandomAccess {
        override val size: Int get() = this@asList.size
    
        override fun isEmpty(): Boolean = this@asList.isEmpty()
    
        override fun contains(element: Int): Boolean = this@asList.contains(element)
    
        override fun get(index: Int): Int = this@asList[index]
    
        override fun indexOf(element: Int): Int = this@asList.indexOf(element)
    
        override fun lastIndexOf(element: Int): Int = this@asList.lastIndexOf(element)
    }
}","/**

 * Returns a [List] that wraps the original array.

 */",f17396:m295
54848,"@SinceKotlin(""1.3"") @ExperimentalUnsignedTypes public actual fun UIntArray.asList(): List<UInt>","{
    return object : AbstractList<UInt>(), RandomAccess {
        override val size: Int get() = this@asList.size
    
        override fun isEmpty(): Boolean = this@asList.isEmpty()
    
        override fun contains(element: UInt): Boolean = this@asList.contains(element)
    
        override fun get(index: Int): UInt {
            AbstractList.checkElementIndex(index, size)
            return this@asList[index]
        }
    
        override fun indexOf(element: UInt): Int {
            @Suppress(""USELESS_CAST"") if ((element as Any?) !is UInt) return -1
            return this@asList.indexOf(element)
        }
    
        override fun lastIndexOf(element: UInt): Int {
            @Suppress(""USELESS_CAST"") if ((element as Any?) !is UInt) return -1
            return this@asList.lastIndexOf(element)
        }
    }
}","/**

 * Returns a [List] that wraps the original array.

 */",f16716:m121
63559,public actual operator fun FloatArray.plus(elements: Collection<Float>): FloatArray,"{
    var index = size
    val result = copyOfUninitializedElements(index + elements.size)
    for (element in elements) result[index++] = element
    return result
}","/**

 * Returns an array containing all elements of the original array and then all elements of the given [elements] collection.

 */",f17396:m4367
54652,@kotlin.internal.InlineOnly public actual inline fun IntArray.asList(): List<Int>,"{
    return this.unsafeCast<Array<Int>>().asList()
}","/**

 * Returns a [List] that wraps the original array.

 */",f16713:m245
55923,"@kotlin.jvm.JvmName(""getOrImplicitDefaultNullable"") @PublishedApi internal fun <K, V> Map<K, V>.getOrImplicitDefault(key: K): V","{
    if (this is MapWithDefault) return this.getOrImplicitDefault(key)
    return getOrElseNullable(key, { throw NoSuchElementException(""Key $key is missing in the map."") })
}","/**

 * Returns the value for the given key, or the implicit default value for this map.

 * By default no implicit value is provided for maps and a [NoSuchElementException] is thrown.

 * To create a map with implicit default value use [withDefault] method.

 *

 * @throws NoSuchElementException when the map doesn't contain a value for the specified key and no implicit default was provided for that map.

 */",f16818:m21
54815,"@SinceKotlin(""1.4"") public actual fun maxOf(a: Int, vararg other: Int): Int","{
    var max = a
    for (e in other) max = maxOf(max, e)
    return max
}","/**

 * Returns the greater of the given values.

 */",f16714:m365
55694,public fun <T: Appendable> T.append(vararg value: CharSequence?): T,"{
    for (item in value) append(item)
    return this
}","/**

 * Appends all arguments to the given [Appendable].

 */",f16781:m113
14965,public actual operator fun IntArray.plus(elements: Collection<Int>): IntArray,"{
    var index = size
    val result = copyOfUninitializedElements(index + elements.size)
    for (element in elements) result[index++] = element
    return result
}","/**

 * Returns an array containing all elements of the original array and then all elements of the given [elements] collection.

 */",f3831:m4221
52690,"internal fun sortArray(array: ByteArray, fromIndex: Int, toIndex: Int)","quickSort(array, fromIndex, toIndex - 1)","/**

 * Sorts the given array using qsort algorithm.

 */",f16557:m769
8766,"fun findOrGenerateCEnum(classDescriptor: ClassDescriptor, parent: IrDeclarationContainer): IrClass","{
    val irClassSymbol = symbolTable.descriptorExtension.referenceClass(classDescriptor)
    return if (!irClassSymbol.isBound) {
        provideIrClassForCEnum(classDescriptor).also {
            it.patchDeclarationParents(parent)
            parent.declarations += it
        }
    } else {
        irClassSymbol.owner
    }
}","/**

     * Searches for an IR class for [classDescriptor] in symbol table.

     * Generates one if absent.

     */",f3296:m117
9462,"fun placeGlobalArray(name: String, elemType: LLVMTypeRef?, elements: List<ConstValue>, isExported: Boolean = false): Global","{
    val initializer = ConstArray(elemType, elements)
    val global = placeGlobal(name, initializer, isExported)
    return global
}","/**

     * Creates array-typed global with given name and value.

     */",f3357:m251
9992,"internal fun createObjCFramework(config: KonanConfig, moduleDescriptor: ModuleDescriptor, exportedInterface: ObjCExportedInterface, frameworkDirectory: File)","{
    val frameworkName = frameworkDirectory.name.removeSuffix(CompilerOutputKind.FRAMEWORK.suffix())
    val frameworkBuilder = FrameworkBuilder(config, infoPListBuilder = InfoPListBuilder(config), moduleMapBuilder = ModuleMapBuilder(), objCHeaderWriter = ObjCHeaderWriter(), mainPackageGuesser = MainPackageGuesser())
    frameworkBuilder.build(moduleDescriptor, frameworkDirectory, frameworkName, exportedInterface.headerLines, moduleDependencies = setOf(""Foundation""))
}","/**

 * Populate framework directory with headers, module and info.plist.

 */",f3399:m233
63445,"@SinceKotlin(""1.4"") public actual infix fun CharArray?.contentEquals(other: CharArray?): Boolean","{
    if (this === other) return true
    if (this === null || other === null) return false
    if (size != other.size) return false
    for (i in indices) {
        if (this[i] != other[i]) return false
    }
    return true
}","/**

 * Checks if the two specified arrays are *structurally* equal to one another.

 * 

 * Two arrays are considered structurally equal if they have the same size, and elements at corresponding indices are equal.

 * 

 * The arrays are also considered structurally equal if both are `null`.

 * 

 * @param other the array to compare with this array.

 * @return `true` if the two arrays are structurally equal, `false` otherwise.

 * 

 * @sample samples.collections.Arrays.ContentOperations.charArrayContentEquals

 */",f17396:m1359
24950,fun serialize(): String,buildString { serializeTo(SchemeStringSerializationWriter(this)) },"/**

     * Produce a string serialization of the scheme. This is not necessarily readable, use

     * [toString] for debugging instead.

     */",f9236:m179
57370,public actual fun ByteArray.sort(): Unit,"{
    if (size > 1) java.util.Arrays.sort(this)
}","/**

 * Sorts the array in-place.

 * 

 * @sample samples.collections.Arrays.Sorting.sortArray

 */",f16970:m4037
54656,@kotlin.internal.InlineOnly public actual inline fun BooleanArray.asList(): List<Boolean>,"{
    return this.unsafeCast<Array<Boolean>>().asList()
}","/**

 * Returns a [List] that wraps the original array.

 */",f16713:m309
13488,@kotlin.internal.IntrinsicConstEvaluation public inline operator fun minus(other: Byte): Int,this.toInt() - other.toInt(),/** Subtracts the other value from this value. */,f3686:m251
64391,public open fun toString(): String,"{
    val typeInfoPtr = this.typeInfo
    val packageName = getPackageName(typeInfoPtr)
    val simpleName = getSimpleName(typeInfoPtr)
    val qualifiedName = if (packageName.isEmpty()) simpleName else ""$packageName.$simpleName""
    return ""$qualifiedName@${identityHashCode()}""
}","/**

     * Returns a string representation of the object.

     */",f17458:m93
56385,"@SinceKotlin(""1.5"") @WasExperimental(ExperimentalUnsignedTypes::class) public fun Random.nextUInt(from: UInt, until: UInt): UInt","{
    checkUIntRangeBounds(from, until)
    val signedFrom = from.toInt() xor Int.MIN_VALUE
    val signedUntil = until.toInt() xor Int.MIN_VALUE
    val signedResult = nextInt(signedFrom, signedUntil) xor Int.MIN_VALUE
    return signedResult.toUInt()
}","/**

 * Gets the next random [UInt] from the random number generator in the specified range.

 *

 * Generates a [UInt] random value uniformly distributed between the specified [from] (inclusive) and [until] (exclusive) bounds.

 *

 * @throws IllegalArgumentException if [from] is greater than or equal to [until].

 */",f16860:m57
59010,"public inline fun <R> CharSequence.fold(initial: R, operation: (acc: R, Char) -> R): R","{
    var accumulator = initial
    for (element in this) accumulator = operation(accumulator, element)
    return accumulator
}","/**

 * Accumulates value starting with [initial] value and applying [operation] from left to right

 * to current accumulator value and each character.

 * 

 * Returns the specified [initial] value if the char sequence is empty.

 * 

 * @param [operation] function that takes current accumulator value and a character, and calculates the next accumulator value.

 */",f17097:m2217
58100,@kotlin.internal.InlineOnly public inline fun floorDiv(other: UInt): UInt,this.toUInt().floorDiv(other),"/**

     * Divides this value by the other value, flooring the result to an integer that is closer to negative infinity.

     *

     * For unsigned types, the results of flooring division and truncating division are the same.

     */",f17059:m337
54843,private fun Char.getLetterType(): Int,"{
    val ch = this.code
    val index = binarySearchRange(Letter.decodedRangeStart, ch)
    val rangeStart = Letter.decodedRangeStart[index]
    val rangeEnd = rangeStart + Letter.decodedRangeLength[index] - 1
    val code = Letter.decodedRangeCategory[index]
    if (ch > rangeEnd) {
        return 0
    }
    val lastTwoBits = code and 0x3
    if (lastTwoBits == 0) {
        var shift = 2
        var threshold = rangeStart
        for (i in 0 .. 1) {
            threshold += (code shr shift) and 0x7f
            if (threshold > ch) {
                return 3
            }
            shift += 7
            threshold += (code shr shift) and 0x7f
            if (threshold > ch) {
                return 0
            }
            shift += 7
        }
        return 3
    }
    if (code <= 0x7) {
        return lastTwoBits
    }
    val distance = (ch - rangeStart)
    val shift = if (code <= 0x1F) distance % 2 else distance
    return (code shr (2 * shift)) and 0x3
}","/**

 * Returns

 *   - `1` if the character is a lower case letter,

 *   - `2` if the character is an upper case letter,

 *   - `3` if the character is a letter but not a lower or upper case letter,

 *   - `0` otherwise.

 */",f16715:m133
26250,fun FileLoweringPass.runOnFileInOrder(irFile: IrFile),"{
    irFile.acceptVoid(object : IrElementVisitorVoid {
        override fun visitElement(element: IrElement) {
            element.acceptChildrenVoid(this)
        }
    
        override fun visitFile(declaration: IrFile) {
            lower(declaration)
            declaration.acceptChildrenVoid(this)
        }
    })
}","/**

 * Copy of [runOnFilePostfix], but this implementation first lowers declaration, then its children.

 */",f9334:m121
14823,public actual fun ShortArray.asList(): List<Short>,"{
    return object : AbstractList<Short>(), RandomAccess {
        override val size: Int get() = this@asList.size
    
        override fun isEmpty(): Boolean = this@asList.isEmpty()
    
        override fun contains(element: Short): Boolean = this@asList.contains(element)
    
        override fun get(index: Int): Short = this@asList[index]
    
        override fun indexOf(element: Short): Int = this@asList.indexOf(element)
    
        override fun lastIndexOf(element: Short): Int = this@asList.lastIndexOf(element)
    }
}","/**

 * Returns a [List] that wraps the original array.

 */",f3831:m267
46107,inline fun <reified T> T.closure(edges: (T) -> Iterable<T>): Set<T>,"{
    val initialEdges = edges(this)
    val dequeue = if (initialEdges is Collection) {
        if (initialEdges.isEmpty()) return emptySet()
        createDequeue(initialEdges)
    } else createDequeueFromIterable(initialEdges)
    val results = createResultSet<T>(dequeue.size)
    while (dequeue.isNotEmpty()) {
        val element = dequeue.removeAt(0)
        if (element != this && results.add(element)) {
            dequeue.addAll(edges(element))
        }
    }
    return results
}","/**

 * General purpose implementation of a transitive closure

 * - Recursion free

 * - Predictable amount of allocations

 * - Handles loops and self references gracefully

 * @param edges: Producer function from one node to all its children. This implementation can handle loops and self references gracefully.

 * @return Note: The order of the set is guaranteed to be bfs

 */",f15014:m19
14803,"@Deprecated(""Use Kotlin compiler 1.4 to avoid deprecation warning."") @SinceKotlin(""1.3"") @DeprecatedSinceKotlin(hiddenSince = ""1.4"") @ExperimentalUnsignedTypes public fun UShortArray.contentToString(): String","{
    return this.contentToString()
}","/**

 * Returns a string representation of the contents of the specified array as if it is [List].

 * 

 * @sample samples.collections.Arrays.ContentOperations.contentToString

 */",f3828:m565
54844,"@SinceKotlin(""1.3"") @ExperimentalUnsignedTypes public actual fun UIntArray.elementAt(index: Int): UInt","{
    return elementAtOrElse(index) { throw IndexOutOfBoundsException(""index: $index, size: $size}"") }
}","/**

 * Returns an element at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this array.

 * 

 * @sample samples.collections.Collections.Elements.elementAt

 */",f16716:m33
58166,@kotlin.internal.InlineOnly public inline fun floorDiv(other: UShort): UInt,this.floorDiv(other.toUInt()),"/**

     * Divides this value by the other value, flooring the result to an integer that is closer to negative infinity.

     *

     * For unsigned types, the results of flooring division and truncating division are the same.

     */",f17063:m323
58557,"@SinceKotlin(""1.5"") @WasExperimental(ExperimentalUnsignedTypes::class) public fun UInt.coerceIn(minimumValue: UInt, maximumValue: UInt): UInt","{
    if (minimumValue > maximumValue) throw IllegalArgumentException(""Cannot coerce value to an empty range: maximum $maximumValue is less than minimum $minimumValue."")
    if (this < minimumValue) return minimumValue
    if (this > maximumValue) return maximumValue
    return this
}","/**

 * Ensures that this value lies in the specified range [minimumValue]..[maximumValue].

 * 

 * @return this value if it's in the range, or [minimumValue] if this value is less than [minimumValue], or [maximumValue] if this value is greater than [maximumValue].

 * 

 * @sample samples.comparisons.ComparableOps.coerceInUnsigned

 */",f17090:m1045
58801,"@SinceKotlin(""1.1"") public inline fun <T, K> Sequence<T>.groupingBy(crossinline keySelector: (T) -> K): Grouping<T, K>","{
    return object : Grouping<T, K> {
        override fun sourceIterator(): Iterator<T> = this@groupingBy.iterator()
    
        override fun keyOf(element: T): K = keySelector(element)
    }
}","/**

 * Creates a [Grouping] source from a sequence to be used later with one of group-and-fold operations

 * using the specified [keySelector] function to extract a key from each element.

 *

 * The operation is _intermediate_ and _stateless_.

 * 

 * @sample samples.collections.Grouping.groupingByEachCount

 */",f17096:m2097
57299,@kotlin.internal.InlineOnly public actual inline fun LongArray.copyOf(): LongArray,"{
    return java.util.Arrays.copyOf(this, size)
}","/**

 * Returns new array which is a copy of the original array.

 * 

 * @sample samples.collections.Arrays.CopyOfOperations.copyOf

 */",f16970:m2319
48503,fun getStaticLib(buildType: NativeBuildType): StaticLibrary,"getStaticLib("""", buildType)",/** Returns a static library with the empty name prefix and the given build type. Throws an exception if there is no such binary.*/,f15652:m147
58292,"@SinceKotlin(""1.5"") @WasExperimental(ExperimentalUnsignedTypes::class) public fun String.toUByteOrNull(radix: Int): UByte?","{
    val int = this.toUIntOrNull(radix) ?: return null
    if (int > UByte.MAX_VALUE) return null
    return int.toUByte()
}","/**

 * Parses the string as an [UByte] number and returns the result

 * or `null` if the string is not a valid representation of a number.

 *

 * @throws IllegalArgumentException when [radix] is not a valid radix for string to number conversion.

 */",f17067:m263
56084,@kotlin.internal.InlineOnly public inline operator fun <T> MutableCollection<in T>.minusAssign(element: T),"{
    this.remove(element)
}","/**

 * Removes a single instance of the specified [element] from this mutable collection.

 */",f16825:m153
57042,@kotlin.internal.InlineOnly public inline fun print(message: Int),"{
    System.out.print(message)
}",/** Prints the given [message] to the standard output stream. */,f16953:m45
58794,"@SinceKotlin(""1.4"") @OptIn(kotlin.experimental.ExperimentalTypeInference::class) @OverloadResolutionByLambdaReturnType @kotlin.jvm.JvmName(""flatMapIndexedSequenceTo"") @kotlin.internal.InlineOnly public inline fun <T, R, C: MutableCollection<in R>> Sequence<T>.flatMapIndexedTo(destination: C, transform: (index: Int, T) -> Sequence<R>): C","{
    var index = 0
    for (element in this) {
        val list = transform(checkIndexOverflow(index++), element)
        destination.addAll(list)
    }
    return destination
}","/**

 * Appends all elements yielded from results of [transform] function being invoked on each element

 * and its index in the original sequence, to the given [destination].

 *

 * The operation is _terminal_.

 */",f17096:m1861
58701,public fun Long.coerceAtLeast(minimumValue: Long): Long,"{
    return if (this < minimumValue) minimumValue else this
}","/**

 * Ensures that this value is not less than the specified [minimumValue].

 * 

 * @return this value if it's greater than or equal to the [minimumValue] or the [minimumValue] otherwise.

 * 

 * @sample samples.comparisons.ComparableOps.coerceAtLeast

 */",f17092:m2495
56126,"public fun <T: Comparable<*>> compareValues(a: T?, b: T?): Int","{
    if (a === b) return 0
    if (a == null) return -1
    if (b == null) return 1
    @Suppress(""UNCHECKED_CAST"") return (a as Comparable<Any>).compareTo(b)
}","/**

 * Compares two nullable [Comparable] values. Null is considered less than any value.

 *

 * @sample samples.comparisons.Comparisons.compareValues

 */",f16832:m133
57282,"@SinceKotlin(""1.4"") @kotlin.internal.InlineOnly public actual inline fun FloatArray?.contentToString(): String","{
    return java.util.Arrays.toString(this)
}","/**

 * Returns a string representation of the contents of the specified array as if it is [List].

 * 

 * @sample samples.collections.Arrays.ContentOperations.contentToString

 */",f16970:m1737
47761,internal fun isHostSpecificKonanTargetsSet(konanTargets: Iterable<KonanTarget>): Boolean,konanTargets.none { target -> target in targetsEnabledOnAllHosts },"/**

 * The set of konanTargets is considered 'host specific' if the shared compilation of said set can *not* be built

 * on *all* potential hosts. e.g. a set like (iosX64, macosX64) can only be built on macos hosts, and is therefore considered

 * 'host specific'.

 */",f15446:m301
40473,"fun register(@TestDataFile testDataFilePath: String, sourceTransformer: ExternalSourceTransformer)","{
    registeredSourceTransformers.computeIfAbsent(getAbsoluteFile(testDataFilePath)) { mutableListOf() } += sourceTransformer
}","/**

     * Called directly from test class constructor.

     */",f12855:m45
47290,fun require(request: String): String,"{
    return resolve(request)?.canonicalPath ?: error(""Cannot find node module \""$request\"" in \""$this\"""")
}","/**

     * Require [request] nodejs module and return canonical path to it's main js file.

     */",f15294:m47
56614,"@kotlin.internal.InlineOnly @SinceKotlin(""1.2"") public actual inline fun <T> MutableList<T>.fill(value: T)","{
    java.util.Collections.fill(this, value)
}","/**

 * Fills the list with the provided [value].

 *

 * Each element in the list gets replaced with the [value].

 */",f16918:m89
56920,"@SinceKotlin(""1.2"") @kotlin.internal.InlineOnly public inline fun Long.toBigDecimal(mathContext: MathContext): BigDecimal","BigDecimal(this, mathContext)","/**

 * Returns the value of this [Long] number as a [BigDecimal].

 * @param mathContext specifies the precision and the rounding mode.

 */",f16935:m181
57486,"@SinceKotlin(""1.3"") @ExperimentalUnsignedTypes public actual fun UByteArray.asList(): List<UByte>","{
    return object : AbstractList<UByte>(), RandomAccess {
        override val size: Int get() = this@asList.size
    
        override fun isEmpty(): Boolean = this@asList.isEmpty()
    
        override fun contains(element: UByte): Boolean = this@asList.contains(element)
    
        override fun get(index: Int): UByte = this@asList[index]
    
        override fun indexOf(element: UByte): Int = this@asList.indexOf(element)
    
        override fun lastIndexOf(element: UByte): Int = this@asList.lastIndexOf(element)
    }
}","/**

 * Returns a [List] that wraps the original array.

 */",f16971:m199
21954,"private fun KtAnalysisSession.getSymbolsFromParentMemberScopes(fqName: FqName, contextElement: KtElement): Collection<KtSymbol>","{
    val declaration = PsiTreeUtil.getContextOfType(contextElement, KtDeclaration::class.java, false) ?: return emptyList()
    for (ktDeclaration in declaration.parentsOfType<KtDeclaration>(withSelf = true)) {
        if (fqName.pathSegments().size == 1) {
            getSymbolsFromDeclaration(fqName.shortName(), ktDeclaration).ifNotEmpty { return this }
        }
        if (ktDeclaration is KtClassOrObject) {
            val symbol = ktDeclaration.getClassOrObjectSymbol() ?: continue
            val scope = getCompositeCombinedMemberAndCompanionObjectScope(symbol)
            val symbolsFromScope = getSymbolsFromMemberScope(fqName, scope)
            if (symbolsFromScope.isNotEmpty()) return symbolsFromScope
        }
    }
    return emptyList()
}","/**

     * Returns the [KtSymbol]s called [fqName] found in the member scope and companion object's member scope of the [KtDeclaration]s that

     * contain the [contextElement].

     *

     * If [fqName] has two or more segments, e.g. `Foo.bar`, the member and companion object scope of the containing [KtDeclaration] will be

     * queried for a class `Foo` first, and then that class `Foo` will be queried for the member `bar` by short name.

     */",f8670:m423
48827,"fun property(propertyName: String, project: Project): Provider<String>","{
    return propertiesManager.computeIfAbsent(project) { PropertiesManager(project, parameters.localProperties.get()) }.property(propertyName)
}",/** Returns a [Provider] of the value of the property with the given [propertyName] in the given [project]. */,f15687:m73
56509,"@SinceKotlin(""1.4"") @kotlin.internal.InlineOnly public actual inline fun StringBuilder.deleteRange(startIndex: Int, endIndex: Int): StringBuilder","this.delete(startIndex, endIndex)","/**

 * Removes characters in the specified range from this string builder and returns this instance.

 *

 * @param startIndex the beginning (inclusive) of the range to remove.

 * @param endIndex the end (exclusive) of the range to remove.

 *

 * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] is out of range of this string builder indices or when `startIndex > endIndex`.

 */",f16890:m203
58819,"public inline fun <T, R> Sequence<T>.fold(initial: R, operation: (acc: R, T) -> R): R","{
    var accumulator = initial
    for (element in this) accumulator = operation(accumulator, element)
    return accumulator
}","/**

 * Accumulates value starting with [initial] value and applying [operation] from left to right

 * to current accumulator value and each element.

 * 

 * Returns the specified [initial] value if the sequence is empty.

 * 

 * @param [operation] function that takes current accumulator value and an element, and calculates the next accumulator value.

 *

 * The operation is _terminal_.

 */",f17096:m2553
64332,@kotlin.internal.IntrinsicConstEvaluation public inline operator fun compareTo(other: Long): Int,this.compareTo(other.toDouble()),"/**

     * Compares this value with the specified value for order.

     * Returns zero if this value is equal to the specified other value, a negative number if it's less than other,

     * or a positive number if it's greater than other.

     */",f17455:m4699
57307,@kotlin.internal.InlineOnly public actual inline fun LongArray.copyOf(newSize: Int): LongArray,"{
    return java.util.Arrays.copyOf(this, newSize)
}","/**

 * Returns new array which is a copy of the original array, resized to the given [newSize].

 * The copy is either truncated or padded at the end with zero values if necessary.

 * 

 * - If [newSize] is less than the size of the original array, the copy array is truncated to the [newSize].

 * - If [newSize] is greater than the size of the original array, the extra elements in the copy array are filled with zero values.

 * 

 * @sample samples.collections.Arrays.CopyOfOperations.resizedPrimitiveCopyOf

 */",f16970:m2503
63253,public actual fun String.toShort(radix: Int): Short,toShortOrNull(radix) ?: numberFormatError(this),"/**

 * Parses the string as a [Short] number and returns the result.

 * @throws NumberFormatException if the string is not a valid representation of a number.

 * @throws IllegalArgumentException when [radix] is not a valid radix for string to number conversion.

 */",f17352:m71
56030,"public inline fun <K, V, R, M: MutableMap<in K, in R>> Map<out K, V>.mapValuesTo(destination: M, transform: (Map.Entry<K, V>) -> R): M","{
    return entries.associateByTo(destination, { it.key }, transform)
}","/**

 * Populates the given [destination] map with entries having the keys of this map and the values obtained

 * by applying the [transform] function to each entry in this [Map].

 */",f16823:m813
14882,"@SinceKotlin(""1.4"") public actual fun ByteArray?.contentToString(): String","{
    return this?.joinToString("", "", ""["", ""]"") ?: ""null""
}","/**

 * Returns a string representation of the contents of the specified array as if it is [List].

 * 

 * @sample samples.collections.Arrays.ContentOperations.contentToString

 */",f3831:m2037
15412,fun test_ulp_D(),"{
    assertTrue(""Should return NaN"", Double.isNaN(ulp(Double.NaN)))
    assertEquals(""Returned incorrect value"", Double.POSITIVE_INFINITY, ulp(Double.POSITIVE_INFINITY), 0.0)
    assertEquals(""Returned incorrect value"", Double.POSITIVE_INFINITY, ulp(Double.NEGATIVE_INFINITY), 0.0)
    assertEquals(""Returned incorrect value"", Double.MIN_VALUE, ulp(0.0), 0.0)
    assertEquals(""Returned incorrect value"", Double.MIN_VALUE, ulp(+0.0), 0.0)
    assertEquals(""Returned incorrect value"", Double.MIN_VALUE, ulp(-0.0), 0.0)
    assertEquals(""Returned incorrect value"", pow(2.0, 971.0), ulp(Double.MAX_VALUE), 0.0)
    assertEquals(""Returned incorrect value"", pow(2.0, 971.0), ulp(-Double.MAX_VALUE), 0.0)
    assertEquals(""Returned incorrect value"", Double.MIN_VALUE, ulp(Double.MIN_VALUE), 0.0)
    assertEquals(""Returned incorrect value"", Double.MIN_VALUE, ulp(-Double.MIN_VALUE), 0.0)
    assertEquals(""Returned incorrect value"", 2.220446049250313E-16, ulp(1.0), 0.0)
    assertEquals(""Returned incorrect value"", 2.220446049250313E-16, ulp(-1.0), 0.0)
    assertEquals(""Returned incorrect value"", 2.2737367544323206E-13, ulp(1153.0), 0.0)
}","/**

     * Tests kotlin.Double.ulp

     */",f3868:m1405
58505,"@SinceKotlin(""1.7"") @kotlin.jvm.JvmName(""minWithOrThrow"") @kotlin.internal.InlineOnly @Suppress(""CONFLICTING_OVERLOADS"") public inline fun <K, V> Map<out K, V>.minWith(comparator: Comparator<in Map.Entry<K, V>>): Map.Entry<K, V>","{
    return entries.minWith(comparator)
}","/**

 * Returns the first entry having the smallest value according to the provided [comparator].

 * 

 * @throws NoSuchElementException if the map is empty.

 */",f17089:m1033
54851,"@SinceKotlin(""1.3"") @ExperimentalUnsignedTypes public actual fun UShortArray.asList(): List<UShort>","{
    return object : AbstractList<UShort>(), RandomAccess {
        override val size: Int get() = this@asList.size
    
        override fun isEmpty(): Boolean = this@asList.isEmpty()
    
        override fun contains(element: UShort): Boolean = this@asList.contains(element)
    
        override fun get(index: Int): UShort {
            AbstractList.checkElementIndex(index, size)
            return this@asList[index]
        }
    
        override fun indexOf(element: UShort): Int {
            @Suppress(""USELESS_CAST"") if ((element as Any?) !is UShort) return -1
            return this@asList.indexOf(element)
        }
    
        override fun lastIndexOf(element: UShort): Int {
            @Suppress(""USELESS_CAST"") if ((element as Any?) !is UShort) return -1
            return this@asList.lastIndexOf(element)
        }
    }
}","/**

 * Returns a [List] that wraps the original array.

 */",f16716:m283
12237,"private fun expandMacros(library: CompilationWithPCH, names: List<String>, typeConverter: TypeConverter): List<MacroDef>","{
    withIndex(excludeDeclarationsFromPCH = true) { index ->
        val sourceFile = library.createTempSource()
        val compilerArgs = library.compilerArgs.toMutableList()
        compilerArgs += ""-Werror=implicit-function-declaration""
        compilerArgs += ""-ferror-limit=0""
        val translationUnit = parseTranslationUnit(index, sourceFile, compilerArgs, options = CXTranslationUnit_DetailedPreprocessingRecord)
        try {
            val nameToMacroDef = mutableMapOf<String, MacroDef>()
            val unprocessedMacros = names.toMutableList()
            while (unprocessedMacros.isNotEmpty()) {
                val processedMacros = tryExpandMacros(library, translationUnit, sourceFile, unprocessedMacros, typeConverter)
                unprocessedMacros -= (processedMacros.keys + unprocessedMacros.first())
                processedMacros.forEach { (name, macroDef) -> if (macroDef != null) nameToMacroDef[name] = macroDef }
            }
            return names.mapNotNull { nameToMacroDef[it] }
        } finally {
            clang_disposeTranslationUnit(translationUnit)
        }
    }
}","/**

 * For each name expands the macro with this name declared in the library,

 * checking if it gets expanded to a constant expression.

 *

 * Note: in the worst case this method parses the code against the library a lot of times,

 * so it requires library headers precompiled to significantly speed up the parsing and avoid visiting headers' AST.

 *

 * @return the list of constants.

 */",f3629:m87
58972,public fun CharSequence.reversed(): CharSequence,"{
    return StringBuilder(this).reverse()
}","/**

 * Returns a char sequence with characters in reversed order.

 */",f17097:m1309
63241,"@SinceKotlin(""1.9"") @kotlin.internal.InlineOnly public actual inline fun StringBuilder.appendLine(value: Short): StringBuilder",append(value).appendLine(),"/** Appends [value] to this [StringBuilder], followed by a line feed character (`\n`). */",f17351:m29
58028,@kotlin.internal.InlineOnly public inline operator fun minus(other: UShort): UInt,this.toUInt().minus(other.toUInt()),/** Subtracts the other value from this value. */,f17058:m179
56597,"@kotlin.internal.InlineOnly public inline fun Map<String, String>.toProperties(): Properties",Properties().apply { putAll(this@toProperties) },"/**

 * Converts this [Map] to a [Properties] object.

 *

 * @sample samples.collections.Maps.Transformations.mapToProperties

 */",f16913:m245
37684,"internal fun Map<ClassDescriptor, MutableList<CallableMemberDescriptor>>.makeCategoriesOrderStable()",this.entries.sortedBy { it.key.classId.toString() },"/**

 * Sort order of categories. Order of extensions will be stabilized in the corresponding functions later.

 */",f11829:m2327
14983,public actual fun ByteArray.sort(): Unit,"{
    if (size > 1) sortArray(this, 0, size)
}","/**

 * Sorts the array in-place.

 * 

 * @sample samples.collections.Arrays.Sorting.sortArray

 */",f3831:m4591
64028,@kotlin.internal.IntrinsicConstEvaluation public inline operator fun compareTo(other: Short): Int,this.toShort().compareTo(other),"/**

     * Compares this value with the specified value for order.

     * Returns zero if this value is equal to the specified other value, a negative number if it's less than other,

     * or a positive number if it's greater than other.

     */",f17455:m101
52049,"suspend fun compile(snippet: SourceCode, configuration: ScriptCompilationConfiguration): ResultWithDiagnostics<LinkedSnippet<CompiledSnippetT>>","compile(listOf(snippet), configuration)","/**

     * Compiles snippet and returns compilation result for it.

     * Generally <b>changes</b> the internal state of implementing object.

     * @param snippet Snippet to compile

     * @param configuration Compilation configuration which is used

     * @return Compilation result

     */",f16429:m77
63450,"@Deprecated(""Use Kotlin compiler 1.4 to avoid deprecation warning."") @SinceKotlin(""1.1"") @DeprecatedSinceKotlin(hiddenSince = ""1.4"") public fun LongArray.contentHashCode(): Int","{
    return this.contentHashCode()
}","/**

 * Returns a hash code based on the contents of this array as if it is [List].

 */",f17396:m1485
13863,"@Deprecated(""Direct conversion to Char is deprecated. Use toInt().toChar() or Char constructor instead.\nIf you override toChar() function in your Number inheritor, it's recommended to gradually deprecate the overriding function and then remove it.\nSee https://youtrack.jetbrains.com/issue/KT-46465 for details about the migration"", ReplaceWith(""this.toInt().toChar()"")) @DeprecatedSinceKotlin(warningSince = ""1.9"", errorSince = ""2.3"") public open fun toChar(): Char","{
    return toInt().toChar()
}","/**

     * Returns the [Char] with the numeric value equal to this number, truncated to 16 bits if appropriate.

     */",f3700:m63
27477,private fun handleClassAnnotations(classSymbol: Symbol.ClassSymbol),"{
    elementUtils.getAllAnnotationMirrors(classSymbol).forEach { (it.annotationType.asElement() as? TypeElement)?.let { sourceStructure.addMentionedAnnotations(it.qualifiedName.toString()) } }
}","/** Handle annotations on this class, including the @Inherited ones as those are not visible using Tree APIs. */",f9698:m123
56497,"@SinceKotlin(""1.2"") public fun String.toBigDecimalOrNull(): java.math.BigDecimal?",screenFloatValue(this) { it.toBigDecimal() },"/**

 * Parses the string as a [java.math.BigDecimal] number and returns the result

 * or `null` if the string is not a valid representation of a number.

 */",f16885:m445
59071,"@SinceKotlin(""1.2"") public fun CharSequence.chunkedSequence(size: Int): Sequence<String>","{
    return chunkedSequence(size) { it.toString() }
}","/**

 * Splits this char sequence into a sequence of strings each not exceeding the given [size].

 * 

 * The last string in the resulting sequence may have fewer characters than the given [size].

 * 

 * @param size the number of elements to take in each string, must be positive and can be greater than the number of elements in this char sequence.

 * 

 * @sample samples.collections.Collections.Transformations.chunked

 */",f17097:m4479
58765,public fun <T: Any> Sequence<T?>.filterNotNull(): Sequence<T>,"{
    @Suppress(""UNCHECKED_CAST"") return filterNot { it == null } as Sequence<T>
}","/**

 * Returns a sequence containing all elements that are not `null`.

 *

 * The operation is _intermediate_ and _stateless_.

 * 

 * @sample samples.collections.Collections.Filtering.filterNotNull

 */",f17096:m1005
63327,"@Suppress(""NOTHING_TO_INLINE"") @PublishedApi internal inline fun <E> arrayOfUninitializedElements(size: Int): Array<E>","{
    require(size >= 0) { ""capacity must be non-negative."" }
    @Suppress(""TYPE_PARAMETER_AS_REIFIED"") return Array<E>(size)
}","/**

 * Returns an array of objects of the given type with the given [size], initialized with _uninitialized_ values.

 * Attempts to read _uninitialized_ values from this array work in implementation-dependent manner,

 * either throwing exception or returning some kind of implementation-specific default value.

 */",f17379:m15
64329,@kotlin.internal.IntrinsicConstEvaluation public inline operator fun compareTo(other: Byte): Int,this.compareTo(other.toDouble()),"/**

     * Compares this value with the specified value for order.

     * Returns zero if this value is equal to the specified other value, a negative number if it's less than other,

     * or a positive number if it's greater than other.

     */",f17455:m4645
57147,"@SinceKotlin(""1.1"") @kotlin.internal.InlineOnly public actual inline fun maxOf(a: Byte, b: Byte, c: Byte): Byte","{
    return Math.max(a.toInt(), Math.max(b.toInt(), c.toInt())).toByte()
}","/**

 * Returns the greater of three values.

 */",f16966:m189
11460,fun pop(): String?,"{
    if (argumentsUsageNumber.isEmpty()) return null
    val (currentDescriptor, usageNumber) = argumentsUsageNumber.iterator().next()
    currentDescriptor.number?.let { if (usageNumber + 1 >= currentDescriptor.number) {
        argumentsUsageNumber.remove(currentDescriptor)
    } else {
        argumentsUsageNumber[currentDescriptor] = usageNumber + 1
    } }
    return currentDescriptor.fullName
}","/**

     * Get next descriptor from queue.

     */",f3554:m43
45613,fun compilerOptions(configure: Action<in CO>),"{
    configure.execute(compilerOptions)
}","/**

     * Configures the [compilerOptions] with the provided configuration.

     */",f14889:m77
56046,"public fun <K, V, M: MutableMap<in K, in V>> Array<out Pair<K, V>>.toMap(destination: M): M",destination.apply { putAll(this@toMap) },"/**

 *  Populates and returns the [destination] mutable map with key-value pairs from the given array of pairs.

 */",f16823:m1195
54733,"@SinceKotlin(""1.3"") @Suppress(""ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS"") public actual fun DoubleArray.fill(element: Double, fromIndex: Int = 0, toIndex: Int = size): Unit","{
    AbstractList.checkRangeIndexes(fromIndex, toIndex, size)
    nativeFill(element, fromIndex, toIndex)
}","/**

 * Fills this array or its subrange with the specified [element] value.

 * 

 * @param fromIndex the start of the range (inclusive) to fill, 0 by default.

 * @param toIndex the end of the range (exclusive) to fill, size of this array by default.

 * 

 * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.

 * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].

 */",f16713:m2517
57057,@kotlin.internal.InlineOnly public inline fun println(message: Boolean),"{
    System.out.println(message)
}",/** Prints the given [message] and the line separator to the standard output stream. */,f16953:m225
46129,inline fun <reified T> extrasKeyOf(name: String? = null): Extras.Key<T>,"Extras.Key(extrasTypeOf(), name)","/**

 *  Creates a value based key for accessing any [Extras] container

 *

 * @param T The type of data that is stored in the extras container

 * ```kotlin

 * extrasKeyOf<Int>() == extrasKeyOf<Int>()

 * extrasKeyOf<Int>() != extrasKeyOf<String>()

 * extrasKeyOf<List<Int>>() == extrasKeyOf<List<Int>>()

 * extrasKeyOf<List<*>>() != extrasKeyOf<List<Int>>()

 * ```

 *

 * @param name This typed keys can also be distinguished with an additional name. In this case

 * ```kotlin

 * extrasKeyOf<Int>() != extrasKeyOf<Int>(""a"")

 * extrasKeyOf<Int>(""a"") == extrasKeyOf<Int>(""a"")

 * extrasKeyOf<Int>(""b"") != extrasKeyOf<Int>(""a"")

 * extrasKeyOf<String>(""a"") != extrasKeyOf<Int>(""a"")

 * ```

 */",f15015:m19
56492,"@SinceKotlin(""1.2"") @kotlin.internal.InlineOnly public inline fun String.toBigInteger(radix: Int): java.math.BigInteger","java.math.BigInteger(this, checkRadix(radix))","/**

 * Parses the string as a [java.math.BigInteger] number and returns the result.

 * @throws NumberFormatException if the string is not a valid representation of a number.

 * @throws IllegalArgumentException when [radix] is not a valid radix for string to number conversion.

 */",f16885:m319
57270,"@SinceKotlin(""1.4"") @kotlin.internal.InlineOnly public actual inline fun ShortArray?.contentHashCode(): Int","{
    return java.util.Arrays.hashCode(this)
}","/**

 * Returns a hash code based on the contents of this array as if it is [List].

 */",f16970:m1501
15404,@Test fun roundD(),"{
    assertEquals(""Failed to round properly - up to odd"", 3.0, round(2.9), 0.0)
    assertTrue(""Failed to round properly - NaN"", Double.isNaN(round(Double.NaN)))
    assertEquals(""Failed to round properly down  to even"", 2.0, round(2.1), 0.0)
    assertTrue(""Failed to round properly "" + 2.5 + "" to even"", round(2.5) == 2.0)
    assertTrue(""Failed to round properly "" + +0.0, round(+0.0) == +0.0)
    assertTrue(""Failed to round properly "" + -0.0, round(-0.0) == -0.0)
}","/**

     * Tests kotlin.math.round(Double)

     */",f3868:m1129
52612,public actual fun <T> MutableList<T>.sortWith(comparator: Comparator<in T>): Unit,"{
    if (size > 1) {
        val it = listIterator()
        val sortedArray = @Suppress(""UNCHECKED_CAST"") (toTypedArray<Any?>() as Array<T>).apply { sortWith(comparator) }
        for (v in sortedArray) {
            it.next()
            it.set(v)
        }
    }
}","/**

 * Sorts elements in the list in-place according to the order specified with [comparator].

 *

 * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.

 *

 * @sample samples.collections.Collections.Sorting.sortMutableListWith

 */",f16552:m33
57383,"@Suppress(""ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS"") public actual fun DoubleArray.sort(fromIndex: Int = 0, toIndex: Int = size): Unit","{
    java.util.Arrays.sort(this, fromIndex, toIndex)
}","/**

 * Sorts a range in the array in-place.

 * 

 * @param fromIndex the start of the range (inclusive) to sort, 0 by default.

 * @param toIndex the end of the range (exclusive) to sort, size of this array by default.

 * 

 * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.

 * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].

 * 

 * @sample samples.collections.Arrays.Sorting.sortRangeOfArray

 */",f16970:m4373
56164,"@SinceKotlin(""1.7"") @WasExperimental(ExperimentalStdlibApi::class) public operator fun <T, R> DeepRecursiveFunction<T, R>.invoke(value: T): R","DeepRecursiveScopeImpl<T, R>(block, value).runCallLoop()","/**

 * Initiates a call to this deep recursive function, forming a root of the call tree.

 *

 * This operator should not be used from inside of [DeepRecursiveScope] as it uses the call stack slot for

 * initial recursive invocation. From inside of [DeepRecursiveScope] use

 * [callRecursive][DeepRecursiveScope.callRecursive].

 */",f16836:m149
56971,"@SinceKotlin(""1.3"") public actual fun <T> Continuation<T>.intercepted(): Continuation<T>",(this as? ContinuationImpl)?.intercepted() ?: this,"/**

 * Intercepts this continuation with [ContinuationInterceptor].

 *

 * This function shall be used on the immediate result of [createCoroutineUnintercepted] or [suspendCoroutineUninterceptedOrReturn],

 * in which case it checks for [ContinuationInterceptor] in the continuation's [context][Continuation.context],

 * invokes [ContinuationInterceptor.interceptContinuation], caches and returns the result.

 *

 * If this function is invoked on other [Continuation] instances it returns `this` continuation unchanged.

 */",f16944:m341
22891,"@Test @DisplayName(""sync should override automatically set properties"") fun testSyncingOverrideAutomaticallySetValues()","{
    val initialContent = mapOf(""oldProperty1"" to PropertyValue.Configured(""oldValue1""), ""oldProperty2"" to PropertyValue.Configured(""oldValue2""), ""alreadySetProperty"" to PropertyValue.Configured(""oldValue3""))
    fillInitialLocalPropertiesFile(initialContent)
    modifier.applySetup(setupFile)
    val newProperties = mapOf(""newManualProperty"" to PropertyValue.Configured(""5""), ""otherAlreadySetProperty"" to PropertyValue.Configured(""5""))
    fillInitialLocalPropertiesFile(newProperties)
    val anotherSetupFile = SetupFile(mapOf(""newProperty2"" to ""other"", ""newProperty3"" to ""someOtherValue"", ""otherAlreadySetProperty"" to ""someOtherValue""))
    modifier.applySetup(anotherSetupFile)
    localPropertiesFile.propertiesFileContentAssertions { fileContents, properties ->
        assertContainsMarkersOnce(fileContents)
        val expectedProperties = anotherSetupFile.properties + initialContent.mapValues { it.value.value } + newProperties.mapValues { it.value.value }
        assertEquals(expectedProperties.size, properties.size)
        for ((key, value) in expectedProperties) {
            assertEquals(value, properties[key])
        }
    }
}","/**

     * Checks that a file like

     * ```

     * a=1

     * b=2

     * c=3

     * #header

     * d=4

     * #footer

     * e=5

     * ```

     * is being transformed into

     * ```

     * a=1

     * b=2

     * c=3

     * e=5

     * #header

     * d=10

     * #footer

     * ```

     */",f8809:m293
61758,"@SinceKotlin(""1.4"") public fun Element.appendElement(name: String, init: Element.() -> Unit): Element","{
    contract { callsInPlace(init, InvocationKind.EXACTLY_ONCE) }
    return ownerDocument!!.createElement(name, init).also { appendChild(it) }
}","/**

 * Appends a newly created element with the specified [name] to this element.

 *

 * The element is initialized with the specified [init] function.

 */",f17277:m43
59097,"@SinceKotlin(""1.5"") @WasExperimental(ExperimentalUnsignedTypes::class) public fun minOf(a: UInt, b: UInt): UInt","{
    return if (a <= b) a else b
}","/**

 * Returns the smaller of two values.

 */",f17098:m277
56511,"@SinceKotlin(""1.4"") @kotlin.internal.InlineOnly public actual inline fun StringBuilder.appendRange(value: CharArray, startIndex: Int, endIndex: Int): StringBuilder","this.append(value, startIndex, endIndex - startIndex)","/**

 * Appends characters in a subarray of the specified character array [value] to this string builder and returns this instance.

 *

 * Characters are appended in order, starting at specified [startIndex].

 *

 * @param value the array from which characters are appended.

 * @param startIndex the beginning (inclusive) of the subarray to append.

 * @param endIndex the end (exclusive) of the subarray to append.

 *

 * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of the [value] array indices or when `startIndex > endIndex`.

 */",f16890:m263
9076,"private fun buildInstanceGetter(classSymbol: IrClassSymbol, owner: IrClass, getterName: Name): IrSimpleFunction","context.irFactory.createSimpleFunction(owner.startOffset, owner.endOffset, TEST_SUITE_GENERATED_MEMBER, getterName, DescriptorVisibilities.PROTECTED, isInline = false, isExpect = false, classSymbol.starProjectedType, Modality.FINAL, IrSimpleFunctionSymbolImpl(), isTailrec = false, isSuspend = false, isOperator = false, isInfix = false).apply {
    parent = owner
    val superFunction = baseClassSuite.simpleFunctions().single { it.name == getterName && it.valueParameters.isEmpty() }
    createDispatchReceiverParameter()
    overriddenSymbols += superFunction.symbol
    body = context.createIrBuilder(symbol, symbol.owner.startOffset, symbol.owner.endOffset).irBlockBody {
        val constructor = classSymbol.owner.constructors.single { it.valueParameters.isEmpty() }
        +irReturn(irCall(constructor))
    }
}","/**

     * Builds a method in `[testSuite]` class with name `[getterName]`

     * returning a new instance of class referenced by [classSymbol].

     */",f3318:m727
58571,"@SinceKotlin(""1.7"") public fun LongProgression.firstOrNull(): Long?","{
    return if (isEmpty()) null else this.first
}","/**

 * Returns the first element, or `null` if the progression is empty.

 */",f17092:m125
15028,"@SinceKotlin(""1.1"") @kotlin.internal.InlineOnly public actual inline fun maxOf(a: Double, b: Double, c: Double): Double","{
    return maxOf(a, maxOf(b, c))
}","/**

 * Returns the greater of three values.

 * 

 * If any value is `NaN`, returns `NaN`.

 */",f3836:m277
56211,"@SinceKotlin(""1.6"") @WasExperimental(ExperimentalStdlibApi::class) public fun Byte.rotateRight(bitCount: Int): Byte",(toInt().shl(8 - (bitCount and 7)) or (toInt() and 0xFF).ushr(bitCount and 7)).toByte(),"/**

 * Rotates the binary representation of this [Byte] number right by the specified [bitCount] number of bits.

 * The least significant bits pushed out from the right side reenter the number as the most significant bits on the left side.

 *

 * Rotating the number right by a negative bit count is the same as rotating it left by the negated bit count:

 * `number.rotateRight(-n) == number.rotateLeft(n)`

 *

 * Rotating by a multiple of [Byte.SIZE_BITS] (8) returns the same number, or more generally

 * `number.rotateRight(n) == number.rotateRight(n % 8)`

 */",f16841:m369
11893,"@Suppress(""FINAL_UPPER_BOUND"") @ExperimentalForeignApi public fun <T: UByte> NativePlacement.alloc(value: T): UByteVarOf<T>",alloc<UByteVarOf<T>> { this.value = value },"/**

 * Allocates variable with given value type and initializes it with given value.

 */",f3606:m101
12324,"private fun collectClassCategories(classCursor: CValue<CXCursor>, className: String): List<CValue<CXCursor>>","{
    assert(classCursor.kind == CXCursorKind.CXCursor_ObjCInterfaceDecl) { classCursor.kind }
    val classFile = getContainingFile(classCursor)
    val result = mutableListOf<CValue<CXCursor>>()
    val translationUnit = clang_getCursorLexicalParent(classCursor)
    visitChildren(translationUnit) { childCursor, _ ->
        if (childCursor.kind == CXCursorKind.CXCursor_ObjCCategoryDecl) {
            val categoryClassCursor = getObjCCategoryClassCursor(childCursor)
            val categoryClassName = clang_getCursorDisplayName(categoryClassCursor).convertAndDispose()
            if (className == categoryClassName) {
                val categoryFile = getContainingFile(childCursor)
                if (clang_File_isEqual(categoryFile, classFile) != 0) {
                    result += childCursor
                }
            }
        }
        CXChildVisitResult.CXChildVisit_Continue
    }
    return result
}","/**

     * Find all categories for a class that is pointed by [classCursor] in the same file.

     * NB: Current implementation is rather slow as it walks the whole translation unit.

     */",f3633:m817
70367,private fun collectReturnExpressions(): ReturnedExpressionsInfo,"{
    val instructions = pseudocode.instructions.toHashSet()
    val exitInstruction = pseudocode.exitInstruction
    val returnedExpressions = arrayListOf<KtElement>()
    var hasReturnsInInlinedLambda = false
    for (previousInstruction in exitInstruction.previousInstructions) {
        previousInstruction.accept(object : InstructionVisitor() {
            override fun visitReturnValue(instruction: ReturnValueInstruction) {
                if (instructions.contains(instruction)) {
                    returnedExpressions.add(instruction.element)
                }
                if (instruction.owner.isInlined) {
                    hasReturnsInInlinedLambda = true
                }
            }
        
            override fun visitReturnNoValue(instruction: ReturnNoValueInstruction) {
                if (instructions.contains(instruction)) {
                    returnedExpressions.add(instruction.element)
                }
                if (instruction.owner.isInlined) {
                    hasReturnsInInlinedLambda = true
                }
            }
        
            override fun visitUnconditionalJump(instruction: UnconditionalJumpInstruction) {
                redirectToPrevInstructions(instruction)
            }
        
            override fun visitConditionalJump(instruction: ConditionalJumpInstruction) {
                redirectToPrevInstructions(instruction)
            }
        
            private fun redirectToPrevInstructions(instruction: Instruction) {
                for (redirectInstruction in instruction.previousInstructions) {
                    redirectInstruction.accept(this)
                }
            }
        
            override fun visitNondeterministicJump(instruction: NondeterministicJumpInstruction) {
                redirectToPrevInstructions(instruction)
            }
        
            override fun visitMarkInstruction(instruction: MarkInstruction) {
                redirectToPrevInstructions(instruction)
            }
        
            override fun visitInstruction(instruction: Instruction) {
                if (instruction is KtElementInstruction) {
                    returnedExpressions.add(instruction.element)
                } else {
                    throw IllegalStateException(""$instruction precedes the exit point"")
                }
            }
        })
    }
    return ReturnedExpressionsInfo(returnedExpressions, hasReturnsInInlinedLambda)
}","/**

     * Collects returned expressions from current pseudocode.

     *

     * ""Returned expression"" here == ""last expression"" in *control-flow terms*. Intuitively,

     * it considers all execution paths, takes last expression on each path and returns them.

     *

     * More specifically, this function starts from EXIT instruction, and performs DFS-search

     * on reversed control-flow edges in a following manner:

     * - if the current instruction is a Return-instruction, then add it's expression to result

     * - if the current instruction is a Element-instruction, then add it's element to result

     * - if the current instruction is a Jump-instruction, then process it's predecessors

     *   recursively

     *

     * NB. The second case (Element-instruction) means that notion of ""returned expression""

     * here differs from what the language treats as ""returned expression"" (notably in the

     * presence of Unit-coercion). Example:

     *

     *   fun foo() {

     *       val x = 42

     *       x.inc() // This call will be in a [returnedExpressions], even though this expression

     *               // isn't actually returned

     *   }

     */",f19635:m269
63249,public actual fun String?.toBoolean(): Boolean,"this != null && this.lowercase() == ""true""","/**

 * Returns `true` if the contents of this string is equal to the word ""true"", ignoring case, and `false` otherwise.

 *

 * There are also strict versions of the function available on non-nullable String, [toBooleanStrict] and [toBooleanStrictOrNull].

 */",f17352:m19
11887,@ExperimentalForeignApi public inline fun <reified T: Any> CPointer<*>.asStableRef(): StableRef<T>,StableRef<T>(this).also { it.get() },"/**

 * Converts to [StableRef] this opaque pointer produced by [StableRef.asCPointer].

 */",f3605:m103
15845,override fun shouldSkipValidityCheck(session: KtAnalysisSession): Boolean,"when (modificationEventKind) {
    ModificationEventKind.GLOBAL_SOURCE_MODULE_STATE_MODIFICATION, ModificationEventKind.GLOBAL_SOURCE_OUT_OF_BLOCK_MODIFICATION -> {
        session.useSiteModule is KtBinaryModule || session.useSiteModule is KtLibrarySourceModule
    }
    else -> false
}","/**

     * The analysis session cache disregards whether libraries were invalidated during global invalidation, so some valid library analysis

     * sessions may have been evicted from the cache and should not be checked for validity.

     */",f4005:m49
58466,"@SinceKotlin(""1.5"") @kotlin.internal.InlineOnly public inline fun <K, V, R: Any> Map<out K, V>.firstNotNullOf(transform: (Map.Entry<K, V>) -> R?): R","{
    return firstNotNullOfOrNull(transform) ?: throw NoSuchElementException(""No element of the map was transformed to a non-null value."")
}","/**

 * Returns the first non-null value produced by [transform] function being applied to entries of this map in iteration order,

 * or throws [NoSuchElementException] if no non-null value was produced.

 * 

 * @sample samples.collections.Collections.Transformations.firstNotNullOf

 */",f17089:m41
48537,"@JvmOverloads fun staticLib(namePrefix: String, buildTypes: Collection<NativeBuildType> = NativeBuildType.DEFAULT_BUILD_TYPES, configure: StaticLibrary.() -> Unit = {})","createBinaries(namePrefix, namePrefix, NativeOutputKind.STATIC, buildTypes, ::StaticLibrary, configure)",/** Creates a static library with the given [namePrefix] for each build type and configures it. */,f15652:m401
55986,public fun <T> List<T>.asReversed(): List<T>,ReversedListReadOnly(this),"/**

 * Returns a reversed read-only view of the original List.

 * All changes made in the original list will be reflected in the reversed one.

 * @sample samples.collections.ReversedViews.asReversedList

 */",f16822:m143
58805,"public inline fun <T, R: Any, C: MutableCollection<in R>> Sequence<T>.mapIndexedNotNullTo(destination: C, transform: (index: Int, T) -> R?): C","{
    forEachIndexed { index, element -> transform(index, element)?.let { destination.add(it) } }
    return destination
}","/**

 * Applies the given [transform] function to each element and its index in the original sequence

 * and appends only the non-null results to the given [destination].

 * @param [transform] function that takes the index of an element and the element itself

 * and returns the result of the transform applied to the element.

 *

 * The operation is _terminal_.

 */",f17096:m2201
49562,fun copyIntoDirectory(directory: File),copyTo(directory.resolve(relativeFile)),"/**

         * Copies the content of this [Binary] into the [directory] appending the [relativeFile] to it.

         * @see copyTo

         */",f15882:m221
57315,"@JvmName(""copyOfRangeInline"") @kotlin.internal.InlineOnly public actual inline fun ShortArray.copyOfRange(fromIndex: Int, toIndex: Int): ShortArray","{
    return if (kotlin.internal.apiVersionIsAtLeast(1, 3, 0)) {
        copyOfRangeImpl(fromIndex, toIndex)
    } else {
        if (toIndex > size) throw IndexOutOfBoundsException(""toIndex: $toIndex, size: $size"")
        java.util.Arrays.copyOfRange(this, fromIndex, toIndex)
    }
}","/**

 * Returns a new array which is a copy of the specified range of the original array.

 * 

 * @param fromIndex the start of the range (inclusive) to copy.

 * @param toIndex the end of the range (exclusive) to copy.

 * 

 * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.

 * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].

 */",f16970:m2751
14892,"@SinceKotlin(""1.3"") @Suppress(""ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS"") public actual fun ShortArray.copyInto(destination: ShortArray, destinationOffset: Int = 0, startIndex: Int = 0, endIndex: Int = size): ShortArray","{
    arrayCopy(this, startIndex, destination, destinationOffset, endIndex - startIndex)
    return destination
}","/**

 * Copies this array or its subrange into the [destination] array and returns that array.

 * 

 * It's allowed to pass the same array in the [destination] and even specify the subrange so that it overlaps with the destination range.

 * 

 * @param destination the array to copy to.

 * @param destinationOffset the position in the [destination] array to copy to, 0 by default.

 * @param startIndex the beginning (inclusive) of the subrange to copy, 0 by default.

 * @param endIndex the end (exclusive) of the subrange to copy, size of this array by default.

 * 

 * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of this array indices or when `startIndex > endIndex`.

 * @throws IndexOutOfBoundsException when the subrange doesn't fit into the [destination] array starting at the specified [destinationOffset],

 * or when that index is out of the [destination] array indices range.

 * 

 * @return the [destination] array.

 */",f3831:m2291
16133,private fun commitPendingDiagnosticsOnNestedDeclarations(element: FirElement),"{
    val declarationContainer = when (element) {
        is FirFile -> element.declarations.singleOrNull() as? FirScript ?: element
        is FirScript, is FirRegularClass -> element
        else -> return
    }
    @Suppress(""USELESS_CAST"") (declarationContainer as FirDeclaration).forEachDeclaration { declaration -> withAnnotationContainer(declaration) { declaration.accept(components.reportCommitter, context) } }
}","/**

     * File and class checkers may report diagnostics on top-level declarations and class members, such as conflicting overload errors.

     * Because we are collecting diagnostics for each structure element separately, this visitor will not visit these nested declarations by

     * default, as the file/class and its nested declarations are different structure elements. Instead, all diagnostics produced during the

     * visitor run will be committed at the end (see [FileStructureElementDiagnosticsCollector.collectForStructureElement]).

     *

     * Skipping nested declarations circumvents error suppression with `@Suppress` on top-level declarations and class members. This is

     * because suppression usually works as such: When a diagnostic is first reported on an element `E`, it is ""pending"". Once element `E`

     * is visited by the diagnostic visitor, it commits all pending diagnostics for `E`, including those reported by a file/class checker.

     * Diagnostics which are suppressed in the current context are instead removed. Without committing pending diagnostics on each element

     * `E`, suppression cannot take effect.

     *

     * [commitPendingDiagnosticsOnNestedDeclarations] commits pending diagnostics for directly nested elements, allowing the report

     * committer to take suppression into account.

     *

     * It suffices to commit pending diagnostics for directly nested declarations, because checkers can only report diagnostics on directly

     * accessible children. For example, a file checker can report a diagnostic on a top-level class, but not its member function.

     */",f4054:m171
58605,"@Deprecated(""This `contains` operation mixing integer and floating point arguments has ambiguous semantics and is going to be removed."") @DeprecatedSinceKotlin(warningSince = ""1.3"", errorSince = ""1.4"", hiddenSince = ""1.5"") @kotlin.jvm.JvmName(""longRangeContains"") public operator fun ClosedRange<Long>.contains(value: Double): Boolean","{
    return value.toLongExactOrNull().let { if (it != null) contains(it) else false }
}","/**

 * Checks if the specified [value] belongs to this range.

 */",f17092:m831
14756,public actual fun println(message: Any?),"{
    println(message.toString())
}",/** Prints the given [message] and the line separator to the standard output stream. */,f3814:m57
58938,"@SinceKotlin(""1.4"") public fun CharSequence.randomOrNull(random: Random): Char?","{
    if (isEmpty()) return null
    return get(random.nextInt(length))
}","/**

 * Returns a random character from this char sequence using the specified source of randomness, or `null` if this char sequence is empty.

 */",f17097:m519
26982,private fun IrMemberAccessExpression<*>.simpleBinaryOperatorLhs(): IrExpression?,"{
    val singleReceiver = (dispatchReceiver != null) xor (extensionReceiver != null)
    return if (singleReceiver && valueArgumentsCount == 0) {
        null
    } else {
        dispatchReceiver ?: extensionReceiver ?: getValueArgument(0).takeIf { (symbol.owner as? IrSimpleFunction)?.origin == IrBuiltIns.BUILTIN_OPERATOR }
    }
}","/**

 * The left-hand side expression of an infix operator/function.

 * For single-value operators returns `null`, for all other infix operators/functions, returns the receiver or the first value argument.

 */",f9507:m471
418,"fun removeDefaultInitializers(arguments: List<JsExpression>, parameters: List<JsParameter>, body: JsBlock)","{
    val toRemove = getDefaultParamsNames(arguments, parameters, initialized = true)
    val toExpand = getDefaultParamsNames(arguments, parameters, initialized = false)
    val statements = body.statements
    val newStatements = statements.flatMap {
        val name = getNameFromInitializer(it)
        if (name != null && !isNameInitialized(name, it)) {
            throw AssertionError(""Unexpected initializer structure"")
        }
        when {
            name != null && name in toRemove -> listOf<JsStatement>()
            name != null && name in toExpand -> {
                val thenStatement = (it as JsIf).thenStatement
                markAssignmentAsStaticRef(name, thenStatement)
                flattenStatement(thenStatement)
            }
            else -> listOf(it)
        }
    }
    statements.clear()
    statements.addAll(newStatements)
}","/**

 * Removes initializers for default parameters with defined arguments given

 * Expands initializers for default parameters with undefined arguments given

 */",f150:m55
14926,"internal fun <T> Array<T>.copyOfUninitializedElements(fromIndex: Int, toIndex: Int): Array<T>","{
    val newSize = toIndex - fromIndex
    if (newSize < 0) {
        throw IllegalArgumentException(""$fromIndex > $toIndex"")
    }
    val result = arrayOfUninitializedElements<T>(newSize)
    this.copyInto(result, 0, fromIndex, toIndex.coerceAtMost(size))
    return result
}","/**

 * Returns new array which is a copy of the original array's range between [fromIndex] (inclusive)

 * and [toIndex] (exclusive) with new elements filled with **lateinit** _uninitialized_ values.

 * Attempts to read _uninitialized_ values from this array work in implementation-dependent manner,

 * either throwing exception or returning some kind of implementation-specific default value.

 */",f3831:m3261
16624,fun KtFile.getOrBuildFirFile(firResolveSession: LLFirResolveSession): FirFile,firResolveSession.getOrBuildFirFile(this),"/**

 * Get a [FirFile] which was created by [KtElement]

 * Returned [FirFile] can be resolved to any phase from [FirResolvePhase.RAW_FIR] to [FirResolvePhase.BODY_RESOLVE]

 */",f4145:m263
56916,"@SinceKotlin(""1.2"") @kotlin.internal.InlineOnly public inline operator fun BigDecimal.dec(): BigDecimal",this.subtract(BigDecimal.ONE),"/**

 * Enables the use of the unary `--` operator for [BigDecimal] instances.

 */",f16935:m121
58577,"@SinceKotlin(""1.7"") public fun LongProgression.lastOrNull(): Long?","{
    return if (isEmpty()) null else this.last
}","/**

 * Returns the last element, or `null` if the progression is empty.

 * 

 * @sample samples.collections.Collections.Elements.last

 */",f17092:m261
57293,"@SinceKotlin(""1.3"") @Suppress(""ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS"") public actual fun BooleanArray.copyInto(destination: BooleanArray, destinationOffset: Int = 0, startIndex: Int = 0, endIndex: Int = size): BooleanArray","{
    System.arraycopy(this, startIndex, destination, destinationOffset, endIndex - startIndex)
    return destination
}","/**

 * Copies this array or its subrange into the [destination] array and returns that array.

 * 

 * It's allowed to pass the same array in the [destination] and even specify the subrange so that it overlaps with the destination range.

 * 

 * @param destination the array to copy to.

 * @param destinationOffset the position in the [destination] array to copy to, 0 by default.

 * @param startIndex the beginning (inclusive) of the subrange to copy, 0 by default.

 * @param endIndex the end (exclusive) of the subrange to copy, size of this array by default.

 * 

 * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of this array indices or when `startIndex > endIndex`.

 * @throws IndexOutOfBoundsException when the subrange doesn't fit into the [destination] array starting at the specified [destinationOffset],

 * or when that index is out of the [destination] array indices range.

 * 

 * @return the [destination] array.

 */",f16970:m2147
23412,"internal fun IrStatementsBuilder<*>.createCacheableChildSerializersFactory(cacheProperty: IrProperty?, cacheableSerializers: List<Boolean>, containingClassProducer: () -> IrClass): (Int) -> IrExpression?","{
    cacheProperty ?: return { null }
    val variable = irTemporary(irInvoke(irGetObject(containingClassProducer()), cacheProperty.getter!!.symbol), ""cached"")
    return { index: Int -> if (cacheableSerializers[index]) {
        irInvoke(irGet(variable), compilerContext.arrayValueGetter.symbol, irInt(index))
    } else {
        null
    } }
}","/**

     * Factory to getting cached serializers via variable.

     * Must be used only in one place because for each factory creates one variable.

     *

     * Class from [containingClassProducer] used only if [cacheProperty] is not null.

     */",f8976:m873
57040,"@SinceKotlin(""1.3"") public fun InputStream.readBytes(): ByteArray","{
    val buffer = ByteArrayOutputStream(maxOf(DEFAULT_BUFFER_SIZE, this.available()))
    copyTo(buffer)
    return buffer.toByteArray()
}","/**

 * Reads this stream completely into a byte array.

 *

 * **Note**: It is the caller's responsibility to close this stream.

 */",f16952:m255
55966,"@SinceKotlin(""1.3"") @kotlin.internal.InlineOnly public inline fun Array<*>?.isNullOrEmpty(): Boolean","{
    contract { returns(false) implies (this@isNullOrEmpty != null) }
    return this == null || this.isEmpty()
}","/**

 * Returns `true` if this nullable array is either null or empty.

 * @sample samples.collections.Arrays.Usage.arrayIsNullOrEmpty

 */",f16821:m85
14794,"@Deprecated(""Use Kotlin compiler 1.4 to avoid deprecation warning."") @SinceKotlin(""1.3"") @DeprecatedSinceKotlin(hiddenSince = ""1.4"") @ExperimentalUnsignedTypes public infix fun UByteArray.contentEquals(other: UByteArray): Boolean","{
    return this.contentEquals(other)
}","/**

 * Checks if the two specified arrays are *structurally* equal to one another.

 * 

 * Two arrays are considered structurally equal if they have the same size, and elements at corresponding indices are equal.

 * 

 * @param other the array to compare with this array.

 * @return `true` if the two arrays are structurally equal, `false` otherwise.

 * 

 * @sample samples.collections.Arrays.ContentOperations.intArrayContentEquals

 */",f3828:m327
14244,public fun getAndSet(newValue: Long): Long,this::value.getAndSetField(newValue),"/**

     * Atomically sets the value to the given [new value][newValue] and returns the old value.

     */",f3762:m199
14868,"@SinceKotlin(""1.4"") public actual fun FloatArray?.contentHashCode(): Int","{
    if (this === null) return 0
    var result = 1
    for (element in this) result = 31 * result + element.hashCode()
    return result
}","/**

 * Returns a hash code based on the contents of this array as if it is [List].

 */",f3831:m1705
48522,"fun findFramework(namePrefix: String, buildType: String): Framework?","findFramework(namePrefix, NativeBuildType.valueOf(buildType.toUpperCaseAsciiOnly()))",/** Returns an Objective-C framework with the given [namePrefix] and the given build type. Returns null if there is no such binary. */,f15652:m269
55854,@kotlin.internal.InlineOnly public inline fun <T> Sequence(crossinline iterator: () -> Iterator<T>): Sequence<T>,"object : Sequence<T> {
    override fun iterator(): Iterator<T> = iterator()
}","/**

 * Given an [iterator] function constructs a [Sequence] that returns values through the [Iterator]

 * provided by that function.

 * The values are evaluated lazily, and the sequence is potentially infinite.

 *

 * @sample samples.collections.Sequences.Building.sequenceFromIterator

 */",f16815:m25
57160,"@SinceKotlin(""1.1"") public actual fun <T: Comparable<T>> minOf(a: T, b: T): T","{
    return if (a <= b) a else b
}","/**

 * Returns the smaller of two values.

 * 

 * If values are equal, returns the first one.

 */",f16966:m457
57264,"@SinceKotlin(""1.4"") @kotlin.internal.InlineOnly public actual inline infix fun FloatArray?.contentEquals(other: FloatArray?): Boolean","{
    return java.util.Arrays.equals(this, other)
}","/**

 * Checks if the two specified arrays are *structurally* equal to one another.

 * 

 * Two arrays are considered structurally equal if they have the same size, and elements at corresponding indices are equal.

 * Elements are compared for equality using the [equals][Any.equals] function.

 * This means `NaN` is equal to itself and `-0.0` is not equal to `0.0`.

 * 

 * The arrays are also considered structurally equal if both are `null`.

 * 

 * @param other the array to compare with this array.

 * @return `true` if the two arrays are structurally equal, `false` otherwise.

 * 

 * @sample samples.collections.Arrays.ContentOperations.doubleArrayContentEquals

 */",f16970:m1313
15897,@Operation fun computeKeepValue(key: Int): ValueWithCleanup?,"cache.compute(key) { _, existingValue -> existingValue }","/**

     * Models a computation that keeps the cache's existing value for [key].

     */",f4020:m119
53299,override fun hashCode(): Int,AbstractSet.unorderedHashCode(this),"/**

     * Returns the hash code value for this set.

     */",f16653:m49
7475,fun String.offsetOf(position: CodePosition): Int,"{
    var i = 0
    var lineCount = 0
    var offsetInLine = 0
    while (i < length) {
        val c = this[i]
        if (lineCount == position.line && offsetInLine == position.offset) {
            return i
        }
        i++
        offsetInLine++
        if (Utils.isEndOfLine(c.code)) {
            offsetInLine = 0
            lineCount++
            assert(lineCount <= position.line)
        }
    }
    return length
}","/**

 * Calculates an offset from the start of a text for a position,

 * defined by line and offset in that line.

 */",f3101:m59
63260,public actual fun String.toFloatOrNull(): Float?,toDoubleOrNull()?.let { wasm_f32_demote_f64(it) },"/**

 * Parses the string as a [Float] number and returns the result

 * or `null` if the string is not a valid representation of a number.

 */",f17352:m161
64171,@kotlin.internal.IntrinsicConstEvaluation public operator fun div(other: Int): Int,"if (this == Int.MIN_VALUE && other == -1) Int.MIN_VALUE else wasm_i32_div_s(this, other)","/** Divides this value by the other value, truncating the result to an integer that is closer to zero. */",f17455:m2125
57185,public fun <T> Iterable<T>.toSortedSet(comparator: Comparator<in T>): java.util.SortedSet<T>,"{
    return toCollection(java.util.TreeSet<T>(comparator))
}","/**

 * Returns a new [SortedSet][java.util.SortedSet] of all elements.

 * 

 * Elements in the set returned are sorted according to the given [comparator].

 */",f16967:m105
54750,public actual operator fun FloatArray.plus(elements: Collection<Float>): FloatArray,"{
    var index = size
    val result = this.copyOf(size + elements.size)
    for (element in elements) result[index++] = element
    return result
}","/**

 * Returns an array containing all elements of the original array and then all elements of the given [elements] collection.

 */",f16713:m2849
13781,@kotlin.internal.IntrinsicConstEvaluation public operator fun compareTo(other: Long): Int,this.compareTo(other.toDouble()),"/**

     * Compares this value with the specified value for order.

     * Returns zero if this value is equal to the specified other value, a negative number if it's less than other,

     * or a positive number if it's greater than other.

     */",f3686:m4663
55729,"@SinceKotlin(""1.1"") public fun String.toShortOrNull(radix: Int): Short?","{
    val int = this.toIntOrNull(radix) ?: return null
    if (int < Short.MIN_VALUE || int > Short.MAX_VALUE) return null
    return int.toShort()
}","/**

 * Parses the string as a [Short] number and returns the result

 * or `null` if the string is not a valid representation of a number.

 *

 * @throws IllegalArgumentException when [radix] is not a valid radix for string to number conversion.

 */",f16787:m77
55666,"@ExperimentalStdlibApi @SinceKotlin(""1.9"") public fun Short.toHexString(format: HexFormat = HexFormat.Default): String","{
    val digits = if (format.upperCase) UPPER_CASE_HEX_DIGITS else LOWER_CASE_HEX_DIGITS
    val numberFormat = format.number
    if (numberFormat.isDigitsOnly) {
        val charArray = CharArray(4)
        val value = this.toInt()
        charArray[0] = digits[(value shr 12) and 0xF]
        charArray[1] = digits[(value shr 8) and 0xF]
        charArray[2] = digits[(value shr 4) and 0xF]
        charArray[3] = digits[value and 0xF]
        return if (numberFormat.removeLeadingZeros) charArray.concatToString(startIndex = (countLeadingZeroBits() shr 2).coerceAtMost(3)) else charArray.concatToString()
    }
    return toLong().toHexStringImpl(numberFormat, digits, bits = 16)
}","/**

 * Formats this `Short` value using the specified [format].

 *

 * Note that only [HexFormat.upperCase] and [HexFormat.NumberHexFormat] affect formatting.

 *

 * @param format the [HexFormat] to use for formatting, [HexFormat.Default] by default.

 */",f16779:m1333
58648,public infix fun Int.downTo(to: Int): IntProgression,"{
    return IntProgression.fromClosedRange(this, to, -1)
}","/**

 * Returns a progression from this value down to the specified [to] value with the step -1.

 * 

 * The [to] value should be less than or equal to `this` value.

 * If the [to] value is greater than `this` value the returned progression is empty.

 */",f17092:m1631
52492,"override fun matches(startIndex: Int, testString: CharSequence, matchResult: MatchResultImpl): Int","{
    val start = matchResult.getConsumed(groupIndex)
    matchResult.setConsumed(groupIndex, startIndex)
    children.forEach {
        val shift = it.matches(startIndex, testString, matchResult)
        if (shift >= 0) {
            return next.matches((fSet as AtomicFSet).index, testString, matchResult)
        }
    }
    matchResult.setConsumed(groupIndex, start)
    return -1
}","/** Returns startIndex+shift, the next position to match */",f16526:m59
14884,"@SinceKotlin(""1.4"") public actual fun IntArray?.contentToString(): String","{
    return this?.joinToString("", "", ""["", ""]"") ?: ""null""
}","/**

 * Returns a string representation of the contents of the specified array as if it is [List].

 * 

 * @sample samples.collections.Arrays.ContentOperations.contentToString

 */",f3831:m2077
63534,internal fun BooleanArray.copyOfUninitializedElements(newSize: Int): BooleanArray,"{
    return copyOfUninitializedElements(0, newSize)
}","/**

 * Returns new array which is a copy of the original array with new elements filled with **lateinit** _uninitialized_ values.

 * Attempts to read _uninitialized_ values from this array work in implementation-dependent manner,

 * either throwing exception or returning some kind of implementation-specific default value.

 */",f17396:m3727
52463,"override fun tryToMatch(startIndex: Int, testString: CharSequence, matchResult: MatchResultImpl): Int","{
    matchResult.setConsumed(groupIndex, startIndex)
    children.forEach { if (it.findBack(0, startIndex, testString, matchResult) >= 0) {
        matchResult.setConsumed(groupIndex, -1)
        return next.matches(startIndex, testString, matchResult)
    } }
    return -1
}","/** Returns startIndex+shift, the next position to match */",f16513:m59
64058,"@SinceKotlin(""1.1"") @kotlin.internal.IntrinsicConstEvaluation public inline operator fun rem(other: Short): Int",this.toInt() % other.toInt(),"/**

     * Calculates the remainder of truncating division of this value (dividend) by the other value (divisor).

     *

     * The result is either zero or has the same sign as the _dividend_ and has the absolute value less than the absolute value of the divisor.

     */",f17455:m451
14764,"@Deprecated(""Use measureTime() instead."", ReplaceWith(""measureTime(block).inWholeMilliseconds"")) @DeprecatedSinceKotlin(warningSince = ""1.9"") @Suppress(""DEPRECATION"") public inline fun measureTimeMillis(block: () -> Unit): Long","{
    val start = getTimeMillis()
    block()
    return getTimeMillis() - start
}","/**

 * Executes the given [block] and returns elapsed time in milliseconds.

 *

 * This function is deprecated.

 * To measure the duration of execution of a block of code,

 * use [measureTime] or [measureTimedValue] instead.

 * The resulting [Duration] then can be expressed as a [Long] number of milliseconds

 * using [Duration.inWholeMilliseconds].

 *

 * @sample samples.system.Timing.measureBlockTimeMillis

 */",f3817:m123
63500,public actual fun ByteArray.copyOf(newSize: Int): ByteArray,"{
    return this.copyOfUninitializedElements(newSize)
}","/**

 * Returns new array which is a copy of the original array, resized to the given [newSize].

 * The copy is either truncated or padded at the end with zero values if necessary.

 * 

 * - If [newSize] is less than the size of the original array, the copy array is truncated to the [newSize].

 * - If [newSize] is greater than the size of the original array, the extra elements in the copy array are filled with zero values.

 * 

 * @sample samples.collections.Arrays.CopyOfOperations.resizedPrimitiveCopyOf

 */",f17396:m2827
63527,internal fun <T> Array<T>.copyOfUninitializedElements(newSize: Int): Array<T>,"{
    return copyOfUninitializedElements(0, newSize)
}","/**

 * Returns new array which is a copy of the original array with new elements filled with **lateinit** _uninitialized_ values.

 * Attempts to read _uninitialized_ values from this array work in implementation-dependent manner,

 * either throwing exception or returning some kind of implementation-specific default value.

 */",f17396:m3601
58561,"@SinceKotlin(""1.5"") @WasExperimental(ExperimentalUnsignedTypes::class) public fun UInt.coerceIn(range: ClosedRange<UInt>): UInt","{
    if (range is ClosedFloatingPointRange) {
        return this.coerceIn<UInt>(range)
    }
    if (range.isEmpty()) throw IllegalArgumentException(""Cannot coerce value to an empty range: $range."")
    return when {
        this < range.start -> range.start
        this > range.endInclusive -> range.endInclusive
        else -> this
    }
}","/**

 * Ensures that this value lies in the specified [range].

 * 

 * @return this value if it's in the [range], or `range.start` if this value is less than `range.start`, or `range.endInclusive` if this value is greater than `range.endInclusive`.

 * 

 * @sample samples.comparisons.ComparableOps.coerceInUnsigned

 */",f17090:m1173
54753,public actual operator fun CharArray.plus(elements: Collection<Char>): CharArray,"{
    var index = size
    val result = this.copyOf(size + elements.size)
    for (element in elements) result[index++] = element
    return result
}","/**

 * Returns an array containing all elements of the original array and then all elements of the given [elements] collection.

 */",f16713:m2903
58739,public fun <T> Sequence<T>.first(): T,"{
    val iterator = iterator()
    if (!iterator.hasNext()) throw NoSuchElementException(""Sequence is empty."")
    return iterator.next()
}","/**

 * Returns the first element.

 *

 * The operation is _terminal_.

 * 

 * @throws NoSuchElementException if the sequence is empty.

 */",f17096:m211
13981,public actual fun String.toCharArray(): CharArray,"toCharArray(this, CharArray(length), 0, 0, length)","/**

 * Returns a [CharArray] containing characters of this string.

 */",f3713:m497
56216,"@SinceKotlin(""1.4"") @kotlin.internal.InlineOnly public inline fun Short.takeLowestOneBit(): Short",toInt().takeLowestOneBit().toShort(),"/**

 * Returns a number having a single bit set in the position of the least significant set bit of this [Short] number,

 * or zero, if this number is zero.

 */",f16841:m459
47879,"fun attribute(key: String, value: String)","{
    attrs[key] = value
}","/**

     * Appends an attribute to the generated podspec

     */",f15476:m45
13994,"@SinceKotlin(""1.3"") @Suppress(""ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS"") public actual fun ByteArray.decodeToString(startIndex: Int = 0, endIndex: Int = this.size, throwOnInvalidSequence: Boolean = false): String","{
    AbstractList.checkBoundsIndexes(startIndex, endIndex, size)
    return if (throwOnInvalidSequence) unsafeStringFromUtf8OrThrow(startIndex, endIndex - startIndex) else unsafeStringFromUtf8(startIndex, endIndex - startIndex)
}","/**

 * Decodes a string from the bytes in UTF-8 encoding in this array or its subrange.

 *

 * @param startIndex the beginning (inclusive) of the subrange to decode, 0 by default.

 * @param endIndex the end (exclusive) of the subrange to decode, size of this array by default.

 * @param throwOnInvalidSequence specifies whether to throw an exception on malformed byte sequence or replace it by the replacement char `\uFFFD`.

 *

 * @throws IndexOutOfBoundsException if [startIndex] is less than zero or [endIndex] is greater than the size of this array.

 * @throws IllegalArgumentException if [startIndex] is greater than [endIndex].

 * @throws CharacterCodingException if the byte array contains malformed UTF-8 byte sequence and [throwOnInvalidSequence] is true.

 */",f3713:m821
13726,@kotlin.internal.IntrinsicConstEvaluation public operator fun compareTo(other: Byte): Int,this.compareTo(other.toFloat()),"/**

     * Compares this value with the specified value for order.

     * Returns zero if this value is equal to the specified other value, a negative number if it's less than other,

     * or a positive number if it's greater than other.

     */",f3686:m3787
54699,"@SinceKotlin(""1.3"") @kotlin.internal.InlineOnly @Suppress(""ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS"") public actual inline fun CharArray.copyInto(destination: CharArray, destinationOffset: Int = 0, startIndex: Int = 0, endIndex: Int = size): CharArray","{
    arrayCopy(this.unsafeCast<Array<Char>>(), destination.unsafeCast<Array<Char>>(), destinationOffset, startIndex, endIndex)
    return destination
}","/**

 * Copies this array or its subrange into the [destination] array and returns that array.

 * 

 * It's allowed to pass the same array in the [destination] and even specify the subrange so that it overlaps with the destination range.

 * 

 * @param destination the array to copy to.

 * @param destinationOffset the position in the [destination] array to copy to, 0 by default.

 * @param startIndex the beginning (inclusive) of the subrange to copy, 0 by default.

 * @param endIndex the end (exclusive) of the subrange to copy, size of this array by default.

 * 

 * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of this array indices or when `startIndex > endIndex`.

 * @throws IndexOutOfBoundsException when the subrange doesn't fit into the [destination] array starting at the specified [destinationOffset],

 * or when that index is out of the [destination] array indices range.

 * 

 * @return the [destination] array.

 */",f16713:m1595
58733,public operator fun <@kotlin.internal.OnlyInputTypes T> Sequence<T>.contains(element: T): Boolean,"{
    return indexOf(element) >= 0
}","/**

 * Returns `true` if [element] is found in the sequence.

 *

 * The operation is _terminal_.

 */",f17096:m37
58230,@kotlin.internal.InlineOnly public inline operator fun minus(other: UInt): ULong,this.minus(other.toULong()),/** Subtracts the other value from this value. */,f17066:m185
52960,"@SinceKotlin(""1.2"") public actual fun <T> MutableList<T>.fill(value: T): Unit","{
    for (index in 0 .. lastIndex) {
        this[index] = value
    }
}","/**

 * Fills the list with the provided [value].

 *

 * Each element in the list gets replaced with the [value].

 */",f16596:m203
56860,"@SinceKotlin(""1.2"") @kotlin.internal.InlineOnly public actual inline fun Float.toBits(): Int",java.lang.Float.floatToIntBits(this),"/**

 * Returns a bit representation of the specified floating-point value as [Int]

 * according to the IEEE 754 floating-point ""single format"" bit layout.

 */",f16929:m143
58815,public fun <T> Sequence<T>.any(): Boolean,"{
    return iterator().hasNext()
}","/**

 * Returns `true` if sequence has at least one element.

 *

 * The operation is _terminal_.

 * 

 * @sample samples.collections.Collections.Aggregates.any

 */",f17096:m2463
56057,"@kotlin.internal.InlineOnly public inline operator fun <K, V> MutableMap<in K, in V>.plusAssign(pair: Pair<K, V>)","{
    put(pair.first, pair.second)
}","/**

 * Appends or replaces the given [pair] in this mutable map.

 */",f16823:m1381
57320,"@JvmName(""copyOfRangeInline"") @kotlin.internal.InlineOnly public actual inline fun BooleanArray.copyOfRange(fromIndex: Int, toIndex: Int): BooleanArray","{
    return if (kotlin.internal.apiVersionIsAtLeast(1, 3, 0)) {
        copyOfRangeImpl(fromIndex, toIndex)
    } else {
        if (toIndex > size) throw IndexOutOfBoundsException(""toIndex: $toIndex, size: $size"")
        java.util.Arrays.copyOfRange(this, fromIndex, toIndex)
    }
}","/**

 * Returns a new array which is a copy of the specified range of the original array.

 * 

 * @param fromIndex the start of the range (inclusive) to copy.

 * @param toIndex the end of the range (exclusive) to copy.

 * 

 * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.

 * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].

 */",f16970:m2951
58168,@kotlin.internal.InlineOnly public inline fun floorDiv(other: ULong): ULong,this.toULong().floorDiv(other),"/**

     * Divides this value by the other value, flooring the result to an integer that is closer to negative infinity.

     *

     * For unsigned types, the results of flooring division and truncating division are the same.

     */",f17063:m351
67419,"override fun add(compilationResultCategory: Int, value: Serializable)","{
    when (compilationResultCategory) {
        CompilationResultCategory.IC_COMPILE_ITERATION.code -> kotlinLogger.debug(value as? CompileIterationResult, rootProjectDir)
        else -> kotlinLogger.debug(""Result category=$compilationResultCategory value=$value"")
    }
}","/**

     * Possible combinations:

     * 1. [CompilationResultCategory.IC_COMPILE_ITERATION.code]       -> a [CompileIterationResult] instance

     * 2. [CompilationResultCategory.BUILD_REPORT_LINES.code]         -> a [List] of [String]

     * 3. [CompilationResultCategory.VERBOSE_BUILD_REPORT_LINES.code] -> a [List] of [String]

     * 4. [CompilationResultCategory.BUILD_METRICS.code]              -> a [BuildMetrics] instance

     **/",f19194:m151
58921,public fun CharSequence.first(): Char,"{
    if (isEmpty()) throw NoSuchElementException(""Char sequence is empty."")
    return this[0]
}","/**

 * Returns the first character.

 * 

 * @throws NoSuchElementException if the char sequence is empty.

 */",f17097:m137
58002,"@SinceKotlin(""1.5"") @WasExperimental(ExperimentalUnsignedTypes::class, ExperimentalStdlibApi::class) @kotlin.internal.InlineOnly public inline fun ULong.takeLowestOneBit(): ULong",toLong().takeLowestOneBit().toULong(),"/**

 * Returns a number having a single bit set in the position of the least significant set bit of this [ULong] number,

 * or zero, if this number is zero.

 */",f17056:m231
54755,"@Suppress(""NOTHING_TO_INLINE"") public actual inline operator fun ByteArray.plus(elements: ByteArray): ByteArray","{
    return primitiveArrayConcat(this, elements)
}","/**

 * Returns an array containing all elements of the original array and then all elements of the given [elements] array.

 */",f16713:m2939
56275,public operator fun contains(value: T): Boolean,value >= start && value <= endInclusive,"/**

     * Checks whether the specified [value] belongs to the range.

     *

     * A value belongs to the closed range if it is greater than or equal to the [start] bound and less than or equal to the [endInclusive] bound.

     */",f16846:m45
22959,"fun Project.javadocJarWithJavadocFromEmbedded(vararg embeddedDepJavadocJarTasks: TaskProvider<out Jar>, body: Jar.() -> Unit = {}): TaskProvider<Jar>","{
    val javadocJarTask = javadocJar(body)
    javadocJarTask.configure {
        val archiveOperations = serviceOf<ArchiveOperations>()
        embeddedDepJavadocJarTasks.forEach { embeddedJavadocJarTask ->
            dependsOn(embeddedJavadocJarTask)
            from(embeddedJavadocJarTask.map { archiveOperations.zipTree(it.archiveFile) })
        }
    }
    return javadocJarTask
}","/**

 * Also embeds into final '-javadoc.jar' file javadoc files from embedded dependencies.

 */",f8818:m497
23024,"fun Project.wireGradleVariantToCommonGradleVariant(wireSourceSet: SourceSet, commonSourceSet: SourceSet)","{
    wireSourceSet.compileClasspath += commonSourceSet.output
    wireSourceSet.runtimeClasspath += commonSourceSet.output
    (extensions.getByName(""kotlin"") as KotlinSingleJavaTargetExtension).target.compilations.run { getByName(wireSourceSet.name).associateWith(getByName(commonSourceSet.name)) }
    configurations[wireSourceSet.apiConfigurationName].extendsFrom(configurations[commonSourceSet.apiConfigurationName])
    configurations[wireSourceSet.implementationConfigurationName].extendsFrom(configurations[commonSourceSet.implementationConfigurationName])
    configurations[wireSourceSet.runtimeOnlyConfigurationName].extendsFrom(configurations[commonSourceSet.runtimeOnlyConfigurationName])
    configurations[wireSourceSet.compileOnlyConfigurationName].extendsFrom(configurations[commonSourceSet.compileOnlyConfigurationName])
    fixWiredSourceSetSecondaryVariants(wireSourceSet, commonSourceSet)
    tasks.withType<Jar>().configureEach { if (name == wireSourceSet.jarTaskName) {
        from(wireSourceSet.output, commonSourceSet.output)
        setupPublicJar(archiveBaseName.get())
        addEmbeddedRuntime()
        addEmbeddedRuntime(wireSourceSet.embeddedConfigurationName)
    } else if (name == wireSourceSet.sourcesJarTaskName) {
        from(wireSourceSet.allSource, commonSourceSet.allSource)
    } }
}","/**

 * Make [wireSourceSet] to extend [commonSourceSet].

 */",f8830:m497
58148,@kotlin.internal.InlineOnly public inline operator fun plus(other: ULong): ULong,this.toULong().plus(other),/** Adds the other value to this value. */,f17063:m165
50908,"fun legacyStdlibJdkDependencies(version: String = ""1.8.0"")","listOf(binaryCoordinates(""org.jetbrains.kotlin:kotlin-stdlib-jdk8:$version""), binaryCoordinates(""org.jetbrains.kotlin:kotlin-stdlib-jdk7:$version""))","/**

 * Legacy -jdk8 and -jdk7 dependencies:

 * Those artifacts will be published as empty jars starting from Kotlin 1.8.0 as

 * the classes will be included in the kotlin-stdlib artifact already.

 *

 * Note: The kotlin-stdlib will add a constraint to always resolve 1.8.0 of those artifacts.

 * This will be necessary in the future, when no more jdk8 or jdk7 artifacts will be published:

 * In this case we need to still resolve to a version that will contain empty artifacts (1.8.0)

 *

 */",f16187:m19
56864,"@SinceKotlin(""1.4"") @kotlin.internal.InlineOnly public actual inline fun Int.countLeadingZeroBits(): Int",Integer.numberOfLeadingZeros(this),"/**

 * Counts the number of consecutive most significant bits that are zero in the binary representation of this [Int] number.

 */",f16929:m207
13996,"@SinceKotlin(""1.3"") @Suppress(""ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS"") public actual fun String.encodeToByteArray(startIndex: Int = 0, endIndex: Int = this.length, throwOnInvalidSequence: Boolean = false): ByteArray","{
    AbstractList.checkBoundsIndexes(startIndex, endIndex, length)
    return if (throwOnInvalidSequence) unsafeStringToUtf8OrThrow(startIndex, endIndex - startIndex) else unsafeStringToUtf8(startIndex, endIndex - startIndex)
}","/**

 * Encodes this string or its substring to an array of bytes in UTF-8 encoding.

 *

 * @param startIndex the beginning (inclusive) of the substring to encode, 0 by default.

 * @param endIndex the end (exclusive) of the substring to encode, length of this string by default.

 * @param throwOnInvalidSequence specifies whether to throw an exception on malformed char sequence or replace.

 *

 * @throws IndexOutOfBoundsException if [startIndex] is less than zero or [endIndex] is greater than the length of this string.

 * @throws IllegalArgumentException if [startIndex] is greater than [endIndex].

 * @throws CharacterCodingException if this string contains malformed char sequence and [throwOnInvalidSequence] is true.

 */",f3713:m879
56259,"public fun <T> Triple<T, T, T>.toList(): List<T>","listOf(first, second, third)","/**

 * Converts this triple into a list.

 * @sample samples.misc.Tuples.tripleToList

 */",f16844:m155
57062,"@SinceKotlin(""1.6"") public actual fun readln(): String","readlnOrNull() ?: throw ReadAfterEOFException(""EOF has already been reached"")","/**

 * Reads a line of input from the standard input stream and returns it,

 * or throws a [RuntimeException] if EOF has already been reached when [readln] is called.

 *

 * LF or CRLF is treated as the line terminator. Line terminator is not included in the returned string.

 *

 * The input is decoded using the system default Charset. A [CharacterCodingException] is thrown if input is malformed.

 */",f16953:m285
40628,internal fun String.quoteAsKotlinStringLiteral(): String,"buildString {
    append('""')
    this@quoteAsKotlinStringLiteral.forEach { c -> when (c) {
        in charactersAllowedInKotlinStringLiterals -> append(c)
        '$' -> append(""\\$"")
        else -> append(""\\u"" + ""%04X"".format(c.code))
    } }
    append('""')
}","/**

 * Returns the expression to be parsed by Kotlin as string literal with given contents,

 * i.e. transforms `foo$bar` to `""foo\$bar""`.

 */",f12873:m79
10027,"private fun produceBundle(engine: PhaseEngine<PhaseContext>, config: KonanConfig, environment: KotlinCoreEnvironment)","{
    require(config.target.family.isAppleFamily)
    require(config.produce == CompilerOutputKind.TEST_BUNDLE)
    val frontendOutput = engine.runFrontend(config, environment) ?: return
    engine.runPhase(CreateTestBundlePhase, frontendOutput)
    val psiToIrOutput = engine.runPsiToIr(frontendOutput, isProducingLibrary = false)
    require(psiToIrOutput is PsiToIrOutput.ForBackend)
    val backendContext = createBackendContext(config, frontendOutput, psiToIrOutput)
    engine.runBackend(backendContext, psiToIrOutput.irModule)
}","/**

     * Produce a bundle that is a directory with code and resources.

     * It consists of

     * - Info.plist

     * - Binary without an entry point.

     *

     * See https://developer.apple.com/library/archive/documentation/CoreFoundation/Conceptual/CFBundles/AboutBundles/AboutBundles.html

     */",f3405:m365
16063,fun getResolvableSession(module: KtModule): LLFirResolvableModuleSession,"{
    return getSession(module, preferBinary = false) as LLFirResolvableModuleSession
}","/**

     * Returns an analyzable [LLFirSession] for the module.

     * For a binary module, the resulting session will still be a resolvable one.

     *

     * Note: prefer using [getSession] unless you need to perform resolution actively.

     * Resolvable sessions for libraries are much less performant.

     */",f4048:m63
14002,"@Suppress(""ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS"") public actual fun String.compareTo(other: String, ignoreCase: Boolean = false): Int","{
    return if (!ignoreCase) this.compareTo(other) else compareToIgnoreCase(this, other)
}","/**

 * Compares two strings lexicographically, optionally ignoring case differences.

 *

 * If [ignoreCase] is true, the result of `Char.uppercaseChar().lowercaseChar()` on each character is compared.

 */",f3713:m983
15392,@Test fun IEEEremainderDD(),"{
    assertEquals(""Incorrect remainder returned"", 0.0, 1.0.IEEErem(1.0), 0.0)
    assertTrue(""Incorrect remainder returned"", 1.32.IEEErem(89.765) >= 1.4705063220631647E-2 || 1.32.IEEErem(89.765) >= 1.4705063220631649E-2)
}","/**

     * Tests kotlin.math.IEEEremainder(Double, Double)

     */",f3868:m709
63526,"internal fun CharArray.copyOfUninitializedElements(fromIndex: Int, toIndex: Int): CharArray","{
    val newSize = toIndex - fromIndex
    if (newSize < 0) {
        throw IllegalArgumentException(""$fromIndex > $toIndex"")
    }
    val result = CharArray(newSize)
    this.copyInto(result, 0, fromIndex, toIndex.coerceAtMost(size))
    return result
}","/**

 * Returns new array which is a copy of the original array's range between [fromIndex] (inclusive)

 * and [toIndex] (exclusive) with new elements filled with **lateinit** _uninitialized_ values.

 * Attempts to read _uninitialized_ values from this array work in implementation-dependent manner,

 * either throwing exception or returning some kind of implementation-specific default value.

 */",f17396:m3569
63619,"@SinceKotlin(""1.1"") public actual fun <T: Comparable<T>> maxOf(a: T, b: T): T","{
    return if (a >= b) a else b
}","/**

 * Returns the greater of two values.

 * 

 * If values are equal, returns the first one.

 */",f17406:m27
59054,"@SinceKotlin(""1.4"") public inline fun CharSequence.reduceRightIndexedOrNull(operation: (index: Int, Char, acc: Char) -> Char): Char?","{
    var index = lastIndex
    if (index < 0) return null
    var accumulator = get(index--)
    while (index >= 0) {
        accumulator = operation(index, get(index), accumulator)
        --index
    }
    return accumulator
}","/**

 * Accumulates value starting with the last character and applying [operation] from right to left

 * to each character with its index in the original char sequence and current accumulator value.

 * 

 * Returns `null` if the char sequence is empty.

 * 

 * @param [operation] function that takes the index of a character, the character itself and current accumulator value,

 * and calculates the next accumulator value.

 * 

 * @sample samples.collections.Collections.Aggregates.reduceRightOrNull

 */",f17097:m3853
58704,public fun <T: Comparable<T>> T.coerceAtMost(maximumValue: T): T,"{
    return if (this > maximumValue) maximumValue else this
}","/**

 * Ensures that this value is not greater than the specified [maximumValue].

 * 

 * @return this value if it's less than or equal to the [maximumValue] or the [maximumValue] otherwise.

 * 

 * @sample samples.comparisons.ComparableOps.coerceAtMostComparable

 */",f17092:m2561
54657,public actual fun CharArray.asList(): List<Char>,"{
    return object : AbstractList<Char>(), RandomAccess {
        override val size: Int get() = this@asList.size
    
        override fun isEmpty(): Boolean = this@asList.isEmpty()
    
        override fun contains(element: Char): Boolean = this@asList.contains(element)
    
        override fun get(index: Int): Char {
            AbstractList.checkElementIndex(index, size)
            return this@asList[index]
        }
    
        override fun indexOf(element: Char): Int {
            @Suppress(""USELESS_CAST"") if ((element as Any?) !is Char) return -1
            return this@asList.indexOf(element)
        }
    
        override fun lastIndexOf(element: Char): Int {
            @Suppress(""USELESS_CAST"") if ((element as Any?) !is Char) return -1
            return this@asList.lastIndexOf(element)
        }
    }
}","/**

 * Returns a [List] that wraps the original array.

 */",f16713:m325
43519,internal fun TestProject.addArchivesBaseNameCompat(archivesBaseName: String),"{
    if (gradleVersion >= GradleVersion.version(TestVersions.Gradle.G_8_5)) {
        buildGradle.appendText(""""""
        
                    |
        
                    |base {
        
                    |    archivesName = '$archivesBaseName'
        
                    |}
        
                    """""".trimMargin())
    } else if (gradleVersion < GradleVersion.version(TestVersions.Gradle.G_7_1)) {
        buildGradle.appendText(""""""
        
                    |
        
                    |archivesBaseName = '$archivesBaseName'
        
                    """""".trimMargin())
    } else {
        buildGradle.appendText(""""""
        
                    |
        
                    |base {
        
                    |    archivesBaseName = '$archivesBaseName'
        
                    |}
        
                    """""".trimMargin())
    }
}","/**

 * Configures 'archivesBaseName' in Gradle older and newer versions compatible way avoiding

 * deprecation warnings.

 */",f13453:m321
63290,internal fun hasSingleCodepointDecompositionInternal(ch: Int): Boolean,"{
    val index: Int = binarySearchRange(singleDecompositions, ch)
    return index != -1 && singleDecompositions[index] == ch
}",/** Check if the given character is in table of single decompositions. */,f17362:m507
12012,"private fun ffiCreateClosure(ffiCif: ffi_cif, impl: FfiClosureImpl): NativePtr","{
    val ffiClosure = nativeHeap.alloc(Long.SIZE_BYTES, 8)
    try {
        val res = ffiCreateClosure0(ffiCif.rawPtr, ffiClosure.rawPtr, userData = impl)
        when (res) {
            0L -> throw OutOfMemoryError()
            -1L -> throw Error(""libffi error occurred"")
        }
        caches.addClosure(unsafe.getLong(ffiClosure.rawPtr))
        return res
    } finally {
        nativeHeap.free(ffiClosure)
    }
}","/**

 * Uses libffi to allocate a native function which will call [impl] when invoked.

 *

 * @param ffiCif describes the type of the function to create

 */",f3613:m1005
54799,"@SinceKotlin(""1.1"") @kotlin.internal.InlineOnly public actual inline fun maxOf(a: Byte, b: Byte): Byte","{
    return maxOf(a.toInt(), b.toInt()).unsafeCast<Byte>()
}","/**

 * Returns the greater of two values.

 */",f16714:m49
63372,public actual fun <T> Continuation<T>.intercepted(): Continuation<T>,(this as? CoroutineImpl)?.intercepted() ?: this,"/**

 * Intercepts this continuation with [ContinuationInterceptor].

 *

 * This function shall be used on the immediate result of [createCoroutineUnintercepted] or [suspendCoroutineUninterceptedOrReturn],

 * in which case it checks for [ContinuationInterceptor] in the continuation's [context][Continuation.context],

 * invokes [ContinuationInterceptor.interceptContinuation], caches and returns the result.

 *

 * If this function is invoked on other [Continuation] instances it returns `this` continuation unchanged.

 */",f17386:m245
58583,"@SinceKotlin(""1.3"") public fun LongRange.random(random: Random): Long","{
    try {
        return random.nextLong(this)
    } catch (e: IllegalArgumentException) {
        throw NoSuchElementException(e.message)
    }
}","/**

 * Returns a random element from this range using the specified source of randomness.

 * 

 * @throws IllegalArgumentException if this range is empty.

 */",f17092:m395
58793,"@SinceKotlin(""1.4"") @OptIn(kotlin.experimental.ExperimentalTypeInference::class) @OverloadResolutionByLambdaReturnType @kotlin.jvm.JvmName(""flatMapIndexedIterableTo"") @kotlin.internal.InlineOnly public inline fun <T, R, C: MutableCollection<in R>> Sequence<T>.flatMapIndexedTo(destination: C, transform: (index: Int, T) -> Iterable<R>): C","{
    var index = 0
    for (element in this) {
        val list = transform(checkIndexOverflow(index++), element)
        destination.addAll(list)
    }
    return destination
}","/**

 * Appends all elements yielded from results of [transform] function being invoked on each element

 * and its index in the original sequence, to the given [destination].

 *

 * The operation is _terminal_.

 */",f17096:m1821
56488,@kotlin.internal.InlineOnly public actual inline fun String.toDouble(): Double,java.lang.Double.parseDouble(this),"/**

 * Parses the string as a [Double] number and returns the result.

 * @throws NumberFormatException if the string is not a valid representation of a number.

 */",f16885:m257
17450,protected open fun doTest(testServices: TestServices),"{
    val (mainFile, mainModule) = findMainFileAndModule(testServices)
    doTestByMainModuleAndOptionalMainFile(mainFile, mainModule, testServices)
}","/**

     * Consider implementing this method if your test logic needs the whole

     * [KtTestModuleStructure][org.jetbrains.kotlin.analysis.test.framework.project.structure.KtTestModuleStructure].

     *

     * Examples of use cases:

     *

     * - Find all files in all modules

     * - Find two declarations from different files and different modules and compare them

     *

     * The [KtTestModuleStructure][org.jetbrains.kotlin.analysis.test.framework.project.structure.KtTestModuleStructure] can be accessed via

     * [ktTestModuleStructure] on [testServices].

     *

     * Use only if [doTestByMainModuleAndOptionalMainFile] is not suitable for your use case.

     */",f5235:m263
59549,"@SinceKotlin(""1.2"") @kotlin.internal.InlineOnly public inline fun <@kotlin.internal.OnlyInputTypes K, @kotlin.internal.OnlyInputTypes V> MutableMap<out K, out V>.remove(key: K, value: V): Boolean","(this as MutableMap<K, V>).remove(key, value)","/**

 * Removes the entry for the specified key only if it is currently

 * mapped to the specified value.

 */",f17131:m65
64145,@kotlin.internal.IntrinsicConstEvaluation public inline operator fun compareTo(other: Byte): Int,this.compareTo(other.toInt()),"/**

     * Compares this value with the specified value for order.

     * Returns zero if this value is equal to the specified other value, a negative number if it's less than other,

     * or a positive number if it's greater than other.

     */",f17455:m1811
63669,"@SinceKotlin(""1.3"") @ExperimentalUnsignedTypes public actual fun UShortArray.asList(): List<UShort>","{
    return object : AbstractList<UShort>(), RandomAccess {
        override val size: Int get() = this@asList.size
    
        override fun isEmpty(): Boolean = this@asList.isEmpty()
    
        override fun contains(element: UShort): Boolean = this@asList.contains(element)
    
        override fun get(index: Int): UShort = this@asList[index]
    
        override fun indexOf(element: UShort): Int = this@asList.indexOf(element)
    
        override fun lastIndexOf(element: UShort): Int = this@asList.lastIndexOf(element)
    }
}","/**

 * Returns a [List] that wraps the original array.

 */",f17408:m223
56550,"@kotlin.internal.InlineOnly public inline fun timer(name: String? = null, daemon: Boolean = false, initialDelay: Long = 0.toLong(), period: Long, crossinline action: TimerTask.() -> Unit): Timer","{
    val timer = timer(name, daemon)
    timer.schedule(initialDelay, period, action)
    return timer
}","/**

 * Creates a timer that executes the specified [action] periodically, starting after the specified [initialDelay]

 * (expressed in milliseconds) and with the interval of [period] milliseconds between the end of the previous task

 * and the start of the next one.

 *

 * @param name the name to use for the thread which is running the timer.

 * @param daemon if `true`, the thread is started as a daemon thread (the VM will exit when only daemon threads are running).

 */",f16894:m167
54704,public actual fun LongArray.copyOf(): LongArray,"{
    return withType(""LongArray"", this.asDynamic().slice())
}","/**

 * Returns new array which is a copy of the original array.

 * 

 * @sample samples.collections.Arrays.CopyOfOperations.copyOf

 */",f16713:m1723
64805,"@Suppress(""NOTHING_TO_INLINE"") internal actual inline fun AssertionErrorWithCause(message: String?, cause: Throwable?): AssertionError","AssertionError(message, cause)",/** Platform-specific construction of AssertionError with cause */,f17514:m39
57244,"public fun <T> Array<out T>.binarySearch(element: T, comparator: Comparator<in T>, fromIndex: Int = 0, toIndex: Int = size): Int","{
    return java.util.Arrays.binarySearch(this, fromIndex, toIndex, element, comparator)
}","/**

 * Searches the array or the range of the array for the provided [element] using the binary search algorithm.

 * The array is expected to be sorted according to the specified [comparator], otherwise the result is undefined.

 * 

 * If the array contains multiple elements equal to the specified [element], there is no guarantee which one will be found.

 * 

 * @param element the element to search for.

 * @param comparator the comparator according to which this array is sorted.

 * @param fromIndex the start of the range (inclusive) to search in, 0 by default.

 * @param toIndex the end of the range (exclusive) to search in, size of this array by default.

 * 

 * @return the index of the element, if it is contained in the array within the specified range;

 * otherwise, the inverted insertion point `(-insertion point - 1)`.

 * The insertion point is defined as the index at which the element should be inserted,

 * so that the array (or the specified subrange of array) still remains sorted according to the specified [comparator].

 * 

 * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.

 * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].

 */",f16970:m495
48545,"@JvmOverloads fun framework(namePrefix: String, buildTypes: Collection<NativeBuildType> = NativeBuildType.DEFAULT_BUILD_TYPES, configure: Framework.() -> Unit = {})","createBinaries(namePrefix, namePrefix, NativeOutputKind.FRAMEWORK, buildTypes, ::Framework, configure)",/** Creates an Objective-C framework with the given [namePrefix] for each build type and configures it. */,f15652:m521
20096,public open fun getShadowedScope(): GlobalSearchScope,GlobalSearchScope.EMPTY_SCOPE,"/**

     * Returns the scope of files that should be shadowed by the files provided by [getKtFiles].

     *

     * Any files in the module that are included in this scope will be removed from analysis results. This allows the files provided by

     * [getKtFiles] to cleanly replace those files from the module.

     *

     * If this resolve extension is being used to generate declarations that would normally be provided by sources generated by an external

     * build task, such as a resource compiler or annotation processor, the resolve extension should provide a scope here that covers those

     * externally generated sources. This will prevent collisions between the definitions provided by [getKtFiles] and those provided by the

     * (potentially stale) externally generated sources.

     */",f5765:m149
56350,public operator fun plus(context: CoroutineContext): CoroutineContext,"if (context === EmptyCoroutineContext) this else context.fold(this) { acc, element ->
    val removed = acc.minusKey(element.key)
    if (removed === EmptyCoroutineContext) element else {
        val interceptor = removed[ContinuationInterceptor]
        if (interceptor == null) CombinedContext(removed, element) else {
            val left = removed.minusKey(ContinuationInterceptor)
            if (left === EmptyCoroutineContext) CombinedContext(element, interceptor) else CombinedContext(CombinedContext(left, element), interceptor)
        }
    }
}","/**

     * Returns a context containing elements from this context and elements from  other [context].

     * The elements from this context with the same key as in the other one are dropped.

     */",f16853:m51
43602,"fun BuildResult.extractNativeTasksCommandLineArgumentsFromOutput(vararg tasksPaths: String, toolName: NativeToolKind = NativeToolKind.KONANC, logLevel: LogLevel = LogLevel.INFO, assertions: CommandLineArguments.() -> Unit)","tasksPaths.forEach { taskPath ->
    val taskOutput = getOutputForTask(taskPath, logLevel)
    val commandLineArguments = extractNativeCompilerCommandLineArguments(taskOutput, toolName)
    assertions(CommandLineArguments(commandLineArguments, this))
}","/**

 * Asserts the command line arguments of the given Kotlin/Native (K/N) compiler for the specified tasks' paths.

 *

 * Note: The log level of the output must be set to [LogLevel.DEBUG].

 *

 * @param tasksPaths The paths of the tasks for which the command line arguments should be checked against the provided assertions.

 * @param toolName The name of the build tool used.

 * @param logLevel The given output contains no more than the [logLevel] logs.

 * @param assertions The assertions to be applied to each command line argument of each given task.

 *                   These assertions validate the expected properties of the command line arguments.

 *                   These assertions validate the expected properties of the command line arguments.

 */",f13459:m169
57393,public actual fun DoubleArray.toTypedArray(): Array<Double>,"{
    val result = arrayOfNulls<Double>(size)
    for (index in indices) result[index] = this[index]
    @Suppress(""UNCHECKED_CAST"") return result as Array<Double>
}","/**

 * Returns a *typed* object array containing all of the elements of this primitive array.

 */",f16970:m4631
14860,"@Deprecated(""Use Kotlin compiler 1.4 to avoid deprecation warning."") @SinceKotlin(""1.1"") @DeprecatedSinceKotlin(hiddenSince = ""1.4"") public fun DoubleArray.contentHashCode(): Int","{
    return this.contentHashCode()
}","/**

 * Returns a hash code based on the contents of this array as if it is [List].

 */",f3831:m1525
56222,"@SinceKotlin(""1.5"") @kotlin.internal.InlineOnly @kotlin.internal.IntrinsicConstEvaluation public inline fun Byte.mod(other: Short): Short",this.toInt().mod(other.toInt()).toShort(),"/**

 * Calculates the remainder of flooring division of this value (dividend) by the other value (divisor).

 *

 * The result is either zero or has the same sign as the _divisor_ and has the absolute value less than the absolute value of the divisor.

 */",f16842:m79
58882,"@SinceKotlin(""1.2"") public fun <T, R> Sequence<T>.chunked(size: Int, transform: (List<T>) -> R): Sequence<R>","{
    return windowed(size, size, partialWindows = true, transform = transform)
}","/**

 * Splits this sequence into several lists each not exceeding the given [size]

 * and applies the given [transform] function to an each.

 * 

 * @return sequence of results of the [transform] applied to an each list.

 * 

 * Note that the list passed to the [transform] function is ephemeral and is valid only inside that function.

 * You should not store it or allow it to escape in some way, unless you made a snapshot of it.

 * The last list may have fewer elements than the given [size].

 * 

 * @param size the number of elements to take in each list, must be positive and can be greater than the number of elements in this sequence.

 *

 * The operation is _intermediate_ and _stateful_.

 * 

 * @sample samples.text.Strings.chunkedTransform

 */",f17096:m5189
56929,"@SinceKotlin(""1.3"") internal fun runSuspend(block: suspend () -> Unit)","{
    val run = RunSuspend()
    block.startCoroutine(run)
    run.await()
}","/**

 * Wrapper for `suspend fun main` and `@Test suspend fun testXXX` functions.

 */",f16937:m25
14878,"@Deprecated(""Use Kotlin compiler 1.4 to avoid deprecation warning."") @SinceKotlin(""1.1"") @DeprecatedSinceKotlin(hiddenSince = ""1.4"") public fun DoubleArray.contentToString(): String","{
    return this.contentToString()
}","/**

 * Returns a string representation of the contents of the specified array as if it is [List].

 * 

 * @sample samples.collections.Arrays.ContentOperations.contentToString

 */",f3831:m1945
40433,internal fun dynamicTestCase(testCaseId: TestCaseId): Collection<DynamicNode>,"{
    val testRunNodes = testRunProvider.getTestRuns(testCaseId, testRunSettings)
    return buildJUnitDynamicNodes(testRunNodes)
}","/**

     * Run JUnit dynamic test.

     *

     * This function should be called from a method annotated with [org.junit.jupiter.api.TestFactory].

     */",f12847:m141
55738,"public fun String.replaceIndent(newIndent: String = """"): String","{
    val lines = lines()
    val minCommonIndent = lines.filter(String::isNotBlank).map(String::indentWidth).minOrNull() ?: 0
    return lines.reindent(length + newIndent.length * lines.size, getIndentFunction(newIndent), { line -> line.drop(minCommonIndent) })
}","/**

 * Detects a common minimal indent like it does [trimIndent] and replaces it with the specified [newIndent].

 */",f16789:m133
70202,"fun firstSuperMethodFromKotlin(descriptor: CallableMemberDescriptor, implementation: CallableMemberDescriptor): CallableMemberDescriptor?","{
    return descriptor.overriddenDescriptors.firstOrNull { overridden -> overridden.modality != Modality.ABSTRACT && (overridden == implementation || OverridingUtil.overrides(overridden, implementation, overridden.module.isTypeRefinementEnabled(), true)) }
}","/**

 * Given a fake override and its implementation (non-abstract declaration) somewhere in supertypes,

 * returns the first immediate super function of the given fake override which overrides that implementation.

 * The returned function should be called from TImpl-bridges generated for the given fake override.

 */",f19609:m145
50262,@Test fun `test Android compilations visible in whenEvaluated`(),"{
    project.applyGradleBuiltInPlugins()
    val kotlin = project.applyMultiplatformPlugin()
    var triggered = false
    project.whenEvaluated {
        /** These are created by the Kotlin plugin immediately on Android plugin's afterEvaluate actions */<bound method PropertyDeclaration.__str__ of PropertyDeclaration(position=Position(line=87, column=13), modifiers=(), mutability=<Mutability.VAL: 'val'>, generics=(), receiver=None, declaration=VariableDeclaration(position=Position(line=87, column=17), annotations=(), name='androidCompilations', type=None), constraints=(), value=PostfixUnaryExpression(position=Position(line=87, column=39), expression=SimpleIdentifier(position=Position(line=87, column=39), value='kotlin'), suffixes=[NavigationSuffix(position=Position(line=87, column=45), operator='.', suffix='targets'), NavigationSuffix(position=Position(line=87, column=53), operator='.', suffix='getByName'), CallSuffix(position=Position(line=87, column=63), generics=(), arguments=ValueArguments(position=Position(line=87, column=63), sequence=[ValueArgument(position=Position(line=87, column=64), annotation=None, name=None, spread=False, value=LineStringLiteral(position=Position(line=87, column=64), value='""android""'))]), lambda_expression=None), NavigationSuffix(position=Position(line=87, column=74), operator='.', suffix='compilations')]), delegate=None, getter=None, setter=None)>
        assertTrue { androidCompilations.isNotEmpty() }
        assertFalse(triggered, ""whenEvaluated should call the function only once"")
        triggered = true
    }
    project.applyAndroidLibraryPlugin()
    kotlin.androidTarget()
    project.evaluate()
    assertTrue { triggered }
}","/**

     * Check that the `whenEvaluated` actions that are scheduled before the Android plugin is applied get triggered only after the actions

     * done in the Android plugin's afterEvaluate phase

     */",f16088:m59
58766,"public fun <C: MutableCollection<in T>, T: Any> Sequence<T?>.filterNotNullTo(destination: C): C","{
    for (element in this) if (element != null) destination.add(element)
    return destination
}","/**

 * Appends all elements that are not `null` to the given [destination].

 *

 * The operation is _terminal_.

 * 

 * @sample samples.collections.Collections.Filtering.filterNotNullTo

 */",f17096:m1029
55150,public operator fun rangeTo(other: Short): LongRange,"LongRange(this, other.toLong())",/** Creates a range from this value to the specified [other] value. */,f16727:m2929
14051,public fun addAndGet(delta: Int): Int,this::value.getAndAddField(delta) + delta,"/**

     * Atomically adds the [given value][delta] to the current value and returns the new value.

     */",f3718:m93
56024,"@kotlin.internal.InlineOnly public inline fun <K, V> Map<K, V>.getOrElse(key: K, defaultValue: () -> V): V","{
    contract { callsInPlace(defaultValue, InvocationKind.AT_MOST_ONCE) }
    return get(key) ?: defaultValue()
}","/**

 * Returns the value for the given [key] if the value is present and not `null`.

 * Otherwise, returns the result of the [defaultValue] function.

 *

 * @sample samples.collections.Maps.Usage.getOrElse

 */",f16823:m667
57249,"public fun LongArray.binarySearch(element: Long, fromIndex: Int = 0, toIndex: Int = size): Int","{
    return java.util.Arrays.binarySearch(this, fromIndex, toIndex, element)
}","/**

 * Searches the array or the range of the array for the provided [element] using the binary search algorithm.

 * The array is expected to be sorted, otherwise the result is undefined.

 * 

 * If the array contains multiple elements equal to the specified [element], there is no guarantee which one will be found.

 * 

 * @param element the to search for.

 * @param fromIndex the start of the range (inclusive) to search in, 0 by default.

 * @param toIndex the end of the range (exclusive) to search in, size of this array by default.

 * 

 * @return the index of the element, if it is contained in the array within the specified range;

 * otherwise, the inverted insertion point `(-insertion point - 1)`.

 * The insertion point is defined as the index at which the element should be inserted,

 * so that the array (or the specified subrange of array) still remains sorted.

 * 

 * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.

 * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].

 */",f16970:m717
55796,"@SinceKotlin(""1.3"") @Suppress(""DEPRECATION"") public fun <T> iterator(@BuilderInference block: suspend SequenceScope<T>.() -> Unit): Iterator<T>","{
    val iterator = SequenceBuilderIterator<T>()
    iterator.nextStep = block.createCoroutineUnintercepted(receiver = iterator, completion = iterator)
    return iterator
}","/**

 * Builds an [Iterator] lazily yielding values one by one.

 *

 * @sample samples.collections.Sequences.Building.buildIterator

 * @sample samples.collections.Iterables.Building.iterable

 */",f16811:m55
57361,public actual operator fun IntArray.plus(elements: IntArray): IntArray,"{
    val thisSize = size
    val arraySize = elements.size
    val result = java.util.Arrays.copyOf(this, thisSize + arraySize)
    System.arraycopy(elements, 0, result, thisSize, arraySize)
    return result
}","/**

 * Returns an array containing all elements of the original array and then all elements of the given [elements] array.

 */",f16970:m3853
14064,public fun decrementAndGet(): Long,this::value.getAndAddField(-1L) - 1L,"/**

     * Atomically decrements the current value by one and returns the new value.

     */",f3718:m251
58248,@kotlin.internal.InlineOnly public inline fun mod(other: UByte): UByte,this.mod(other.toULong()).toUByte(),"/**

     * Calculates the remainder of flooring division of this value (dividend) by the other value (divisor).

     *

     * The result is always less than the divisor.

     *

     * For unsigned types, the remainders of flooring division and truncating division are the same.

     */",f17066:m367
63461,"@SinceKotlin(""1.4"") public actual fun DoubleArray?.contentHashCode(): Int","{
    if (this === null) return 0
    var result = 1
    for (element in this) result = 31 * result + element.hashCode()
    return result
}","/**

 * Returns a hash code based on the contents of this array as if it is [List].

 */",f17396:m1729
43542,fun GradleProject.assertFileInProjectExists(pathToFile: String),"{
    assertFileExists(projectPath.resolve(pathToFile))
}","/**

 * Asserts file under [pathToFile] relative to the test project exists and is a regular file.

 */",f13456:m73
63687,public actual fun <T> MutableList<T>.reverse(): Unit,"{
    val midPoint = (size / 2) - 1
    if (midPoint < 0) return
    var reverseIndex = lastIndex
    for (index in 0 .. midPoint) {
        val tmp = this[index]
        this[index] = this[reverseIndex]
        this[reverseIndex] = tmp
        reverseIndex--
    }
}","/**

 * Reverses elements in the list in-place.

 */",f17411:m31
64322,@kotlin.internal.IntrinsicConstEvaluation public override fun toInt(): Int,wasm_i32_trunc_sat_f32_s(this),"/**

     * Converts this [Float] value to [Int].

     *

     * The fractional part, if any, is rounded down towards zero.

     * Returns zero if this `Float` value is `NaN`, [Int.MIN_VALUE] if it's less than `Int.MIN_VALUE`,

     * [Int.MAX_VALUE] if it's bigger than `Int.MAX_VALUE`.

     */",f17455:m4459
63418,public actual fun FloatArray.asList(): List<Float>,"{
    return object : AbstractList<Float>(), RandomAccess {
        override val size: Int get() = this@asList.size
    
        override fun isEmpty(): Boolean = this@asList.isEmpty()
    
        override fun contains(element: Float): Boolean = this@asList.any { it.toBits() == element.toBits() }
    
        override fun get(index: Int): Float = this@asList[index]
    
        override fun indexOf(element: Float): Int = this@asList.indexOfFirst { it.toBits() == element.toBits() }
    
        override fun lastIndexOf(element: Float): Int = this@asList.indexOfLast { it.toBits() == element.toBits() }
    }
}","/**

 * Returns a [List] that wraps the original array.

 */",f17396:m351
57992,"@SinceKotlin(""1.5"") @WasExperimental(ExperimentalUnsignedTypes::class, ExperimentalStdlibApi::class) @kotlin.internal.InlineOnly public inline fun UInt.countLeadingZeroBits(): Int",toInt().countLeadingZeroBits(),"/**

 * Counts the number of consecutive most significant bits that are zero in the binary representation of this [UInt] number.

 */",f17056:m33
58754,public inline fun <T> Sequence<T>.single(predicate: (T) -> Boolean): T,"{
    var single: T? = null
    var found = false
    for (element in this) {
        if (predicate(element)) {
            if (found) throw IllegalArgumentException(""Sequence contains more than one matching element."")
            single = element
            found = true
        }
    }
    if (!found) throw NoSuchElementException(""Sequence contains no element matching the predicate."")
    @Suppress(""UNCHECKED_CAST"") return single as T
}","/**

 * Returns the single element matching the given [predicate], or throws exception if there is no or more than one matching element.

 *

 * The operation is _terminal_.

 */",f17096:m687
34711,inline fun <T> List<T>.fastForEach(action: (T) -> Unit),"{
    for (index in 0 until size) {
        action(this[index])
    }
}","/**

 * Allocation Free 'forEach' implementation that won't use any underlying iterator.

 * Note: This implementation therefore is unsafe when mutating the collection at the same time!!!

 */",f11390:m213
58682,public infix fun Byte.until(to: Byte): IntRange,"{
    return this.toInt() .. (to.toInt() - 1).toInt()
}","/**

 * Returns a range from this value up to but excluding the specified [to] value.

 * 

 * If the [to] value is less than or equal to `this` value, then the returned range is empty.

 */",f17092:m2121
56546,"@kotlin.internal.InlineOnly public inline fun Timer.schedule(time: Date, period: Long, crossinline action: TimerTask.() -> Unit): TimerTask","{
    val task = timerTask(action)
    schedule(task, time, period)
    return task
}","/**

 * Schedules an [action] to be executed periodically, starting at the specified [time] and with the

 * interval of [period] milliseconds between the end of the previous task and the start of the next one.

 */",f16894:m89
53095,"@SinceKotlin(""1.2"") @Deprecated(""Use CharArray.concatToString(startIndex, endIndex) instead"", ReplaceWith(""chars.concatToString(offset, offset + length)"")) @DeprecatedSinceKotlin(warningSince = ""1.4"", errorSince = ""1.5"") public actual fun String(chars: CharArray, offset: Int, length: Int): String","{
    if (offset < 0 || length < 0 || chars.size - offset < length) throw IndexOutOfBoundsException(""size: ${chars.size}; offset: $offset; length: $length"")
    var result = """"
    for (index in offset until offset + length) {
        result += chars[index]
    }
    return result
}","/**

 * Converts the characters from a portion of the specified array to a string.

 *

 * @throws IndexOutOfBoundsException if either [offset] or [length] are less than zero

 * or `offset + length` is out of [chars] array bounds.

 */",f16617:m47
59034,"@SinceKotlin(""1.4"") @OptIn(kotlin.experimental.ExperimentalTypeInference::class) @OverloadResolutionByLambdaReturnType @kotlin.internal.InlineOnly public inline fun CharSequence.minOf(selector: (Char) -> Float): Float","{
    if (isEmpty()) throw NoSuchElementException()
    var minValue = selector(this[0])
    for (i in 1 .. lastIndex) {
        val v = selector(this[i])
        minValue = minOf(minValue, v)
    }
    return minValue
}","/**

 * Returns the smallest value among all values produced by [selector] function

 * applied to each character in the char sequence.

 * 

 * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.

 * 

 * @throws NoSuchElementException if the char sequence is empty.

 */",f17097:m3127
58044,@kotlin.internal.InlineOnly public inline fun floorDiv(other: UShort): UInt,this.toUInt().floorDiv(other.toUInt()),"/**

     * Divides this value by the other value, flooring the result to an integer that is closer to negative infinity.

     *

     * For unsigned types, the results of flooring division and truncating division are the same.

     */",f17058:m323
57179,"@SinceKotlin(""1.4"") public actual fun minOf(a: Float, vararg other: Float): Float","{
    var min = a
    for (e in other) min = minOf(min, e)
    return min
}","/**

 * Returns the smaller of the given values.

 * 

 * If any value is `NaN`, returns `NaN`.

 */",f16966:m833
57363,public actual operator fun FloatArray.plus(elements: FloatArray): FloatArray,"{
    val thisSize = size
    val arraySize = elements.size
    val result = java.util.Arrays.copyOf(this, thisSize + arraySize)
    System.arraycopy(elements, 0, result, thisSize, arraySize)
    return result
}","/**

 * Returns an array containing all elements of the original array and then all elements of the given [elements] array.

 */",f16970:m3897
54730,"@SinceKotlin(""1.3"") @Suppress(""ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS"") public actual fun IntArray.fill(element: Int, fromIndex: Int = 0, toIndex: Int = size): Unit","{
    AbstractList.checkRangeIndexes(fromIndex, toIndex, size)
    nativeFill(element, fromIndex, toIndex)
}","/**

 * Fills this array or its subrange with the specified [element] value.

 * 

 * @param fromIndex the start of the range (inclusive) to fill, 0 by default.

 * @param toIndex the end of the range (exclusive) to fill, size of this array by default.

 * 

 * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.

 * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].

 */",f16713:m2421
64027,@kotlin.internal.IntrinsicConstEvaluation public override inline operator fun compareTo(other: Byte): Int,"wasm_i32_compareTo(this.toInt(), other.toInt())","/**

     * Compares this value with the specified value for order.

     * Returns zero if this value is equal to the specified other value, a negative number if it's less than other,

     * or a positive number if it's greater than other.

     */",f17455:m83
57487,"@SinceKotlin(""1.3"") @ExperimentalUnsignedTypes public actual fun UShortArray.asList(): List<UShort>","{
    return object : AbstractList<UShort>(), RandomAccess {
        override val size: Int get() = this@asList.size
    
        override fun isEmpty(): Boolean = this@asList.isEmpty()
    
        override fun contains(element: UShort): Boolean = this@asList.contains(element)
    
        override fun get(index: Int): UShort = this@asList[index]
    
        override fun indexOf(element: UShort): Int = this@asList.indexOf(element)
    
        override fun lastIndexOf(element: UShort): Int = this@asList.lastIndexOf(element)
    }
}","/**

 * Returns a [List] that wraps the original array.

 */",f16971:m231
63478,"@SinceKotlin(""1.4"") public actual fun FloatArray?.contentToString(): String","{
    return this?.joinToString("", "", ""["", ""]"") ?: ""null""
}","/**

 * Returns a string representation of the contents of the specified array as if it is [List].

 * 

 * @sample samples.collections.Arrays.ContentOperations.contentToString

 */",f17396:m2117
30910,inline fun <reified T> Iterable<*>.findIsInstanceAnd(predicate: (T) -> Boolean): T?,"{
    for (element in this) {
        if (element is T && predicate(element)) {
            return element
        }
    }
    return null
}","/**

 * The variant of [org.jetbrains.kotlin.util.collectionUtils.filterIsInstanceAnd] extension function but to find the first element

 * which is an instance of type [T] and satisfies [predicate] condition

 * @see org.jetbrains.kotlin.util.collectionUtils.filterIsInstanceAnd

 */",f10791:m257
61726,public fun <T: Any> JsReference<T>.get(): T,"{
    returnArgumentIfItIsKotlinAny()
    throw ClassCastException(""JsReference doesn't contain a Kotlin type"")
}",/** Retrieve original Kotlin value from JsReference */,f17266:m49
48194,internal fun ijListenTestTask(task: AbstractTestTask),"{
    try {
        Class.forName(""org.jetbrains.kotlin.gradle.testing.internal.IjTestListener"")?.getMethod(""attachTo"")?.invoke(null, task)
    } catch (e: ClassNotFoundException) { }
}","/**

 * Experimental test reporting for Intellij Ultimate only

 */",f15569:m19
63188,"@SinceKotlin(""1.6"") @WasExperimental(ExperimentalStdlibApi::class) @kotlin.internal.InlineOnly public actual inline fun Long.rotateRight(bitCount: Int): Long",shl(64 - bitCount) or ushr(bitCount),"/**

 * Rotates the binary representation of this [Long] number right by the specified [bitCount] number of bits.

 * The least significant bits pushed out from the right side reenter the number as the most significant bits on the left side.

 *

 * Rotating the number right by a negative bit count is the same as rotating it left by the negated bit count:

 * `number.rotateRight(-n) == number.rotateLeft(n)`

 *

 * Rotating by a multiple of [Long.SIZE_BITS] (64) returns the same number, or more generally

 * `number.rotateRight(n) == number.rotateRight(n % 64)`

 */",f17314:m245
63668,"@SinceKotlin(""1.3"") @ExperimentalUnsignedTypes public actual fun UByteArray.asList(): List<UByte>","{
    return object : AbstractList<UByte>(), RandomAccess {
        override val size: Int get() = this@asList.size
    
        override fun isEmpty(): Boolean = this@asList.isEmpty()
    
        override fun contains(element: UByte): Boolean = this@asList.contains(element)
    
        override fun get(index: Int): UByte = this@asList[index]
    
        override fun indexOf(element: UByte): Int = this@asList.indexOf(element)
    
        override fun lastIndexOf(element: UByte): Int = this@asList.lastIndexOf(element)
    }
}","/**

 * Returns a [List] that wraps the original array.

 */",f17408:m191
63685,private fun Char.getLetterType(): Int,"{
    val ch = this.code
    val index = binarySearchRange(rangeStart, ch)
    val rangeStart = rangeStart[index]
    val rangeEnd = rangeStart + rangeLength[index] - 1
    val code = rangeCategory[index]
    if (ch > rangeEnd) {
        return 0
    }
    val lastTwoBits = code and 0x3
    if (lastTwoBits == 0) {
        var shift = 2
        var threshold = rangeStart
        for (i in 0 .. 1) {
            threshold += (code shr shift) and 0x7f
            if (threshold > ch) {
                return 3
            }
            shift += 7
            threshold += (code shr shift) and 0x7f
            if (threshold > ch) {
                return 0
            }
            shift += 7
        }
        return 3
    }
    if (code <= 0x7) {
        return lastTwoBits
    }
    val distance = (ch - rangeStart)
    val shift = if (code <= 0x1F) distance % 2 else distance
    return (code shr (2 * shift)) and 0x3
}","/**

 * Returns

 *   - `1` if the character is a lower case letter,

 *   - `2` if the character is an upper case letter,

 *   - `3` if the character is a letter but not a lower or upper case letter,

 *   - `0` otherwise.

 */",f17409:m161
63447,"@Deprecated(""Use Kotlin compiler 1.4 to avoid deprecation warning."") @SinceKotlin(""1.1"") @DeprecatedSinceKotlin(hiddenSince = ""1.4"") public fun ByteArray.contentHashCode(): Int","{
    return this.contentHashCode()
}","/**

 * Returns a hash code based on the contents of this array as if it is [List].

 */",f17396:m1425
17119,private fun PsiElement.modify(),"{
    for (parent in parentsWithSelf) { when (parent) {
        is ASTDelegatePsiElement -> parent.subtreeChanged()
        is KtCodeFragment -> parent.subtreeChanged()
    } }
}","/**

 * Emulate modification inside the body

 */",f5153:m325
56969,"@SinceKotlin(""1.3"") public actual fun <T> (suspend () -> T).createCoroutineUnintercepted(completion: Continuation<T>): Continuation<Unit>","{
    val probeCompletion = probeCoroutineCreated(completion)
    return if (this is BaseContinuationImpl) create(probeCompletion) else createCoroutineFromSuspendFunction(probeCompletion) { (this as Function1<Continuation<T>, Any?>).invoke(it) }
}","/**

 * Creates unintercepted coroutine without receiver and with result type [T].

 * This function creates a new, fresh instance of suspendable computation every time it is invoked.

 *

 * To start executing the created coroutine, invoke `resume(Unit)` on the returned [Continuation] instance.

 * The [completion] continuation is invoked when coroutine completes with result or exception.

 *

 * This function returns unintercepted continuation.

 * Invocation of `resume(Unit)` starts coroutine immediately in the invoker's call stack without going through the

 * [ContinuationInterceptor] that might be present in the completion's [CoroutineContext].

 * It is the invoker's responsibility to ensure that a proper invocation context is established.

 * Note that [completion] of this function may get invoked in an arbitrary context.

 *

 * [Continuation.intercepted] can be used to acquire the intercepted continuation.

 * Invocation of `resume(Unit)` on intercepted continuation guarantees that execution of

 * both the coroutine and [completion] happens in the invocation context established by

 * [ContinuationInterceptor].

 *

 * Repeated invocation of any resume function on the resulting continuation corrupts the

 * state machine of the coroutine and may result in arbitrary behaviour or exception.

 */",f16944:m201
63264,"@SinceKotlin(""1.2"") public actual fun Int.toString(radix: Int): String","{
    val isNegative = this < 0
    val absValue = if (isNegative) -this else this
    val absValueString = uintToString(absValue, checkRadix(radix))
    return if (isNegative) ""-$absValueString"" else absValueString
}","/**

 * Returns a string representation of this [Int] value in the specified [radix].

 *

 * @throws IllegalArgumentException when [radix] is not a valid radix for number to string conversion.

 */",f17352:m229
58526,"@SinceKotlin(""1.5"") @WasExperimental(ExperimentalStdlibApi::class, ExperimentalUnsignedTypes::class) @kotlin.internal.InlineOnly public inline fun ULongRange.randomOrNull(): ULong?","{
    return randomOrNull(Random)
}","/**

 * Returns a random element from this range, or `null` if this range is empty.

 */",f17090:m341
11089,"fun addWorkerTask(id: Int, priority: Int, queue: Packet?)","{
    this.addTask(id, priority, queue, WorkerTask(this, ID_HANDLER_A, 0))
}","/**

     * Add a work task to this scheduler.

     * @param {int} id the identity of the task

     * @param {int} priority the task's priority

     * @param {Packet} queue the queue of work to be processed by the task

     */",f3500:m227
56044,"public fun <K, V, M: MutableMap<in K, in V>> Iterable<Pair<K, V>>.toMap(destination: M): M",destination.apply { putAll(this@toMap) },"/**

 * Populates and returns the [destination] mutable map with key-value pairs from the given collection of pairs.

 */",f16823:m1159
58848,"@SinceKotlin(""1.4"") @OptIn(kotlin.experimental.ExperimentalTypeInference::class) @OverloadResolutionByLambdaReturnType @kotlin.internal.InlineOnly public inline fun <T, R: Comparable<R>> Sequence<T>.minOf(selector: (T) -> R): R","{
    val iterator = iterator()
    if (!iterator.hasNext()) throw NoSuchElementException()
    var minValue = selector(iterator.next())
    while (iterator.hasNext()) {
        val v = selector(iterator.next())
        if (minValue > v) {
            minValue = v
        }
    }
    return minValue
}","/**

 * Returns the smallest value among all values produced by [selector] function

 * applied to each element in the sequence.

 *

 * The operation is _terminal_.

 * 

 * @throws NoSuchElementException if the sequence is empty.

 */",f17096:m3817
49525,override fun toString(): String,"{
    val verb = when (this) {
        is KeepOriginalDependency -> ""keep""
        is Exclude -> ""exclude""
        is ChooseVisibleSourceSets -> ""choose""
    }
    return ""$verb, dependency = $dependency""
}","/** Evaluate and store the value, as the [dependency] will be lost during Gradle instant execution */",f15872:m55
63451,"@Deprecated(""Use Kotlin compiler 1.4 to avoid deprecation warning."") @SinceKotlin(""1.1"") @DeprecatedSinceKotlin(hiddenSince = ""1.4"") public fun FloatArray.contentHashCode(): Int","{
    return this.contentHashCode()
}","/**

 * Returns a hash code based on the contents of this array as if it is [List].

 */",f17396:m1505
56853,@kotlin.internal.InlineOnly public actual inline fun Double.isInfinite(): Boolean,java.lang.Double.isInfinite(this),"/**

 * Returns `true` if this value is infinitely large in magnitude.

 */",f16929:m47
63464,"@Deprecated(""Use Kotlin compiler 1.4 to avoid deprecation warning."") @SinceKotlin(""1.1"") @DeprecatedSinceKotlin(hiddenSince = ""1.4"") public fun <T> Array<out T>.contentToString(): String","{
    return this.contentToString()
}","/**

 * Returns a string representation of the contents of the specified array as if it is [List].

 * 

 * @sample samples.collections.Arrays.ContentOperations.contentToString

 */",f17396:m1801
64400,"@Suppress(""UNCHECKED_CAST"") public inline fun <T> arrayOfNulls(size: Int): Array<T?>",Array<Any?>(size) as Array<T?>,"/**

 * Returns an array of objects of the given type with the given [size], initialized with null values.

 *

 * @throws RuntimeException if the specified [size] is negative.

 */",f17462:m53
58743,public fun <T> Sequence<T>.firstOrNull(): T?,"{
    val iterator = iterator()
    if (!iterator.hasNext()) return null
    return iterator.next()
}","/**

 * Returns the first element, or `null` if the sequence is empty.

 *

 * The operation is _terminal_.

 */",f17096:m329
14227,@FreezingIsDeprecated public fun <T> atomicLazy(initializer: () -> T): Lazy<T>,AtomicLazyImpl(initializer),"/**

 * Atomic lazy initializer, could be used in frozen objects, freezes initializing lambda,

 * so use very carefully. Also, as with other uses of an [AtomicReference] may potentially

 * leak memory, so it is recommended to use `atomicLazy` in cases of objects living forever,

 * such as object singletons, or in cases where it's guaranteed not to have cyclical garbage.

 */",f3761:m131
58966,public fun CharSequence.takeLast(n: Int): CharSequence,"{
    require(n >= 0) { ""Requested character count $n is less than zero."" }
    val length = length
    return subSequence(length - n.coerceAtMost(length), length)
}","/**

 * Returns a subsequence of this char sequence containing the last [n] characters from this char sequence, or the entire char sequence if this char sequence is shorter.

 * 

 * @throws IllegalArgumentException if [n] is negative.

 * 

 * @sample samples.text.Strings.take

 */",f17097:m1149
20130,public fun KtDeclarationSymbol.getKlibSourceFileName(): String?,withValidityAssertion { analysisSession.klibSourceFileProvider.getKlibSourceFileName(this) },"/**

     * If [KtDeclaration] is a deserialized, klib based symbol, then information about the original

     * [SourceFile] might be retained.

     */",f5778:m41
64465,"@ExperimentalPathApi @SinceKotlin(""1.8"") public fun Path.copyToRecursively(target: Path, onError: (source: Path, target: Path, exception: Exception) -> OnErrorResult = { _, _, exception -> throw exception }, followLinks: Boolean, copyAction: CopyActionContext.(source: Path, target: Path) -> CopyActionResult = { src, dst -> src.copyToIgnoringExistingDirectory(dst, followLinks) }): Path","{
    if (!this.exists(*LinkFollowing.toLinkOptions(followLinks))) throw NoSuchFileException(this.toString(), target.toString(), ""The source file doesn't exist."")
    if (this.exists() && (followLinks || !this.isSymbolicLink())) {
        val targetExistsAndNotSymlink = target.exists() && !target.isSymbolicLink()
        if (targetExistsAndNotSymlink && this.isSameFileAs(target)) { } else {
            val isSubdirectory = when {
                this.fileSystem != target.fileSystem -> false
                targetExistsAndNotSymlink -> target.toRealPath().startsWith(this.toRealPath())
                else -> target.parent?.let { it.exists() && it.toRealPath().startsWith(this.toRealPath()) } ?: false
            }
            if (isSubdirectory) throw FileSystemException(this.toString(), target.toString(), ""Recursively copying a directory into its subdirectory is prohibited."")
        }
    }
    val normalizedTarget = target.normalize()
    fun destination(source: Path): Path {
        val relativePath = source.relativeTo(this@copyToRecursively)
        val destination = target.resolve(relativePath.pathString)
        if (!destination.normalize().startsWith(normalizedTarget)) {
            throw IllegalFileNameException(source, destination, ""Copying files to outside the specified target directory is prohibited. The directory being recursively copied might contain an entry with an illegal name."")
        }
        return destination
    }
    fun error(source: Path, exception: Exception): FileVisitResult {
        return onError(source, destination(source), exception).toFileVisitResult()
    }
    val stack = arrayListOf<Path>()
    @Suppress(""UNUSED_PARAMETER"") fun copy(source: Path, attributes: BasicFileAttributes): FileVisitResult {
        return try {
            if (stack.isNotEmpty()) {
                source.checkFileName()
                source.checkNotSameAs(stack.last())
            }
            DefaultCopyActionContext.copyAction(source, destination(source)).toFileVisitResult()
        } catch (exception: Exception) {
            error(source, exception)
        }
    }
    visitFileTree(followLinks = followLinks) {
        onPreVisitDirectory { directory, attributes -> copy(directory, attributes).also { if (it == FileVisitResult.CONTINUE) stack.add(directory) } }
        onVisitFile(::copy)
        onVisitFileFailed(::error)
        onPostVisitDirectory { directory, exception ->
            stack.removeLast()
            if (exception == null) {
                FileVisitResult.CONTINUE
            } else {
                error(directory, exception)
            }
        }
    }
    return target
}","/**

 * Recursively copies this directory and its content to the specified destination [target] path.

 * Note that if this function throws, partial copying may have taken place.

 *

 * Unlike `File.copyRecursively`, if some directories on the way to the [target] are missing, then they won't be created automatically.

 * You can use the [createParentDirectories] function to ensure that required intermediate directories are created:

 * ```

 * sourcePath.copyToRecursively(

 *     destinationPath.createParentDirectories(),

 *     followLinks = false

 * )

 * ```

 *

 * If the entry located by this path is a directory, this function recursively copies the directory itself and its content.

 * Otherwise, this function copies only the entry.

 *

 * If an exception occurs attempting to read, open or copy any entry under the source subtree,

 * further actions will depend on the result of the [onError] invoked with

 * the source and destination paths, that caused the error, and the exception itself as arguments.

 * If [onError] throws, this function ends immediately with the exception.

 * By default [onError] rethrows the exception. See [OnErrorResult] for available options.

 *

 * Copy operation is performed using [copyAction].

 * By default [copyAction] performs ""directory merge"" operation. If an entry in the source subtree is a directory

 * and the corresponding entry in the target subtree already exists and is also a directory, it does nothing.

 * Otherwise, the entry is copied using `sourcePath.copyTo(destinationPath, *followLinksOption)`,

 * which doesn't copy attributes of the source entry and throws if the destination entry already exists.

 *

 * [followLinks] impacts only symbolic links in the source subtree and

 * determines whether to copy a symbolic link itself or the entry it points to.

 * Symbolic links in the target subtree are not followed, i.e.,

 * no entry is copied to the location a symbolic link points to.

 * If a copy destination is a symbolic link, an exception is thrown.

 * Note that symbolic links on the way to the roots of the source and target subtrees are always followed.

 *

 * If a custom implementation of [copyAction] is provided, consider making it consistent with [followLinks] value.

 * See [CopyActionResult] for available options.

 *

 * If [copyAction] throws an exception, it is passed to [onError] for handling.

 *

 * @param target the destination path to copy recursively this entry to.

 * @param onError the function that determines further actions if an error occurs. By default, rethrows the exception.

 * @param followLinks `false` to copy a symbolic link itself, not its target.

 *   `true` to recursively copy the target of a symbolic link.

 * @param copyAction the function to call for copying source entries to their destination path rooted in [target].

 *   By default, performs ""directory merge"" operation.

 * @throws NoSuchFileException if the entry located by this path does not exist.

 * @throws FileSystemException if [target] is an entry inside the source subtree.

 * @throws IOException if any errors occur while copying.

 *   This exception is passed to [onError] for handling.

 * @throws FileSystemException if the source subtree contains an entry with an illegal name such as ""."" or "".."".

 *   This exception is passed to [onError] for handling.

 * @throws FileSystemLoopException if the recursive copy reaches a cycle.

 *   This exception is passed to [onError] for handling.

 * @throws SecurityException if a security manager is installed and access is not permitted to an entry in the source or target subtree.

 *   This exception is passed to [onError] for handling.

 */",f17471:m199
10443,override fun isSatisfied(),direction != Direction.NONE,"/**

   * Answer true if this constraint is satisfied in the current solution.

   */",f3476:m661
58812,"public fun <T, K> Sequence<T>.distinctBy(selector: (T) -> K): Sequence<T>","{
    return DistinctSequence(this, selector)
}","/**

 * Returns a sequence containing only elements from the given sequence

 * having distinct keys returned by the given [selector] function.

 * 

 * Among elements of the given sequence with equal keys, only the first one will be present in the resulting sequence.

 * The elements in the resulting sequence are in the same order as they were in the source sequence.

 *

 * The operation is _intermediate_ and _stateful_.

 * 

 * @sample samples.collections.Collections.Transformations.distinctAndDistinctBy

 */",f17096:m2375
59014,public inline fun CharSequence.forEach(action: (Char) -> Unit): Unit,"{
    for (element in this) action(element)
}","/**

 * Performs the given [action] on each character.

 */",f17097:m2349
13576,public operator fun rangeTo(other: Short): IntRange,"IntRange(this.toInt(), other.toInt())",/** Creates a range from this value to the specified [other] value. */,f3686:m1477
37696,internal fun ClassDescriptor.isHiddenFromObjC(): Boolean,"when {
    (this.containingDeclaration as? ClassDescriptor)?.isHiddenFromObjC() == true -> true
    else -> annotations.any { annotation -> annotation.annotationClass?.annotations?.any { it.fqName == KonanFqNames.hidesFromObjC } == true }
}","/**

 * Check if the given class or its enclosing declaration is marked as @HiddenFromObjC.

 */",f11831:m227
58045,@kotlin.internal.InlineOnly public inline fun floorDiv(other: UInt): UInt,this.toUInt().floorDiv(other),"/**

     * Divides this value by the other value, flooring the result to an integer that is closer to negative infinity.

     *

     * For unsigned types, the results of flooring division and truncating division are the same.

     */",f17058:m337
59038,"@SinceKotlin(""1.4"") @OptIn(kotlin.experimental.ExperimentalTypeInference::class) @OverloadResolutionByLambdaReturnType @kotlin.internal.InlineOnly public inline fun <R: Comparable<R>> CharSequence.minOfOrNull(selector: (Char) -> R): R?","{
    if (isEmpty()) return null
    var minValue = selector(this[0])
    for (i in 1 .. lastIndex) {
        val v = selector(this[i])
        if (minValue > v) {
            minValue = v
        }
    }
    return minValue
}","/**

 * Returns the smallest value among all values produced by [selector] function

 * applied to each character in the char sequence or `null` if there are no characters.

 */",f17097:m3295
69365,fun MemberDescriptor.isEffectivelyInlineOnly(): Boolean,isInlineWithReified() || isInlineOnlyPrivateInBytecode(),"/**

 * @return true if it's impossible to observe a call instruction referencing this member in the bytecode.

 */",f19490:m33
52538,internal actual fun <T> Array<out T>.copyToArrayOfAny(isVarargs: Boolean): Array<out Any?>,if (isVarargs) this else this.copyOfUninitializedElements(this.size),/** Copies typed varargs array to an array of objects */,f16542:m23
49558,internal inline fun <T> CompositeMetadataArtifact.read(action: (artifactContent: CompositeMetadataArtifactContent) -> T): T,"{
    return open().use(action)
}","/**

 * Safe shortcut function for opening and reading the content of this artifact.

 * The [CompositeMetadataArtifactContent] will be closed after the [action] executed.

 */",f15882:m61
58154,@kotlin.internal.InlineOnly public inline operator fun times(other: UShort): UInt,this.times(other.toUInt()),/** Multiplies this value by the other value. */,f17063:m205
16417,"private inline fun FirFile.forEachElementWithContainers(crossinline saveDeclaration: (element: FirElement, owners: List<FirBasedSymbol<*>>) -> Unit)","{
    val declarationsCollector = object : FirVisitor<Unit, PersistentList<FirBasedSymbol<*>>>() {
        override fun visitElement(element: FirElement, data: PersistentList<FirBasedSymbol<*>>) {
            if (element is FirDeclaration) {
                saveDeclaration(element, data)
            }
            element.acceptChildren(visitor = this, data = if (element is FirDeclaration) data.add(element.symbol) else data)
        }
    }
    accept(declarationsCollector, persistentListOf())
}","/**

 * Walks over every [FirElement] in [this] file and invokes [saveDeclaration] on it, passing each element and the list of its containing

 * declarations (like file, classes, functions/properties and so on).

 */",f4113:m435
58594,"@kotlin.jvm.JvmName(""intRangeContains"") public operator fun ClosedRange<Int>.contains(value: Byte): Boolean","{
    return contains(value.toInt())
}","/**

 * Checks if the specified [value] belongs to this range.

 */",f17092:m631
64205,@kotlin.internal.IntrinsicConstEvaluation public override fun toFloat(): Float,wasm_f32_convert_i32_s(this),"/**

     * Converts this [Int] value to [Float].

     *

     * The resulting value is the closest `Float` to this `Int` value.

     * In case when this `Int` value is exactly between two `Float`s,

     * the one with zero at least significant bit of mantissa is selected.

     */",f17455:m2673
56048,"public fun <K, V, M: MutableMap<in K, in V>> Sequence<Pair<K, V>>.toMap(destination: M): M",destination.apply { putAll(this@toMap) },"/**

 * Populates and returns the [destination] mutable map with key-value pairs from the given sequence of pairs.

 */",f16823:m1223
64462,"@SinceKotlin(""1.5"") @WasExperimental(ExperimentalPathApi::class) @Throws(IOException::class) @kotlin.internal.InlineOnly public inline fun Path.appendLines(lines: Iterable<CharSequence>, charset: Charset = Charsets.UTF_8): Path","{
    return Files.write(this, lines, charset, StandardOpenOption.APPEND)
}","/**

 * Appends the specified collection of char sequences [lines] to a file terminating each one with the platform's line separator.

 *

 * @param charset character set to use for writing text, UTF-8 by default.

 */",f17469:m637
54661,"@SinceKotlin(""1.4"") public actual fun <T> Array<out T>?.contentDeepHashCode(): Int","{
    return contentDeepHashCodeInternal()
}","/**

 * Returns a hash code based on the contents of this array as if it is [List].

 * Nested arrays are treated as lists too.

 * 

 * If any of arrays contains itself on any nesting level the behavior is undefined.

 */",f16713:m485
24979,fun onChange(callback: () -> Unit): () -> Unit,"{
    var previousScheme = toScheme()
    return bindings.onChange {
        val newScheme = toScheme()
        if (newScheme != previousScheme) {
            callback()
            previousScheme = newScheme
        }
    }
}","/**

     * Call [callback] whenever the lazy changes.

     */",f9238:m157
54801,"@SinceKotlin(""1.1"") @kotlin.internal.InlineOnly public actual inline fun maxOf(a: Int, b: Int): Int","{
    return JsMath.max(a, b)
}","/**

 * Returns the greater of two values.

 */",f16714:m85
58657,public infix fun Long.downTo(to: Short): LongProgression,"{
    return LongProgression.fromClosedRange(this, to.toLong(), -1L)
}","/**

 * Returns a progression from this value down to the specified [to] value with the step -1.

 * 

 * The [to] value should be less than or equal to `this` value.

 * If the [to] value is greater than `this` value the returned progression is empty.

 */",f17092:m1811
23519,"@OptIn(ObsoleteDescriptorBasedAPI::class) fun IrProperty.analyzeIfFromAnotherModule(): Pair<Boolean, Boolean>","{
    return if (descriptor is DeserializedPropertyDescriptor) {
        val hasDefault = descriptor.declaresDefaultValue()
        hasDefault to (descriptor.backingField != null || hasDefault)
    } else if (this is Fir2IrLazyProperty) {
        val hasBackingField = fir.symbol.registeredInSerializationPluginMetadataExtension
        val matchingPrimaryConstructorParam = containingClass?.declarations?.filterIsInstance<FirPrimaryConstructor>()?.singleOrNull()?.valueParameters?.find { it.name == this.name }
        if (matchingPrimaryConstructorParam != null) {
            (matchingPrimaryConstructorParam.defaultValue != null) to hasBackingField
        } else {
            (fir.getter is FirDefaultPropertyGetter) to hasBackingField
        }
    } else {
        false to false
    }
}","/**

 * This function checks if a deserialized property declares default value and has backing field.

 *

 * Returns (declaresDefaultValue, hasBackingField) boolean pair. Returns (false, false) for properties from current module.

 */",f8985:m95
57254,"@SinceKotlin(""1.4"") @JvmName(""contentDeepEqualsNullable"") @kotlin.internal.InlineOnly public actual inline infix fun <T> Array<out T>?.contentDeepEquals(other: Array<out T>?): Boolean","{
    if (kotlin.internal.apiVersionIsAtLeast(1, 3, 0)) return contentDeepEqualsImpl(other) else return java.util.Arrays.deepEquals(this, other)
}","/**

 * Checks if the two specified arrays are *deeply* equal to one another.

 * 

 * Two arrays are considered deeply equal if they have the same size, and elements at corresponding indices are deeply equal.

 * That is, if two corresponding elements are nested arrays, they are also compared deeply.

 * Elements of other types are compared for equality using the [equals][Any.equals] function.

 * For floating point numbers, this means `NaN` is equal to itself and `-0.0` is not equal to `0.0`.

 * 

 * The arrays are also considered deeply equal if both are `null`.

 * 

 * If any of the arrays contain themselves at any nesting level, the behavior is undefined.

 * 

 * @param other the array to compare deeply with this array.

 * @return `true` if the two arrays are deeply equal, `false` otherwise.

 * 

 * @sample samples.collections.Arrays.ContentOperations.contentDeepEquals

 */",f16970:m939
52878,"@SinceKotlin(""1.6"") @WasExperimental(ExperimentalStdlibApi::class) public actual fun Int.rotateRight(bitCount: Int): Int",shl(Int.SIZE_BITS - bitCount) or ushr(bitCount),"/**

 * Rotates the binary representation of this [Int] number right by the specified [bitCount] number of bits.

 * The least significant bits pushed out from the right side reenter the number as the most significant bits on the left side.

 *

 * Rotating the number right by a negative bit count is the same as rotating it left by the negated bit count:

 * `number.rotateRight(-n) == number.rotateLeft(n)`

 *

 * Rotating by a multiple of [Int.SIZE_BITS] (32) returns the same number, or more generally

 * `number.rotateRight(n) == number.rotateRight(n % 32)`

 */",f16581:m321
57380,"@Suppress(""ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS"") public actual fun IntArray.sort(fromIndex: Int = 0, toIndex: Int = size): Unit","{
    java.util.Arrays.sort(this, fromIndex, toIndex)
}","/**

 * Sorts a range in the array in-place.

 * 

 * @param fromIndex the start of the range (inclusive) to sort, 0 by default.

 * @param toIndex the end of the range (exclusive) to sort, size of this array by default.

 * 

 * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.

 * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].

 * 

 * @sample samples.collections.Arrays.Sorting.sortRangeOfArray

 */",f16970:m4277
51034,private fun stdlibCommonMainDependency(kotlin: KotlinMultiplatformExtension),"binaryCoordinates(""org.jetbrains.kotlin:kotlin-stdlib:commonMain:${kotlin.coreLibrariesVersion}"")","/**

     * Refers to the 'commonMain' source set of the kotlin stdlib

     */",f16237:m577
15398,@Test fun maxII(),"{
    assertEquals(""Incorrect int max value"", 19088976, max(-19088976, 19088976))
    assertEquals(""Incorrect int max value"", 19088976, max(20, 19088976))
    assertEquals(""Incorrect int max value"", -20, max(-20, -19088976))
}","/**

     * Tests kotlin.math.max(int, int)

     */",f3868:m935
20122,"public fun substitutions(substitutions: Map<KtTypeParameterSymbol, KtType>)","{
    assertIsValidAndAccessible()
    _mapping += substitutions
}","/**

     * Adds a new substitutions to the substitutor which is being built.

     * If there already was a substitution with a [KtTypeParameterSymbol] which is present in a [substitutions],

     * replaces corresponding substitution with a new one.

     */",f5774:m107
63485,"@SinceKotlin(""1.3"") @Suppress(""ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS"") public actual fun IntArray.copyInto(destination: IntArray, destinationOffset: Int = 0, startIndex: Int = 0, endIndex: Int = size): IntArray","{
    AbstractList.checkRangeIndexes(startIndex, endIndex, this.size)
    val rangeSize = endIndex - startIndex
    AbstractList.checkRangeIndexes(destinationOffset, destinationOffset + rangeSize, destination.size)
    kotlin.wasm.internal.copyWasmArray(this.storage, destination.storage, startIndex, destinationOffset, rangeSize)
    return destination
}","/**

 * Copies this array or its subrange into the [destination] array and returns that array.

 * 

 * It's allowed to pass the same array in the [destination] and even specify the subrange so that it overlaps with the destination range.

 * 

 * @param destination the array to copy to.

 * @param destinationOffset the position in the [destination] array to copy to, 0 by default.

 * @param startIndex the beginning (inclusive) of the subrange to copy, 0 by default.

 * @param endIndex the end (exclusive) of the subrange to copy, size of this array by default.

 * 

 * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of this array indices or when `startIndex > endIndex`.

 * @throws IndexOutOfBoundsException when the subrange doesn't fit into the [destination] array starting at the specified [destinationOffset],

 * or when that index is out of the [destination] array indices range.

 * 

 * @return the [destination] array.

 */",f17396:m2353
20111,public fun KtSymbol.getContainingSymbol(): KtDeclarationSymbol?,withValidityAssertion { analysisSession.containingDeclarationProvider.getContainingDeclaration(this) },"/**

     * Returns containing declaration for symbol:

     *   for top-level declarations returns null

     *   for class members returns containing class

     *   for local declaration returns declaration it was declared it

     */",f5772:m51
55915,"@SinceKotlin(""1.4"") public fun <T: Any> setOfNotNull(element: T?): Set<T>",if (element != null) setOf(element) else emptySet(),"/**

 * Returns a new read-only set either with single given element, if it is not null, or empty set if the element is null.

 * The returned set is serializable (JVM).

 * @sample samples.collections.Collections.Sets.setOfNotNull

 */",f16817:m205
56874,"@SinceKotlin(""1.4"") @kotlin.internal.InlineOnly public actual inline fun Long.takeLowestOneBit(): Long",java.lang.Long.lowestOneBit(this),"/**

 * Returns a number having a single bit set in the position of the least significant set bit of this [Long] number,

 * or zero, if this number is zero.

 */",f16929:m389
58891,public operator fun <T> Sequence<T>.plus(elements: Iterable<T>): Sequence<T>,"{
    return sequenceOf(this, elements.asSequence()).flatten()
}","/**

 * Returns a sequence containing all elements of original sequence and then all elements of the given [elements] collection.

 * 

 * Note that the source sequence and the collection being added are iterated only when an `iterator` is requested from

 * the resulting sequence. Changing any of them between successive calls to `iterator` may affect the result.

 *

 * The operation is _intermediate_ and _stateless_.

 */",f17096:m5479
54720,"public actual fun ShortArray.copyOfRange(fromIndex: Int, toIndex: Int): ShortArray","{
    AbstractList.checkRangeIndexes(fromIndex, toIndex, size)
    return this.asDynamic().slice(fromIndex, toIndex)
}","/**

 * Returns a new array which is a copy of the specified range of the original array.

 * 

 * @param fromIndex the start of the range (inclusive) to copy.

 * @param toIndex the end of the range (exclusive) to copy.

 * 

 * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.

 * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].

 */",f16713:m2129
58102,@kotlin.internal.InlineOnly public inline fun mod(other: UByte): UByte,this.toUInt().mod(other.toUInt()).toUByte(),"/**

     * Calculates the remainder of flooring division of this value (dividend) by the other value (divisor).

     *

     * The result is always less than the divisor.

     *

     * For unsigned types, the remainders of flooring division and truncating division are the same.

     */",f17059:m367
49768,@ExternalKotlinTargetApi fun DecoratedExternalKotlinTarget.publishSources(compilation: DecoratedExternalKotlinCompilation),"{
    publishSources(sourcesJarTask(compilation))
}","/**

 * Publishes the sources associated with the given [compilation] in this targets' publication.

 * Will register the corresponding [sourcesJarTask] if necessary.

 *

 * @since 1.9.20

 */",f15951:m137
58931,public fun CharSequence.last(): Char,"{
    if (isEmpty()) throw NoSuchElementException(""Char sequence is empty."")
    return this[lastIndex]
}","/**

 * Returns the last character.

 * 

 * @throws NoSuchElementException if the char sequence is empty.

 * 

 * @sample samples.text.Strings.last

 */",f17097:m355
57474,"@SinceKotlin(""1.4"") @OptIn(kotlin.experimental.ExperimentalTypeInference::class) @OverloadResolutionByLambdaReturnType @kotlin.jvm.JvmName(""sumOfBigInteger"") @kotlin.internal.InlineOnly public inline fun IntArray.sumOf(selector: (Int) -> java.math.BigInteger): java.math.BigInteger","{
    var sum: java.math.BigInteger = 0.toBigInteger()
    for (element in this) {
        sum += selector(element)
    }
    return sum
}","/**

 * Returns the sum of all values produced by [selector] function applied to each element in the array.

 */",f16970:m6017
14951,"@SinceKotlin(""1.3"") @Suppress(""ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS"") public actual fun BooleanArray.fill(element: Boolean, fromIndex: Int = 0, toIndex: Int = size): Unit","{
    arrayFill(this, fromIndex, toIndex, element)
}","/**

 * Fills this array or its subrange with the specified [element] value.

 * 

 * @param fromIndex the start of the range (inclusive) to fill, 0 by default.

 * @param toIndex the end of the range (exclusive) to fill, size of this array by default.

 * 

 * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.

 * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].

 */",f3831:m3921
58079,@kotlin.internal.InlineOnly public inline operator fun plus(other: UShort): UInt,this.toUInt().plus(other.toUInt()),/** Adds the other value to this value. */,f17059:m153
52891,public fun Json.add(other: Json): Json,"{
    val keys: Array<String> = js(""Object"").keys(other)
    for (key in keys) {
        if (other.asDynamic().hasOwnProperty(key)) {
            this[key] = other[key]
        }
    }
    return this
}","/**

 * Adds key-value pairs from [other] to [this].

 * Returns the original receiver.

 */",f16586:m125
16177,internal fun FirDeclaration.forEachDeclarationWhichCanHavePostponedSymbols(action: (FirCallableDeclaration) -> Unit),"{
    when (this) {
        is FirCallableDeclaration -> action(this)
        else -> { }
    }
}","/**

 * Invoke [action] on each callable declaration that can have postponed symbols

 *

 * @see postponedSymbolsForAnnotationResolution

 */",f4076:m125
43530,fun Path.addKotlinBlock(str: String),"appendLine(str.wrapIntoBlock(""kotlin""))","/**

 * Wraps the given string into a Kotlin block and adds this block to the end of the [this] path.

 *

 * @param str The code to be wrapped with the Cocoapods block.

 */",f13455:m171
25374,@Test fun testCrossModule_ComposableInterfaceFunctionWithInlineClasses(),"{
    compile(mapOf(""library module"" to mapOf(""x/Library.kt"" to """"""
    
                        package x
    
    
    
                        import androidx.compose.runtime.Composable
    
    
    
                        inline class InlineClass(val value: Float)
    
    
    
                        interface Foo {
    
                            @Composable
    
                            fun apply(value: InlineClass)
    
                        }
    
                        """""".trimIndent()), ""Main"" to mapOf(""y/Impl.kt"" to """"""
    
                        package y
    
    
    
                        import androidx.compose.runtime.Composable
    
                        import x.Foo
    
                        import x.InlineClass
    
    
    
                        object Bar : Foo {
    
                            @Composable
    
                            override fun apply(value: InlineClass) {}
    
                        }
    
                        """""".trimIndent())))
}","/**

     * Test for b/169071070

     */",f9257:m1809
63468,"@Deprecated(""Use Kotlin compiler 1.4 to avoid deprecation warning."") @SinceKotlin(""1.1"") @DeprecatedSinceKotlin(hiddenSince = ""1.4"") public fun LongArray.contentToString(): String","{
    return this.contentToString()
}","/**

 * Returns a string representation of the contents of the specified array as if it is [List].

 * 

 * @sample samples.collections.Arrays.ContentOperations.contentToString

 */",f17396:m1897
54752,public actual operator fun BooleanArray.plus(elements: Collection<Boolean>): BooleanArray,"{
    return arrayPlusCollection(this, elements)
}","/**

 * Returns an array containing all elements of the original array and then all elements of the given [elements] collection.

 */",f16713:m2889
58976,"public inline fun <K, V> CharSequence.associateBy(keySelector: (Char) -> K, valueTransform: (Char) -> V): Map<K, V>","{
    val capacity = mapCapacity(length).coerceAtLeast(16)
    return associateByTo(LinkedHashMap<K, V>(capacity), keySelector, valueTransform)
}","/**

 * Returns a [Map] containing the values provided by [valueTransform] and indexed by [keySelector] functions applied to characters of the given char sequence.

 * 

 * If any two characters would have the same key returned by [keySelector] the last one gets added to the map.

 * 

 * The returned map preserves the entry iteration order of the original char sequence.

 * 

 * @sample samples.text.Strings.associateByWithValueTransform

 */",f17097:m1399
63417,public actual fun LongArray.asList(): List<Long>,"{
    return object : AbstractList<Long>(), RandomAccess {
        override val size: Int get() = this@asList.size
    
        override fun isEmpty(): Boolean = this@asList.isEmpty()
    
        override fun contains(element: Long): Boolean = this@asList.contains(element)
    
        override fun get(index: Int): Long = this@asList[index]
    
        override fun indexOf(element: Long): Int = this@asList.indexOf(element)
    
        override fun lastIndexOf(element: Long): Int = this@asList.lastIndexOf(element)
    }
}","/**

 * Returns a [List] that wraps the original array.

 */",f17396:m323
14941,internal fun DoubleArray.copyOfUninitializedElements(newSize: Int): DoubleArray,"{
    return copyOfUninitializedElements(0, newSize)
}","/**

 * Returns new array which is a copy of the original array with new elements filled with **lateinit** _uninitialized_ values.

 * Attempts to read _uninitialized_ values from this array work in implementation-dependent manner,

 * either throwing exception or returning some kind of implementation-specific default value.

 */",f3831:m3657
58788,public fun <T> Sequence<T>.toSet(): Set<T>,"{
    val it = iterator()
    if (!it.hasNext()) return emptySet()
    val element = it.next()
    if (!it.hasNext()) return setOf(element)
    val dst = LinkedHashSet<T>()
    dst.add(element)
    while (it.hasNext()) dst.add(it.next())
    return dst
}","/**

 * Returns a [Set] of all elements.

 * 

 * The returned set preserves the element iteration order of the original sequence.

 *

 * The operation is _terminal_.

 */",f17096:m1665
14923,"public actual fun DoubleArray.copyOfRange(fromIndex: Int, toIndex: Int): DoubleArray","{
    checkCopyOfRangeArguments(fromIndex, toIndex, size)
    return copyOfUninitializedElements(fromIndex, toIndex)
}","/**

 * Returns a new array which is a copy of the specified range of the original array.

 * 

 * @param fromIndex the start of the range (inclusive) to copy.

 * @param toIndex the end of the range (exclusive) to copy.

 * 

 * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.

 * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].

 */",f3831:m3177
64090,@kotlin.internal.IntrinsicConstEvaluation public inline operator fun compareTo(other: Float): Int,this.toFloat().compareTo(other),"/**

     * Compares this value with the specified value for order.

     * Returns zero if this value is equal to the specified other value, a negative number if it's less than other,

     * or a positive number if it's greater than other.

     */",f17455:m1021
57358,public actual operator fun <T> Array<T>.plus(elements: Array<out T>): Array<T>,"{
    val thisSize = size
    val arraySize = elements.size
    val result = java.util.Arrays.copyOf(this, thisSize + arraySize)
    System.arraycopy(elements, 0, result, thisSize, arraySize)
    return result
}","/**

 * Returns an array containing all elements of the original array and then all elements of the given [elements] array.

 */",f16970:m3787
58068,@kotlin.internal.InlineOnly public inline fun toDouble(): Double,uintToDouble(this.toInt()),"/**

     * Converts this [UShort] value to [Double].

     *

     * The resulting `Double` value represents the same numerical value as this `UShort`.

     */",f17058:m693
20152,public fun commonSuperType(types: Collection<KtType>): KtType?,withValidityAssertion { analysisSession.typeProvider.commonSuperType(types) },"/**

     * Computes the common super type of the given collection of [KtType].

     *

     * If the collection is empty, it returns `null`.

     */",f5780:m177
56483,@kotlin.internal.InlineOnly public actual inline fun String.toInt(): Int,java.lang.Integer.parseInt(this),"/**

 * Parses the string as an [Int] number and returns the result.

 * @throws NumberFormatException if the string is not a valid representation of a number.

 */",f16885:m179
56055,"public operator fun <K, V> Map<out K, V>.plus(pairs: Sequence<Pair<K, V>>): Map<K, V>",LinkedHashMap(this).apply { putAll(pairs) }.optimizeReadOnlyMap(),"/**

 * Creates a new read-only map by replacing or adding entries to this map from a given sequence of key-value [pairs].

 *

 * The returned map preserves the entry iteration order of the original map.

 * Those [pairs] with unique keys are iterated in the end in the order of [pairs] sequence.

 */",f16823:m1343
57238,public actual fun IntArray.asList(): List<Int>,"{
    return object : AbstractList<Int>(), RandomAccess {
        override val size: Int get() = this@asList.size
    
        override fun isEmpty(): Boolean = this@asList.isEmpty()
    
        override fun contains(element: Int): Boolean = this@asList.contains(element)
    
        override fun get(index: Int): Int = this@asList[index]
    
        override fun indexOf(element: Int): Int = this@asList.indexOf(element)
    
        override fun lastIndexOf(element: Int): Int = this@asList.lastIndexOf(element)
    }
}","/**

 * Returns a [List] that wraps the original array.

 */",f16970:m327
30904,inline fun <T> Collection<T>.memoryOptimizedFilterNot(predicate: (T) -> Boolean): List<T>,"{
    return filterNotTo(ArrayList(), predicate).compactIfPossible()
}","/**

 * A memory-optimized version of [Iterable.filterNot].

 * @see Iterable.filterNot

 */",f10791:m101
58711,"public fun <T: Comparable<T>> T.coerceIn(minimumValue: T?, maximumValue: T?): T","{
    if (minimumValue !== null && maximumValue !== null) {
        if (minimumValue > maximumValue) throw IllegalArgumentException(""Cannot coerce value to an empty range: maximum $maximumValue is less than minimum $minimumValue."")
        if (this < minimumValue) return minimumValue
        if (this > maximumValue) return maximumValue
    } else {
        if (minimumValue !== null && this < minimumValue) return minimumValue
        if (maximumValue !== null && this > maximumValue) return maximumValue
    }
    return this
}","/**

 * Ensures that this value lies in the specified range [minimumValue]..[maximumValue].

 * 

 * @return this value if it's in the range, or [minimumValue] if this value is less than [minimumValue], or [maximumValue] if this value is greater than [maximumValue].

 * 

 * @sample samples.comparisons.ComparableOps.coerceInComparable

 */",f17092:m2715
58288,"@SinceKotlin(""1.5"") @WasExperimental(ExperimentalUnsignedTypes::class) public fun String.toUInt(radix: Int): UInt",toUIntOrNull(radix) ?: numberFormatError(this),"/**

 * Parses the string as an [UInt] number and returns the result.

 * @throws NumberFormatException if the string is not a valid representation of a number.

 * @throws IllegalArgumentException when [radix] is not a valid radix for string to number conversion.

 */",f17067:m187
53046,public inline fun RegExpMatch.asArray(): Array<out String?>,unsafeCast<Array<out String?>>(),"/**

 * Converts the result of [RegExp.exec] to an array where the first element contains the entire matched text and each subsequent

 * element is the text matched by each capturing parenthesis.

 */",f16608:m107
58558,"@SinceKotlin(""1.5"") @WasExperimental(ExperimentalUnsignedTypes::class) public fun ULong.coerceIn(minimumValue: ULong, maximumValue: ULong): ULong","{
    if (minimumValue > maximumValue) throw IllegalArgumentException(""Cannot coerce value to an empty range: maximum $maximumValue is less than minimum $minimumValue."")
    if (this < minimumValue) return minimumValue
    if (this > maximumValue) return maximumValue
    return this
}","/**

 * Ensures that this value lies in the specified range [minimumValue]..[maximumValue].

 * 

 * @return this value if it's in the range, or [minimumValue] if this value is less than [minimumValue], or [maximumValue] if this value is greater than [maximumValue].

 * 

 * @sample samples.comparisons.ComparableOps.coerceInUnsigned

 */",f17090:m1077
63172,public actual fun <T> lazy(initializer: () -> T): Lazy<T>,UnsafeLazyImpl(initializer),"/**

 * Creates a new instance of the [Lazy] that uses the specified initialization function [initializer].

 */",f17312:m15
55641,"@ExperimentalStdlibApi @SinceKotlin(""1.9"") public fun ByteArray.toHexString(format: HexFormat = HexFormat.Default): String","toHexString(0, size, format)","/**

 * Formats bytes in this array using the specified [format].

 *

 * Note that only [HexFormat.upperCase] and [HexFormat.BytesHexFormat] affect formatting.

 *

 * @param format the [HexFormat] to use for formatting, [HexFormat.Default] by default.

 *

 * @throws IllegalArgumentException if the result length is more than [String] maximum capacity.

 */",f16779:m119
58155,@kotlin.internal.InlineOnly public inline operator fun times(other: UInt): UInt,UInt(this.data.times(other.data)),/** Multiplies this value by the other value. */,f17063:m211
23025,fun Project.reconfigureMainSourcesSetForGradlePlugin(commonSourceSet: SourceSet),"{
    sourceSets.named(SourceSet.MAIN_SOURCE_SET_NAME) {
        plugins.withType<JavaGradlePluginPlugin>().configureEach { configurations[apiConfigurationName].dependencies.remove(dependencies.gradleApi()) }
        dependencies {
            ""compileOnly""(kotlinStdlib())
            ""compileOnly""(""dev.gradleplugins:gradle-api:${GradlePluginVariant.GRADLE_MIN.gradleApiVersion}"")
            if (this@reconfigureMainSourcesSetForGradlePlugin.name !in testPlugins) {
                ""api""(project("":kotlin-gradle-plugin-api""))
            }
        }
        excludeGradleCommonDependencies(this)
        wireGradleVariantToCommonGradleVariant(this, commonSourceSet)
        if (configurations[""default""].attributes.contains(TargetJvmEnvironment.TARGET_JVM_ENVIRONMENT_ATTRIBUTE)) {
            configurations[""default""].attributes.attribute(TargetJvmEnvironment.TARGET_JVM_ENVIRONMENT_ATTRIBUTE, objects.named(TargetJvmEnvironment::class, ""no-op""))
        }
        plugins.withType<JavaLibraryPlugin>().configureEach {
            this@reconfigureMainSourcesSetForGradlePlugin.extensions.configure<JavaPluginExtension> {
                withSourcesJar()
                if (kotlinBuildProperties.publishGradlePluginsJavadoc) {
                    withJavadocJar()
                }
            }
            configurations.create(sourceSets.getByName(""main"").embeddedConfigurationName) {
                isCanBeConsumed = false
                isCanBeResolved = true
                attributes {
                    attribute(Usage.USAGE_ATTRIBUTE, objects.named(Usage.JAVA_RUNTIME))
                    attribute(LibraryElements.LIBRARY_ELEMENTS_ATTRIBUTE, objects.named(LibraryElements.JAR))
                }
            }
        }
        val javaComponent = project.components[""java""] as AdhocComponentWithVariants
        listOf(runtimeElementsConfigurationName, apiElementsConfigurationName).map { configurations[it] }.forEach { originalConfiguration -> configurations.create(""${originalConfiguration.name}$FIXED_CONFIGURATION_SUFFIX"") {
            isCanBeResolved = originalConfiguration.isCanBeResolved
            isCanBeConsumed = originalConfiguration.isCanBeConsumed
            isVisible = originalConfiguration.isVisible
            setExtendsFrom(originalConfiguration.extendsFrom)
            artifacts { originalConfiguration.artifacts.forEach { add(name, it) } }
            attributes {
                originalConfiguration.attributes.keySet().filter { it.name != KotlinPlatformType.attribute.name }.forEach { originalAttribute -> @Suppress(""UNCHECKED_CAST"") attribute(originalAttribute as Attribute<Any>, originalConfiguration.attributes.getAttribute(originalAttribute)!!) }
                plugins.withType<JavaPlugin> { tasks.named<JavaCompile>(compileJavaTaskName).get().apply { attribute(TargetJvmVersion.TARGET_JVM_VERSION_ATTRIBUTE, when (targetCompatibility) {
                    ""1.8"" -> 8
                    else -> targetCompatibility.toInt()
                }) } }
            }
            val expectedAttributes = setOf(Category.CATEGORY_ATTRIBUTE, Bundling.BUNDLING_ATTRIBUTE, Usage.USAGE_ATTRIBUTE, LibraryElements.LIBRARY_ELEMENTS_ATTRIBUTE, TargetJvmEnvironment.TARGET_JVM_ENVIRONMENT_ATTRIBUTE, TargetJvmVersion.TARGET_JVM_VERSION_ATTRIBUTE)
            if (attributes.keySet() != expectedAttributes) {
                error(""Wrong set of attributes:\n"" + ""  Expected: ${expectedAttributes.joinToString("", "")}\n"" + ""  Actual: ${attributes.keySet().joinToString("", "") { ""${it.name}=${attributes.getAttribute(it)}"" }}"")
            }
            javaComponent.addVariantsFromConfiguration(this) { mapToMavenScope(when (originalConfiguration.name) {
                runtimeElementsConfigurationName -> ""runtime""
                apiElementsConfigurationName -> ""compile""
                else -> error(""Unsupported configuration name"")
            }) }
            originalConfiguration.isCanBeConsumed = false
            originalConfiguration.isVisible = false
            javaComponent.withVariantsFromConfiguration(originalConfiguration) { skip() }
        } }
    }
    sourceSets.named(SourceSet.TEST_SOURCE_SET_NAME) {
        compileClasspath += commonSourceSet.output
        runtimeClasspath += commonSourceSet.output
    }
    (extensions.getByName(""kotlin"") as KotlinSingleJavaTargetExtension).target.compilations.run { getByName(SourceSet.TEST_SOURCE_SET_NAME).associateWith(getByName(commonSourceSet.name)) }
}","/**

 * 'main' sources are used for minimal supported Gradle versions (6.7) up to Gradle 7.0.

 */",f8830:m585
63289,internal fun getCanonicalClassInternal(ch: Int): Int,"{
    return getCanonicalClass(ch)
}",/** Gets canonical class for given codepoint from decomposition mappings table. */,f17362:m497
56053,"public operator fun <K, V> Map<out K, V>.plus(pairs: Iterable<Pair<K, V>>): Map<K, V>",if (this.isEmpty()) pairs.toMap() else LinkedHashMap(this).apply { putAll(pairs) },"/**

 * Creates a new read-only map by replacing or adding entries to this map from a given collection of key-value [pairs].

 *

 * The returned map preserves the entry iteration order of the original map.

 * Those [pairs] with unique keys are iterated in the end in the order of [pairs] collection.

 */",f16823:m1307
63585,"@SinceKotlin(""1.4"") @Suppress(""ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS"") public actual fun LongArray.sort(fromIndex: Int = 0, toIndex: Int = size): Unit","{
    AbstractList.checkRangeIndexes(fromIndex, toIndex, size)
    sortArray(this, fromIndex, toIndex)
}","/**

 * Sorts a range in the array in-place.

 * 

 * @param fromIndex the start of the range (inclusive) to sort, 0 by default.

 * @param toIndex the end of the range (exclusive) to sort, size of this array by default.

 * 

 * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.

 * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].

 * 

 * @sample samples.collections.Arrays.Sorting.sortRangeOfArray

 */",f17396:m4957
58839,"@SinceKotlin(""1.7"") @kotlin.jvm.JvmName(""maxWithOrThrow"") @Suppress(""CONFLICTING_OVERLOADS"") public fun <T> Sequence<T>.maxWith(comparator: Comparator<in T>): T","{
    val iterator = iterator()
    if (!iterator.hasNext()) throw NoSuchElementException()
    var max = iterator.next()
    while (iterator.hasNext()) {
        val e = iterator.next()
        if (comparator.compare(max, e) < 0) max = e
    }
    return max
}","/**

 * Returns the first element having the largest value according to the provided [comparator].

 *

 * The operation is _terminal_.

 * 

 * @throws NoSuchElementException if the sequence is empty.

 */",f17096:m3399
56252,"@SinceKotlin(""1.5"") @kotlin.internal.InlineOnly @kotlin.internal.IntrinsicConstEvaluation public inline fun Float.mod(other: Double): Double",this.toDouble().mod(other),"/**

 * Calculates the remainder of flooring division of this value (dividend) by the other value (divisor).

 *

 * The result is either zero or has the same sign as the _divisor_ and has the absolute value less than the absolute value of the divisor.

 *

 * If the result cannot be represented exactly, it is rounded to the nearest representable number. In this case the absolute value of the result can be less than or _equal to_ the absolute value of the divisor.

 */",f16842:m655
57399,public fun IntArray.toSortedSet(): java.util.SortedSet<Int>,"{
    return toCollection(java.util.TreeSet<Int>())
}","/**

 * Returns a new [SortedSet][java.util.SortedSet] of all elements.

 */",f16970:m4739
58764,public fun <T> Sequence<T>.filterNot(predicate: (T) -> Boolean): Sequence<T>,"{
    return FilteringSequence(this, false, predicate)
}","/**

 * Returns a sequence containing all elements not matching the given [predicate].

 *

 * The operation is _intermediate_ and _stateless_.

 * 

 * @sample samples.collections.Collections.Filtering.filter

 */",f17096:m983
24997,"private fun Bindings.unify(call: Node?, a: CallBindings, b: CallBindings): Boolean","{
    if (!unify(a.target, b.target)) {
        if (call != null) {
            val aName = a.target.safeToken
            val bName = b.target.safeToken
            errorReporter.reportCallError(call, aName, bName)
        }
        return false
    }
    val count = if (a.parameters.size != b.parameters.size) {
        if (call != null) errorReporter.log(call, ""Type disagreement $a <=> $b"")
        if (a.parameters.size > b.parameters.size) b.parameters.size else a.parameters.size
    } else a.parameters.size
    for (i in 0 until count) {
        val ap = a.parameters[i]
        val bp = b.parameters[i]
        if (!unify(null, ap, bp)) {
            if (call != null) {
                val aToken = ap.target.token
                val bToken = bp.target.token
                if (aToken != null && bToken != null) {
                    errorReporter.reportParameterError(call, i, bp.target.token!!, ap.target.token!!)
                } else unify(call, ap, bp)
            }
        }
    }
    val aResult = a.result
    val bResult = b.result
    if (aResult != null && bResult != null) {
        return unify(null, aResult, bResult)
    }
    return true
}","/**

     * Perform structural unification of two call bindings. All bindings that are in the same

     * structural place must unify or there is an error in the source. That is the targets are

     * unified and the parameter call bindings are unified recursively as well as the call

     * binding of the result. If [call] is `null` then the error is reported by the caller

     * instead. For example, failing to unify the parameters of a call binding should be

     * considered a failure to unify the entire binding not just the parameter.

     */",f9239:m451
50943,@Test fun `gradle entities should have correct names when default locale is turkish`(),"{
    fun withLocale(locale: Locale, code: () -> Unit) {
        val currentLocal = Locale.getDefault()
        try {
            Locale.setDefault(locale)
            code()
        } finally {
            Locale.setDefault(currentLocal)
        }
    }
    withLocale(Locale(""tr"", ""TR"")) {
        val project = buildProjectWithMPP { kotlin {
            jvm()
            js().nodejs()
            iosX64()
            iosArm64()
        } }
        project.evaluate()
        val gradleEntityNames: List<String> = with(project) { listOf(tasks.names, configurations.names, components.names, extensions.asMap.keys, kotlin.sourceSets.names, kotlin.targets.names, @Suppress(""DEPRECATION"") kotlin.presets.names).flatten() }
        val entityNamesWithTurkishI = gradleEntityNames.filter { it.contains('İ') || it.contains('ı') }
        assertTrue(entityNamesWithTurkishI.isEmpty(), ""Following entities should not have turkish 'İ' or 'ı' in their names:\n"" + entityNamesWithTurkishI.joinToString(""\n""))
    }
}","/**

     * This tests verifies only turkish letters 'İ' and 'ı' because only with turkish locale ASCII letters 'i' and 'I' are

     * capitalised/decapitalised to non-ascii letters.

     * It was discovered using code that iterates over all ascii chars and available JVM locales

     * and checks their capitalisation/decapitalisation behavior.

     */",f16197:m945
57396,public fun <T: Comparable<T>> Array<out T>.toSortedSet(): java.util.SortedSet<T>,"{
    return toCollection(java.util.TreeSet<T>())
}","/**

 * Returns a new [SortedSet][java.util.SortedSet] of all elements.

 */",f16970:m4697
36951,fun resolve(path: String): File,if (Paths.get(path).isAbsolute) File(path) else resolveRelative(path),"/**

     * If given [path] is relative, resolves it relative to dependecies directory.

     * In case of absolute path just wraps it into a [File].

     *

     * Support of both relative and absolute path kinds allows to substitute predefined

     * dependencies with system ones.

     *

     * TODO: It looks like DependencyProcessor have two split responsibilities:

     *  * Dependency resolving

     *  * Dependency downloading

     *  Also it is tightly tied to KonanProperties.

     */",f11666:m495
63427,"@SinceKotlin(""1.4"") public actual fun <T> Array<out T>?.contentDeepToString(): String","{
    return contentDeepToStringImpl()
}","/**

 * Returns a string representation of the contents of this array as if it is a [List].

 * Nested arrays are treated as lists too.

 * 

 * If any of arrays contains itself on any nesting level that reference

 * is rendered as `""[...]""` to prevent recursion.

 * 

 * @sample samples.collections.Arrays.ContentOperations.contentDeepToString

 */",f17396:m625
14028,"@SinceKotlin(""1.4"") @kotlin.internal.InlineOnly public actual inline fun StringBuilder.appendLine(value: Float): StringBuilder",append(value).appendLine(),"/** Appends [value] to this [StringBuilder], followed by a line feed character (`\n`). */",f3715:m59
63259,public actual fun String.toFloat(): Float,wasm_f32_demote_f64(toDouble()),"/**

 * Parses the string as a [Float] number and returns the result.

 * @throws NumberFormatException if the string is not a valid representation of a number.

 */",f17352:m149
57180,"@SinceKotlin(""1.4"") public actual fun minOf(a: Double, vararg other: Double): Double","{
    var min = a
    for (e in other) min = minOf(min, e)
    return min
}","/**

 * Returns the smaller of the given values.

 * 

 * If any value is `NaN`, returns `NaN`.

 */",f16966:m857
17449,"protected open fun doTestByMainModuleAndOptionalMainFile(mainFile: KtFile?, mainModule: KtTestModule, testServices: TestServices)","{
    doTestByMainFile(mainFile ?: error(""The main file is not found""), mainModule, testServices)
}","/**

     * Consider implementing this method if you have logic around [KtTestModule], or you don't always have a [mainFile] and have some custom

     * logic for such exceptional cases (e.g., taking the first file from [mainModule]).

     *

     * Examples of use cases:

     *

     * - Find all declarations in the module

     * - Find a declaration by qualified name and invoke some logic

     * - Process all files in the module

     *

     * Only one [KtTestModule] can be the main one.

     *

     * The main module is selected based on the following rules:

     *

     * - It is the only module

     * - It has a main file (see [doTestByMainFile] for details)

     * - The module has a defined [AnalysisApiTestDirectives.MAIN_MODULE] directive

     * - The module name is equal to [ModuleStructureExtractor.DEFAULT_MODULE_NAME]

     *

     * Use [doTestByMainModuleAndOptionalMainFile] only if [doTestByMainFile] is not suitable for your use case.

     *

     * @param mainFile a dedicated main file if it exists (see [findMainFile])

     *

     * @see findMainModule

     * @see isMainModule

     * @see AnalysisApiTestDirectives.MAIN_MODULE

     */",f5235:m201
14835,"@SinceKotlin(""1.4"") public actual fun <T> Array<out T>?.contentDeepToString(): String","{
    return contentDeepToStringImpl()
}","/**

 * Returns a string representation of the contents of this array as if it is a [List].

 * Nested arrays are treated as lists too.

 * 

 * If any of arrays contains itself on any nesting level that reference

 * is rendered as `""[...]""` to prevent recursion.

 * 

 * @sample samples.collections.Arrays.ContentOperations.contentDeepToString

 */",f3831:m625
57167,"@SinceKotlin(""1.1"") public actual fun <T: Comparable<T>> minOf(a: T, b: T, c: T): T","{
    return minOf(a, minOf(b, c))
}","/**

 * Returns the smaller of three values.

 * 

 * If there are multiple equal minimal values, returns the first of them.

 */",f16966:m593
48110,"internal inline fun <reified T: Task> Project.locateOrRegisterTask(name: String, noinline body: (T) -> (Unit)): TaskProvider<T>","{
    return project.locateTask(name) ?: project.registerTask(name, T::class.java, body = body)
}","/**

 * Locates a task by [name] and [type], without triggering its creation or configuration or registers new task

 * with [name], type [T] and initialization script [body]

 */",f15539:m151
54680,"@SinceKotlin(""1.4"") public actual fun BooleanArray?.contentHashCode(): Int","{
    return contentHashCodeInternal()
}","/**

 * Returns a hash code based on the contents of this array as if it is [List].

 */",f16713:m999
57031,"@kotlin.internal.InlineOnly public inline fun ByteArray.inputStream(offset: Int, length: Int): ByteArrayInputStream","ByteArrayInputStream(this, offset, length)","/**

 * Creates an input stream for reading data from the specified portion of this byte array.

 * @param offset the start offset of the portion of the array to read.

 * @param length the length of the portion of the array to read.

 */",f16952:m115
63598,public actual fun CharArray.toTypedArray(): Array<Char>,"{
    return Array(size) { index -> this[index] }
}","/**

 * Returns a *typed* object array containing all of the elements of this primitive array.

 */",f17396:m5251
58781,"public inline fun <T, K, V, M: MutableMap<in K, in V>> Sequence<T>.associateTo(destination: M, transform: (T) -> Pair<K, V>): M","{
    for (element in this) {
        destination += transform(element)
    }
    return destination
}","/**

 * Populates and returns the [destination] mutable map with key-value pairs

 * provided by [transform] function applied to each element of the given sequence.

 * 

 * If any of two pairs would have the same key the last one gets added to the map.

 *

 * The operation is _terminal_.

 * 

 * @sample samples.collections.Collections.Transformations.associateTo

 */",f17096:m1463
63513,"public actual fun LongArray.copyOfRange(fromIndex: Int, toIndex: Int): LongArray","{
    checkCopyOfRangeArguments(fromIndex, toIndex, size)
    return copyOfUninitializedElements(fromIndex, toIndex)
}","/**

 * Returns a new array which is a copy of the specified range of the original array.

 * 

 * @param fromIndex the start of the range (inclusive) to copy.

 * @param toIndex the end of the range (exclusive) to copy.

 * 

 * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.

 * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].

 */",f17396:m3173
11971,private fun isStatic(function: Function<*>): Boolean,"{
    try {
        with(function.javaClass.getDeclaredField(""INSTANCE"")) {
            if (!java.lang.reflect.Modifier.isStatic(modifiers) || !java.lang.reflect.Modifier.isFinal(modifiers)) {
                return false
            }
            isAccessible = true
            return get(null) == function
        }
    } catch (e: NoSuchFieldException) {
        return false
    }
}","/**

 * Returns `true` if given function is *static* as defined in [staticCFunction].

 */",f3613:m451
34356,"override fun testSuite(testSuite: XCTestSuite, didRecordIssue: XCTIssue)","{
    logger.log(""TestSuite ${testSuite.name} recorded issue: ${didRecordIssue.compactDescription}"")
}","/**

     * Test suite failure notification.

     *

     * Logs the failure of the test suite execution.

     */",f11292:m183
58602,@kotlin.internal.InlineOnly public inline operator fun IntRange.contains(value: Byte): Boolean,"{
    return (this as ClosedRange<Int>).contains(value)
}","/**

 * Checks if the specified [value] belongs to this range.

 */",f17092:m779
54837,"@SinceKotlin(""1.4"") public actual fun minOf(a: Long, vararg other: Long): Long","{
    var min = a
    for (e in other) min = minOf(min, e)
    return min
}","/**

 * Returns the smaller of the given values.

 */",f16714:m809
54692,"@SinceKotlin(""1.3"") @kotlin.internal.InlineOnly @Suppress(""ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS"") public actual inline fun ByteArray.copyInto(destination: ByteArray, destinationOffset: Int = 0, startIndex: Int = 0, endIndex: Int = size): ByteArray","{
    arrayCopy(this.unsafeCast<Array<Byte>>(), destination.unsafeCast<Array<Byte>>(), destinationOffset, startIndex, endIndex)
    return destination
}","/**

 * Copies this array or its subrange into the [destination] array and returns that array.

 * 

 * It's allowed to pass the same array in the [destination] and even specify the subrange so that it overlaps with the destination range.

 * 

 * @param destination the array to copy to.

 * @param destinationOffset the position in the [destination] array to copy to, 0 by default.

 * @param startIndex the beginning (inclusive) of the subrange to copy, 0 by default.

 * @param endIndex the end (exclusive) of the subrange to copy, size of this array by default.

 * 

 * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of this array indices or when `startIndex > endIndex`.

 * @throws IndexOutOfBoundsException when the subrange doesn't fit into the [destination] array starting at the specified [destinationOffset],

 * or when that index is out of the [destination] array indices range.

 * 

 * @return the [destination] array.

 */",f16713:m1259
43609,fun BuildResult.assertTasksExecuted(vararg taskPaths: String),"{
    assertTasksHaveOutcome(TaskOutcome.SUCCESS, taskPaths.asList())
}","/**

 * Asserts given [taskPaths] have [TaskOutcome.SUCCESS] execution state.

 */",f13463:m73
59033,"@SinceKotlin(""1.4"") @OptIn(kotlin.experimental.ExperimentalTypeInference::class) @OverloadResolutionByLambdaReturnType @kotlin.internal.InlineOnly public inline fun CharSequence.minOf(selector: (Char) -> Double): Double","{
    if (isEmpty()) throw NoSuchElementException()
    var minValue = selector(this[0])
    for (i in 1 .. lastIndex) {
        val v = selector(this[i])
        minValue = minOf(minValue, v)
    }
    return minValue
}","/**

 * Returns the smallest value among all values produced by [selector] function

 * applied to each character in the char sequence.

 * 

 * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.

 * 

 * @throws NoSuchElementException if the char sequence is empty.

 */",f17097:m3083
55535,internal fun fromInt(value: Int),"Long(value, if (value < 0) -1 else 0)","/**

 * Returns a Long representing the given (32-bit) integer value.

 * @param {number} value The 32-bit integer in question.

 * @return {!Kotlin.Long} The corresponding Long value.

 */",f16755:m675
58169,@kotlin.internal.InlineOnly public inline fun mod(other: UByte): UByte,this.mod(other.toUInt()).toUByte(),"/**

     * Calculates the remainder of flooring division of this value (dividend) by the other value (divisor).

     *

     * The result is always less than the divisor.

     *

     * For unsigned types, the remainders of flooring division and truncating division are the same.

     */",f17063:m367
30817,fun <T> Collection<T>.atMostOne(): T?,"{
    return when (size) {
        0 -> null
        1 -> this.iterator().next()
        else -> throw IllegalArgumentException(""Collection has more than one element."")
    }
}","/**

 * Returns the single element of the collection if it contains at most one element.

 *

 * If the collection is empty, returns `null`.

 *

 * If the collection contains exactly one element, returns that element.

 *

 * If the collection contains more than one element, throws an exception.

 */",f10781:m101
56125,"@kotlin.internal.InlineOnly public inline fun <T, K> compareValuesBy(a: T, b: T, comparator: Comparator<in K>, selector: (T) -> K): Int","{
    return comparator.compare(selector(a), selector(b))
}","/**

 * Compares two values using the specified [selector] function to calculate the result of the comparison.

 * The function is applied to the given values [a] and [b] and return objects of type K which are then being

 * compared with the given [comparator].

 *

 * @sample samples.comparisons.Comparisons.compareValuesByWithComparator

 */",f16832:m89
20149,public fun KtType.getEnhancedType(): KtType?,withValidityAssertion { analysisSession.typeProvider.getEnhancedType(this) },"/**

     * Returns a warning-level enhanced type for [KtType] if it is present. Otherwise, returns `null`.

     */",f5780:m157
33503,private fun Any?.transformKotlinToJvm(expectedType: Class<*>): Any?,"{
    @Suppress(""UNCHECKED_CAST"") val result = when (this) {
        is Class<*> -> return null
        is KClass<*> -> this.java
        is Array<*> -> when {
            this.isArrayOf<Class<*>>() -> return null
            this.isArrayOf<KClass<*>>() -> (this as Array<KClass<*>>).map(KClass<*>::java).toTypedArray()
            else -> this
        }
        else -> this
    }
    return if (expectedType.isInstance(result)) result else null
}","/**

 * Transforms a Kotlin value to the one required by the JVM, e.g. KClass<*> -> Class<*> or Array<KClass<*>> -> Array<Class<*>>.

 * Returns `null` in case when no transformation is possible (an argument of an incorrect type was passed).

 */",f11191:m127
14847,"@SinceKotlin(""1.4"") public actual infix fun ShortArray?.contentEquals(other: ShortArray?): Boolean","{
    if (this === other) return true
    if (this === null || other === null) return false
    if (size != other.size) return false
    for (i in indices) {
        if (this[i] != other[i]) return false
    }
    return true
}","/**

 * Checks if the two specified arrays are *structurally* equal to one another.

 * 

 * Two arrays are considered structurally equal if they have the same size, and elements at corresponding indices are equal.

 * 

 * The arrays are also considered structurally equal if both are `null`.

 * 

 * @param other the array to compare with this array.

 * @return `true` if the two arrays are structurally equal, `false` otherwise.

 * 

 * @sample samples.collections.Arrays.ContentOperations.intArrayContentEquals

 */",f3831:m1075
48331,"internal fun <T: Any> HasAttributes.setAttribute(key: Attribute<T>, value: T)","{
    attributes.attribute(key, value)
}","/**

 * Should only be used to configure simple attributes values!

 *

 * When in doubt, prefer lazy method overload.

 */",f15606:m69
7901,fun entry(action: Action<in Entry>),"{
    entries.add(project.provider {
        val instance = project.objects.newInstance<Entry>(_target).apply { action.execute(this) }
        project.objects.newInstance<GenerateCompilationDatabase.Entry>().apply {
            directory.set(instance.directory)
            files.from(instance.files)
            arguments.set(instance.arguments)
            output.set(instance.output)
        }
    })
}","/**

         * Add an entry to the compilation database for [target] with optional [sanitizer].

         *

         * @param action configure [Entry]

         */",f3158:m297
14667,public fun run(),"{
    try {
        doBefore()
        doRun()
    } finally {
        doAfter()
    }
}","/**

     * Runs test with its before and after functions.

     */",f3804:m91
58627,"@Deprecated(""This `contains` operation mixing integer and floating point arguments has ambiguous semantics and is going to be removed."") @DeprecatedSinceKotlin(warningSince = ""1.3"", errorSince = ""1.4"", hiddenSince = ""1.5"") @kotlin.jvm.JvmName(""doubleRangeContains"") public operator fun ClosedRange<Double>.contains(value: Long): Boolean","{
    return contains(value.toDouble())
}","/**

 * Checks if the specified [value] belongs to this range.

 */",f17092:m1235
58779,"public inline fun <T, K, M: MutableMap<in K, in T>> Sequence<T>.associateByTo(destination: M, keySelector: (T) -> K): M","{
    for (element in this) {
        destination.put(keySelector(element), element)
    }
    return destination
}","/**

 * Populates and returns the [destination] mutable map with key-value pairs,

 * where key is provided by the [keySelector] function applied to each element of the given sequence

 * and value is the element itself.

 * 

 * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.

 *

 * The operation is _terminal_.

 * 

 * @sample samples.collections.Collections.Transformations.associateByTo

 */",f17096:m1391
54792,public actual fun IntArray.toTypedArray(): Array<Int>,"{
    return js(""[]"").slice.call(this)
}","/**

 * Returns a *typed* object array containing all of the elements of this primitive array.

 */",f16713:m3779
54677,"@SinceKotlin(""1.4"") public actual fun LongArray?.contentHashCode(): Int","{
    return contentHashCodeInternal()
}","/**

 * Returns a hash code based on the contents of this array as if it is [List].

 */",f16713:m951
53405,"@SinceKotlin(""1.3"") @InlineOnly public actual inline fun <T> (suspend () -> T).startCoroutineUninterceptedOrReturn(completion: Continuation<T>): Any?","{
    val a = this.asDynamic()
    return if (jsTypeOf(a) == ""function"") a(completion) else this.invokeSuspendSuperType(completion)
}","/**

 * Starts unintercepted coroutine without receiver and with result type [T] and executes it until its first suspension.

 * Returns the result of the coroutine or throws its exception if it does not suspend or [COROUTINE_SUSPENDED] if it suspends.

 * In the latter case, the [completion] continuation is invoked when coroutine completes with result or exception.

 *

 * The coroutine is started directly in the invoker's thread without going through the [ContinuationInterceptor] that might

 * be present in the completion's [CoroutineContext]. It is the invoker's responsibility to ensure that a proper invocation

 * context is established.

 *

 * This function is designed to be used from inside of [suspendCoroutineUninterceptedOrReturn] to resume the execution of a suspended

 * coroutine using a reference to the suspending function.

 */",f16673:m111
58973,@kotlin.internal.InlineOnly public inline fun String.reversed(): String,"{
    return (this as CharSequence).reversed().toString()
}","/**

 * Returns a string with characters in reversed order.

 */",f17097:m1323
58755,public fun <T> Sequence<T>.singleOrNull(): T?,"{
    val iterator = iterator()
    if (!iterator.hasNext()) return null
    val single = iterator.next()
    if (iterator.hasNext()) return null
    return single
}","/**

 * Returns single element, or `null` if the sequence is empty or has more than one element.

 *

 * The operation is _terminal_.

 */",f17096:m727
14593,@InternalForKotlinNative @OptIn(ObsoleteWorkersApi::class) public fun waitCleanerWorker(): Unit,"getCleanerWorker().execute(TransferMode.SAFE, {}) { Unit }.result","/**

 * Wait for a worker that executes Cleaner blocks to complete its scheduled tasks.

 */",f3797:m185
58642,@kotlin.internal.InlineOnly public inline operator fun LongRange.contains(value: Short): Boolean,"{
    return (this as ClosedRange<Long>).contains(value)
}","/**

 * Checks if the specified [value] belongs to this range.

 */",f17092:m1515
55846,override fun equals(other: Any?): Boolean,"{
    if (other === this) return true
    if (other !is List<*>) return false
    return orderedEquals(this, other)
}","/**

     * Checks if the two specified lists are *structurally* equal to one another.

     *

     * Two lists are considered structurally equal if they have the same size, and elements at corresponding indices are equal.

     * Elements are compared for equality using the [equals][Any.equals] function.

     * For floating point numbers, this means `NaN` is equal to itself and `-0.0` is not equal to `0.0`.

     *

     * @param other the list to compare with this list.

     * @return `true` if [other] is a [List] that is structurally equal to this list, `false` otherwise.

     */",f16814:m107
63262,"@SinceKotlin(""1.2"") public actual fun Byte.toString(radix: Int): String",this.toInt().toString(radix),"/**

 * Returns a string representation of this [Byte] value in the specified [radix].

 *

 * @throws IllegalArgumentException when [radix] is not a valid radix for number to string conversion.

 */",f17352:m197
56254,"@SinceKotlin(""1.5"") @kotlin.internal.InlineOnly @kotlin.internal.IntrinsicConstEvaluation public inline fun Double.mod(other: Double): Double","{
    val r = this % other
    return if (r != 0.0 && r.sign != other.sign) r + other else r
}","/**

 * Calculates the remainder of flooring division of this value (dividend) by the other value (divisor).

 *

 * The result is either zero or has the same sign as the _divisor_ and has the absolute value less than the absolute value of the divisor.

 *

 * If the result cannot be represented exactly, it is rounded to the nearest representable number. In this case the absolute value of the result can be less than or _equal to_ the absolute value of the divisor.

 */",f16842:m707
58021,@kotlin.internal.InlineOnly public inline operator fun compareTo(other: UInt): Int,this.toUInt().compareTo(other),"/**

     * Compares this value with the specified value for order.

     * Returns zero if this value is equal to the specified other value, a negative number if it's less than other,

     * or a positive number if it's greater than other.

     */",f17058:m115
16176,internal fun FirBasedSymbol<*>.cannotResolveAnnotationsOnDemand(): Boolean,"{
    return this is FirCallableSymbol<*> && isLocalForLazyResolutionPurposes
}","/**

 * Some symbols shouldn't be processed as a regular annotation owner and should be just skipped.

 * Example:

 * ```kotlin

 * fun foo() {

 *   class Local {

 *     fun localMemberWithoutType() = localMember()

 *     fun localMember(): @Anno Int = 0

 *   }

 * }

 * ```

 * Here `localMember` is the owner of `Anno`, but we shouldn't process it as a usual non-local declaration, because

 * this annotation cannot be leaked out of the body in not fully resolved state.

 *

 * @return true if this symbol shouldn't be processed as the owner of an annotation call

 */",f4076:m85
63519,"internal fun ByteArray.copyOfUninitializedElements(fromIndex: Int, toIndex: Int): ByteArray","{
    val newSize = toIndex - fromIndex
    if (newSize < 0) {
        throw IllegalArgumentException(""$fromIndex > $toIndex"")
    }
    val result = ByteArray(newSize)
    this.copyInto(result, 0, fromIndex, toIndex.coerceAtMost(size))
    return result
}","/**

 * Returns new array which is a copy of the original array's range between [fromIndex] (inclusive)

 * and [toIndex] (exclusive) with new elements filled with **lateinit** _uninitialized_ values.

 * Attempts to read _uninitialized_ values from this array work in implementation-dependent manner,

 * either throwing exception or returning some kind of implementation-specific default value.

 */",f17396:m3345
58724,public operator fun <T> Set<T>.minus(elements: Array<out T>): Set<T>,"{
    val result = LinkedHashSet<T>(this)
    result.removeAll(elements)
    return result
}","/**

 * Returns a set containing all elements of the original set except the elements contained in the given [elements] array.

 * 

 * The returned set preserves the element iteration order of the original set.

 */",f17095:m63
58085,@kotlin.internal.InlineOnly public inline operator fun minus(other: ULong): ULong,this.toULong().minus(other),/** Subtracts the other value from this value. */,f17059:m191
16224,fun postponedSymbols(target: FirCallableDeclaration): Collection<FirBasedSymbol<*>>,"{
    return postponedSymbols[target.symbol]
}","/**

     * @return all symbols postponed with [postponeForeignAnnotationResolution] for the [target] element

     *

     * @see postponeForeignAnnotationResolution

     */",f4086:m183
56132,@kotlin.internal.InlineOnly public inline fun <T> Comparator<T>.thenBy(crossinline selector: (T) -> Comparable<*>?): Comparator<T>,"Comparator { a, b ->
    val previousCompare = this@thenBy.compare(a, b)
    if (previousCompare != 0) previousCompare else compareValuesBy(a, b, selector)
}","/**

 * Creates a comparator comparing values after the primary comparator defined them equal. It uses

 * the function to transform value to a [Comparable] instance for comparison.

 *

 * @sample samples.comparisons.Comparisons.thenBy

 */",f16832:m269
14844,"@Deprecated(""Use Kotlin compiler 1.4 to avoid deprecation warning."") @SinceKotlin(""1.1"") @DeprecatedSinceKotlin(hiddenSince = ""1.4"") public infix fun CharArray.contentEquals(other: CharArray): Boolean","{
    return this.contentEquals(other)
}","/**

 * Checks if the two specified arrays are *structurally* equal to one another.

 * 

 * Two arrays are considered structurally equal if they have the same size, and elements at corresponding indices are equal.

 * 

 * @param other the array to compare with this array.

 * @return `true` if the two arrays are structurally equal, `false` otherwise.

 * 

 * @sample samples.collections.Arrays.ContentOperations.charArrayContentEquals

 */",f3831:m941
57384,"@Suppress(""ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS"") public actual fun CharArray.sort(fromIndex: Int = 0, toIndex: Int = size): Unit","{
    java.util.Arrays.sort(this, fromIndex, toIndex)
}","/**

 * Sorts a range in the array in-place.

 * 

 * @param fromIndex the start of the range (inclusive) to sort, 0 by default.

 * @param toIndex the end of the range (exclusive) to sort, size of this array by default.

 * 

 * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.

 * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].

 * 

 * @sample samples.collections.Arrays.Sorting.sortRangeOfArray

 */",f16970:m4405
13594,@kotlin.internal.IntrinsicConstEvaluation public inline operator fun compareTo(other: Byte): Int,this.compareTo(other.toInt()),"/**

     * Compares this value with the specified value for order.

     * Returns zero if this value is equal to the specified other value, a negative number if it's less than other,

     * or a positive number if it's greater than other.

     */",f3686:m1811
37359,@Test @TodoAnalysisApi fun `test - innerClassWithExtensionFunction`(),"{
    doTest(headersTestDataDir.resolve(""innerClassWithExtensionFunction""))
}","/**

     * Works except properties sorting with special name [org.jetbrains.kotlin.name.Name.special]

     * See KT-66510

     */",f11809:m727
13538,@kotlin.internal.IntrinsicConstEvaluation public inline operator fun compareTo(other: Long): Int,this.toLong().compareTo(other),"/**

     * Compares this value with the specified value for order.

     * Returns zero if this value is equal to the specified other value, a negative number if it's less than other,

     * or a positive number if it's greater than other.

     */",f3686:m1003
43591,fun CommandLineArguments.assertCommandLineArgumentsDoNotContain(vararg expectedArgs: String),"{
    expectedArgs.forEach { assert(!args.contains(it)) {
        this.buildResult.printBuildOutput()
        ""There is unexpected ${it} in actual command line arguments are: ${args}""
    } }
}","/**

 * Asserts that the given list of command line arguments does not contain any of the expected arguments.

 *

 * @param expectedArgs the list of expected arguments

 * @throws AssertionError if any of the expected arguments are found in the actual arguments list

 */",f13457:m687
1662,override fun FunctionCallInfo.bothReceivers(): JsExpression,"{
    return JsInvocation(dispatchReceiver!!, argumentsInfo.argsWithReceiver(extensionReceiver!!))
}","/**

     * A call of extension lambda in compiler looks like as call of invoke function of some FunctionN instance.

     * So that call have both receivers -- some FunctionN instance as this and receiverObject as receiver.

     *

     * in Kotlin code:

     *      obj.extLambda(some, args)

     *

     * in compiler:

     *      (this: extLambda, receiver: obj).invoke(some, args)

     *

     * in result JS:

     *      extLambda.call(obj, some, args)

     */",f376:m335
14591,"@Deprecated(""Use kotlin.native.ref.createCleaner instead."", ReplaceWith(""kotlin.native.ref.createCleaner(argument, block)"")) @DeprecatedSinceKotlin(warningSince = ""1.9"") @Suppress(""DEPRECATION"") @ExperimentalStdlibApi @ExportForCompiler @OptIn(ExperimentalNativeApi::class, ObsoleteWorkersApi::class) public fun <T> createCleaner(argument: T, block: (T) -> Unit): Cleaner","kotlin.native.ref.createCleanerImpl(argument, block) as Cleaner","/**

 * Creates an object with a cleanup associated.

 *

 * After the resulting object (""cleaner"") gets deallocated by memory manager,

 * [block] is eventually called once with [argument].

 *

 * Example of usage:

 * ```

 * class ResourceWrapper {

 *     private val resource = Resource()

 *

 *     private val cleaner = createCleaner(resource) { it.dispose() }

 * }

 * ```

 *

 * When `ResourceWrapper` becomes unused and gets deallocated, its `cleaner`

 * is also deallocated, and the resource is disposed later.

 *

 * It is not specified which thread runs [block], as well as whether two or more

 * blocks from different cleaners can be run in parallel.

 *

 * Note: if [argument] refers (directly or indirectly) the cleaner, then both

 * might leak, and the [block] will not be called in this case.

 * For example, the code below has a leak:

 * ```

 * class LeakingResourceWrapper {

 *     private val resource = Resource()

 *     private val cleaner = createCleaner(this) { it.resource.dispose() }

 * }

 * ```

 * In this case cleaner's argument (`LeakingResourceWrapper`) can't be deallocated

 * until cleaner's block is executed, which can happen only strictly after

 * the cleaner is deallocated, which can't happen until `LeakingResourceWrapper`

 * is deallocated. So the requirements on object deallocations are contradictory

 * in this case, which can't be handled gracefully. The cleaner's block

 * is not executed then, and cleaner and its argument might leak

 * (depending on the implementation).

 *

 * [block] should not use `@ThreadLocal` globals, because it may

 * be executed on a different thread.

 *

 * If [block] throws an exception, the behavior is unspecified.

 *

 * Cleaners should not be kept in globals, because if cleaner is not deallocated

 * before exiting main(), it'll never get executed.

 * Use `Platform.isCleanersLeakCheckerActive` to warn about unexecuted cleaners.

 *

 * If cleaners are not GC'd before main() exits, then it's not guaranteed that

 * they will be run. Moreover, it depends on `Platform.isCleanersLeakCheckerActive`.

 * With the checker enabled, cleaners will be run (and therefore not reported as

 * unexecuted cleaners); with the checker disabled - they might not get run.

 *

 * @param argument must be shareable

 * @param block must not capture anything

 */",f3797:m33
15002,public actual fun LongArray.toTypedArray(): Array<Long>,"{
    return Array(size) { index -> this[index] }
}","/**

 * Returns a *typed* object array containing all of the elements of this primitive array.

 */",f3831:m5089
13402,"fun interopViaReflection(flavor: String, args: Array<String>, runFromDaemon: Boolean, generated: String, natives: String, manifest: String? = null, cstubsName: String? = null): Any?","{
    val internalInteropOptions = InternalInteropOptions(generated, natives, manifest, cstubsName)
    return try {
        interop(flavor, args, internalInteropOptions, runFromDaemon)
    } catch (prettyException: CInteropPrettyException) {
        prettyException
    } catch (throwable: Throwable) {
        throwable
    }
}","/**

     * invoked via reflection from new test system: CompilationToolCallKt.invokeCInterop(),

     * `interop()` has issues to be invoked directly due to NoSuchMethodError, caused by presence of InternalInteropOptions argtype:

     * java.lang.IllegalArgumentException: argument type mismatch.

     * Also this method simplifies testing of [CInteropPrettyException] by wrapping the result in Any that acts like a ""Result"" class.

     * Using ""Result"" directly might be complicated due to signature mangle and different class loaders.

     */",f3673:m141
58582,"@SinceKotlin(""1.3"") public fun IntRange.random(random: Random): Int","{
    try {
        return random.nextInt(this)
    } catch (e: IllegalArgumentException) {
        throw NoSuchElementException(e.message)
    }
}","/**

 * Returns a random element from this range using the specified source of randomness.

 * 

 * @throws IllegalArgumentException if this range is empty.

 */",f17092:m367
58692,public infix fun Short.until(to: Long): LongRange,"{
    if (to <= Long.MIN_VALUE) return LongRange.EMPTY
    return this.toLong() .. (to - 1).toLong()
}","/**

 * Returns a range from this value up to but excluding the specified [to] value.

 * 

 * If the [to] value is less than or equal to `this` value, then the returned range is empty.

 */",f17092:m2315
11097,fun suspendCurrent(): TaskControlBlock?,"{
    this.currentTcb!!.markAsSuspended()
    return this.currentTcb
}","/**

     * Suspend the currently executing task and return the next task control block

     * to run.  If new work is added to the suspended task it will be made runnable.

     */",f3500:m419
13926,"@SinceKotlin(""1.4"") public actual fun Int.takeHighestOneBit(): Int",if (this == 0) 0 else 1.shl(32 - 1 - countLeadingZeroBits(this)),"/**

 * Returns a number having a single bit set in the position of the most significant set bit of this [Int] number,

 * or zero, if this number is zero.

 */",f3706:m285
59070,"@SinceKotlin(""1.2"") public fun <R> CharSequence.chunked(size: Int, transform: (CharSequence) -> R): List<R>","{
    return windowed(size, size, partialWindows = true, transform = transform)
}","/**

 * Splits this char sequence into several char sequences each not exceeding the given [size]

 * and applies the given [transform] function to an each.

 * 

 * @return list of results of the [transform] applied to an each char sequence.

 * 

 * Note that the char sequence passed to the [transform] function is ephemeral and is valid only inside that function.

 * You should not store it or allow it to escape in some way, unless you made a snapshot of it.

 * The last char sequence may have fewer characters than the given [size].

 * 

 * @param size the number of elements to take in each char sequence, must be positive and can be greater than the number of elements in this char sequence.

 * 

 * @sample samples.text.Strings.chunkedTransform

 */",f17097:m4441
58083,@kotlin.internal.InlineOnly public inline operator fun minus(other: UShort): UInt,this.toUInt().minus(other.toUInt()),/** Subtracts the other value from this value. */,f17059:m179
16655,fun getBuiltinsModule(platform: TargetPlatform): KtBuiltinsModule,"builtinsModules.getOrPut(platform) { KtBuiltinsModule(platform, platform.getAnalyzerServices(), project) }","/**

     * Returns the [platform]'s [KtBuiltinsModule]. [getBuiltinsModule] should be used instead of [getBuiltinsSession] when a

     * [KtBuiltinsModule] is needed as a dependency for other [KtModule]s. This is because during project structure creation, we have to

     * avoid the creation of the builtins *session*, as not all services might have been registered at that point.

     */",f4158:m101
57030,@kotlin.internal.InlineOnly public inline fun ByteArray.inputStream(): ByteArrayInputStream,ByteArrayInputStream(this),"/**

 * Creates an input stream for reading data from this byte array.

 */",f16952:m103
43935,@GradleTest fun `test - sample0 - buildId buildPath buildName`(gradleVersion: GradleVersion),"{
    val producer = project(""mpp-composite-build/sample0/producerBuild"", gradleVersion)
    project(""mpp-composite-build/sample0/consumerBuild"", gradleVersion) {
        settingsGradleKts.toFile().replaceText(""<producer_path>"", producer.projectPath.toUri().path)
        resolveIdeDependencies("":consumerA"") { dependencies ->
            val dependency = dependencies[""commonMain""].getOrFail(regularSourceDependency("":producerBuild::producerA/commonMain""))
            assertIs<IdeaKotlinSourceDependency>(dependency)
            val projectCoordinates = dependency.coordinates.project
            @Suppress(""DEPRECATION"") assertEquals(""producerBuild"", projectCoordinates.buildId)
            assertEquals(""producerBuild"", projectCoordinates.buildName)
            assertEquals("":producerBuild"", projectCoordinates.buildPath)
            assertEquals("":producerA"", projectCoordinates.projectPath)
            assertEquals(""producerA"", projectCoordinates.projectName)
        }
    }
}","/**

     * Test that verifies that after moving to 'buildPath' and 'buildName' in project coordinates (1.9.20),

     * the shape of the resolved coordinate are the same across different versions of Gradle.

     */",f13510:m233
11891,"@Suppress(""FINAL_UPPER_BOUND"") @ExperimentalForeignApi public fun <T: Int> NativePlacement.alloc(value: T): IntVarOf<T>",alloc<IntVarOf<T>> { this.value = value },"/**

 * Allocates variable with given value type and initializes it with given value.

 */",f3606:m69
11475,"private fun recognizeAndSaveOptionShortForm(candidate: String, argIterator: Iterator<String>): Boolean","{
    if (!candidate.startsWith(optionShortFromPrefix) || optionFullFormPrefix != optionShortFromPrefix && candidate.startsWith(optionFullFormPrefix)) return false
    val option = candidate.substring(optionShortFromPrefix.length)
    val argValue = shortNames[option]
    if (argValue != null) {
        saveStandardOptionForm(argValue, argIterator)
    } else {
        if (prefixStyle != OptionPrefixStyle.GNU || option.isEmpty()) return false
        val firstOption = shortNames[""${option[0]}""] ?: return false
        if (firstOption.descriptor.type.hasParameter) {
            saveAsOption(firstOption, option.substring(1))
        } else {
            val otherBooleanOptions = option.substring(1)
            saveOptionWithoutParameter(firstOption)
            for (opt in otherBooleanOptions) {
                shortNames[""$opt""]?.let { if (it.descriptor.type.hasParameter) {
                    printError(""Option $optionShortFromPrefix$opt can't be used in option combination $candidate, "" + ""because parameter value of type ${it.descriptor.type.description} should be "" + ""provided for current option."")
                } } ?: printError(""Unknown option $optionShortFromPrefix$opt in option combination $candidate."")
                saveOptionWithoutParameter(shortNames[""$opt""]!!)
            }
        }
    }
    return true
}","/**

     * Try to recognize and save command line element as short form of option.

     *

     * @param candidate string with candidate in options.

     * @param argIterator iterator over command line arguments.

     */",f3554:m933
58592,"@SinceKotlin(""1.3"") @kotlin.internal.InlineOnly public inline operator fun LongRange.contains(element: Long?): Boolean","{
    return element != null && contains(element)
}","/**

 * Returns `true` if this range contains the specified [element].

 * 

 * Always returns `false` if the [element] is `null`.

 */",f17092:m587
64463,"@SinceKotlin(""1.5"") @WasExperimental(ExperimentalPathApi::class) @Throws(IOException::class) @kotlin.internal.InlineOnly public inline fun Path.appendLines(lines: Sequence<CharSequence>, charset: Charset = Charsets.UTF_8): Path","{
    return Files.write(this, lines.asIterable(), charset, StandardOpenOption.APPEND)
}","/**

 * Appends the specified sequence of char sequences [lines] to a file terminating each one with the platform's line separator.

 *

 * @param charset character set to use for writing text, UTF-8 by default.

 */",f17469:m663
58833,"@SinceKotlin(""1.4"") @OptIn(kotlin.experimental.ExperimentalTypeInference::class) @OverloadResolutionByLambdaReturnType @kotlin.internal.InlineOnly public inline fun <T, R: Comparable<R>> Sequence<T>.maxOfOrNull(selector: (T) -> R): R?","{
    val iterator = iterator()
    if (!iterator.hasNext()) return null
    var maxValue = selector(iterator.next())
    while (iterator.hasNext()) {
        val v = selector(iterator.next())
        if (maxValue < v) {
            maxValue = v
        }
    }
    return maxValue
}","/**

 * Returns the largest value among all values produced by [selector] function

 * applied to each element in the sequence or `null` if there are no elements.

 *

 * The operation is _terminal_.

 */",f17096:m3147
43548,fun assertSymlinkExists(path: Path),"{
    assert(Files.exists(path)) { ""Symlink '${path}' does not exist!"" }
    assert(Files.isSymbolicLink(path)) { ""'${path}' is not a symlink!"" }
}","/**

 * Asserts symlink under [path] exists and is a symlink

 */",f13456:m205
13993,"@SinceKotlin(""1.3"") public actual fun ByteArray.decodeToString(): String","unsafeStringFromUtf8(0, size)","/**

 * Decodes a string from the bytes in UTF-8 encoding in this array.

 *

 * Malformed byte sequences are replaced by the replacement char `\uFFFD`.

 */",f3713:m805
58575,"@SinceKotlin(""1.7"") public fun CharProgression.last(): Char","{
    if (isEmpty()) throw NoSuchElementException(""Progression $this is empty."")
    return this.last
}","/**

 * Returns the last element.

 * 

 * @throws NoSuchElementException if the progression is empty.

 * 

 * @sample samples.collections.Collections.Elements.last

 */",f17092:m213
61756,"@SinceKotlin(""1.4"") public fun Element.appendText(text: String): Element","{
    appendChild(ownerDocument!!.createTextNode(text))
    return this
}","/**

 * Creates text node and append it to the element.

 *

 * @return this element

 */",f17276:m35
58638,"@kotlin.jvm.JvmName(""intRangeContains"") @SinceKotlin(""1.9"") @WasExperimental(ExperimentalStdlibApi::class) public operator fun OpenEndRange<Int>.contains(value: Short): Boolean","{
    return contains(value.toInt())
}","/**

 * Checks if the specified [value] belongs to this range.

 */",f17092:m1439
45634,@ExperimentalKotlinGradlePluginApi fun compilerOptions(configure: CO.() -> Unit),"{
    configure(compilerOptions)
}","/**

     * Configures the [compilerOptions] with the provided configuration.

     */",f14904:m49
57199,"public fun <C: MutableCollection<in R>, R> Sequence<*>.filterIsInstanceTo(destination: C, klass: Class<R>): C","{
    @Suppress(""UNCHECKED_CAST"") for (element in this) if (klass.isInstance(element)) destination.add(element as R)
    return destination
}","/**

 * Appends all elements that are instances of specified class to the given [destination].

 *

 * The operation is _terminal_.

 * 

 * @sample samples.collections.Collections.Filtering.filterIsInstanceToJVM

 */",f16968:m57
20260,public fun KtFile.recordOriginalKtFile(file: KtFile),"{
    withValidityAssertion { analysisSession.originalPsiProvider.recordOriginalKtFile(this, file) }
}","/**

     * Records [file] as an original file for [this].

     */",f5806:m81
56486,"@SinceKotlin(""1.1"") @kotlin.internal.InlineOnly public actual inline fun String.toLong(radix: Int): Long","java.lang.Long.parseLong(this, checkRadix(radix))","/**

 * Parses the string as a [Long] number and returns the result.

 * @throws NumberFormatException if the string is not a valid representation of a number.

 * @throws IllegalArgumentException when [radix] is not a valid radix for string to number conversion.

 */",f16885:m225
58729,public operator fun <T> Set<T>.plus(elements: Array<out T>): Set<T>,"{
    val result = LinkedHashSet<T>(mapCapacity(this.size + elements.size))
    result.addAll(this)
    result.addAll(elements)
    return result
}","/**

 * Returns a set containing all elements of the original set and the given [elements] array,

 * which aren't already in this set.

 * 

 * The returned set preserves the element iteration order of the original set.

 */",f17095:m183
58647,public infix fun Char.downTo(to: Char): CharProgression,"{
    return CharProgression.fromClosedRange(this, to, -1)
}","/**

 * Returns a progression from this value down to the specified [to] value with the step -1.

 * 

 * The [to] value should be less than or equal to `this` value.

 * If the [to] value is greater than `this` value the returned progression is empty.

 */",f17092:m1611
58156,@kotlin.internal.InlineOnly public inline operator fun times(other: ULong): ULong,this.toULong().times(other),/** Multiplies this value by the other value. */,f17063:m217
57056,@kotlin.internal.InlineOnly public inline fun println(message: Char),"{
    System.out.println(message)
}",/** Prints the given [message] and the line separator to the standard output stream. */,f16953:m213
58046,@kotlin.internal.InlineOnly public inline fun floorDiv(other: ULong): ULong,this.toULong().floorDiv(other),"/**

     * Divides this value by the other value, flooring the result to an integer that is closer to negative infinity.

     *

     * For unsigned types, the results of flooring division and truncating division are the same.

     */",f17058:m351
30262,"private fun TypeSystemContext.strictEqualTypesInternal(a: KotlinTypeMarker, b: KotlinTypeMarker): Boolean","{
    if (a === b) return true
    val simpleA = a.asSimpleType()
    val simpleB = b.asSimpleType()
    if (simpleA != null && simpleB != null) return strictEqualSimpleTypes(simpleA, simpleB)
    val flexibleA = a.asFlexibleType()
    val flexibleB = b.asFlexibleType()
    if (flexibleA != null && flexibleB != null) {
        return strictEqualSimpleTypes(flexibleA.lowerBound(), flexibleB.lowerBound()) && strictEqualSimpleTypes(flexibleA.upperBound(), flexibleB.upperBound())
    }
    return false
}","/**

     * Note that:

     * - `String!` != `String`

     * - `A<String!>` != `A<String>`

     * - `A<in Nothing>` != `A<out Any?>`

     * - `A<*>` != `A<out Any?>`

     *

     * Also different error types are not equal even if errorTypeEqualToAnything is true

     */",f10712:m29
59164,"@SinceKotlin(""1.4"") public fun <T> minOf(a: T, vararg other: T, comparator: Comparator<in T>): T","{
    var min = a
    for (e in other) if (comparator.compare(min, e) > 0) min = e
    return min
}","/**

 * Returns the smaller of the given values according to the order specified by the given [comparator].

 * 

 * If there are multiple equal minimal values, returns the first of them.

 */",f17100:m741
14790,"@SinceKotlin(""1.3"") @ExperimentalUnsignedTypes public actual fun UByteArray.asList(): List<UByte>","{
    return object : AbstractList<UByte>(), RandomAccess {
        override val size: Int get() = this@asList.size
    
        override fun isEmpty(): Boolean = this@asList.isEmpty()
    
        override fun contains(element: UByte): Boolean = this@asList.contains(element)
    
        override fun get(index: Int): UByte = this@asList[index]
    
        override fun indexOf(element: UByte): Int = this@asList.indexOf(element)
    
        override fun lastIndexOf(element: UByte): Int = this@asList.lastIndexOf(element)
    }
}","/**

 * Returns a [List] that wraps the original array.

 */",f3828:m191
55126,@kotlin.internal.IntrinsicConstEvaluation public inline operator fun minus(other: Double): Double,this.toDouble().minus(other),/** Subtracts the other value from this value. */,f16727:m2619
14021,public actual fun String.toDouble(): Double,FloatingPointParser.parseDouble(this),"/**

 * Parses the string as a [Double] number and returns the result.

 * @throws NumberFormatException if the string is not a valid representation of a number.

 */",f3714:m269
15023,"@SinceKotlin(""1.1"") @kotlin.internal.InlineOnly public actual inline fun maxOf(a: Byte, b: Byte, c: Byte): Byte","{
    return maxOf(a.toInt(), maxOf(b.toInt(), c.toInt())).toByte()
}","/**

 * Returns the greater of three values.

 */",f3836:m183
20145,public fun KtType.approximateToSuperPublicDenotable(approximateLocalTypes: Boolean): KtType?,"withValidityAssertion { analysisSession.typeProvider.approximateToSuperPublicDenotableType(this, approximateLocalTypes) }","/**

     * Approximates [KtType] with a supertype which can be rendered in a source code

     *

     * Return `null` if the type do not need approximation and can be rendered as is

     * Otherwise, for type `T` return type `S` such `T <: S` and `T` and every type argument is denotable

     */",f5780:m109
10464,fun extractPlanFromConstraints(constraints: OrderedCollection<Constraint>): Plan,"{
    val sources = OrderedCollection<Constraint>()
    for (c in constraints) {
        if (c.isInput() && c.isSatisfied()) sources.add(c)
    }
    return makePlan(sources)
}","/**

   * Extract a plan for resatisfying starting from the output of the

   * given constraints, usually a set of input constraints.

   */",f3476:m1195
48519,fun getFramework(buildType: NativeBuildType): Framework,"getFramework("""", buildType)",/** Returns an Objective-C framework with the empty name prefix and the given build type. Throws an exception if there is no such binary.*/,f15652:m251
16715,"override fun visitElement(element: FirElement, data: T)","{
    if (element is FirElementWithResolveState) return
    element.acceptChildren(this, data)
}","/**

     * Skip all [FirElementWithResolveState] without explicit override

     */",f4162:m119
48544,"@JvmOverloads fun sharedLib(buildTypes: Collection<NativeBuildType> = NativeBuildType.DEFAULT_BUILD_TYPES, configure: Action<SharedLibrary>)",sharedLib(buildTypes) { configure.execute(this) },/** Creates a shared library with the default name prefix for each build type and configures it. */,f15652:m507
56523,"@Deprecated(""Use appendLine instead. Note that the new method always appends the line feed character '\\n' regardless of the system line separator."", ReplaceWith(""appendLine()""), level = DeprecationLevel.WARNING) public fun Appendable.appendln(): Appendable",append(SystemProperties.LINE_SEPARATOR),/** Appends a line separator to this Appendable. */,f16890:m491
56517,"@SinceKotlin(""1.4"") @kotlin.internal.InlineOnly public actual inline fun StringBuilder.appendLine(value: Int): StringBuilder",append(value).appendLine(),"/** Appends [value] to this [StringBuilder], followed by a line feed character (`\n`). */",f16890:m417
15036,"@SinceKotlin(""1.1"") public actual fun <T: Comparable<T>> minOf(a: T, b: T): T","{
    return if (a <= b) a else b
}","/**

 * Returns the smaller of two values.

 * 

 * If values are equal, returns the first one.

 */",f3836:m451
56063,"@SinceKotlin(""1.1"") public operator fun <K, V> Map<out K, V>.minus(keys: Iterable<K>): Map<K, V>",this.toMutableMap().apply { minusAssign(keys) }.optimizeReadOnlyMap(),"/**

 * Returns a map containing all entries of the original map except those entries

 * the keys of which are contained in the given [keys] collection.

 *

 * The returned map preserves the entry iteration order of the original map.

 */",f16823:m1479
57043,@kotlin.internal.InlineOnly public inline fun print(message: Long),"{
    System.out.print(message)
}",/** Prints the given [message] to the standard output stream. */,f16953:m57
49547,fun containsKlibDirectory(path: String): Boolean,"{
    val pathToTheManifestFile = ensureValidZipDirectoryPath(path) + ""default/manifest""
    return zip.getEntry(pathToTheManifestFile) != null
}","/**

         * Check if the underlying [zip] file contains klib at [path].

         * Note: This check also works for zip files that did not include any klibs.

         * This will return true, if any other zip-entry is placed inside this directory [path]

         */",f15878:m423
14828,public actual fun BooleanArray.asList(): List<Boolean>,"{
    return object : AbstractList<Boolean>(), RandomAccess {
        override val size: Int get() = this@asList.size
    
        override fun isEmpty(): Boolean = this@asList.isEmpty()
    
        override fun contains(element: Boolean): Boolean = this@asList.contains(element)
    
        override fun get(index: Int): Boolean = this@asList[index]
    
        override fun indexOf(element: Boolean): Int = this@asList.indexOf(element)
    
        override fun lastIndexOf(element: Boolean): Int = this@asList.lastIndexOf(element)
    }
}","/**

 * Returns a [List] that wraps the original array.

 */",f3831:m407
57290,"@SinceKotlin(""1.3"") @Suppress(""ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS"") public actual fun LongArray.copyInto(destination: LongArray, destinationOffset: Int = 0, startIndex: Int = 0, endIndex: Int = size): LongArray","{
    System.arraycopy(this, startIndex, destination, destinationOffset, endIndex - startIndex)
    return destination
}","/**

 * Copies this array or its subrange into the [destination] array and returns that array.

 * 

 * It's allowed to pass the same array in the [destination] and even specify the subrange so that it overlaps with the destination range.

 * 

 * @param destination the array to copy to.

 * @param destinationOffset the position in the [destination] array to copy to, 0 by default.

 * @param startIndex the beginning (inclusive) of the subrange to copy, 0 by default.

 * @param endIndex the end (exclusive) of the subrange to copy, size of this array by default.

 * 

 * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of this array indices or when `startIndex > endIndex`.

 * @throws IndexOutOfBoundsException when the subrange doesn't fit into the [destination] array starting at the specified [destinationOffset],

 * or when that index is out of the [destination] array indices range.

 * 

 * @return the [destination] array.

 */",f16970:m2009
56212,"@SinceKotlin(""1.4"") @kotlin.internal.InlineOnly public inline fun Short.countOneBits(): Int",(toInt() and 0xFFFF).countOneBits(),"/**

 * Counts the number of set bits in the binary representation of this [Short] number.

 */",f16841:m399
58609,"@Deprecated(""This `contains` operation mixing integer and floating point arguments has ambiguous semantics and is going to be removed."") @DeprecatedSinceKotlin(warningSince = ""1.3"", errorSince = ""1.4"", hiddenSince = ""1.5"") @kotlin.jvm.JvmName(""intRangeContains"") public operator fun ClosedRange<Int>.contains(value: Float): Boolean","{
    return value.toIntExactOrNull().let { if (it != null) contains(it) else false }
}","/**

 * Checks if the specified [value] belongs to this range.

 */",f17092:m907
57300,@kotlin.internal.InlineOnly public actual inline fun FloatArray.copyOf(): FloatArray,"{
    return java.util.Arrays.copyOf(this, size)
}","/**

 * Returns new array which is a copy of the original array.

 * 

 * @sample samples.collections.Arrays.CopyOfOperations.copyOf

 */",f16970:m2339
15032,"@SinceKotlin(""1.4"") public actual fun maxOf(a: Int, vararg other: Int): Int","{
    var max = a
    for (e in other) max = maxOf(max, e)
    return max
}","/**

 * Returns the greater of the given values.

 */",f3836:m363
58947,public inline fun CharSequence.dropLastWhile(predicate: (Char) -> Boolean): CharSequence,"{
    for (index in lastIndex downTo 0) if (!predicate(this[index])) return subSequence(0, index + 1)
    return """"
}","/**

 * Returns a subsequence of this char sequence containing all characters except last characters that satisfy the given [predicate].

 * 

 * @sample samples.text.Strings.drop

 */",f17097:m741
16061,fun getModule(element: PsiElement): KtModule,"{
    return ProjectStructureProvider.getModule(useSiteModule.project, element, useSiteModule)
}","/**

     * Returns a [KtModule] for a given [element] in context of the current session.

     *

     * See [ProjectStructureProvider] for more information on contextual modules.

     */",f4047:m25
10466,fun removePropagateFrom(out: Variable): OrderedCollection<Constraint>,"{
    out.determinedBy = null
    out.walkStrength = Strength.WEAKEST
    out.stay = true
    val unsatisfied = OrderedCollection<Constraint>()
    val todo = OrderedCollection<Variable>()
    todo.add(out)
    while (todo.size() > 0) {
        var v = todo.removeFirst()
        for (c in v.constraints) {
            if (!c.isSatisfied()) unsatisfied.add(c)
        }
        var determining = v.determinedBy
        for (next in v.constraints) {
            if (next != determining && next.isSatisfied()) {
                next.recalculate()
                todo.add(next.output())
            }
        }
    }
    return unsatisfied
}","/**

   * Update the walkabout strengths and stay flags of all variables

   * downstream of the given constraint. Answer a collection of

   * unsatisfied constraints sorted in order of decreasing strength.

   */",f3476:m1279
63680,"@Deprecated(""Use Kotlin compiler 1.4 to avoid deprecation warning."") @SinceKotlin(""1.3"") @DeprecatedSinceKotlin(hiddenSince = ""1.4"") @ExperimentalUnsignedTypes public fun UByteArray.contentToString(): String","{
    return this.contentToString()
}","/**

 * Returns a string representation of the contents of the specified array as if it is [List].

 * 

 * @sample samples.collections.Arrays.ContentOperations.contentToString

 */",f17408:m539
56155,"@kotlin.internal.InlineOnly public inline fun <T, R> T.run(block: T.() -> R): R","{
    contract { callsInPlace(block, InvocationKind.EXACTLY_ONCE) }
    return block()
}","/**

 * Calls the specified function [block] with `this` value as its receiver and returns its result.

 *

 * For detailed usage information see the documentation for [scope functions](https://kotlinlang.org/docs/reference/scope-functions.html#run).

 */",f16833:m93
58868,"@SinceKotlin(""1.4"") public fun <T, R> Sequence<T>.runningFoldIndexed(initial: R, operation: (index: Int, acc: R, T) -> R): Sequence<R>","{
    return sequence {
        yield(initial)
        var index = 0
        var accumulator = initial
        for (element in this@runningFoldIndexed) {
            accumulator = operation(checkIndexOverflow(index++), accumulator, element)
            yield(accumulator)
        }
    }
}","/**

 * Returns a sequence containing successive accumulation values generated by applying [operation] from left to right

 * to each element, its index in the original sequence and current accumulator value that starts with [initial] value.

 * 

 * Note that `acc` value passed to [operation] function should not be mutated;

 * otherwise it would affect the previous value in resulting sequence.

 * The [initial] value should also be immutable (or should not be mutated)

 * as it may be passed to [operation] function later because of sequence's lazy nature.

 * 

 * @param [operation] function that takes the index of an element, current accumulator value

 * and the element itself, and calculates the next accumulator value.

 *

 * The operation is _intermediate_ and _stateless_.

 * 

 * @sample samples.collections.Collections.Aggregates.runningFold

 */",f17096:m4639
37763,internal fun buildThrowableAsErrorMethod(): ObjCMethod,"{
    return ObjCMethod(comment = null, isInstanceMethod = true, returnType = ObjCClassType(""NSError""), selectors = listOf(""asError""), parameters = emptyList(), attributes = listOf(swiftNameAttribute(""asError()"")), origin = null)
}","/**

 * See K1: [org.jetbrains.kotlin.backend.konan.objcexport.ObjCExportTranslatorImpl.buildThrowableAsErrorMethod]

 */",f11847:m13
51944,"private fun String.cleanContentPreservingLinesLayout(start: Int = 0, end: Int = this.length)","subSequence(start, end).map { if (it == '\r' || it == '\n') it else ' ' }","/**

 * Replaces every character with ' ' except end of line

 */",f16417:m93
58612,"@Deprecated(""This `contains` operation mixing integer and floating point arguments has ambiguous semantics and is going to be removed."") @DeprecatedSinceKotlin(warningSince = ""1.3"", errorSince = ""1.4"", hiddenSince = ""1.5"") @kotlin.jvm.JvmName(""shortRangeContains"") public operator fun ClosedRange<Short>.contains(value: Float): Boolean","{
    return value.toShortExactOrNull().let { if (it != null) contains(it) else false }
}","/**

 * Checks if the specified [value] belongs to this range.

 */",f17092:m967
58469,"public inline fun <K, V, R> Map<out K, V>.flatMap(transform: (Map.Entry<K, V>) -> Iterable<R>): List<R>","{
    return flatMapTo(ArrayList<R>(), transform)
}","/**

 * Returns a single list of all elements yielded from results of [transform] function being invoked on each entry of original map.

 * 

 * @sample samples.collections.Maps.Transformations.flatMap

 */",f17089:m141
17571,"private fun createModules(moduleStructure: TestModuleStructure, testServices: TestServices, project: Project): List<KtTestModule>","{
    val moduleCount = moduleStructure.modules.size
    val existingModules = HashMap<String, KtTestModule>(moduleCount)
    val result = ArrayList<KtTestModule>(moduleCount)
    for (testModule in moduleStructure.modules) {
        val contextModuleName = testModule.directives.singleOrZeroValue(AnalysisApiTestDirectives.CONTEXT_MODULE)
        val contextModule = contextModuleName?.let(existingModules::getValue)
        val dependencyBinaryRoots = testModule.regularDependencies.flatMap { dependency ->
            val libraryModule = existingModules.getValue(dependency.moduleName).ktModule as? KtLibraryModule
            libraryModule?.getBinaryRoots().orEmpty()
        }
        val ktTestModule = testServices.getKtModuleFactoryForTestModule(testModule).createModule(testModule, contextModule, dependencyBinaryRoots, testServices, project)
        existingModules[testModule.name] = ktTestModule
        result.add(ktTestModule)
    }
    return result
}","/**

     * The test infrastructure ensures that the given [moduleStructure] contains properly ordered dependencies: a [TestModule] can only

     * depend on test modules which precede it. Hence, this function does not need to order dependencies itself.

     *

     * @return A list of [KtTestModule]s in the same order as [TestModuleStructure.modules].

     */",f5271:m127
58566,"@kotlin.jvm.JvmName(""sumOfUShort"") @SinceKotlin(""1.5"") @WasExperimental(ExperimentalUnsignedTypes::class) public fun Sequence<UShort>.sum(): UInt","{
    var sum: UInt = 0u
    for (element in this) {
        sum += element
    }
    return sum
}","/**

 * Returns the sum of all elements in the sequence.

 *

 * The operation is _terminal_.

 */",f17091:m133
58569,"@SinceKotlin(""1.7"") public fun CharProgression.first(): Char","{
    if (isEmpty()) throw NoSuchElementException(""Progression $this is empty."")
    return this.first
}","/**

 * Returns the first element.

 * 

 * @throws NoSuchElementException if the progression is empty.

 */",f17092:m85
56141,public fun <T: Any> nullsLast(comparator: Comparator<in T>): Comparator<T?>,"Comparator { a, b -> when {
    a === b -> 0
    a == null -> 1
    b == null -> -1
    else -> comparator.compare(a, b)
} }","/**

 * Extends the given [comparator] of non-nullable values to a comparator of nullable values

 * considering `null` value greater than any other value.

 * Non-null values are compared with the provided [comparator].

 *

 * @sample samples.comparisons.Comparisons.nullsFirstLastWithComparator

 */",f16832:m503
46116,inline fun <reified T> Sequence<T>.withClosureSequence(crossinline edges: (T) -> Iterable<T>): Sequence<T>,"{
    val results = HashSet<T>()
    val resolveQueue = createDequeue<T>()
    return sequence {
        this@withClosureSequence.forEach { element -> if (results.add(element)) {
            yield(element)
            resolveQueue.add(element)
        } }
        while (resolveQueue.isNotEmpty()) {
            val seed = resolveQueue.removeAt(0)
            edges(seed).forEach { resolvedEdge -> if (results.add(resolvedEdge)) {
                yield(resolvedEdge)
                resolveQueue.add(resolvedEdge)
            } }
        }
    }
}","/**

 * @see closure

 * @receiver: Will be included in the return set

 */",f15014:m421
58835,"@SinceKotlin(""1.4"") @OptIn(kotlin.experimental.ExperimentalTypeInference::class) @OverloadResolutionByLambdaReturnType @kotlin.internal.InlineOnly public inline fun <T, R> Sequence<T>.maxOfWithOrNull(comparator: Comparator<in R>, selector: (T) -> R): R?","{
    val iterator = iterator()
    if (!iterator.hasNext()) return null
    var maxValue = selector(iterator.next())
    while (iterator.hasNext()) {
        val v = selector(iterator.next())
        if (comparator.compare(maxValue, v) < 0) {
            maxValue = v
        }
    }
    return maxValue
}","/**

 * Returns the largest value according to the provided [comparator]

 * among all values produced by [selector] function applied to each element in the sequence or `null` if there are no elements.

 *

 * The operation is _terminal_.

 */",f17096:m3243
64447,"@SinceKotlin(""1.5"") @WasExperimental(ExperimentalPathApi::class) @Throws(IOException::class) @kotlin.internal.InlineOnly public inline fun Path.writer(charset: Charset = Charsets.UTF_8, vararg options: OpenOption): OutputStreamWriter","{
    return OutputStreamWriter(Files.newOutputStream(this, *options), charset)
}","/**

 * Returns a new [OutputStreamWriter] for writing the content of this file.

 *

 * @param charset character set to use for writing text, UTF-8 by default.

 * @param options options to determine how the file is opened.

 */",f17469:m119
14877,"@Deprecated(""Use Kotlin compiler 1.4 to avoid deprecation warning."") @SinceKotlin(""1.1"") @DeprecatedSinceKotlin(hiddenSince = ""1.4"") public fun FloatArray.contentToString(): String","{
    return this.contentToString()
}","/**

 * Returns a string representation of the contents of the specified array as if it is [List].

 * 

 * @sample samples.collections.Arrays.ContentOperations.contentToString

 */",f3831:m1921
32113,override fun SimpleTypeMarker.isSingleClassifierType(): Boolean,"{
    require(this is SimpleType, this::errorMessage)
    return !isError && constructor.declarationDescriptor !is TypeAliasDescriptor && (constructor.declarationDescriptor != null || this is CapturedType || this is NewCapturedType || this is DefinitelyNotNullType || constructor is IntegerLiteralTypeConstructor || isSingleClassifierTypeWithEnhancement())
}","/**

     *

     * SingleClassifierType is one of the following types:

     *  - classType

     *  - type for type parameter

     *  - captured type

     *

     * Such types can contain error types in our arguments, but type constructor isn't errorTypeConstructor

     */",f10957:m735
14758,"@SinceKotlin(""1.6"") public actual fun readln(): String","readlnOrNull() ?: throw ReadAfterEOFException(""EOF has already been reached"")","/**

 * Reads a line of input from the standard input stream and returns it,

 * or throws a [RuntimeException] if EOF has already been reached when [readln] is called.

 *

 * LF or CRLF is treated as the line terminator. Line terminator is not included in the returned string.

 *

 * The input is interpreted as UTF-8. Invalid bytes are replaced by the replacement character '\uFFFD'.

 */",f3814:m75
24365,"private inline fun CheckerContext.visitCurrentScope(visitInlineLambdaParameter: (FirValueParameter) -> Unit, visitAnonymousFunction: (FirAnonymousFunction) -> Unit = {}, visitFunction: (FirFunction) -> Unit = {}, visitTryExpression: (FirTryExpression, FirElement) -> Unit = { _, _ ->})","{
    for ((elementIndex, element) in containingElements.withIndex().reversed()) { when (element) {
        is FirAnonymousFunction -> {
            if (element.inlineStatus == InlineStatus.Inline) { findValueParameterForLambdaAtIndex(elementIndex)?.let { parameter -> visitInlineLambdaParameter(parameter) } }
            visitAnonymousFunction(element)
            if (element.inlineStatus != InlineStatus.Inline) {
                return
            }
        }
        is FirFunction -> {
            visitFunction(element)
            return
        }
        is FirTryExpression -> {
            val container = containingElements.getOrNull(elementIndex + 1) ?: continue
            visitTryExpression(element, container)
        }
        is FirProperty -> { }
        is FirValueParameter -> { }
        is FirAnonymousObject, is FirAnonymousInitializer -> { }
        is FirField -> {
            if (element.origin == FirDeclarationOrigin.Synthetic.DelegateField) { } else {
                return
            }
        }
        is FirDeclaration -> return
    } }
}","/**

 * Visits all (Anonymous)Functions and `try` expressions in the current scope until it finds

 * a declaration that introduces a new scope. Elements are visited from innermost to outermost.

 */",f9187:m569
55705,"@SinceKotlin(""1.5"") @WasExperimental(ExperimentalStdlibApi::class) public fun Int.digitToChar(radix: Int): Char","{
    if (radix !in 2 .. 36) {
        throw IllegalArgumentException(""Invalid radix: $radix. Valid radix values are in range 2..36"")
    }
    if (this < 0 || this >= radix) {
        throw IllegalArgumentException(""Digit $this does not represent a valid digit in radix $radix"")
    }
    return if (this < 10) {
        '0' + this
    } else {
        'A' + this - 10
    }
}","/**

 * Returns the Char that represents this numeric digit value in the specified [radix].

 * Throws an exception if the [radix] is not in the range `2..36` or if this value is not in the range `0 until radix`.

 *

 * If this value is less than `10`, the decimal digit Char with code `'0'.code + this` is returned.

 * Otherwise, the uppercase Latin letter with code `'A'.code + this - 10` is returned.

 *

 * @sample samples.text.Chars.digitToChar

 */",f16785:m197
15406,@Test fun sign_F(),"{
    assertTrue(Float.isNaN(sign(Float.NaN)))
    assertEquals(0.0f.toBits(), sign(0.0f).toBits())
    assertEquals(+0.0f.toBits(), sign(+0.0f).toBits())
    assertEquals((-0.0f).toBits(), sign(-0.0f).toBits())
    assertEquals(1.0f, sign(253681.2187962f), 0f)
    assertEquals(-1.0f, sign(-125874693.56f), 0f)
    assertEquals(1.0f, sign(1.2587E-11f), 0f)
    assertEquals(-1.0f, sign(-1.2587E-11f), 0f)
    assertEquals(1.0f, sign(Float.MAX_VALUE), 0f)
    assertEquals(1.0f, sign(Float.MIN_VALUE), 0f)
    assertEquals(-1.0f, sign(-Float.MAX_VALUE), 0f)
    assertEquals(-1.0f, sign(-Float.MIN_VALUE), 0f)
    assertEquals(1.0f, sign(Float.POSITIVE_INFINITY), 0f)
    assertEquals(-1.0f, sign(Float.NEGATIVE_INFINITY), 0f)
}","/**

     * Tests kotlin.math.sign(float)

     */",f3868:m1209
56386,"@SinceKotlin(""1.5"") @WasExperimental(ExperimentalUnsignedTypes::class) public fun Random.nextUInt(range: UIntRange): UInt","when {
    range.isEmpty() -> throw IllegalArgumentException(""Cannot get random in empty range: $range"")
    range.last < UInt.MAX_VALUE -> nextUInt(range.first, range.last + 1u)
    range.first > UInt.MIN_VALUE -> nextUInt(range.first - 1u, range.last) + 1u
    else -> nextUInt()
}","/**

 * Gets the next random [UInt] from the random number generator in the specified [range].

 *

 * Generates a [UInt] random value uniformly distributed in the specified [range]:

 * from `range.start` inclusive to `range.endInclusive` inclusive.

 *

 * @throws IllegalArgumentException if [range] is empty.

 */",f16860:m95
14063,public fun incrementAndGet(): Long,this::value.getAndAddField(1L) + 1L,"/**

     * Atomically increments the current value by one and returns the new value.

     */",f3718:m241
57260,"@SinceKotlin(""1.4"") @kotlin.internal.InlineOnly public actual inline infix fun ByteArray?.contentEquals(other: ByteArray?): Boolean","{
    return java.util.Arrays.equals(this, other)
}","/**

 * Checks if the two specified arrays are *structurally* equal to one another.

 * 

 * Two arrays are considered structurally equal if they have the same size, and elements at corresponding indices are equal.

 * 

 * The arrays are also considered structurally equal if both are `null`.

 * 

 * @param other the array to compare with this array.

 * @return `true` if the two arrays are structurally equal, `false` otherwise.

 * 

 * @sample samples.collections.Arrays.ContentOperations.intArrayContentEquals

 */",f16970:m1169
63199,"@SinceKotlin(""1.2"") public actual fun Float.toRawBits(): Int",wasm_i32_reinterpret_f32(this),"/**

 * Returns a bit representation of the specified floating-point value as [Int]

 * according to the IEEE 754 floating-point ""single format"" bit layout,

 * preserving `NaN` values exact layout.

 */",f17314:m397
57477,"@SinceKotlin(""1.4"") @OptIn(kotlin.experimental.ExperimentalTypeInference::class) @OverloadResolutionByLambdaReturnType @kotlin.jvm.JvmName(""sumOfBigInteger"") @kotlin.internal.InlineOnly public inline fun DoubleArray.sumOf(selector: (Double) -> java.math.BigInteger): java.math.BigInteger","{
    var sum: java.math.BigInteger = 0.toBigInteger()
    for (element in this) {
        sum += selector(element)
    }
    return sum
}","/**

 * Returns the sum of all values produced by [selector] function applied to each element in the array.

 */",f16970:m6113
48294,internal inline fun Project.runProjectConfigurationHealthCheck(check: Project.() -> Unit),"{
    if (failures.isNotEmpty()) {
        return
    }
    check()
}","/**

 * Function used to wrap any checks/assertions done on the current project configuration / project model.

 *

 * Runs the given [check] only on projects that are considered ""healthy"".

 * A ""healthy"" project did evaluate correctly which means ""without exceptions/errors"".

 *

 * This function has to be used over ""just running the check"", because running project configuration checks

 * on projects that failed to configure will lead to false positive error reporting.

 * In most cases (when called in 'afterEvaluate') such false positive error message will even swallow the real root cause

 * of configuration failure.

 *

 * Note:

 * During Gradle/IDEA sync (import), Gradle will be set into `lenientMode` and will catch all exceptions

 * during evaluation of the build script. Those exceptions will be put into the [ClassPathModeExceptionCollector].

 * Any project that contains caught and collected exceptions in this 'collector' should be considered failed

 * and running project model checks is undesirable. In this mode, throwing exceptions in `afterEvaluate` will even fail the process

 * which would swallow the previously collected exceptions.

 *

 * Example:

 * We have a post-evaluation check that will report users an error if no Kotlin target

 * was registered.

 *

 * Consider the following build script:

 *

 * ```kotlin

 * plugins {

 *      kotlin(""multiplatform"")

 * }

 *

 * error(""Something went wrong during the configuration phase"")

 *

 * kotlin {

 *      jvm() // <- * Note: jvm target registered

 *      js()  // <- * Note: js target registered

 * }

 * ```

 *

 * In this example, the exception is thrown before the configuration of Kotlin targets.

 * During IDEA import, this exception will be caught and put into the [ClassPathModeExceptionCollector].

 * When running the assertion just plainly (*without this wrapper function*), the user

 * will not see the real cause of failure, but a rather bizarre:

 * ""Please initialize at least one Kotlin target""

 * error message. Which is not helpful at all.

 *

 */",f15593:m23
58918,@kotlin.internal.InlineOnly public inline fun CharSequence.elementAtOrNull(index: Int): Char?,"{
    return this.getOrNull(index)
}","/**

 * Returns a character at the given [index] or `null` if the [index] is out of bounds of this char sequence.

 * 

 * @sample samples.collections.Collections.Elements.elementAtOrNull

 */",f17097:m77
57171,"@SinceKotlin(""1.1"") @kotlin.internal.InlineOnly public actual inline fun minOf(a: Long, b: Long, c: Long): Long","{
    return minOf(a, minOf(b, c))
}","/**

 * Returns the smaller of three values.

 */",f16966:m667
55964,public fun <T> Array<out Array<out T>>.flatten(): List<T>,"{
    val result = ArrayList<T>(sumOf { it.size })
    for (element in this) {
        result.addAll(element)
    }
    return result
}","/**

 * Returns a single list of all elements from all arrays in the given array.

 * @sample samples.collections.Arrays.Transformations.flattenArray

 */",f16821:m29
11888,"@Suppress(""FINAL_UPPER_BOUND"") @ExperimentalForeignApi public fun <T: Boolean> NativePlacement.alloc(value: T): BooleanVarOf<T>",alloc<BooleanVarOf<T>> { this.value = value },"/**

 * Allocates variable with given value type and initializes it with given value.

 */",f3606:m21
58522,"@SinceKotlin(""1.5"") @WasExperimental(ExperimentalUnsignedTypes::class) @kotlin.internal.InlineOnly public inline fun ULongRange.random(): ULong","{
    return random(Random)
}","/**

 * Returns a random element from this range.

 * 

 * @throws IllegalArgumentException if this range is empty.

 */",f17090:m237
63528,internal fun ByteArray.copyOfUninitializedElements(newSize: Int): ByteArray,"{
    return copyOfUninitializedElements(0, newSize)
}","/**

 * Returns new array which is a copy of the original array with new elements filled with **lateinit** _uninitialized_ values.

 * Attempts to read _uninitialized_ values from this array work in implementation-dependent manner,

 * either throwing exception or returning some kind of implementation-specific default value.

 */",f17396:m3619
45511,private fun storeMetricsIntoFile(buildId: String),"{
    try {
        statisticsFolder.mkdirs()
        val file = File(statisticsFolder, buildId + PROFILE_FILE_NAME_SUFFIX)
        FileOutputStream(file, true).bufferedWriter().use { metricsContainer.flush(it) }
    } catch (_: IOException) { }
}","/**

     * Initializes a new build report file

     * The following contracts are implemented:

     * - each file contains metrics for one build

     * - any other process can add metrics to the file during build

     * - files with age (current time - last modified) more than maxFileAge should be deleted (if we trust lastModified returned by FS)

     */",f14856:m117
50180,@Test fun `test - custom dependsOn order`(),"{
    val linuxX64Main = kotlin.linuxX64().compilations.getByName(""main"").defaultSourceSet
    val linuxArm64Main = kotlin.linuxArm64().compilations.getByName(""main"").defaultSourceSet
    val commonMain = kotlin.sourceSets.commonMain.get()
    val a = kotlin.sourceSets.create(""a"")
    val b = kotlin.sourceSets.create(""b"")
    val c = kotlin.sourceSets.create(""c"")
    a.dependsOn(commonMain)
    b.dependsOn(commonMain)
    c.dependsOn(commonMain)
    linuxX64Main.dependsOn(c)
    linuxArm64Main.dependsOn(c)
    c.dependsOn(b)
    c.dependsOn(a)
    a.dependsOn(b)
    kotlin.sourceSets.linuxMain.get().dependsOn(c)
    project.evaluate()
    assertEquals(listOf(""test_c"", ""test_a"", ""test_b"", ""test_commonMain""), kotlin.sourceSets.linuxMain.get().dependsOnClosureCompilePath.toList().map { it.name })
}","/**

     * ```

     *           ┌─► commonMain  ◄──┐

     *           │        ▲         │

     *           │        │         │

     *           │   ┌──► b ◄────┐  │

     *           │   │           │  │

     *           │   │           │  │

     *           └───c──────────►a──┘

     *               ▲

     *               │

     *           linuxMain

     *               ▲

     *               │

     *         ┌─────┴─────┐

     *         │           │

     * linuxX64main    linuxArm64Main

     * ```

     */",f16074:m71
58731,public operator fun <T> Set<T>.plus(elements: Sequence<T>): Set<T>,"{
    val result = LinkedHashSet<T>(mapCapacity(this.size * 2))
    result.addAll(this)
    result.addAll(elements)
    return result
}","/**

 * Returns a set containing all elements of the original set and the given [elements] sequence,

 * which aren't already in this set.

 * 

 * The returned set preserves the element iteration order of the original set.

 */",f17095:m233
55912,public fun <T> hashSetOf(vararg elements: T): HashSet<T>,elements.toCollection(HashSet(mapCapacity(elements.size))),/** Returns a new [HashSet] with the given elements. */,f16817:m169
58736,public fun <T> Sequence<T>.elementAtOrNull(index: Int): T?,"{
    if (index < 0) return null
    val iterator = iterator()
    var count = 0
    while (iterator.hasNext()) {
        val element = iterator.next()
        if (index == count++) return element
    }
    return null
}","/**

 * Returns an element at the given [index] or `null` if the [index] is out of bounds of this sequence.

 *

 * The operation is _terminal_.

 * 

 * @sample samples.collections.Collections.Elements.elementAtOrNull

 */",f17096:m123
20128,public fun KtExpression.isUsedAsExpression(): Boolean,withValidityAssertion { analysisSession.expressionInfoProvider.isUsedAsExpression(this) },"/**

     * Compute if the value of a given expression is possibly used. Or,

     * conversely, compute whether the value of an expression is *not* safe to

     * discard.

     *

     * E.g. `x` in the following examples *are* used (`x.isUsedAsExpression() == true`)

     *   - `if (x) { ... } else { ... }`

     *   - `val a = x`

     *   - `x + 8`

     *   - `when (x) { 1 -> ...; else -> ... }

     *

     * E.g. `x` in the following example is definitely *not* used (`x.isUsedAsExpression() == false`)

     *   - `run { x; println(50) }`

     *   - `when (x) { else -> ... }`

     *

     * **Note!** This is a conservative check, not a control-flow analysis.

     * E.g. `x` in the following example *is possibly used*, even though the

     * value is never consumed at runtime.

     *   - `x + try { throw Exception() } finally { return }`

     *

     */",f5776:m109
43544,fun GradleProject.assertFileInProjectNotExists(pathToFile: String),"{
    assertFileNotExists(projectPath.resolve(pathToFile))
}","/**

 * Asserts file under [pathToFile] relative to the test project does not exist.

 */",f13456:m123
45775,"@Deprecated(""Dukat integration is in redesigning process. Now it does not work."") fun optionalNpm(name: String, version: String, generateExternals: Boolean): Dependency","{
    @Suppress(""deprecation_error"") (warnNpmGenerateExternals(project.logger))
    return optionalNpm(name, version)
}","/**

     * @suppress

     */",f14927:m1073
14268,"public fun compareAndSet(expected: T, newValue: T): Boolean","this::value.compareAndSetField(expected, newValue)","/**

     * Atomically sets the value to the given [new value][newValue] if the current value equals the [expected value][expected]

     * and returns true if operation was successful.

     *

     * Note that comparison is identity-based, not value-based.

     *

     * @param expected the expected value

     * @param newValue the new value

     * @return true if successful

     */",f3762:m587
56972,"@SinceKotlin(""1.3"") private inline fun <T> createCoroutineFromSuspendFunction(completion: Continuation<T>, crossinline block: (Continuation<T>) -> Any?): Continuation<Unit>","{
    val context = completion.context
    return if (context === EmptyCoroutineContext) object : RestrictedContinuationImpl(completion as Continuation<Any?>) {
        private var label = 0
    
        override fun invokeSuspend(result: Result<Any?>): Any? = when (label) {
            0 -> {
                label = 1
                result.getOrThrow()
                block(this)
            }
            1 -> {
                label = 2
                result.getOrThrow()
            }
            else -> error(""This coroutine had already completed"")
        }
    } else object : ContinuationImpl(completion as Continuation<Any?>, context) {
        private var label = 0
    
        override fun invokeSuspend(result: Result<Any?>): Any? = when (label) {
            0 -> {
                label = 1
                result.getOrThrow()
                block(this)
            }
            1 -> {
                label = 2
                result.getOrThrow()
            }
            else -> error(""This coroutine had already completed"")
        }
    }
}","/**

 * This function is used when [createCoroutineUnintercepted] encounters suspending lambda that does not extend BaseContinuationImpl.

 *

 * It happens in two cases:

 *   1. Callable reference to suspending function,

 *   2. Suspending function reference implemented by Java code.

 *

 * We must wrap it into an instance that extends [BaseContinuationImpl], because that is an expectation of all coroutines machinery.

 * As an optimization we use lighter-weight [RestrictedContinuationImpl] base class (it has less fields) if the context is

 * [EmptyCoroutineContext], and a full-blown [ContinuationImpl] class otherwise.

 *

 * The instance of [BaseContinuationImpl] is passed to the [block] so that it can be passed to the corresponding invocation.

 */",f16944:m371
41023,override fun deleteFile(outputFile: Path),"{
    if (!Files.exists(outputFile)) {
        return
    }
    if (isFileRelocationIsAlreadyRegisteredFor(outputFile)) {
        reporter.debug { ""Deleting $outputFile"" }
        Files.delete(outputFile)
        return
    }
    reporter.measure(GradleBuildTime.PRECISE_BACKUP_OUTPUT) { stashFile(outputFile) }
}","/**

     * Moves the original [outputFile] to the [stashDir] instead of deleting.

     */",f12984:m377
13831,"@ExperimentalNativeApi public inline fun assert(value: Boolean, lazyMessage: () -> Any)","{
    if (!value) {
        val message = lazyMessage()
        throw AssertionError(message)
    }
}","/**

 * Throws an [AssertionError] calculated by [lazyMessage] if the [value] is false

 * and runtime assertions have been enabled during compilation.

 */",f3687:m39
23083,"fun Project.projectTest(taskName: String = ""test"", parallel: Boolean = false, shortenTempRootName: Boolean = false, jUnitMode: JUnitMode = JUnitMode.JUnit4, maxHeapSizeMb: Int? = null, minHeapSizeMb: Int? = null, maxMetaspaceSizeMb: Int = 512, reservedCodeCacheSizeMb: Int = 256, defineJDKEnvVariables: List<JdkMajorVersion> = emptyList(), body: Test.() -> Unit = {}): TaskProvider<Test>","{
    val shouldInstrument = project.providers.gradleProperty(""kotlin.test.instrumentation.disable"").orNull?.toBoolean() != true
    if (shouldInstrument) {
        evaluationDependsOn("":test-instrumenter"")
    }
    return getOrCreateTask<Test>(taskName) {
        dependsOn("":createIdeaHomeForTests"")
        doFirst {
            if (jUnitMode == JUnitMode.JUnit5) return@doFirst
            val commandLineIncludePatterns = commandLineIncludePatterns.toMutableSet()
            val patterns = filter.includePatterns + commandLineIncludePatterns
            if (patterns.isEmpty() || patterns.any { '*' in it }) return@doFirst
            patterns.forEach { pattern ->
                var isClassPattern = false
                val maybeMethodName = pattern.substringAfterLast('.')
                val maybeClassFqName = if (maybeMethodName.isFirstChar(::isLowerCase)) {
                    pattern.substringBeforeLast('.')
                } else {
                    isClassPattern = true
                    pattern
                }
                if (!maybeClassFqName.substringAfterLast('.').isFirstChar(::isUpperCase)) {
                    return@forEach
                }
                val classFileNameWithoutExtension = maybeClassFqName.replace('.', '/')
                val classFileName = ""$classFileNameWithoutExtension.class""
                if (isClassPattern) {
                    val innerClassPattern = ""$pattern$*""
                    if (pattern in commandLineIncludePatterns) {
                        commandLineIncludePatterns.add(innerClassPattern)
                        (filter as? DefaultTestFilter)?.setCommandLineIncludePatterns(commandLineIncludePatterns)
                    } else {
                        filter.includePatterns.add(innerClassPattern)
                    }
                }
                include { treeElement ->
                    val path = treeElement.path
                    if (treeElement.isDirectory) {
                        classFileNameWithoutExtension.startsWith(path)
                    } else {
                        if (path == classFileName) return@include true
                        if (!path.endsWith("".class"")) return@include false
                        path.startsWith(""$classFileNameWithoutExtension$"")
                    }
                }
            }
        }
        if (shouldInstrument) {
            val instrumentationArgsProperty = project.providers.gradleProperty(""kotlin.test.instrumentation.args"")
            val testInstrumenterOutputs = project.tasks.findByPath("":test-instrumenter:jar"")!!.outputs.files
            doFirst {
                val agent = testInstrumenterOutputs.singleFile
                val args = instrumentationArgsProperty.orNull?.let { ""=$it"" }.orEmpty()
                jvmArgs(""-javaagent:$agent$args"")
            }
            dependsOn("":test-instrumenter:jar"")
        }
        environment(""MALLOC_ARENA_MAX"", ""2"")
        jvmArgs(""-ea"", ""-XX:+HeapDumpOnOutOfMemoryError"", ""-XX:+UseCodeCacheFlushing"", ""-XX:ReservedCodeCacheSize=${reservedCodeCacheSizeMb}m"", ""-XX:MaxMetaspaceSize=${maxMetaspaceSizeMb}m"", ""-XX:CICompilerCount=2"", ""-Djna.nosys=true"")
        val nativeMemoryTracking = project.providers.gradleProperty(""kotlin.build.test.process.NativeMemoryTracking"")
        if (nativeMemoryTracking.isPresent) {
            jvmArgs(""-XX:NativeMemoryTracking=${nativeMemoryTracking.get()}"")
        }
        val junit5ParallelTestWorkers = project.kotlinBuildProperties.junit5NumberOfThreadsForParallelExecution ?: Runtime.getRuntime().availableProcessors()
        val memoryPerTestProcessMb = if (jUnitMode == JUnitMode.JUnit5) totalMaxMemoryForTestsMb.coerceIn(defaultMaxMemoryPerTestWorkerMb, defaultMaxMemoryPerTestWorkerMb * junit5ParallelTestWorkers) else defaultMaxMemoryPerTestWorkerMb
        maxHeapSize = ""${maxHeapSizeMb ?: (memoryPerTestProcessMb - maxMetaspaceSizeMb - reservedCodeCacheSizeMb)}m""
        if (minHeapSizeMb != null) {
            minHeapSize = ""${minHeapSizeMb}m""
        }
        systemProperty(""idea.is.unit.test"", ""true"")
        systemProperty(""idea.home.path"", project.ideaHomePathForTests().get().asFile.canonicalPath)
        systemProperty(""idea.use.native.fs.for.win"", false)
        systemProperty(""java.awt.headless"", ""true"")
        environment(""NO_FS_ROOTS_ACCESS_CHECK"", ""true"")
        environment(""PROJECT_CLASSES_DIRS"", project.testSourceSet.output.classesDirs.asPath)
        environment(""PROJECT_BUILD_DIR"", project.layout.buildDirectory.get().asFile)
        systemProperty(""jps.kotlin.home"", project.rootProject.extra[""distKotlinHomeDir""]!!)
        systemProperty(""org.jetbrains.kotlin.skip.muted.tests"", if (project.rootProject.hasProperty(""skipMutedTests"")) ""true"" else ""false"")
        systemProperty(""kotlin.test.update.test.data"", if (project.rootProject.hasProperty(""kotlin.test.update.test.data"")) ""true"" else ""false"")
        systemProperty(""cacheRedirectorEnabled"", project.rootProject.findProperty(""cacheRedirectorEnabled"")?.toString() ?: ""false"")
        project.kotlinBuildProperties.junit5NumberOfThreadsForParallelExecution?.let { n ->
            systemProperty(""junit.jupiter.execution.parallel.config.strategy"", ""fixed"")
            systemProperty(""junit.jupiter.execution.parallel.config.fixed.parallelism"", n)
        }
        systemProperty(""idea.ignore.disabled.plugins"", ""true"")
        var subProjectTempRoot: Path? = null
        val projectName = project.name
        val teamcity = project.rootProject.findProperty(""teamcity"") as? Map<*, *>
        doFirst {
            val systemTempRoot = (teamcity?.get(""teamcity.build.tempDir"") as? String) ?: System.getProperty(""java.io.tmpdir"")
            systemTempRoot.let {
                val prefix = (projectName + ""Project_"" + taskName + ""_"").takeUnless { shortenTempRootName }
                subProjectTempRoot = Files.createTempDirectory(File(systemTempRoot).toPath(), prefix)
                systemProperty(""java.io.tmpdir"", subProjectTempRoot.toString())
            }
        }
        val fs = project.serviceOf<FileSystemOperations>()
        doLast { subProjectTempRoot?.let { try {
            fs.delete { delete(it) }
        } catch (e: Exception) {
            logger.warn(""Can't delete test temp root folder $it"", e.printStackTrace())
        } } }
        if (parallel && jUnitMode != JUnitMode.JUnit5) {
            val forks = (totalMaxMemoryForTestsMb / memoryPerTestProcessMb).coerceAtMost(16)
            maxParallelForks = project.providers.gradleProperty(""kotlin.test.maxParallelForks"").orNull?.toInt() ?: forks.coerceIn(1, Runtime.getRuntime().availableProcessors())
        }
        defineJDKEnvVariables.forEach { version ->
            val jdkHome = project.getToolchainJdkHomeFor(version).orNull ?: error(""Can't find toolchain for $version"")
            environment(version.envName, jdkHome)
        }
    }.apply { configure(body) }
}","/**

 * @param parallel is redundant if @param jUnit5Enabled is true, because

 *   JUnit5 supports parallel test execution by itself, without gradle help

 */",f8840:m263
10058,private fun PhaseEngine<NativeGenerationState>.runCodegen(module: IrModuleFragment),"{
    val optimize = context.shouldOptimize()
    module.files.forEach { runPhase(ReturnsInsertionPhase, it) }
    val moduleDFG = runPhase(BuildDFGPhase, module, disable = !optimize)
    val devirtualizationAnalysisResults = runPhase(DevirtualizationAnalysisPhase, DevirtualizationAnalysisInput(module, moduleDFG), disable = !optimize)
    val dceResult = runPhase(DCEPhase, DCEInput(module, moduleDFG, devirtualizationAnalysisResults), disable = !optimize)
    runPhase(RemoveRedundantCallsToStaticInitializersPhase, RedundantCallsInput(moduleDFG, devirtualizationAnalysisResults, module), disable = !optimize)
    runPhase(DevirtualizationPhase, DevirtualizationInput(module, devirtualizationAnalysisResults), disable = !optimize)
    module.files.forEach {
        runPhase(PropertyAccessorInlinePhase, it, disable = !optimize)
        runPhase(InlineClassPropertyAccessorsPhase, it, disable = !optimize)
        runPhase(RedundantCoercionsCleaningPhase, it)
        runPhase(UnboxInlinePhase, it, disable = !optimize)
    }
    runPhase(CreateLLVMDeclarationsPhase, module)
    runPhase(GHAPhase, module, disable = !optimize)
    runPhase(RTTIPhase, RTTIInput(module, dceResult))
    val lifetimes = runPhase(EscapeAnalysisPhase, EscapeAnalysisInput(module, moduleDFG, devirtualizationAnalysisResults), disable = !optimize)
    runPhase(CodegenPhase, CodegenInput(module, lifetimes))
}","/**

 * Compile lowered [module] to object file.

 * @return absolute path to object file.

 */",f3419:m715
54629,public actual fun CharSequence.elementAt(index: Int): Char,"{
    return elementAtOrElse(index) { throw IndexOutOfBoundsException(""index: $index, length: $length}"") }
}","/**

 * Returns a character at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this char sequence.

 * 

 * @sample samples.collections.Collections.Elements.elementAt

 */",f16706:m29
47764,internal suspend fun getHostSpecificMainSharedSourceSets(project: Project): Set<KotlinSourceSet>,"{
    fun KotlinSourceSet.testOnly(): Boolean = internal.compilations.all { it.isTest() }
    fun KotlinSourceSet.isCompiledToSingleTarget(): Boolean {
        return internal.compilations.distinctBy { (it.target as? KotlinNativeTarget)?.konanTarget ?: return false }.size == 1
    }
    return getHostSpecificSourceSets(project).filterNot { it.testOnly() }.filterNot { it.isCompiledToSingleTarget() }.toSet()
}","/**

 * Returns all host-specific source sets that will be compiled to two or more targets

 */",f15446:m353
43966,"private fun runConsumerTest(dependencyProject: Project, withKotlinVersion: String?)","{
    if (producerGradleVersion != consumerGradleVersion && !isPublishedLibrary) {
        println(""Testing project-to-project dependencies is only possible with one Gradle version on the consumer and producer sides"")
        return
    }
    val repositoryLinesIfNeeded = if (isPublishedLibrary) """"""
    
                    repositories {
    
                        maven { setUrl(""${dependencyProject.projectDir.resolve(""lib/build/repo"").toURI()}"") }                    
    
                    }
    
                """""".trimIndent() else """"
    val dependencyNotation = if (isPublishedLibrary) """"""""com.example:lib:1.0"""""""" else ""project(\"":${dependencyProject.projectName}:lib\"")""
    val usedConsumerGradleVersion: String
    val consumerProject = Project(""AndroidProject"", consumerGradleVersion, minLogLevel = LogLevel.INFO).apply {
        usedConsumerGradleVersion = chooseWrapperVersionOrFinishTest()
        projectDir.deleteRecursively()
        if (!isPublishedLibrary) {
            embedProject(dependencyProject)
            gradleSettingsScript().appendText(""\ninclude(\"":${dependencyProject.projectName}:lib\"")"")
        }
        setupWorkingDir(applyLanguageVersion = withKotlinVersion != oldKotlinVersion)
        gradleBuildScript(""Lib"").apply { writeText(readText().let { if (withKotlinVersion != null) it else it.checkedReplace(""id 'org.jetbrains.kotlin.android'"", ""//"") }.let { text -> if (useFlavors) text else text.lines().filter { !it.trim().startsWith(""flavor"") }.joinToString(""\n"") } + ""\n"" + """"""
        
                                android {
        
                                    buildTypes {
        
                                        // We create a build type that is missing in the library in order to check how it resolves such an MPP lib
        
                                        create(""staging"") { initWith(getByName(""debug"")) }
        
                                    }
        
                                }
        
                                $repositoryLinesIfNeeded
        
                                dependencies {
        
                                    implementation($dependencyNotation)
        
                                }
        
                            """""".trimIndent()) }
    }
    val variantNamePublishedSuffix = if (isPublishedLibrary) ""-published"" else """"
    val variantForReleaseAndStaging = if (isAndroidPublishDebugOnly && isPublishedLibrary) ""debugApiElements$variantNamePublishedSuffix"" else ""releaseApiElements$variantNamePublishedSuffix""
    fun nameWithFlavorIfNeeded(name: String) = if (useFlavors) ""flavor1${
    
                name.replaceFirstChar {
    
                    if (it.isLowerCase()) it.titlecase(
    
                        Locale.getDefault()
    
                    ) else it.toString()
    
                }
    
            }"" else name
    val configurationToExpectedVariant = listOf(nameWithFlavorIfNeeded(""debugCompileClasspath"") to nameWithFlavorIfNeeded(""debugApiElements$variantNamePublishedSuffix""), nameWithFlavorIfNeeded(""releaseCompileClasspath"") to nameWithFlavorIfNeeded(variantForReleaseAndStaging), nameWithFlavorIfNeeded(""stagingCompileClasspath"") to if (isPublishedLibrary) nameWithFlavorIfNeeded(variantForReleaseAndStaging) else ""jvmLibApiElements"")
    val dependencyInsightModuleName = if (isPublishedLibrary) ""com.example:lib:1.0"" else "":${dependencyProject.projectName}:lib""
    val consumerBuildOptions = defaultBuildOptions().copy(javaHome = File(System.getProperty(""jdk11Home"")), androidHome = KtTestUtil.findAndroidSdk(), androidGradlePluginVersion = consumerAgpVersion, kotlinVersion = withKotlinVersion ?: defaultBuildOptions().kotlinVersion).suppressDeprecationWarningsOn(""AGP uses deprecated IncrementalTaskInputs (Gradle 7.5)"") { options -> (!isPublishedLibrary && (withKotlinVersion != null || options.safeAndroidGradlePluginVersion >= AGPVersion.v7_1_0) || isPublishedLibrary && withKotlinVersion == oldKotlinVersion) && GradleVersion.version(usedConsumerGradleVersion) >= GradleVersion.version(TestVersions.Gradle.G_7_5) && options.safeAndroidGradlePluginVersion < AGPVersion.v7_3_0 }
    val variantCheckRequests = mutableMapOf<ResolvedVariantRequest, String>()
    configurationToExpectedVariant.forEach { (configuration, expected) ->
        val expectedVariant = if (withKotlinVersion == null && !isPublishedLibrary) {
            ""jvmLibApiElements""
        } else expected
        val resolvedVariantRequest = ResolvedVariantRequest(""Lib"", configuration, dependencyInsightModuleName)
        variantCheckRequests[resolvedVariantRequest] = expectedVariant
    }
    consumerProject.apply {
        gradleSettingsScript().appendText(""\ninclude(\""pure-java\"")"")
        projectDir.resolve(""pure-java/build.gradle.kts"").also { it.parentFile.mkdirs() }.writeText(""""""
        
                        plugins {
        
                            java
        
                            ${if (withKotlinVersion != null) ""kotlin(\""jvm\"")"" else """"}
        
                        }
        
                        $repositoryLinesIfNeeded
        
                        dependencies {
        
                            implementation($dependencyNotation)
        
                        }
        
                        """""".trimIndent())
        val resolvedVariantRequest = ResolvedVariantRequest(""pure-java"", ""compileClasspath"", dependencyInsightModuleName)
        variantCheckRequests[resolvedVariantRequest] = ""jvmLibApiElements$variantNamePublishedSuffix""
    }
    try {
        ResolvedVariantChecker().assertResolvedSingleVariantsBatch(consumerProject, variantCheckRequests, consumerBuildOptions)
    } catch (e: AssertionError) {
        collector.addError(AssertionError(""Failure with Kotlin version=${withKotlinVersion}"", e))
    }
}",/** Use [withKotlinVersion] = null for testing without Kotlin Gradle plugin */,f13514:m387
58989,"@SinceKotlin(""1.4"") @OptIn(kotlin.experimental.ExperimentalTypeInference::class) @OverloadResolutionByLambdaReturnType @kotlin.jvm.JvmName(""flatMapIndexedIterableTo"") @kotlin.internal.InlineOnly public inline fun <R, C: MutableCollection<in R>> CharSequence.flatMapIndexedTo(destination: C, transform: (index: Int, Char) -> Iterable<R>): C","{
    var index = 0
    for (element in this) {
        val list = transform(index++, element)
        destination.addAll(list)
    }
    return destination
}","/**

 * Appends all elements yielded from results of [transform] function being invoked on each character

 * and its index in the original char sequence, to the given [destination].

 */",f17097:m1729
11106,"fun checkPriorityAdd(task: TaskControlBlock, packet: Packet): TaskControlBlock","{
    if (this.queue == null) {
        this.queue = packet
        this.markAsRunnable()
        if (this.priority > task.priority) return this
    } else {
        this.queue = packet.addTo(this.queue)
    }
    return task
}","/**

     * Adds a packet to the work list of this block's task, marks this as runnable if

     * necessary, and returns the next runnable object to run (the one

     * with the highest priority).

     */",f3500:m617
55674,"@ExperimentalStdlibApi private fun String.hexToLong(startIndex: Int = 0, endIndex: Int = length, format: HexFormat = HexFormat.Default): Long","hexToLongImpl(startIndex, endIndex, format, maxDigits = 16)","/**

 * Parses a `Long` value from this string using the specified [format].

 *

 * Note that only [HexFormat.NumberHexFormat] affects parsing,

 * and parsing is performed in case-insensitive manner.

 *

 * @param startIndex the beginning (inclusive) of the substring to parse, 0 by default.

 * @param endIndex the end (exclusive) of the substring to parse, length of this string by default.

 * @param format the [HexFormat] to use for parsing, [HexFormat.Default] by default.

 *

 * @throws IndexOutOfBoundsException when [startIndex] or [endIndex] is out of range of this string indices.

 * @throws IllegalArgumentException when `startIndex > endIndex`.

 * @throws IllegalArgumentException if the substring does not comply with the specified [format].

 */",f16779:m1713
24805,"fun <T> enter(part: String, block: () -> T): T","{
    val prev = current
    val prevSibling = sibling
    val prevParent = parent
    val next = PathPartInfo(part)
    try {
        when {
            prevParent != null && prevSibling == null -> {
                next.parent = prevParent
                sibling = next
                parent = null
            }
            prevParent != null && prevSibling != null -> {
                next.prev = prevSibling
                sibling = next
                parent = null
            }
            else -> {
                next.parent = prev
                parent = null
            }
        }
        current = next
        return block()
    } finally {
        current = prev
        parent = prevParent
    }
}","/**

     * Enter into a new scope with path part [part].

     */",f9214:m139
59051,"@SinceKotlin(""1.4"") public inline fun CharSequence.reduceOrNull(operation: (acc: Char, Char) -> Char): Char?","{
    if (isEmpty()) return null
    var accumulator = this[0]
    for (index in 1 .. lastIndex) {
        accumulator = operation(accumulator, this[index])
    }
    return accumulator
}","/**

 * Accumulates value starting with the first character and applying [operation] from left to right

 * to current accumulator value and each character.

 * 

 * Returns `null` if the char sequence is empty.

 * 

 * @param [operation] function that takes current accumulator value and a character,

 * and calculates the next accumulator value.

 * 

 * @sample samples.collections.Collections.Aggregates.reduceOrNull

 */",f17097:m3719
54686,"@SinceKotlin(""1.4"") public actual fun LongArray?.contentToString(): String","{
    return this?.joinToString("", "", ""["", ""]"") ?: ""null""
}","/**

 * Returns a string representation of the contents of the specified array as if it is [List].

 * 

 * @sample samples.collections.Arrays.ContentOperations.contentToString

 */",f16713:m1111
43515,"fun assertClassDeclarationsContain(classesDir: Path, classFqn: String, expectedDeclarations: Set<String>)","{
    val javapPath = ""$latestSupportedJdkPath/bin/javap""
    val result = runProcess(listOf(javapPath, classFqn), classesDir.toFile())
    assert(result.isSuccessful)
    val actualDeclarations = result.output.lines().drop(2).dropLast(1).map { it.trim() }.toSet()
    val diff = expectedDeclarations - actualDeclarations
    assert(diff.isEmpty()) {
        val expectedDeclarationsString = expectedDeclarations.joinToString(separator = ""\n"", prefix = ""Expected declarations:\n"")
        val actualDeclarationsString = actualDeclarations.joinToString(separator = ""\n"", prefix = ""Actual declarations:\n"")
        ""$expectedDeclarationsString\n\n$actualDeclarationsString""
    }
}","/**

 * Asserts that the class declarations of a given class contain the expected declarations. Uses `javap` to extract those.

 *

 * @param classesDir The path to the directory containing the compiled classes.

 * @param classFqn The fully qualified name of the class to inspect.

 * @param expectedDeclarations The set of expected class declarations.

 */",f13451:m301
57301,@kotlin.internal.InlineOnly public actual inline fun DoubleArray.copyOf(): DoubleArray,"{
    return java.util.Arrays.copyOf(this, size)
}","/**

 * Returns new array which is a copy of the original array.

 * 

 * @sample samples.collections.Arrays.CopyOfOperations.copyOf

 */",f16970:m2359
45615,fun toolOptions(configure: Action<in TO>),"{
    configure.execute(toolOptions)
}","/**

     * Configures the [toolOptions] with the provided configuration.

     */",f14891:m79
56027,"public inline fun <K, V> MutableMap<K, V>.getOrPut(key: K, defaultValue: () -> V): V","{
    val value = get(key)
    return if (value == null) {
        val answer = defaultValue()
        put(key, answer)
        answer
    } else {
        value
    }
}","/**

 * Returns the value for the given [key] if the value is present and not `null`.

 * Otherwise, calls the [defaultValue] function,

 * puts its result into the map under the given key and returns the call result.

 *

 * Note that the operation is not guaranteed to be atomic if the map is being modified concurrently.

 *

 * @sample samples.collections.Maps.Usage.getOrPut

 */",f16823:m741
58020,"@kotlin.internal.InlineOnly @Suppress(""OVERRIDE_BY_INLINE"") public override inline operator fun compareTo(other: UShort): Int",this.toInt().compareTo(other.toInt()),"/**

     * Compares this value with the specified value for order.

     * Returns zero if this value is equal to the specified other value, a negative number if it's less than other,

     * or a positive number if it's greater than other.

     */",f17058:m97
56504,"@Suppress(""EXTENSION_SHADOWED_BY_MEMBER"") @SinceKotlin(""1.9"") @kotlin.internal.InlineOnly public actual inline fun StringBuilder.insert(index: Int, value: Short): StringBuilder","this.insert(index, value.toInt())","/**

 * Inserts the string representation of the specified short [value] into this string builder at the specified [index] and returns this instance.

 *

 * The overall effect is exactly as if the [value] were converted to a string by the `value.toString()` method,

 * and then that string was inserted into this string builder at the specified [index].

 *

 * @throws IndexOutOfBoundsException if [index] is less than zero or greater than the length of this string builder.

 */",f16890:m91
58628,"@Deprecated(""This `contains` operation mixing integer and floating point arguments has ambiguous semantics and is going to be removed."") @DeprecatedSinceKotlin(warningSince = ""1.3"", errorSince = ""1.4"", hiddenSince = ""1.5"") @kotlin.jvm.JvmName(""floatRangeContains"") public operator fun ClosedRange<Float>.contains(value: Long): Boolean","{
    return contains(value.toFloat())
}","/**

 * Checks if the specified [value] belongs to this range.

 */",f17092:m1255
57267,"@SinceKotlin(""1.4"") @kotlin.internal.InlineOnly public actual inline infix fun CharArray?.contentEquals(other: CharArray?): Boolean","{
    return java.util.Arrays.equals(this, other)
}","/**

 * Checks if the two specified arrays are *structurally* equal to one another.

 * 

 * Two arrays are considered structurally equal if they have the same size, and elements at corresponding indices are equal.

 * 

 * The arrays are also considered structurally equal if both are `null`.

 * 

 * @param other the array to compare with this array.

 * @return `true` if the two arrays are structurally equal, `false` otherwise.

 * 

 * @sample samples.collections.Arrays.ContentOperations.charArrayContentEquals

 */",f16970:m1429
59131,"@SinceKotlin(""1.1"") public fun <T> maxOf(a: T, b: T, c: T, comparator: Comparator<in T>): T","{
    return maxOf(a, maxOf(b, c, comparator), comparator)
}","/**

 * Returns the greater of three values according to the order specified by the given [comparator].

 * 

 * If there are multiple equal maximal values, returns the first of them.

 */",f17100:m241
57181,public fun <R> Iterable<*>.filterIsInstance(klass: Class<R>): List<R>,"{
    return filterIsInstanceTo(ArrayList<R>(), klass)
}","/**

 * Returns a list containing all elements that are instances of specified class.

 * 

 * @sample samples.collections.Collections.Filtering.filterIsInstanceJVM

 */",f16967:m37
15410,@Test fun tan_D(),"{
    assertEquals(""Incorrect answer"", 0.0, tan(0.0), 0.0)
    assertEquals(""Incorrect answer"", 1.5574077246549023, tan(1.0))
}","/**

     * Tests kotlin.math.tan(Double)

     */",f3868:m1343
45777,"@Deprecated(""Dukat integration is in redesigning process. Now it does not work."") fun optionalNpm(name: String, directory: File, generateExternals: Boolean): Dependency","{
    @Suppress(""deprecation_error"") (warnNpmGenerateExternals(project.logger))
    return optionalNpm(name, directory)
}","/**

     * @suppress

     */",f14927:m1143
64045,@kotlin.internal.IntrinsicConstEvaluation public inline operator fun times(other: Byte): Int,this.toInt() * other.toInt(),/** Multiplies this value by the other value. */,f17455:m311
63191,public actual fun Double.isInfinite(): Boolean,(this == Double.POSITIVE_INFINITY) || (this == Double.NEGATIVE_INFINITY),"/**

 * Returns `true` if this value is infinitely large in magnitude.

 */",f17314:m301
57381,"@Suppress(""ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS"") public actual fun LongArray.sort(fromIndex: Int = 0, toIndex: Int = size): Unit","{
    java.util.Arrays.sort(this, fromIndex, toIndex)
}","/**

 * Sorts a range in the array in-place.

 * 

 * @param fromIndex the start of the range (inclusive) to sort, 0 by default.

 * @param toIndex the end of the range (exclusive) to sort, size of this array by default.

 * 

 * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.

 * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].

 * 

 * @sample samples.collections.Arrays.Sorting.sortRangeOfArray

 */",f16970:m4309
56500,public actual operator fun contains(char: Char): Boolean,Character.getType(char) == this.value,"/**

     * Returns `true` if [char] character belongs to this category.

     */",f16886:m317
56086,@kotlin.internal.InlineOnly public inline operator fun <T> MutableCollection<in T>.minusAssign(elements: Array<T>),"{
    this.removeAll(elements)
}","/**

 * Removes all elements contained in the given [elements] array from this mutable collection.

 */",f16825:m185
16179,internal fun FirBasedSymbol<*>.symbolToPostponeIfCanBeResolvedOnDemand(): FirBasedSymbol<*>?,"{
    return unwrapSymbolToPostpone().takeUnless { it.cannotResolveAnnotationsOnDemand() }
}","/**

 * @return an [unwrapped][unwrapSymbolToPostpone] symbol which [can][cannotResolveAnnotationsOnDemand] be resolved on demand

 *

 * @see unwrapSymbolToPostpone

 * @see cannotResolveAnnotationsOnDemand

 */",f4076:m169
63675,"@Deprecated(""Use Kotlin compiler 1.4 to avoid deprecation warning."") @SinceKotlin(""1.3"") @DeprecatedSinceKotlin(hiddenSince = ""1.4"") @ExperimentalUnsignedTypes public fun ULongArray.contentHashCode(): Int","{
    return this.contentHashCode()
}","/**

 * Returns a hash code based on the contents of this array as if it is [List].

 */",f17408:m421
63192,public actual fun Float.isInfinite(): Boolean,(this == Float.POSITIVE_INFINITY) || (this == Float.NEGATIVE_INFINITY),"/**

 * Returns `true` if this value is infinitely large in magnitude.

 */",f17314:m311
7616,fun allLibrariesFrom(vararg libraryProjects: Project),allArtifactsFromInternal(libraryProjects) { it is KonanLibrary || it is KonanInteropLibrary },/** All libraries (both interop and non-interop ones) from the projects by direct references  */,f3130:m197
54732,"@SinceKotlin(""1.3"") @Suppress(""ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS"") public actual fun FloatArray.fill(element: Float, fromIndex: Int = 0, toIndex: Int = size): Unit","{
    AbstractList.checkRangeIndexes(fromIndex, toIndex, size)
    nativeFill(element, fromIndex, toIndex)
}","/**

 * Fills this array or its subrange with the specified [element] value.

 * 

 * @param fromIndex the start of the range (inclusive) to fill, 0 by default.

 * @param toIndex the end of the range (exclusive) to fill, size of this array by default.

 * 

 * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.

 * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].

 */",f16713:m2485
58524,"@SinceKotlin(""1.5"") @WasExperimental(ExperimentalUnsignedTypes::class) public fun ULongRange.random(random: Random): ULong","{
    try {
        return random.nextULong(this)
    } catch (e: IllegalArgumentException) {
        throw NoSuchElementException(e.message)
    }
}","/**

 * Returns a random element from this range using the specified source of randomness.

 * 

 * @throws IllegalArgumentException if this range is empty.

 */",f17090:m291
53410,"@SinceKotlin(""1.3"") public actual fun <T> Continuation<T>.intercepted(): Continuation<T>",(this as? InterceptedCoroutine)?.intercepted() ?: this,"/**

 * Intercepts this continuation with [ContinuationInterceptor].

 */",f16673:m329
14960,public actual operator fun BooleanArray.plus(element: Boolean): BooleanArray,"{
    val index = size
    val result = copyOfUninitializedElements(index + 1)
    result[index] = element
    return result
}","/**

 * Returns an array containing all elements of the original array and then the given [element].

 */",f3831:m4121
64129,public operator fun rangeTo(other: Long): LongRange,"LongRange(this.toLong(), other)",/** Creates a range from this value to the specified [other] value. */,f17455:m1493
31115,@JvmStatic fun getSyntheticMethodNameForAnnotatedProperty(baseName: String): String,"{
    return baseName + ANNOTATED_PROPERTY_METHOD_NAME_SUFFIX
}","/**

     * @param baseName JVM name of the property getter since Kotlin 1.4, or Kotlin name of the property otherwise.

     */",f10827:m107
55671,"@ExperimentalStdlibApi private fun String.hexToInt(startIndex: Int = 0, endIndex: Int = length, format: HexFormat = HexFormat.Default): Int","hexToIntImpl(startIndex, endIndex, format, maxDigits = 8)","/**

 * Parses an `Int` value from this string using the specified [format].

 *

 * Note that only [HexFormat.NumberHexFormat] affects parsing,

 * and parsing is performed in case-insensitive manner.

 *

 * @param startIndex the beginning (inclusive) of the substring to parse, 0 by default.

 * @param endIndex the end (exclusive) of the substring to parse, length of this string by default.

 * @param format the [HexFormat] to use for parsing, [HexFormat.Default] by default.

 *

 * @throws IndexOutOfBoundsException when [startIndex] or [endIndex] is out of range of this string indices.

 * @throws IllegalArgumentException when `startIndex > endIndex`.

 * @throws IllegalArgumentException if the substring does not comply with the specified [format].

 */",f16779:m1559
57306,@kotlin.internal.InlineOnly public actual inline fun IntArray.copyOf(newSize: Int): IntArray,"{
    return java.util.Arrays.copyOf(this, newSize)
}","/**

 * Returns new array which is a copy of the original array, resized to the given [newSize].

 * The copy is either truncated or padded at the end with zero values if necessary.

 * 

 * - If [newSize] is less than the size of the original array, the copy array is truncated to the [newSize].

 * - If [newSize] is greater than the size of the original array, the extra elements in the copy array are filled with zero values.

 * 

 * @sample samples.collections.Arrays.CopyOfOperations.resizedPrimitiveCopyOf

 */",f16970:m2475
23345,fun ClassLoweringPass.runOnFileInOrder(irFile: IrFile),"{
    irFile.acceptVoid(object : IrElementVisitorVoid {
        override fun visitElement(element: IrElement) {
            element.acceptChildrenVoid(this)
        }
    
        override fun visitClass(declaration: IrClass) {
            lower(declaration)
            declaration.acceptChildrenVoid(this)
        }
    })
}","/**

 * Copy of [runOnFilePostfix], but this implementation first lowers declaration, then its children.

 */",f8967:m73
64110,@kotlin.internal.IntrinsicConstEvaluation public inline operator fun div(other: Byte): Int,this.toInt() / other.toInt(),"/** Divides this value by the other value, truncating the result to an integer that is closer to zero. */",f17455:m1237
48408,internal fun ArtifactCollection.getResolvedArtifactsCompat(project: Project): Provider<Set<ResolvedArtifactResult>>,"if (GradleVersion.current() >= GradleVersion.version(""7.4"")) {
    resolvedArtifacts
} else {
    project.provider { artifacts }
}","/**

 * [ArtifactCollection.getResolvedArtifacts] is available after 7.4 (inclusive)

 */",f15623:m177
13283,fun Type.getStringRepresentation(plugin: Plugin = DefaultPlugin): String,"when (this) {
    VoidType -> ""void""
    CharType -> ""char""
    CBoolType -> if (plugin.name == ""Skia"") ""bool"" else ""_Bool""
    ObjCBoolType -> ""BOOL""
    is IntegerType -> this.spelling
    is FloatingType -> this.spelling
    is VectorType -> this.spelling
    is PointerType -> getPointerTypeStringRepresentation(this.pointeeType)
    is ArrayType -> getPointerTypeStringRepresentation(this.elemType)
    is RecordType -> this.decl.spelling
    is EnumType -> if (this.def.isAnonymous) {
        this.def.baseType.getStringRepresentation()
    } else {
        this.def.spelling
    }
    is Typedef -> this.def.aliased.getStringRepresentation(plugin)
    is ObjCPointer -> when (this) {
        is ObjCIdType -> ""id$protocolQualifier""
        is ObjCClassPointer -> ""Class$protocolQualifier""
        is ObjCObjectPointer -> ""${def.name}$protocolQualifier*""
        is ObjCInstanceType -> TODO(this.toString())
        is ObjCBlockPointer -> ""id""
    }
    is ManagedType -> with(plugin) { this@getStringRepresentation.stringRepresentation }
    else -> throw NotImplementedError()
}","/**

 * Returns the expression which could be used for this type in C code.

 * Note: the resulting string doesn't exactly represent this type, but it is enough for current purposes.

 *

 * TODO: use libclang to implement?

 */",f3656:m57
59107,"@SinceKotlin(""1.4"") @ExperimentalUnsignedTypes public fun minOf(a: UByte, vararg other: UByte): UByte","{
    var min = a
    for (e in other) min = minOf(min, e)
    return min
}","/**

 * Returns the smaller of the given values.

 */",f17098:m473
54803,"@SinceKotlin(""1.1"") @kotlin.internal.InlineOnly public actual inline fun maxOf(a: Float, b: Float): Float","{
    return JsMath.max(a, b)
}","/**

 * Returns the greater of two values.

 * 

 * If either value is `NaN`, returns `NaN`.

 */",f16714:m121
57352,public actual operator fun IntArray.plus(elements: Collection<Int>): IntArray,"{
    var index = size
    val result = java.util.Arrays.copyOf(this, index + elements.size)
    for (element in elements) result[index++] = element
    return result
}","/**

 * Returns an array containing all elements of the original array and then all elements of the given [elements] collection.

 */",f16970:m3667
58086,@kotlin.internal.InlineOnly public inline operator fun times(other: UByte): UInt,this.toUInt().times(other.toUInt()),/** Multiplies this value by the other value. */,f17059:m199
50448,@Test fun `exception thrown in buildscript evaluation - inside user buildscript`(),"{
    val project = buildProjectWithMPP()
    val executed = mutableListOf<String>()
    project.launchInStage(AfterEvaluateBuildscript) { executed.add(""AfterEvaluateBuildscript"") }
    project.launchInStage(ReadyForExecution) { executed.add(""ReadyForExecution"") }
    project.tasks.whenObjectAdded { throw TestException() }
    assertFails { project.evaluate() }
    run {
        assertEquals(EvaluateBuildscript, project.kotlinPluginLifecycle.stage)
        assertEquals(emptyList(), executed)
        val result = project.configurationResult.getOrThrow()
        assertIsInstance<ProjectConfigurationResult.Failure>(result)
        project.future { project.configurationResult.await() }.getOrThrow()
    }
}","/**

     * Demonstrates how coroutines will behave if any exception is thrown within the buildscript of the user.

     * Such an exception would be:

     * ```kotlin

     * kotlin {

     *     sourceSets.getByName(""notExistingSourceSet"") // <- throws UnknownDomainObjectException

     * }

     * ``

     *

     * In this case, all coroutines scheduled for later execution *will not be executed*

     */",f16110:m327
69891,"@JvmStatic fun findStaticallyKnownSubtype(supertype: KotlinType, subtypeConstructor: TypeConstructor): TypeReconstructionResult","{
    assert(!supertype.isMarkedNullable) { ""This method only makes sense for non-nullable types"" }
    val descriptor = subtypeConstructor.declarationDescriptor ?: error(""Can't create default type for "" + subtypeConstructor)
    val subtypeWithVariables = descriptor.defaultType
    val supertypeWithVariables = TypeCheckingProcedure.findCorrespondingSupertype(subtypeWithVariables, supertype)
    val variables = subtypeWithVariables.constructor.parameters
    val variableConstructors = variables.map(TypeParameterDescriptor::getTypeConstructor).toSet()
    val substitution: MutableMap<TypeConstructor, TypeProjection> = if (supertypeWithVariables != null) {
        val solution = TypeUnifier.unify(TypeProjectionImpl(supertype), TypeProjectionImpl(supertypeWithVariables), variableConstructors::contains)
        Maps.newHashMap(solution.substitution)
    } else {
        Maps.newHashMapWithExpectedSize<TypeConstructor, TypeProjection>(variables.size)
    }
    var allArgumentsInferred = true
    for (variable in variables) {
        val value = substitution[variable.typeConstructor]
        if (value == null) {
            substitution.put(variable.typeConstructor, TypeUtils.makeStarProjection(variable))
            allArgumentsInferred = false
        }
    }
    val substituted = TypeSubstitutor.create(substitution).substitute(subtypeWithVariables, Variance.INVARIANT)
    return TypeReconstructionResult(substituted, allArgumentsInferred)
}","/**

     * Remember that we are trying to cast something of type `supertype` to `subtype`.



     * Since at runtime we can only check the class (type constructor), the rest of the subtype should be known statically, from supertype.

     * This method reconstructs all static information that can be obtained from supertype.



     * Example 1:

     * supertype = Collection

     * subtype = List<...>

     * result = List, all arguments are inferred



     * Example 2:

     * supertype = Any

     * subtype = List<...>

     * result = List<*>, some arguments were not inferred, replaced with '*'

     */",f19566:m287
63258,public actual fun String.toDouble(): Double,kotlin.text.parseDouble(this),"/**

 * Parses the string as a [Double] number and returns the result.

 * @throws NumberFormatException if the string is not a valid representation of a number.

 */",f17352:m137
20258,public fun KtFile.getOriginalKtFile(): KtFile?,withValidityAssertion { analysisSession.originalPsiProvider.getOriginalKtFile(this) },"/**

     * If [this] is a fake file analyzed in dependent session, returns the original file for [this]. Otherwise, returns `null`.

     */",f5806:m55
14841,"@Deprecated(""Use Kotlin compiler 1.4 to avoid deprecation warning."") @SinceKotlin(""1.1"") @DeprecatedSinceKotlin(hiddenSince = ""1.4"") public infix fun FloatArray.contentEquals(other: FloatArray): Boolean","{
    return this.contentEquals(other)
}","/**

 * Checks if the two specified arrays are *structurally* equal to one another.

 * 

 * Two arrays are considered structurally equal if they have the same size, and elements at corresponding indices are equal.

 * Elements are compared for equality using the [equals][Any.equals] function.

 * This means `NaN` is equal to itself and `-0.0` is not equal to `0.0`.

 * 

 * @param other the array to compare with this array.

 * @return `true` if the two arrays are structurally equal, `false` otherwise.

 * 

 * @sample samples.collections.Arrays.ContentOperations.doubleArrayContentEquals

 */",f3831:m831
52036,"fun String.asErrorDiagnostics(code: Int = ScriptDiagnostic.unspecifiedError, path: String? = null, location: SourceCode.Location? = null): ScriptDiagnostic","ScriptDiagnostic(code, this, ScriptDiagnostic.Severity.ERROR, path, location)","/**

 * Converts the receiver String to error diagnostic report with optional [path] and [location]

 */",f16426:m531
34413,internal fun CommonizerParameters.commonModuleNames(target: CommonizerTarget): Set<String>,"{
    val supportedTargets = target.withAllLeaves().mapNotNull(targetProviders::getOrNull)
    if (supportedTargets.isEmpty()) return emptySet()
    val allModuleNames: List<Set<String>> = supportedTargets.toList().map { targetProvider -> targetProvider.modulesProvider.moduleInfos.mapTo(HashSet()) { it.name } }
    return allModuleNames.reduce { a, b -> a intersect b }
}","/**

 * @return Set of module names that is available across all children targets

 */",f11298:m15
46398,fun builderWith(b: MemberBuildActionP<TParam>),"{
    buildActions += BuildAction.Parametrized(b)
}",/** Registers member builder function with the parameter(s) of this DSL */,f15048:m187
58296,"@SinceKotlin(""1.5"") @WasExperimental(ExperimentalUnsignedTypes::class) public fun String.toUIntOrNull(radix: Int): UInt?","{
    checkRadix(radix)
    val length = this.length
    if (length == 0) return null
    val limit: UInt = UInt.MAX_VALUE
    val start: Int
    val firstChar = this[0]
    if (firstChar < '0') {
        if (length == 1 || firstChar != '+') return null
        start = 1
    } else {
        start = 0
    }
    val limitForMaxRadix = 119304647u
    var limitBeforeMul = limitForMaxRadix
    val uradix = radix.toUInt()
    var result = 0u
    for (i in start until length) {
        val digit = digitOf(this[i], radix)
        if (digit < 0) return null
        if (result > limitBeforeMul) {
            if (limitBeforeMul == limitForMaxRadix) {
                limitBeforeMul = limit / uradix
                if (result > limitBeforeMul) {
                    return null
                }
            } else {
                return null
            }
        }
        result *= uradix
        val beforeAdding = result
        result += digit.toUInt()
        if (result < beforeAdding) return null
    }
    return result
}","/**

 * Parses the string as an [UInt] number and returns the result

 * or `null` if the string is not a valid representation of a number.

 *

 * @throws IllegalArgumentException when [radix] is not a valid radix for string to number conversion.

 */",f17067:m351
56186,@kotlin.internal.InlineOnly public inline fun check(value: Boolean): Unit,"{
    contract { returns() implies value }
    check(value) { ""Check failed."" }
}","/**

 * Throws an [IllegalStateException] if the [value] is false.

 *

 * @sample samples.misc.Preconditions.failCheckWithLazyMessage

 */",f16839:m145
49980,"private fun getClassSnapshotGranularity(classpathEntryDirOrJar: File, gradleUserHomeDir: File): ClassSnapshotGranularity","{
    return if (classpathEntryDirOrJar.startsWith(gradleUserHomeDir) || classpathEntryDirOrJar.name == ""android.jar"") CLASS_LEVEL else CLASS_MEMBER_LEVEL
}","/**

     * Determines the [ClassSnapshotGranularity] when taking a snapshot of the given [classpathEntryDirOrJar].

     *

     * As mentioned in [ClassSnapshotGranularity]'s kdoc, we will take [CLASS_LEVEL] snapshots for classes that are infrequently changed

     * (e.g., external libraries which are typically stored/transformed inside the Gradle user home, or a few hard-coded cases), and take

     * [CLASS_MEMBER_LEVEL] snapshots for the others.

     */",f16025:m179
42686,fun CompiledProject.getOutputForTask(taskPath: String): String,"getOutputForTask(taskPath, output)","/**

     * Filter output for specific task with given [taskPath]

     *

     * Requires using [LogLevel.DEBUG].

     */",f13358:m1641
11096,fun holdCurrent(): TaskControlBlock?,"{
    this.holdCount++
    this.currentTcb!!.markAsHeld()
    return this.currentTcb!!.link
}","/**

     * Block the currently executing task and return the next task control block

     * to run.  The blocked task will not be made runnable until it is explicitly

     * released, even if new work is added to it.

     */",f3500:m397
58087,@kotlin.internal.InlineOnly public inline operator fun times(other: UShort): UInt,this.toUInt().times(other.toUInt()),/** Multiplies this value by the other value. */,f17059:m205
56478,"@SinceKotlin(""1.4"") @kotlin.internal.InlineOnly public actual inline fun String?.toBoolean(): Boolean",java.lang.Boolean.parseBoolean(this),"/**

 * Returns `true` if this string is not `null` and its content is equal to the word ""true"", ignoring case, and `false` otherwise.

 *

 * There are also strict versions of the function available on non-nullable String, [toBooleanStrict] and [toBooleanStrictOrNull].

 */",f16885:m95
48498,"fun findExecutable(namePrefix: String, buildType: String): Executable?","findExecutable(namePrefix, NativeBuildType.valueOf(buildType.toUpperCaseAsciiOnly()))",/** Returns an executable with the given [namePrefix] and the given build type. Returns null if there is no such binary. */,f15652:m113
58870,"@SinceKotlin(""1.4"") public fun <S, T: S> Sequence<T>.runningReduceIndexed(operation: (index: Int, acc: S, T) -> S): Sequence<S>","{
    return sequence {
        val iterator = iterator()
        if (iterator.hasNext()) {
            var accumulator: S = iterator.next()
            yield(accumulator)
            var index = 1
            while (iterator.hasNext()) {
                accumulator = operation(checkIndexOverflow(index++), accumulator, iterator.next())
                yield(accumulator)
            }
        }
    }
}","/**

 * Returns a sequence containing successive accumulation values generated by applying [operation] from left to right

 * to each element, its index in the original sequence and current accumulator value that starts with the first element of this sequence.

 * 

 * Note that `acc` value passed to [operation] function should not be mutated;

 * otherwise it would affect the previous value in resulting sequence.

 * 

 * @param [operation] function that takes the index of an element, current accumulator value

 * and the element itself, and calculates the next accumulator value.

 *

 * The operation is _intermediate_ and _stateless_.

 * 

 * @sample samples.collections.Collections.Aggregates.runningReduce

 */",f17096:m4753
63509,"public actual fun <T> Array<T>.copyOfRange(fromIndex: Int, toIndex: Int): Array<T>","{
    checkCopyOfRangeArguments(fromIndex, toIndex, size)
    return copyOfUninitializedElements(fromIndex, toIndex)
}","/**

 * Returns a new array which is a copy of the specified range of the original array.

 * 

 * @param fromIndex the start of the range (inclusive) to copy.

 * @param toIndex the end of the range (exclusive) to copy.

 * 

 * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.

 * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].

 */",f17396:m3061
55667,"@ExperimentalStdlibApi @SinceKotlin(""1.9"") public fun String.hexToShort(format: HexFormat = HexFormat.Default): Short","hexToShort(0, length, format)","/**

 * Parses a `Short` value from this string using the specified [format].

 *

 * Note that only [HexFormat.NumberHexFormat] affects parsing,

 * and parsing is performed in case-insensitive manner.

 *

 * @param format the [HexFormat] to use for parsing, [HexFormat.Default] by default.

 *

 * @throws IllegalArgumentException if this string does not comply with the specified [format].

 */",f16779:m1393
59060,"@SinceKotlin(""1.4"") public inline fun <R> CharSequence.scan(initial: R, operation: (acc: R, Char) -> R): List<R>","{
    return runningFold(initial, operation)
}","/**

 * Returns a list containing successive accumulation values generated by applying [operation] from left to right

 * to each character and current accumulator value that starts with [initial] value.

 * 

 * Note that `acc` value passed to [operation] function should not be mutated;

 * otherwise it would affect the previous value in resulting list.

 * 

 * @param [operation] function that takes current accumulator value and a character, and calculates the next accumulator value.

 * 

 * @sample samples.collections.Collections.Aggregates.scan

 */",f17097:m4131
56902,"public actual fun <T> lazy(lock: Any?, initializer: () -> T): Lazy<T>","SynchronizedLazyImpl(initializer, lock)","/**

 * Creates a new instance of the [Lazy] that uses the specified initialization function [initializer]

 * and the default thread-safety mode [LazyThreadSafetyMode.SYNCHRONIZED].

 *

 * If the initialization of a value throws an exception, it will attempt to reinitialize the value at next access.

 *

 * The returned instance uses the specified [lock] object to synchronize on.

 * When the [lock] is not specified the instance uses itself to synchronize on,

 * in this case do not synchronize from external code on the returned instance as it may cause accidental deadlock.

 * Also this behavior can be changed in the future.

 */",f16934:m79
56873,"@SinceKotlin(""1.4"") @kotlin.internal.InlineOnly public actual inline fun Long.takeHighestOneBit(): Long",java.lang.Long.highestOneBit(this),"/**

 * Returns a number having a single bit set in the position of the most significant set bit of this [Long] number,

 * or zero, if this number is zero.

 */",f16929:m373
58487,"@SinceKotlin(""1.4"") @OptIn(kotlin.experimental.ExperimentalTypeInference::class) @OverloadResolutionByLambdaReturnType @kotlin.internal.InlineOnly public inline fun <K, V, R: Comparable<R>> Map<out K, V>.maxOf(selector: (Map.Entry<K, V>) -> R): R","{
    return entries.maxOf(selector)
}","/**

 * Returns the largest value among all values produced by [selector] function

 * applied to each entry in the map.

 * 

 * @throws NoSuchElementException if the map is empty.

 */",f17089:m553
59089,"@SinceKotlin(""1.5"") @WasExperimental(ExperimentalUnsignedTypes::class) @kotlin.internal.InlineOnly public inline fun maxOf(a: UInt, b: UInt, c: UInt): UInt","{
    return maxOf(a, maxOf(b, c))
}","/**

 * Returns the greater of three values.

 */",f17098:m109
20184,public fun KtCallableSymbol.getAllOverriddenSymbols(): List<KtCallableSymbol>,withValidityAssertion { analysisSession.symbolDeclarationOverridesProvider.getAllOverriddenSymbols(this) },"/**

     * Return a list of **all** explicitly declared symbols that are overridden by symbol

     *

     * E.g., if we have `A.foo` overrides `B.foo` overrides `C.foo`, all two super declarations `B.foo`, `C.foo` will be returned

     *

     * Unwraps substituted overridden symbols

     * (see [INTERSECTION_OVERRIDE][org.jetbrains.kotlin.analysis.api.symbols.KtSymbolOrigin.INTERSECTION_OVERRIDE] and [SUBSTITUTION_OVERRIDE][org.jetbrains.kotlin.analysis.api.symbols.KtSymbolOrigin.SUBSTITUTION_OVERRIDE]),

     * so such fake declaration won't be returned.

     *

     * @see getDirectlyOverriddenSymbols

     */",f5787:m47
57387,"@Suppress(""ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS"") public actual fun <T> Array<out T>.sortWith(comparator: Comparator<in T>, fromIndex: Int = 0, toIndex: Int = size): Unit","{
    java.util.Arrays.sort(this, fromIndex, toIndex, comparator)
}","/**

 * Sorts a range in the array in-place with the given [comparator].

 * 

 * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.

 * 

 * @param fromIndex the start of the range (inclusive) to sort, 0 by default.

 * @param toIndex the end of the range (exclusive) to sort, size of this array by default.

 * 

 * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.

 * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].

 */",f16970:m4489
57145,"@SinceKotlin(""1.1"") @kotlin.internal.InlineOnly public actual inline fun maxOf(a: Double, b: Double): Double","{
    return Math.max(a, b)
}","/**

 * Returns the greater of two values.

 * 

 * If either value is `NaN`, returns `NaN`.

 */",f16966:m147
58771,public fun <T: Comparable<T>> Sequence<T>.sorted(): Sequence<T>,"{
    return object : Sequence<T> {
        override fun iterator(): Iterator<T> {
            val sortedList = this@sorted.toMutableList()
            sortedList.sort()
            return sortedList.iterator()
        }
    }
}","/**

 * Returns a sequence that yields elements of this sequence sorted according to their natural sort order.

 * 

 * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.

 *

 * The operation is _intermediate_ and _stateful_.

 */",f17096:m1159
54721,"public actual fun IntArray.copyOfRange(fromIndex: Int, toIndex: Int): IntArray","{
    AbstractList.checkRangeIndexes(fromIndex, toIndex, size)
    return this.asDynamic().slice(fromIndex, toIndex)
}","/**

 * Returns a new array which is a copy of the specified range of the original array.

 * 

 * @param fromIndex the start of the range (inclusive) to copy.

 * @param toIndex the end of the range (exclusive) to copy.

 * 

 * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.

 * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].

 */",f16713:m2157
58907,"@kotlin.jvm.JvmName(""averageOfLong"") public fun Sequence<Long>.average(): Double","{
    var sum: Double = 0.0
    var count: Int = 0
    for (element in this) {
        sum += element
        checkCountOverflow(++count)
    }
    return if (count == 0) Double.NaN else sum / count
}","/**

 * Returns an average value of elements in the sequence.

 *

 * The operation is _terminal_.

 */",f17096:m5959
10455,override fun recalculate(),"{
    val ihn = input()
    val out = output()
    out.walkStrength = Strength.weakestOf(strength, ihn.walkStrength)
    out.stay = ihn.stay && scale.stay && offset.stay
    if (out.stay) execute()
}","/**

   * Calculate the walkabout strength, the stay flag, and, if it is

   * 'stay', the value for the current output of this constraint. Assume

   * this constraint is satisfied.

   */",f3476:m863
58843,"@SinceKotlin(""1.7"") @kotlin.jvm.JvmName(""minOrThrow"") @Suppress(""CONFLICTING_OVERLOADS"") public fun <T: Comparable<T>> Sequence<T>.min(): T","{
    val iterator = iterator()
    if (!iterator.hasNext()) throw NoSuchElementException()
    var min = iterator.next()
    while (iterator.hasNext()) {
        val e = iterator.next()
        if (min > e) min = e
    }
    return min
}","/**

 * Returns the smallest element.

 *

 * The operation is _terminal_.

 * 

 * @throws NoSuchElementException if the sequence is empty.

 */",f17096:m3567
12050,@BetaInteropApi public fun getOriginalKotlinClass(objCProtocol: ObjCProtocol): KClass<*>?,"{
    val typeInfo = getTypeInfoForProtocol(objCProtocol.objcPtr())
    if (typeInfo.isNull()) return null
    return KClassImpl<Any>(typeInfo)
}","/**

 * If [objCProtocol] is a protocol generated to Objective-C header for Kotlin class,

 * returns [KClass] for that original Kotlin class.

 *

 * Otherwise returns `null`.

 */",f3618:m51
56130,@kotlin.internal.InlineOnly public inline fun <T> compareByDescending(crossinline selector: (T) -> Comparable<*>?): Comparator<T>,"Comparator { a, b -> compareValuesBy(b, a, selector) }","/**

 * Creates a descending comparator using the function to transform value to a [Comparable] instance for comparison.

 *

 * @sample samples.comparisons.Comparisons.compareByDescendingWithSingleSelector

 */",f16832:m227
56850,"@SinceKotlin(""1.2"") @kotlin.internal.InlineOnly public inline fun BigInteger.toBigDecimal(scale: Int = 0, mathContext: MathContext = MathContext.UNLIMITED): BigDecimal","BigDecimal(this, scale, mathContext)","/**

 * Returns the value of this [BigInteger] number as a [BigDecimal]

 * scaled according to the specified [scale] and rounded according to the settings specified with [mathContext].

 *

 * @param scale the scale of the resulting [BigDecimal], i.e. number of decimal places of the fractional part.

 * By default 0.

 */",f16927:m235
57385,"public fun <T> Array<out T>.sort(fromIndex: Int = 0, toIndex: Int = size): Unit","{
    java.util.Arrays.sort(this, fromIndex, toIndex)
}","/**

 * Sorts a range in the array in-place.

 * 

 * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.

 * 

 * @param fromIndex the start of the range (inclusive) to sort, 0 by default.

 * @param toIndex the end of the range (exclusive) to sort, size of this array by default.

 * 

 * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.

 * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].

 * 

 * @sample samples.collections.Arrays.Sorting.sortRangeOfArrayOfComparable

 */",f16970:m4437
52770,@Test fun testSimpleMatch(),"{
    val regex = Regex(""foo.*"")
    var testString = ""foo123""
    assertTrue(regex.matches(testString))
    assertTrue(regex in testString)
    assertTrue(regex.find(testString) != null)
    testString = ""fox""
    assertFalse(regex.matches(testString))
    assertFalse(regex in testString)
    assertFalse(regex.find(testString) != null)
    assertTrue(Regex(""foo.*"").matches(""foo123""))
    assertFalse(Regex(""foo.*"").matches(""fox""))
    assertFalse(Regex(""bar"").matches(""foobar""))
    assertTrue(Regex("""").matches(""""))
}","/**

     * Tests simple pattern compilation and matching methods

     */",f16573:m53
14916,public actual fun <T> Array<T>.copyOf(newSize: Int): Array<T?>,"{
    return this.copyOfNulls(newSize)
}","/**

 * Returns new array which is a copy of the original array, resized to the given [newSize].

 * The copy is either truncated or padded at the end with `null` values if necessary.

 * 

 * - If [newSize] is less than the size of the original array, the copy array is truncated to the [newSize].

 * - If [newSize] is greater than the size of the original array, the extra elements in the copy array are filled with `null` values.

 * 

 * @sample samples.collections.Arrays.CopyOfOperations.resizingCopyOf

 */",f3831:m2983
59007,public inline fun CharSequence.any(predicate: (Char) -> Boolean): Boolean,"{
    for (element in this) if (predicate(element)) return true
    return false
}","/**

 * Returns `true` if at least one character matches the given [predicate].

 * 

 * @sample samples.collections.Collections.Aggregates.anyWithPredicate

 */",f17097:m2163
18048,fun analyze(element: KtElement),"{
    val project = element.project
    val nextInlineFunctions = HashSet<KtDeclarationWithBody>()
    val collector = InlineFunctionsCollector(project, analyzeOnlyReifiedInlineFunctions) { declaration -> if (!analyzedElements.contains(declaration)) {
        nextInlineFunctions.add(declaration)
    } }
    val propertyAccessor = InlineDelegatedPropertyAccessorsAnalyzer(analysisContext, collector)
    element.accept(object : KtTreeVisitorVoid() {
        override fun visitExpression(expression: KtExpression) {
            super.visitExpression(expression)
            val bindingContext = analysisContext.analyze(expression)
            val call = bindingContext.get(BindingContext.CALL, expression) ?: return
            val resolvedCall = bindingContext.get(BindingContext.RESOLVED_CALL, call)
            collector.checkResolveCall(resolvedCall)
        }
    
        override fun visitDestructuringDeclaration(destructuringDeclaration: KtDestructuringDeclaration) {
            super.visitDestructuringDeclaration(destructuringDeclaration)
            val bindingContext = analysisContext.analyze(destructuringDeclaration)
            for (entry in destructuringDeclaration.entries) {
                val resolvedCall = bindingContext.get(BindingContext.COMPONENT_RESOLVED_CALL, entry)
                collector.checkResolveCall(resolvedCall)
            }
        }
    
        override fun visitForExpression(expression: KtForExpression) {
            super.visitForExpression(expression)
            val bindingContext = analysisContext.analyze(expression)
            collector.checkResolveCall(bindingContext.get(BindingContext.LOOP_RANGE_ITERATOR_RESOLVED_CALL, expression.loopRange))
            collector.checkResolveCall(bindingContext.get(BindingContext.LOOP_RANGE_HAS_NEXT_RESOLVED_CALL, expression.loopRange))
            collector.checkResolveCall(bindingContext.get(BindingContext.LOOP_RANGE_NEXT_RESOLVED_CALL, expression.loopRange))
        }
    
        override fun visitProperty(property: KtProperty) {
            super.visitProperty(property)
            propertyAccessor.visitProperty(property)
        }
    })
    analyzedElements.add(element)
    if (nextInlineFunctions.isNotEmpty()) {
        for (inlineFunction in nextInlineFunctions) {
            if (inlineFunction.bodyExpression != null) {
                inlineFunctionsWithBody.add(inlineFunction)
                analyze(inlineFunction)
            }
        }
        analyzedElements.addAll(nextInlineFunctions)
    }
}","/**

     * Collects all inline function calls in an [element] (usually a file) and follows each transitively.

     */",f5399:m63
65235,"internal fun _markDirty(file: File, root: JavaSourceRootDescriptor)","{
    val isCrossCompiled = root is KotlinIncludedModuleSourceRoot
    val old = _dirty.put(file.normalize().absoluteFile, KotlinModuleBuildTarget.Source(file, isCrossCompiled))
    check(old == null || old.isCrossCompiled == isCrossCompiled) { ""`${file.normalize().absoluteFile}` already marked as dirty: "" + ""old is cross compiled: ${old!!.isCrossCompiled}, "" + ""new is cross compiled: $isCrossCompiled"" }
}","/**

         * Should be called only from [FSOperationsHelper.markFilesForCurrentRound]

         * and during KotlinDirtySourceFilesHolder initialization.

         */",f17600:m93
34358,override fun testSuiteDidFinish(testSuite: XCTestSuite),"{
    val duration = testSuite.getTestDuration().inWholeMilliseconds
    if (testSuite is XCTestSuiteWrapper) {
        sendToListeners { finishSuite(testSuite.testSuite, duration) }
    } else if (testSuite.name == TOP_LEVEL_SUITE) {
        sendToListeners {
            finishIteration(testSettings, 0, duration)
            finishTesting(testSettings, duration)
        }
    }
}","/**

     * Test suite finish notification.

     */",f11292:m223
58851,"@SinceKotlin(""1.4"") @OptIn(kotlin.experimental.ExperimentalTypeInference::class) @OverloadResolutionByLambdaReturnType @kotlin.internal.InlineOnly public inline fun <T, R: Comparable<R>> Sequence<T>.minOfOrNull(selector: (T) -> R): R?","{
    val iterator = iterator()
    if (!iterator.hasNext()) return null
    var minValue = selector(iterator.next())
    while (iterator.hasNext()) {
        val v = selector(iterator.next())
        if (minValue > v) {
            minValue = v
        }
    }
    return minValue
}","/**

 * Returns the smallest value among all values produced by [selector] function

 * applied to each element in the sequence or `null` if there are no elements.

 *

 * The operation is _terminal_.

 */",f17096:m3959
16691,"private fun rebindDelegateAccess(expression: FirExpression?, newPropertySymbol: FirPropertySymbol, oldPropertySymbol: FirPropertySymbol)","{
    requireWithAttachment(expression is FirPropertyAccessExpression, { ""Unexpected delegate accessor expression: ${expression?.let { it::class.simpleName }}"" }) {
        withFirSymbolEntry(""newTarget"", newPropertySymbol)
        withFirSymbolEntry(""oldTarget"", oldPropertySymbol)
        expression?.let { withFirEntry(""expression"", it) }
    }
    val delegateFieldReference = expression.calleeReference
    requireWithAttachment(delegateFieldReference is FirDelegateFieldReference, { ""Unexpected callee reference: ${delegateFieldReference::class.simpleName}"" }) {
        withFirSymbolEntry(""newTarget"", newPropertySymbol)
        withFirSymbolEntry(""oldTarget"", oldPropertySymbol)
        withFirEntry(""delegateFieldReference"", delegateFieldReference)
    }
    requireWithAttachment(delegateFieldReference.resolvedSymbol == oldPropertySymbol.delegateFieldSymbol, { ""Unexpected delegate field symbol"" }) {
        withFirSymbolEntry(""newTarget"", newPropertySymbol)
        withFirSymbolEntry(""oldTarget"", oldPropertySymbol)
        withFirSymbolEntry(""field"", delegateFieldReference.resolvedSymbol)
    }
    expression.replaceCalleeReference(buildDelegateFieldReference {
        source = delegateFieldReference.source
        resolvedSymbol = newPropertySymbol.delegateFieldSymbol ?: errorWithAttachment(""Delegate field is missing"") {
            withFirSymbolEntry(""newTarget"", newPropertySymbol)
            withFirSymbolEntry(""oldTarget"", oldPropertySymbol)
        }
    })
    expression.dispatchReceiver?.let { rebindThisRef(expression = it, newTarget = newPropertySymbol, oldTarget = oldPropertySymbol, canHavePropertySymbolAsThisReference = false) }
}","/**

 * To cover `delegateAccess` function

 *

 * @see org.jetbrains.kotlin.fir.builder.generateAccessorsByDelegate

 */",f4161:m1009
54637,internal fun Char.getCategoryValue(): Int,"{
    val ch = this.code
    val index = binarySearchRange(Category.decodedRangeStart, ch)
    val start = Category.decodedRangeStart[index]
    val code = Category.decodedRangeCategory[index]
    val value = categoryValueFrom(code, ch - start)
    return if (value == 17) CharCategory.UNASSIGNED.value else value
}","/**

 * Returns the Unicode general category of this character as an Int.

 */",f16711:m105
50980,@Test fun `test - custom compilation`(),"buildProjectWithMPP().runLifecycleAwareTest { multiplatformExtension.jvm().apply {
    withJava()
    var instanceUsedForConfigureBlock: KotlinJvmCompilation? = null
    val instanceReturnedFromCreate = compilations.create(""custom"") { instance ->
        assertNull(instanceUsedForConfigureBlock)
        instanceUsedForConfigureBlock = instance
    }
    val instanceReturnedFromGet = compilations.getByName(""custom"")
    assertSame(instanceReturnedFromCreate, instanceUsedForConfigureBlock)
    assertSame(instanceReturnedFromGet, instanceUsedForConfigureBlock)
} }","/**

     * Regression was introduced by:

     *

     * ```

     * [Gradle] Ensure java source sets being created eagerly for 'withJava' Sebastian Sellmair* 07.07.23, 20:49

     * 817e3de8f546e34974b89fef0f4f93b425e7e607

     * ```

     *

     * The commit was ensuring that jvm compilations will create their associated java source sets

     * as eager as possible. The solution chosen in the commit was that already the construction of the compilation

     * will spawn a coroutine that waits for the `withJavaEnabled` callback to create the java source set.

     *

     * However, a buildscript like

     *

     * ```kotlin

     * kotlin {

     *     jvm().withJava()

     *     val customCompilation = jvm().compilations.create(""custom"")

     *          //    ^

     *          //    Zombie

     * }

     * ```

     *

     * would therefore try to create the java source set right in the constructor call of the 'custom' compilation.

     * This would have triggered a listener on `javaSourceSets.all {}` which would ensure that all

     * java source sets have a corresponding kotlin compilation created.

     *

     * Since the current stack is currently inside the constructor of the first compilation, the

     * used `compilations.maybeCreate` would trigger the creation of another custom compilation.

     *

     * The initial buildscript call creating the initial custom compilation will therefore return a Zombie instance

     * ```kotlin

     * kotlin {

     *     val customCompilation = jvm().compilations.create(""custom"")

     *     customCompilation != jvm().compilations.getByName(""custom"")

     *     //    ^                                   ^

     *     //    Zombie               Real instance created by the javaSourceSets.all listener

     * }

     * ```

     */",f16216:m39
63532,internal fun FloatArray.copyOfUninitializedElements(newSize: Int): FloatArray,"{
    return copyOfUninitializedElements(0, newSize)
}","/**

 * Returns new array which is a copy of the original array with new elements filled with **lateinit** _uninitialized_ values.

 * Attempts to read _uninitialized_ values from this array work in implementation-dependent manner,

 * either throwing exception or returning some kind of implementation-specific default value.

 */",f17396:m3691
64255,public operator fun rangeTo(other: Short): LongRange,"LongRange(this, other.toLong())",/** Creates a range from this value to the specified [other] value. */,f17455:m3367
27061,override fun visitFunctionReference(expression: IrFunctionReference),"{
    if (expression.type.isSyntheticComposableFunction()) {
        expression.symbol.owner.mark()
    }
    super.visitFunctionReference(expression)
}","/**

     * This function propagates the special function type kind for composable to function references.

     */",f9539:m193
56392,"@SinceKotlin(""1.3"") @ExperimentalUnsignedTypes public fun Random.nextUBytes(size: Int): UByteArray",nextBytes(size).asUByteArray(),"/**

 * Creates an unsigned byte array of the specified [size], filled with random bytes.

 */",f16860:m265
1282,"private fun testFileNameFromMappedLocation(originalFilePath: String, originalFileLineNumber: Int): String?","{
    val originalFile = File(originalFilePath)
    return testServices.moduleStructure.modules.asSequence().flatMap { module -> module.files.asSequence().filter { !it.isAdditional } }.findLast { it.originalFile.absolutePath == originalFile.absolutePath && it.startLineNumberInOriginalFile <= originalFileLineNumber }?.name
}","/**

     * An original test file may represent multiple source files (by using the `// FILE: myFile.kt` comments).

     * Sourcemaps contain paths to original test files. However, in test expectations we write names as in the `// FILE:` comments.

     * This function maps a location in the original test file to the name specified in a `// FILE:` comment.

     */",f324:m349
20199,public fun KtExpression.isDefinitelyNull(): Boolean,withValidityAssertion { analysisSession.expressionTypeProvider.isDefinitelyNull(this) },"/**

     * Returns `true` if this expression is definitely null, based on declared nullability and smart cast types derived from

     * data-flow analysis facts. Examples:

     * ```

     *   public fun <T : Any> foo(t: T, nt: T?, s: String, ns: String?) {

     *     t     // t.isDefinitelyNull()  == false && t.isDefinitelyNotNull()  == true

     *     nt    // nt.isDefinitelyNull() == false && nt.isDefinitelyNotNull() == false

     *     s     // s.isDefinitelyNull()  == false && s.isDefinitelyNotNull()  == true

     *     ns    // ns.isDefinitelyNull() == false && ns.isDefinitelyNotNull() == false

     *

     *     if (ns != null) {

     *       ns  // ns.isDefinitelyNull() == false && ns.isDefinitelyNotNull() == true

     *     } else {

     *       ns  // ns.isDefinitelyNull() == true  && ns.isDefinitelyNotNull() == false

     *     }

     *

     *     ns!!  // From this point on: ns.isDefinitelyNull() == false && ns.isDefinitelyNotNull() == true

     *   }

     * ```

     * Note that only nullability from ""stable"" smart cast types is considered. The

     * [spec](https://kotlinlang.org/spec/type-inference.html#smart-cast-sink-stability) provides an explanation on smart cast stability.

     */",f5788:m133
57133,public inline fun measureNanoTime(block: () -> Unit): Long,"{
    contract { callsInPlace(block, InvocationKind.EXACTLY_ONCE) }
    val start = System.nanoTime()
    block()
    return System.nanoTime() - start
}","/**

 * Executes the given [block] and returns elapsed time in nanoseconds.

 *

 * @sample samples.system.Timing.measureBlockNanoTime

 */",f16963:m49
15006,public actual fun CharArray.toTypedArray(): Array<Char>,"{
    return Array(size) { index -> this[index] }
}","/**

 * Returns a *typed* object array containing all of the elements of this primitive array.

 */",f3831:m5145
58750,public fun <@kotlin.internal.OnlyInputTypes T> Sequence<T>.lastIndexOf(element: T): Int,"{
    var lastIndex = -1
    var index = 0
    for (item in this) {
        checkIndexOverflow(index)
        if (element == item) lastIndex = index
        index++
    }
    return lastIndex
}","/**

 * Returns last index of [element], or -1 if the sequence does not contain element.

 *

 * The operation is _terminal_.

 */",f17096:m555
57237,public actual fun ShortArray.asList(): List<Short>,"{
    return object : AbstractList<Short>(), RandomAccess {
        override val size: Int get() = this@asList.size
    
        override fun isEmpty(): Boolean = this@asList.isEmpty()
    
        override fun contains(element: Short): Boolean = this@asList.contains(element)
    
        override fun get(index: Int): Short = this@asList[index]
    
        override fun indexOf(element: Short): Int = this@asList.indexOf(element)
    
        override fun lastIndexOf(element: Short): Int = this@asList.lastIndexOf(element)
    }
}","/**

 * Returns a [List] that wraps the original array.

 */",f16970:m299
24362,"private fun checkComposableCall(expression: FirQualifiedAccessExpression, calleeFunction: FirCallableSymbol<*>, context: CheckerContext, reporter: DiagnosticReporter)","{
    context.visitCurrentScope(visitInlineLambdaParameter = { parameter -> if (parameter.returnTypeRef.hasDisallowComposableCallsAnnotation(context.session)) {
        reporter.reportOn(expression.calleeReference.source, ComposeErrors.CAPTURED_COMPOSABLE_INVOCATION, parameter.symbol, parameter.containingFunctionSymbol, context)
    } }, visitAnonymousFunction = { function ->
        if (function.typeRef.coneType.functionTypeKind(context.session) === ComposableFunction) return
        val functionPsi = function.psi
        if (functionPsi is KtFunctionLiteral || functionPsi is KtLambdaExpression || functionPsi !is KtFunction) {
            return@visitCurrentScope
        }
        val nonReadOnlyCalleeReference = if (!calleeFunction.isReadOnlyComposable(context.session)) {
            expression.calleeReference.source
        } else {
            null
        }
        if (checkComposableFunction(function, nonReadOnlyCalleeReference, context, reporter) == ComposableCheckForScopeStatus.STOP) {
            return
        }
    }, visitFunction = { function ->
        val nonReadOnlyCalleeReference = if (!calleeFunction.isReadOnlyComposable(context.session)) {
            expression.calleeReference.source
        } else {
            null
        }
        if (checkComposableFunction(function, nonReadOnlyCalleeReference, context, reporter) == ComposableCheckForScopeStatus.STOP) {
            return
        }
    }, visitTryExpression = { tryExpression, container -> if (container !is FirCatch && tryExpression.finallyBlock != container) {
        reporter.reportOn(tryExpression.source, ComposeErrors.ILLEGAL_TRY_CATCH_AROUND_COMPOSABLE, context)
    } })
    reporter.reportOn(expression.calleeReference.source, ComposeErrors.COMPOSABLE_INVOCATION, context)
}","/**

 * Check if `expression` - a call to a composable function or access to a composable property -

 * is allowed in the current context. It is allowed if:

 *

 * - It is executed as part of the body of a composable function.

 * - It is not executed as part of the body of a lambda annotated with `@DisallowComposableCalls`.

 * - It is not inside of a `try` block.

 * - It is a call to a readonly composable function if it is executed in the body of a function

 *   that is annotated with `@ReadOnlyComposable`.

 *

 * A function is composable if:

 * - It is annotated with `@Composable`.

 * - It is a lambda whose type is inferred to be `ComposableFunction`.

 * - It is an inline lambda whose enclosing function is composable.

 */",f9187:m183
56489,"@SinceKotlin(""1.1"") public actual fun String.toFloatOrNull(): Float?","screenFloatValue(this, java.lang.Float::parseFloat)","/**

 * Parses the string as a [Float] number and returns the result

 * or `null` if the string is not a valid representation of a number.

 */",f16885:m273
50452,@Test fun `awaiting Project configurationResult - with error thrown in FinaliseDsl`(),"{
    val project = buildProjectWithMPP()
    val executed = mutableListOf<String>()
    project.launch {
        executed.add(""launch:beforeConfigurationResult"")
        val result = project.configurationResult.await()
        assertIsInstance<ProjectConfigurationResult.Failure>(result)
        executed.add(""launch:afterConfigurationResult"")
    }
    project.launchInStage(FinaliseDsl) {
        executed.add(""FinaliseDsl:beforeException"")
        val result = project.configurationResult.await()
        assertIsInstance<ProjectConfigurationResult.Failure>(result)
        executed.add(""FinaliseDsl:beforeException:afterConfigurationResult"")
    }
    project.launchInStage(FinaliseDsl) {
        executed.add(""FinaliseDsl:exception"")
        throw TestException()
    }
    project.launchInStage(FinaliseDsl) { executed.add(""FinaliseDsl:afterException"") }
    assertFails { project.evaluate() }
    assertEquals(listOf(""launch:beforeConfigurationResult"", ""FinaliseDsl:beforeException"", ""FinaliseDsl:exception"", ""launch:afterConfigurationResult"", ""FinaliseDsl:beforeException:afterConfigurationResult""), executed)
}","/**

     * Showcases how coroutines will be treated if there are waiting for [configurationResult], but

     * an exception is thrown in a intermediate [KotlinPluginLifecycle.Stage]

     *

     * Coroutines that already suspended, waiting for the result will be unsuspended.

     * Coroutines that are in the queue when the exception is thrown will not be executed anymore.

     */",f16110:m685
56062,"@SinceKotlin(""1.1"") public operator fun <K, V> Map<out K, V>.minus(key: K): Map<K, V>",this.toMutableMap().apply { minusAssign(key) }.optimizeReadOnlyMap(),"/**

 * Returns a map containing all entries of the original map except the entry with the given [key].

 *

 * The returned map preserves the entry iteration order of the original map.

 */",f16823:m1461
63567,public actual operator fun LongArray.plus(elements: LongArray): LongArray,"{
    val thisSize = size
    val arraySize = elements.size
    val result = copyOfUninitializedElements(thisSize + arraySize)
    elements.copyInto(result, thisSize)
    return result
}","/**

 * Returns an array containing all elements of the original array and then all elements of the given [elements] array.

 */",f17396:m4535
63656,"@SinceKotlin(""1.4"") public actual fun minOf(a: Short, vararg other: Short): Short","{
    var min = a
    for (e in other) min = minOf(min, e)
    return min
}","/**

 * Returns the smaller of the given values.

 */",f17406:m783
57178,"@SinceKotlin(""1.4"") public actual fun minOf(a: Long, vararg other: Long): Long","{
    var min = a
    for (e in other) min = minOf(min, e)
    return min
}","/**

 * Returns the smaller of the given values.

 */",f16966:m813
52052,fun <T> ScriptEvaluationConfiguration.Builder.scriptExecutionWrapper(wrapper: (() -> T) -> T),"{
    ScriptEvaluationConfiguration.scriptExecutionWrapper.put(object : ScriptExecutionWrapper<T> {
        override fun invoke(block: () -> T): T = wrapper(block)
    })
}","/**

 * A helper to enable passing lambda directly to the scriptExecutionWrapper ""keyword""

 */",f16431:m215
14238,public fun incrementAndGet(): Int,this::value.getAndAddField(1) + 1,"/**

     * Atomically increments the current value by one and returns the new value.

     */",f3762:m113
43556,"fun GradleProject.assertFileInProjectContains(pathToFile: String, vararg expectedText: String)","{
    assertFileContains(projectPath.resolve(pathToFile), *expectedText)
}","/**

 * Asserts file under [pathToFile] relative to the test project exists and contains all the lines from [expectedText]

 */",f13456:m399
13917,"@SinceKotlin(""1.2"") @kotlin.internal.InlineOnly public actual inline fun Float.toBits(): Int",if (isNaN()) Float.NaN.toRawBits() else toRawBits(),"/**

 * Returns a bit representation of the specified floating-point value as [Int]

 * according to the IEEE 754 floating-point ""single format"" bit layout.

 */",f3706:m155
58135,public open fun isEmpty(): Boolean,if (step > 0) first > last else first < last,"/** 

     * Checks if the progression is empty.

     

     * Progression with a positive step is empty if its first element is greater than the last element.

     * Progression with a negative step is empty if its first element is less than the last element.

     */",f17061:m177
63587,"@SinceKotlin(""1.4"") @Suppress(""ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS"") public actual fun DoubleArray.sort(fromIndex: Int = 0, toIndex: Int = size): Unit","{
    AbstractList.checkRangeIndexes(fromIndex, toIndex, size)
    sortArray(this, fromIndex, toIndex)
}","/**

 * Sorts a range in the array in-place.

 * 

 * @param fromIndex the start of the range (inclusive) to sort, 0 by default.

 * @param toIndex the end of the range (exclusive) to sort, size of this array by default.

 * 

 * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.

 * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].

 * 

 * @sample samples.collections.Arrays.Sorting.sortRangeOfArray

 */",f17396:m5029
52033,"fun makeFailureResult(message: String, locationWithId: SourceCode.LocationWithId?): ResultWithDiagnostics.Failure","ResultWithDiagnostics.Failure(message.asErrorDiagnostics(ScriptDiagnostic.unspecifiedError, locationWithId))","/**

 * Makes Failure result with diagnostic [message] with optional [locationWithId]

 */",f16426:m473
15379,@Test fun acosD(),"{
    val r = cos(acos(ADJ / HYP))
    val lr = r.toBits()
    val t = (ADJ / HYP).toBits()
    assertTrue(""Returned incorrect arc cosine"", lr == t || lr + 1 == t || lr - 1 == t)
}","/**

     * Tests kotlin.math.acos(Double)

     */",f3868:m221
56249,"@SinceKotlin(""1.5"") @kotlin.internal.InlineOnly @kotlin.internal.IntrinsicConstEvaluation public inline fun Long.floorDiv(other: Long): Long","{
    var q = this / other
    if (this xor other < 0 && q * other != this) q--
    return q
}","/** Divides this value by the other value, flooring the result to an integer that is closer to negative infinity. */",f16842:m579
64372,@kotlin.internal.IntrinsicConstEvaluation public override fun toInt(): Int,wasm_i32_trunc_sat_f64_s(this),"/**

     * Converts this [Double] value to [Int].

     *

     * The fractional part, if any, is rounded down towards zero.

     * Returns zero if this `Double` value is `NaN`, [Int.MIN_VALUE] if it's less than `Int.MIN_VALUE`,

     * [Int.MAX_VALUE] if it's bigger than `Int.MAX_VALUE`.

     */",f17455:m5259
11885,public fun dispose(),"{
    disposeStablePointer(this.stablePtr)
}","/**

     * Disposes the handle. It must not be used after that.

     */",f3605:m73
52024,"inline fun <T, R> Iterable<T>.mapNotNullSuccess(body: (T) -> ResultWithDiagnostics<R?>): ResultWithDiagnostics<List<R>>","mapSuccessImpl(body) { results, r -> if (r != null) results.add(r) }","/**

 * maps transformation ([body]) over iterable merging diagnostics

 * return failure with merged diagnostics after first failed transformation

 * and success with merged diagnostics and list of not null results if all transformations succeeded

 */",f16426:m307
8355,internal fun initializeCachedBoxes(generationState: NativeGenerationState),"{
    BoxCache.values().forEach { cache ->
        val cacheName = ""${cache.name}_CACHE""
        val rangeStart = ""${cache.name}_RANGE_FROM""
        val rangeEnd = ""${cache.name}_RANGE_TO""
        initCache(cache, generationState, cacheName, rangeStart, rangeEnd, declareOnly = !generationState.shouldDefineCachedBoxes).also { generationState.llvm.boxCacheGlobals[cache] = it }
    }
}","/**

 * Initialize static boxing.

 * If output target is native binary then the cache is created.

 */",f3237:m229
63636,"@SinceKotlin(""1.4"") public actual fun maxOf(a: Int, vararg other: Int): Int","{
    var max = a
    for (e in other) max = maxOf(max, e)
    return max
}","/**

 * Returns the greater of the given values.

 */",f17406:m363
14234,"public fun compareAndSwap(expected: Int, newValue: Int): Int","this::value.compareAndExchangeField(expected, newValue)","/**

     * Atomically sets the value to the given [new value][newValue] if the current value equals the [expected value][expected]

     * and returns the old value in any case.

     *

     * Provides sequential consistent ordering guarantees and cannot fail spuriously.

     */",f3762:m67
57262,"@SinceKotlin(""1.4"") @kotlin.internal.InlineOnly public actual inline infix fun IntArray?.contentEquals(other: IntArray?): Boolean","{
    return java.util.Arrays.equals(this, other)
}","/**

 * Checks if the two specified arrays are *structurally* equal to one another.

 * 

 * Two arrays are considered structurally equal if they have the same size, and elements at corresponding indices are equal.

 * 

 * The arrays are also considered structurally equal if both are `null`.

 * 

 * @param other the array to compare with this array.

 * @return `true` if the two arrays are structurally equal, `false` otherwise.

 * 

 * @sample samples.collections.Arrays.ContentOperations.intArrayContentEquals

 */",f16970:m1241
57472,"@SinceKotlin(""1.4"") @OptIn(kotlin.experimental.ExperimentalTypeInference::class) @OverloadResolutionByLambdaReturnType @kotlin.jvm.JvmName(""sumOfBigInteger"") @kotlin.internal.InlineOnly public inline fun ByteArray.sumOf(selector: (Byte) -> java.math.BigInteger): java.math.BigInteger","{
    var sum: java.math.BigInteger = 0.toBigInteger()
    for (element in this) {
        sum += selector(element)
    }
    return sum
}","/**

 * Returns the sum of all values produced by [selector] function applied to each element in the array.

 */",f16970:m5953
45755,"fun runtimeOnly(dependencyNotation: String, configure: Action<ExternalModuleDependency>)",runtimeOnly(dependencyNotation) { configure.execute(this) },"/**

     * Adds a `runtimeOnly` [module dependency](https://docs.gradle.org/current/userguide/declaring_dependencies.html#sub:module_dependencies)

     * to this entity.

     *

     * @see [HasKotlinDependencies.runtimeOnlyConfigurationName]

     *

     * @param dependencyNotation The module dependency notation, as per [DependencyHandler.create].

     * @param configure Additional configuration for the created module dependency.

     * @return The module dependency, or `null` if dependencyNotation is a provider.

     */",f14927:m441
64254,public operator fun rangeTo(other: Byte): LongRange,"LongRange(this, other.toLong())",/** Creates a range from this value to the specified [other] value. */,f17455:m3359
53100,"@SinceKotlin(""2.0"") @Suppress(""ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS"") public actual fun String.toCharArray(destination: CharArray, destinationOffset: Int = 0, startIndex: Int = 0, endIndex: Int = length): CharArray","{
    AbstractList.checkBoundsIndexes(startIndex, endIndex, length)
    AbstractList.checkBoundsIndexes(destinationOffset, destinationOffset + endIndex - startIndex, destination.size)
    var destIndex = destinationOffset
    for (i in startIndex until endIndex) {
        destination[destIndex++] = this[i]
    }
    return destination
}","/**

 * Copies characters from this string into the [destination] character array and returns that array.

 *

 * @param destination the array to copy to.

 * @param destinationOffset the position in the array to copy to.

 * @param startIndex the start offset (inclusive) of the substring to copy.

 * @param endIndex the end offset (exclusive) of the substring to copy.

 *

 * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of this string builder indices or when `startIndex > endIndex`.

 * @throws IndexOutOfBoundsException when the subrange doesn't fit into the [destination] array starting at the specified [destinationOffset],

 *  or when that index is out of the [destination] array indices range.

 */",f16617:m197
58978,"public inline fun <K, V, M: MutableMap<in K, in V>> CharSequence.associateByTo(destination: M, keySelector: (Char) -> K, valueTransform: (Char) -> V): M","{
    for (element in this) {
        destination.put(keySelector(element), valueTransform(element))
    }
    return destination
}","/**

 * Populates and returns the [destination] mutable map with key-value pairs,

 * where key is provided by the [keySelector] function and

 * and value is provided by the [valueTransform] function applied to characters of the given char sequence.

 * 

 * If any two characters would have the same key returned by [keySelector] the last one gets added to the map.

 * 

 * @sample samples.text.Strings.associateByToWithValueTransform

 */",f17097:m1459
64040,@kotlin.internal.IntrinsicConstEvaluation public inline operator fun minus(other: Short): Int,this.toInt() - other.toInt(),/** Subtracts the other value from this value. */,f17455:m261
14830,"@SinceKotlin(""1.1"") @kotlin.internal.LowPriorityInOverloadResolution public actual infix fun <T> Array<out T>.contentDeepEquals(other: Array<out T>): Boolean","{
    return this.contentDeepEquals(other)
}","/**

 * Checks if the two specified arrays are *deeply* equal to one another.

 * 

 * Two arrays are considered deeply equal if they have the same size, and elements at corresponding indices are deeply equal.

 * That is, if two corresponding elements are nested arrays, they are also compared deeply.

 * Elements of other types are compared for equality using the [equals][Any.equals] function.

 * For floating point numbers, this means `NaN` is equal to itself and `-0.0` is not equal to `0.0`.

 * 

 * If any of the arrays contain themselves at any nesting level, the behavior is undefined.

 * 

 * @param other the array to compare deeply with this array.

 * @return `true` if the two arrays are deeply equal, `false` otherwise.

 * 

 * @sample samples.collections.Arrays.ContentOperations.contentDeepEquals

 */",f3831:m463
54819,"@SinceKotlin(""1.1"") public actual fun <T: Comparable<T>> minOf(a: T, b: T): T","{
    return if (a <= b) a else b
}","/**

 * Returns the smaller of two values.

 * 

 * If values are equal, returns the first one.

 */",f16714:m453
37762,@Test fun `test - List of int`(),"{
    val module = createModuleDescriptor("""")
    val objcExportMapper = createObjCExportMapper()
    val objcExportNamer = createObjCExportNamer(mapper = objcExportMapper)
    val objcExportTranslator = ObjCExportTranslatorImpl(generator = ObjCExportHeaderGeneratorImpl(moduleDescriptors = listOf(module), mapper = objcExportMapper, namer = objcExportNamer, problemCollector = ObjCExportProblemCollector.SILENT, objcGenerics = true, shouldExportKDoc = false, additionalImports = emptyList()), mapper = objcExportMapper, namer = objcExportNamer, problemCollector = ObjCExportProblemCollector.SILENT, objcGenerics = true)
    val listClassDescriptor = module.findClassAcrossModuleDependencies(ClassId.fromString(""kotlin/collections/List""))!!
    val intClassDescriptor = module.findClassAcrossModuleDependencies(ClassId.fromString(""kotlin/Int""))!!
    val listOfIntType = KotlinTypeFactory.simpleNotNullType(TypeAttributes.Empty, listClassDescriptor, listOf(TypeProjectionImpl(KotlinTypeFactory.simpleNotNullType(TypeAttributes.Empty, intClassDescriptor, emptyList()))))
    val typeMapper = assertNotNull(objcExportMapper.getCustomTypeMapper(listClassDescriptor))
    assertEquals(ClassId.fromString(""kotlin/collections/List""), typeMapper.mappedClassId)
    val listOfIntMapped = typeMapper.mapType(listOfIntType, objcExportTranslator, objCExportScope = ObjCRootExportScope)
    assertEquals(ObjCClassType(""NSArray"", typeArguments = listOf(ObjCClassType(""Int""))), listOfIntMapped)
    assertEquals(""NSArray<Int *> *"", listOfIntMapped.toString())
}","/**

     * Will test ObjC type mapping from List<Int> to NSArray<Int *> *

     */",f11840:m113
56250,"@SinceKotlin(""1.5"") @kotlin.internal.InlineOnly @kotlin.internal.IntrinsicConstEvaluation public inline fun Long.mod(other: Long): Long","{
    val r = this % other
    return r + (other and (((r xor other) and (r or -r)) shr 63))
}","/**

 * Calculates the remainder of flooring division of this value (dividend) by the other value (divisor).

 *

 * The result is either zero or has the same sign as the _divisor_ and has the absolute value less than the absolute value of the divisor.

 */",f16842:m599
12244,internal fun CValue<CXCursor>.isRecursivelyCxxPublic(): Boolean,"{
    when {
        clang_isDeclaration(kind) == 0 -> return true
        !isCxxPublic -> return false
        kind == CXCursorKind.CXCursor_Namespace && getCursorSpelling(this).isEmpty() -> return false
        else -> return clang_getCursorSemanticParent(this).isRecursivelyCxxPublic()
    }
}","/**

 * TODO Accessibility needs better support

 * Currently we provide binding (access) to static vars (= internal linkage)

 * (i.e. following C policy, as the C header would be included into kotlin impl file

 * Consistent approach to C++ would be:

 *  - Kotlin class inherits from C++ allowing overriding and protected access

 *  - namespace mapped to package

 *  - anon namespace members mapped to ""internal"" allowing access from the current translation unit

 *  To make this working we have to derive a complete C++ ""proxy"" class for each original one and declare C wrappers as friends

 *  BTW Such derived C++ proxy class is the only way to allow Kotlin to override the private virtual C++ methods (which is OK in C++)

 *  Without that C++ style callbacks via overriding would be limited or not supported

 */",f3631:m93
50683,@Test fun `test - simple project - jvmTarget is explicit - and uses correct default`(),"{
    val project = buildProjectWithJvm()
    val kotlin = project.kotlinJvmExtension
    project.evaluate()
    val mainCompilation = kotlin.target.compilations.getByName(""main"")
    val mainCompilationTask = mainCompilation.compileTaskProvider.get() as KotlinCompile
    val arguments = mainCompilationTask.createCompilerArguments(lenient)
    val argumentsString = ArgumentUtils.convertArgumentsToStringList(arguments)
    val jvmTargetArgument = K2JVMCompilerArguments::jvmTarget.javaField!!.getAnnotation(Argument::class.java)!!.value
    if (jvmTargetArgument !in argumentsString) fail(""Missing '$jvmTargetArgument' in argument list"")
    val indexOfJvmTargetArgument = argumentsString.indexOf(jvmTargetArgument)
    val jvmTargetTargetArgumentValue = argumentsString.getOrNull(indexOfJvmTargetArgument + 1)
    assertEquals(JvmTarget.fromTarget(JavaVersion.current().toString()).target, jvmTargetTargetArgumentValue)
    val parsedArguments = K2JVMCompilerArguments().apply { parseCommandLineArguments(argumentsString, this) }
    assertNotNull(parsedArguments.jvmTarget)
    assertEquals(JvmTarget.fromTarget(JavaVersion.current().toString()).target, parsedArguments.jvmTarget)
}","/**

     * The jvmTargets default argument value is up for change over time.

     * The argument shall always be explicitly set!

     */",f16148:m129
46119,inline fun <reified T: Any> T.withLinearClosure(next: (T) -> T?): Set<T>,"{
    val initial = next(this) ?: return setOf(this)
    val results = createResultSet<T>()
    results.add(this)
    var enqueued: T? = initial
    while (enqueued != null) {
        if (results.add(enqueued)) {
            enqueued = next(enqueued)
        } else break
    }
    return results
}","/**

 * @see closure

 * @receiver is included in the return set

 */",f15014:m549
54706,"@Suppress(""NOTHING_TO_INLINE"") public actual inline fun DoubleArray.copyOf(): DoubleArray","{
    return this.asDynamic().slice()
}","/**

 * Returns new array which is a copy of the original array.

 * 

 * @sample samples.collections.Arrays.CopyOfOperations.copyOf

 */",f16713:m1761
64482,private fun Path.checkNotSameAs(parent: Path),"{
    if (!isSymbolicLink() && isSameFileAs(parent)) throw FileSystemLoopException(this.toString())
}","/**

 * Checks that this entry is not the same as the specified [parent] path to prevent traversal cycles.

 *

 * When reading entries of a directory, there are cases where the directory itself is returned,

 * such as when a zip entry name is '/'. Including the directory itself in the list of its entries can lead to traversal cycles.

 *

 * Unfortunately, [Files.walkFileTree], utilized in [copyToRecursively], may not detect such cycles when links are not followed.

 * Similarly, [deleteRecursively] lacks cycle detection capabilities as it never follows links.

 *

 * This function is intended for use with entries whose parent directories have already been traversed.

 * The file being checked is not the starting point of traversal.

 *

 * For instance, ""/a/b/.."" is a valid starting path for traversal. However, if traversal begins from ""/a""

 * and reaches ""a/b/.."", it will result in a cycle.

 *

 * @throws FileSystemLoopException if this entry is the same as the [parent] path, indicating a potential traversal cycle.

 *

 * See KT-63103 for more details on the issue.

 */",f17471:m987
63424,"@SinceKotlin(""1.1"") @kotlin.internal.LowPriorityInOverloadResolution public actual fun <T> Array<out T>.contentDeepHashCode(): Int","{
    return this.contentDeepHashCode()
}","/**

 * Returns a hash code based on the contents of this array as if it is [List].

 * Nested arrays are treated as lists too.

 * 

 * If any of arrays contains itself on any nesting level the behavior is undefined.

 */",f17396:m549
14827,public actual fun DoubleArray.asList(): List<Double>,"{
    return object : AbstractList<Double>(), RandomAccess {
        override val size: Int get() = this@asList.size
    
        override fun isEmpty(): Boolean = this@asList.isEmpty()
    
        override fun contains(element: Double): Boolean = this@asList.any { it.toBits() == element.toBits() }
    
        override fun get(index: Int): Double = this@asList[index]
    
        override fun indexOf(element: Double): Int = this@asList.indexOfFirst { it.toBits() == element.toBits() }
    
        override fun lastIndexOf(element: Double): Int = this@asList.indexOfLast { it.toBits() == element.toBits() }
    }
}","/**

 * Returns a [List] that wraps the original array.

 */",f3831:m379
51006,"fun api(sourceSetName: String, name: String, version: String): Unit","project.kotlinExtension.sourceSets.getByName(sourceSetName).dependencies { api(mockedDependency(name, version)) }","/**

         * Declares an API dependency to test:[name]:[version] for [sourceSetName] source set

         */",f16229:m59
64449,"@SinceKotlin(""1.5"") @WasExperimental(ExperimentalPathApi::class) @Throws(IOException::class) @kotlin.internal.InlineOnly public inline fun Path.readBytes(): ByteArray","{
    return Files.readAllBytes(this)
}","/**

 * Gets the entire content of this file as a byte array.

 *

 * It's not recommended to use this function on huge files.

 * It has an internal limitation of approximately 2 GB byte array size.

 * For reading large files or files of unknown size, open an [InputStream][Path.inputStream] and read blocks sequentially.

 *

 * @return the entire content of this file as a byte array.

 */",f17469:m193
48008,fun setupTransform(project: Project),"{
    project.dependencies.artifactTypes.maybeCreate(KLIB_COLLECTION_DIR).also { artifactType -> artifactType.attributes.setAttribute(attribute, KLIB_COLLECTION_DIR) }
    project.dependencies.artifactTypes.maybeCreate(KLIB).also { artifactType -> artifactType.attributes.setAttribute(attribute, KLIB) }
    project.dependencies.registerTransform(KlibCollectionDirTransform::class.java) { transform ->
        transform.from.setAttribute(attribute, KLIB_COLLECTION_DIR)
        transform.to.setAttribute(attribute, KLIB)
    }
}","/**

     * Set up a transformation from artifacts of type 'collection dir' to a set of klibs.

     */",f15509:m101
13973,"@Suppress(""ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS"") public actual fun CharSequence.regionMatches(thisOffset: Int, other: CharSequence, otherOffset: Int, length: Int, ignoreCase: Boolean = false): Boolean","{
    return if (this is String && other is String) {
        this.regionMatches(thisOffset, other, otherOffset, length, ignoreCase)
    } else {
        regionMatchesImpl(thisOffset, other, otherOffset, length, ignoreCase)
    }
}","/**

 * Returns `true` if the specified range in this char sequence is equal to the specified range in another char sequence.

 * @param thisOffset the start offset in this char sequence of the substring to compare.

 * @param other the string against a substring of which the comparison is performed.

 * @param otherOffset the start offset in the other char sequence of the substring to compare.

 * @param length the length of the substring to compare.

 */",f3713:m309
56156,"@kotlin.internal.InlineOnly public inline fun <T, R> with(receiver: T, block: T.() -> R): R","{
    contract { callsInPlace(block, InvocationKind.EXACTLY_ONCE) }
    return receiver.block()
}","/**

 * Calls the specified function [block] with the given [receiver] as its receiver and returns its result.

 *

 * For detailed usage information see the documentation for [scope functions](https://kotlinlang.org/docs/reference/scope-functions.html#with).

 */",f16833:m119
20248,public fun KtDeclarationSymbol.getExpectsForActual(): List<KtDeclarationSymbol>,withValidityAssertion { analysisSession.multiplatformInfoProvider.getExpectForActual(this) },"/**

     * Gives expect symbol for the actual one if it is available.

     *

     * @return a single expect declaration corresponds to the [KtDeclarationSymbol] on valid code or multiple expects in a case of erroneous code with multiple expects.

     **/",f5803:m33
59100,"@SinceKotlin(""1.5"") @WasExperimental(ExperimentalUnsignedTypes::class) public fun minOf(a: UShort, b: UShort): UShort","{
    return if (a <= b) a else b
}","/**

 * Returns the smaller of two values.

 */",f17098:m331
58529,"@SinceKotlin(""1.5"") @WasExperimental(ExperimentalUnsignedTypes::class) @kotlin.internal.InlineOnly public inline operator fun UIntRange.contains(element: UInt?): Boolean","{
    return element != null && contains(element)
}","/**

 * Returns `true` if this range contains the specified [element].

 * 

 * Always returns `false` if the [element] is `null`.

 */",f17090:m405
58017,"@SinceKotlin(""1.6"") @WasExperimental(ExperimentalStdlibApi::class, ExperimentalUnsignedTypes::class) @kotlin.internal.InlineOnly public inline fun UShort.rotateLeft(bitCount: Int): UShort",toShort().rotateLeft(bitCount).toUShort(),"/**

 * Rotates the binary representation of this [UShort] number left by the specified [bitCount] number of bits.

 * The most significant bits pushed out from the left side reenter the number as the least significant bits on the right side.

 *

 * Rotating the number left by a negative bit count is the same as rotating it right by the negated bit count:

 * `number.rotateLeft(-n) == number.rotateRight(n)`

 *

 * Rotating by a multiple of [UShort.SIZE_BITS] (16) returns the same number, or more generally

 * `number.rotateLeft(n) == number.rotateLeft(n % 16)`

 */",f17056:m541
15007,public actual fun <T> MutableList<T>.reverse(): Unit,"{
    val midPoint = (size / 2) - 1
    if (midPoint < 0) return
    var reverseIndex = lastIndex
    for (index in 0 .. midPoint) {
        val tmp = this[index]
        this[index] = this[reverseIndex]
        this[reverseIndex] = tmp
        reverseIndex--
    }
}","/**

 * Reverses elements in the list in-place.

 */",f3832:m31
57246,"public fun ByteArray.binarySearch(element: Byte, fromIndex: Int = 0, toIndex: Int = size): Int","{
    return java.util.Arrays.binarySearch(this, fromIndex, toIndex, element)
}","/**

 * Searches the array or the range of the array for the provided [element] using the binary search algorithm.

 * The array is expected to be sorted, otherwise the result is undefined.

 * 

 * If the array contains multiple elements equal to the specified [element], there is no guarantee which one will be found.

 * 

 * @param element the to search for.

 * @param fromIndex the start of the range (inclusive) to search in, 0 by default.

 * @param toIndex the end of the range (exclusive) to search in, size of this array by default.

 * 

 * @return the index of the element, if it is contained in the array within the specified range;

 * otherwise, the inverted insertion point `(-insertion point - 1)`.

 * The insertion point is defined as the index at which the element should be inserted,

 * so that the array (or the specified subrange of array) still remains sorted.

 * 

 * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.

 * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].

 */",f16970:m585
56140,@kotlin.internal.InlineOnly public inline fun <T: Comparable<T>> nullsFirst(): Comparator<T?>,nullsFirst(naturalOrder()),"/**

 * Provides a comparator of nullable [Comparable] values

 * considering `null` value less than any other value.

 * Non-null values are compared according to their [natural order][naturalOrder].

 *

 * @sample samples.comparisons.Comparisons.nullsFirstLastComparator

 */",f16832:m483
53167,"internal fun decodeUtf8(bytes: ByteArray, startIndex: Int, endIndex: Int, throwOnMalformed: Boolean): String","{
    require(startIndex >= 0 && endIndex <= bytes.size && startIndex <= endIndex)
    var byteIndex = startIndex
    val stringBuilder = StringBuilder()
    while (byteIndex < endIndex) {
        val byte = bytes[byteIndex++].toInt()
        when {
            byte >= 0 -> stringBuilder.append(byte.toChar())
            byte shr 5 == -2 -> {
                val code = codePointFrom2(bytes, byte, byteIndex, endIndex, throwOnMalformed)
                if (code <= 0) {
                    stringBuilder.append(REPLACEMENT_CHAR)
                    byteIndex += -code
                } else {
                    stringBuilder.append(code.toChar())
                    byteIndex += 1
                }
            }
            byte shr 4 == -2 -> {
                val code = codePointFrom3(bytes, byte, byteIndex, endIndex, throwOnMalformed)
                if (code <= 0) {
                    stringBuilder.append(REPLACEMENT_CHAR)
                    byteIndex += -code
                } else {
                    stringBuilder.append(code.toChar())
                    byteIndex += 2
                }
            }
            byte shr 3 == -2 -> {
                val code = codePointFrom4(bytes, byte, byteIndex, endIndex, throwOnMalformed)
                if (code <= 0) {
                    stringBuilder.append(REPLACEMENT_CHAR)
                    byteIndex += -code
                } else {
                    val high = (code - 0x10000) shr 10 or 0xD800
                    val low = (code and 0x3FF) or 0xDC00
                    stringBuilder.append(high.toChar())
                    stringBuilder.append(low.toChar())
                    byteIndex += 3
                }
            }
            else -> {
                malformed(0, byteIndex, throwOnMalformed)
                stringBuilder.append(REPLACEMENT_CHAR)
            }
        }
    }
    return stringBuilder.toString()
}","/**

 * Decodes the UTF-8 [bytes] array and returns the resulting [String].

 *

 * @param bytes the byte array to decode.

 * @param startIndex the start offset (inclusive) of the array to be decoded.

 * @param endIndex the end offset (exclusive) of the array to be encoded.

 * @param throwOnMalformed whether to throw on malformed byte sequence or replace by the [REPLACEMENT_CHAR].

 *

 * @throws CharacterCodingException if the array is malformed UTF-8 byte sequence and [throwOnMalformed] is true.

 */",f16626:m417
54807,"@SinceKotlin(""1.1"") @kotlin.internal.InlineOnly public actual inline fun maxOf(a: Short, b: Short, c: Short): Short","{
    return JsMath.max(a.toInt(), b.toInt(), c.toInt()).unsafeCast<Short>()
}","/**

 * Returns the greater of three values.

 */",f16714:m203
52757,@Test fun test2297(),"{
    fun testMatches(pattern: String, input: String) {
        assertTrue(Regex(pattern).matches(input), ""\""$pattern\"" should match \""$input\"""")
    }
    testMatches(""^(:[0-5]?[0-9])+$"", input = "":20:30"")
    testMatches(""(.{1,}){2}"", input = ""aa"")
    testMatches(""(.+b)+"", input = ""0b0b"")
    testMatches(""(.+?b)+"", input = ""0b0b"")
    testMatches(""(.?b)+"", input = ""0b0b"")
    testMatches(""(.??b)+"", input = ""0b0b"")
    testMatches(""(.*b)+"", input = ""0b0b"")
    testMatches(""(.*?b)+"", input = ""0b0b"")
    testMatches(""(.{1,2}b)+"", input = ""0b00b"")
    testMatches(""(.{1,2}?b)+"", input = ""0b00b"")
    testMatches(""([0]?[0]?)+"", input = ""0000"")
    testMatches(""([0]?[0]?b)+"", input = ""00b00b"")
    testMatches(""((b{2}){3})+"", input = ""bbbbbbbbbbbb"")
    testMatches(""[^a]"", input = ""b"")
}","/**

     * Regression test for https://github.com/JetBrains/kotlin-native/issues/2297

     */",f16571:m901
58760,"public fun <T> Sequence<T>.filterIndexed(predicate: (index: Int, T) -> Boolean): Sequence<T>","{
    return TransformingSequence(FilteringSequence(IndexingSequence(this), true, { predicate(it.index, it.value) }), { it.value })
}","/**

 * Returns a sequence containing only elements matching the given [predicate].

 * @param [predicate] function that takes the index of an element and the element itself

 * and returns the result of predicate evaluation on the element.

 *

 * The operation is _intermediate_ and _stateless_.

 * 

 * @sample samples.collections.Collections.Filtering.filterIndexed

 */",f17096:m875
55693,"@SinceKotlin(""1.4"") public fun <T: Appendable> T.appendRange(value: CharSequence, startIndex: Int, endIndex: Int): T","{
    @Suppress(""UNCHECKED_CAST"") return append(value, startIndex, endIndex) as T
}","/**

 * Appends a subsequence of the specified character sequence [value] to this Appendable and returns this instance.

 *

 * @param value the character sequence from which a subsequence is appended.

 * @param startIndex the beginning (inclusive) of the subsequence to append.

 * @param endIndex the end (exclusive) of the subsequence to append.

 *

 * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of the [value] character sequence indices or when `startIndex > endIndex`.

 */",f16781:m83
54689,"@SinceKotlin(""1.4"") public actual fun BooleanArray?.contentToString(): String","{
    return this?.joinToString("", "", ""["", ""]"") ?: ""null""
}","/**

 * Returns a string representation of the contents of the specified array as if it is [List].

 * 

 * @sample samples.collections.Arrays.ContentOperations.contentToString

 */",f16713:m1171
40918,"fun List<ChangeInfo>.getChangedAndImpactedSymbols(caches: Iterable<IncrementalCacheCommon>, reporter: ICReporter): DirtyData","{
    val dirtyLookupSymbols = HashSet<LookupSymbol>()
    val dirtyClassesFqNames = HashSet<FqName>()
    val sealedParents = HashSet<FqName>()
    for (change in this) {
        reporter.debug { ""Process $change"" }
        if (change is ChangeInfo.SignatureChanged) {
            val fqNames = if (!change.areSubclassesAffected) listOf(change.fqName) else withSubtypes(change.fqName, caches)
            dirtyClassesFqNames.addAll(fqNames)
            for (classFqName in fqNames) {
                assert(!classFqName.isRoot) { ""$classFqName is root when processing $change"" }
                val scope = classFqName.parent().asString()
                val name = classFqName.shortName().identifier
                dirtyLookupSymbols.add(LookupSymbol(name, scope))
            }
        } else if (change is ChangeInfo.MembersChanged) {
            val fqNames = withSubtypes(change.fqName, caches)
            dirtyClassesFqNames.addAll(fqNames)
            for (name in change.names) {
                fqNames.mapTo(dirtyLookupSymbols) { LookupSymbol(name, it.asString()) }
            }
            fqNames.mapTo(dirtyLookupSymbols) { LookupSymbol(SAM_LOOKUP_NAME.asString(), it.asString()) }
        } else if (change is ChangeInfo.ParentsChanged) { change.parentsChanged.forEach { parent -> sealedParents.addAll(findSealedSupertypes(parent, caches)) } }
    }
    return DirtyData(dirtyLookupSymbols, dirtyClassesFqNames, sealedParents)
}","/**

 * Returns changed and impacted symbols from this list of changes.

 *

 * For example, if `Subclass` extends `Superclass` and `Superclass` has changed, `Subclass` will be impacted.

 */",f12967:m329
56112,"@kotlin.internal.InlineOnly public inline operator fun <V> MutableMap<in String, in V>.setValue(thisRef: Any?, property: KProperty<*>, value: V)","{
    this.put(property.name, value)
}","/**

 * Stores the value of the property for the given object in this mutable map.

 * @param thisRef the object for which the value is requested (not used).

 * @param property the metadata for the property, used to get the name of property and store the value associated with that name in the map.

 * @param value the value to set.

 */",f16828:m75
20242,public fun KtExpression.evaluateAsAnnotationValue(): KtAnnotationValue?,withValidityAssertion { analysisSession.compileTimeConstantProvider.evaluateAsAnnotationValue(this) },"/**

     * Returns a [KtConstantValue] if the expression evaluates to a value that can be used as an annotation parameter value,

     * e.g. an array of constants, otherwise returns null.

     */",f5801:m95
57013,"@PublishedApi @SinceKotlin(""1.2"") internal fun apiVersionIsAtLeast(major: Int, minor: Int, patch: Int): Boolean","KotlinVersion.CURRENT.isAtLeast(major, minor, patch)","/**

 * Constant check of api version used during compilation

 *

 * This function is evaluated at compile time to a constant value,

 * so there should be no references to it in other modules.

 *

 * The function usages are validated to have literal argument values.

 */",f16949:m133
54809,"@SinceKotlin(""1.1"") @kotlin.internal.InlineOnly public actual inline fun maxOf(a: Long, b: Long, c: Long): Long","{
    return maxOf(a, maxOf(b, c))
}","/**

 * Returns the greater of three values.

 */",f16714:m239
49052,@ExternalKotlinTargetApi infix fun SourceSetConstraint.or(other: SourceSetConstraint),SourceSetConstraint { sourceSet -> this@or(sourceSet) || other(sourceSet) },"/**

 * Combines two given [SourceSetConstraint] using a logical 'or':

 * The resulting constraint will match any SourceSet that matches at least one of the specified constraints

 */",f15735:m721
15979,internal fun KtUserType.classId(): ClassId,"{
    val packageFragments = mutableListOf<String>()
    val classFragments = mutableListOf<String>()
    fun collectFragments(type: KtUserType) {
        val userType = type.getStubOrPsiChild(KtStubElementTypes.USER_TYPE)
        if (userType != null) {
            collectFragments(userType)
        }
        val referenceExpression = type.referenceExpression as? KtNameReferenceExpression
        if (referenceExpression != null) {
            val referencedName = referenceExpression.getReferencedName()
            val stub = referenceExpression.stub ?: loadStubByElement(referenceExpression)
            if (stub is KotlinNameReferenceExpressionStubImpl && stub.isClassRef) {
                classFragments.add(referencedName)
            } else {
                packageFragments.add(referencedName)
            }
        }
    }
    collectFragments(this)
    return ClassId(FqName.fromSegments(packageFragments), FqName.fromSegments(classFragments), isLocal = false)
}","/**

 * Retrieves classId from [KtUserType] for compiled code only.

 *

 * It relies on [org.jetbrains.kotlin.psi.stubs.impl.KotlinNameReferenceExpressionStubImpl.isClassRef],

 * which is set during cls analysis only.

 */",f4032:m573
57302,@kotlin.internal.InlineOnly public actual inline fun BooleanArray.copyOf(): BooleanArray,"{
    return java.util.Arrays.copyOf(this, size)
}","/**

 * Returns new array which is a copy of the original array.

 * 

 * @sample samples.collections.Arrays.CopyOfOperations.copyOf

 */",f16970:m2379
14933,"internal fun BooleanArray.copyOfUninitializedElements(fromIndex: Int, toIndex: Int): BooleanArray","{
    val newSize = toIndex - fromIndex
    if (newSize < 0) {
        throw IllegalArgumentException(""$fromIndex > $toIndex"")
    }
    val result = BooleanArray(newSize)
    this.copyInto(result, 0, fromIndex, toIndex.coerceAtMost(size))
    return result
}","/**

 * Returns new array which is a copy of the original array's range between [fromIndex] (inclusive)

 * and [toIndex] (exclusive) with new elements filled with **lateinit** _uninitialized_ values.

 * Attempts to read _uninitialized_ values from this array work in implementation-dependent manner,

 * either throwing exception or returning some kind of implementation-specific default value.

 */",f3831:m3485
56103,"@SinceKotlin(""1.4"") public fun <T> MutableList<T>.removeFirst(): T","if (isEmpty()) throw NoSuchElementException(""List is empty."") else removeAt(0)","/**

 * Removes the first element from this mutable list and returns that removed element, or throws [NoSuchElementException] if this list is empty.

 */",f16825:m481
21272,public fun computeTransitiveDependsOnDependencies(directDependsOnDependencies: List<KtModule>): List<KtModule>,topologicalSort(directDependsOnDependencies) { this.directDependsOnDependencies },"/**

 * Computes the transitive `dependsOn` dependencies of [directDependsOnDependencies]. [computeTransitiveDependsOnDependencies] is the

 * default computation strategy to provide [KtModule.transitiveDependsOnDependencies].

 *

 * The algorithm is a depth-first search-based topological sort. `dependsOn` dependencies cannot be cyclical and thus form a DAG, which

 * allows the application of a topological sort.

 */",f8524:m115
58047,@kotlin.internal.InlineOnly public inline fun mod(other: UByte): UByte,this.toUInt().mod(other.toUInt()).toUByte(),"/**

     * Calculates the remainder of flooring division of this value (dividend) by the other value (divisor).

     *

     * The result is always less than the divisor.

     *

     * For unsigned types, the remainders of flooring division and truncating division are the same.

     */",f17058:m367
59025,"@SinceKotlin(""1.4"") @OptIn(kotlin.experimental.ExperimentalTypeInference::class) @OverloadResolutionByLambdaReturnType @kotlin.internal.InlineOnly public inline fun <R> CharSequence.maxOfWith(comparator: Comparator<in R>, selector: (Char) -> R): R","{
    if (isEmpty()) throw NoSuchElementException()
    var maxValue = selector(this[0])
    for (i in 1 .. lastIndex) {
        val v = selector(this[i])
        if (comparator.compare(maxValue, v) < 0) {
            maxValue = v
        }
    }
    return maxValue
}","/**

 * Returns the largest value according to the provided [comparator]

 * among all values produced by [selector] function applied to each character in the char sequence.

 * 

 * @throws NoSuchElementException if the char sequence is empty.

 */",f17097:m2771
11454,"fun <T: Any> SingleNullableOption<T>.required(): SingleOption<T, DefaultRequiredType.Required>","{
    val newOption = with((delegate.cast<ParsingValue<T, T>>()).descriptor as OptionDescriptor) { SingleOption<T, DefaultRequiredType.Required>(OptionDescriptor(optionFullFormPrefix, optionShortFromPrefix, type, fullName, shortName, description, defaultValue, true, multiple, delimiter, deprecatedWarning), owner) }
    owner.entity = newOption
    return newOption
}","/**

 * Requires the option to be always provided in command line.

 */",f3549:m367
7704,internal fun Project.warnAboutDeprecatedProperty(property: KonanPlugin.ProjectProperty),"property.deprecatedPropertyName?.let { deprecated -> if (project.hasProperty(deprecated)) {
    logger.warn(""Project property '$deprecated' is deprecated. Use '${property.propertyName}' instead."")
} }","/**

 * We use the following properties:

 *      org.jetbrains.kotlin.native.home    - directory where compiler is located (aka dist in konan project output).

 *      org.jetbrains.kotlin.native.version - a konan compiler version for downloading.

 *      konan.build.targets                 - list of targets to build (by default all the declared targets are built).

 *      konan.jvmArgs                       - additional args to be passed to a JVM executing the compiler/cinterop tool.

 */",f3134:m83
14858,"@Deprecated(""Use Kotlin compiler 1.4 to avoid deprecation warning."") @SinceKotlin(""1.1"") @DeprecatedSinceKotlin(hiddenSince = ""1.4"") public fun LongArray.contentHashCode(): Int","{
    return this.contentHashCode()
}","/**

 * Returns a hash code based on the contents of this array as if it is [List].

 */",f3831:m1485
59047,"@SinceKotlin(""1.4"") public inline fun <S: CharSequence> S.onEachIndexed(action: (index: Int, Char) -> Unit): S","{
    return apply { forEachIndexed(action) }
}","/**

 * Performs the given [action] on each character, providing sequential index with the character,

 * and returns the char sequence itself afterwards.

 * @param [action] function that takes the index of a character and the character itself

 * and performs the action on the character.

 */",f17097:m3565
50181,@Test fun `test - diamond`(),"{
    val linuxX64Main = kotlin.linuxX64().compilations.getByName(""main"").defaultSourceSet
    val linuxArm64Main = kotlin.linuxArm64().compilations.getByName(""main"").defaultSourceSet
    val commonMain = kotlin.sourceSets.commonMain.get()
    val left = kotlin.sourceSets.create(""left"")
    val right = kotlin.sourceSets.create(""right"")
    val bottom = kotlin.sourceSets.create(""bottom"")
    val linuxMain = kotlin.sourceSets.linuxMain.get()
    left.dependsOn(commonMain)
    right.dependsOn(commonMain)
    bottom.dependsOn(left)
    bottom.dependsOn(right)
    linuxMain.dependsOn(bottom)
    linuxX64Main.dependsOn(linuxMain)
    linuxArm64Main.dependsOn(linuxMain)
    project.evaluate()
    assertEquals(listOf(""test_bottom"", ""test_left"", ""test_right"", ""test_commonMain""), kotlin.sourceSets.linuxMain.get().dependsOnClosureCompilePath.toList().map { it.name })
}","/**

     * ```

     *  ┌────► commonMain ◄───┐

     *  │                     │

     *  │                     │

     *  │                     │

     * left                right

     *  ▲                     ▲

     *  │                     │

     *  │                     │

     *  └───────bottom────────┘

     *             ▲

     *             │

     *             │

     *             │

     *         linuxMain

     * ```

     */",f16074:m171
50447,@Test fun `exception thrown in buildscript evaluation - inside coroutine`(),"{
    val project = buildProjectWithMPP()
    val executed = mutableListOf<String>()
    assertFailsWith<TestException> {
        project.launch { executed.add(""first"") }
        project.launch {
            executed.add(""second"")
            throw TestException()
        }
        project.launch { executed.add(""third"") }
    }
    assertEquals(listOf(""first"", ""second""), executed)
    run {
        assertNotNull(project.future { KotlinPluginLifecycle.Stage.EvaluateBuildscript.await() }.getOrThrow())
        assertFailsWith<IllegalLifecycleException> { project.future { KotlinPluginLifecycle.Stage.AfterEvaluateBuildscript.await() }.getOrThrow() }
    }
}","/**

     * Showcase of error handling when there was an error thrown within the build.gradle.kts file (or in any plugin.apply())

     * Example would be:

     *

     * build.gradle.kts

     * ```kotlin

     * kotlin {

     *     sourceSets.getByName(""nonExistentSourceSet"") // <- throws UnknownDomainObjectException

     * }

     * ```

     */",f16110:m227
55819,fun add(element: T),"{
    if (isFull()) {
        throw IllegalStateException(""ring buffer is full"")
    }
    buffer[startIndex.forward(size)] = element
    size++
}","/**

     * Add [element] to the buffer or fail with [IllegalStateException] if no free space available in the buffer

     */",f16812:m333
50854,"@OptIn(UnsafeApi::class) operator fun <T> KotlinGradlePluginExtensionPoint<T>.set(project: Project, extensions: List<T>)","{
    (this as KotlinGradlePluginExtensionPointInternal<T>)
    set(project, extensions)
}","/**

 * Completely overwrites the currently registered extensions on this [KotlinGradlePluginExtensionPoint] in this project.

 */",f16178:m25
1320,fun <T> run(block: suspend NodeJsInspectorClientContext.() -> T): T,"runBlocking {
    val context = NodeJsInspectorClientContextImpl(this@NodeJsInspectorClient)
    try {
        runWithContext(context, block)
    } catch (e: Throwable) {
        val nodeExitCode = try {
            context.nodeProcess.exitValue()
        } catch (_: IllegalThreadStateException) {
            throw e
        }
        throw NodeExitedException(nodeExitCode, e)
    } finally {
        context.release()
    }
}","/**

     * Creates a Node process and provides a context for communicating with it.

     * After [block] returns, the Node process is destroyed.

     */",f337:m61
15013,internal fun Char.isUpperCaseImpl(): Boolean,"{
    return getLetterType() == 2 || code.isOtherUppercase()
}","/**

 * Returns `true` if this character is an upper case letter, or it has contributory property `Other_Uppercase`.

 */",f3835:m147
63592,public actual fun ShortArray.toTypedArray(): Array<Short>,"{
    return Array(size) { index -> this[index] }
}","/**

 * Returns a *typed* object array containing all of the elements of this primitive array.

 */",f17396:m5167
54715,public actual fun BooleanArray.copyOf(newSize: Int): BooleanArray,"{
    require(newSize >= 0) { ""Invalid new array size: $newSize."" }
    return withType(""BooleanArray"", arrayCopyResize(this, newSize, false))
}","/**

 * Returns new array which is a copy of the original array, resized to the given [newSize].

 * The copy is either truncated or padded at the end with `false` values if necessary.

 * 

 * - If [newSize] is less than the size of the original array, the copy array is truncated to the [newSize].

 * - If [newSize] is greater than the size of the original array, the extra elements in the copy array are filled with `false` values.

 * 

 * @sample samples.collections.Arrays.CopyOfOperations.resizedPrimitiveCopyOf

 */",f16713:m1985
15000,public actual fun ShortArray.toTypedArray(): Array<Short>,"{
    return Array(size) { index -> this[index] }
}","/**

 * Returns a *typed* object array containing all of the elements of this primitive array.

 */",f3831:m5061
24735,"protected fun irEqual(lhs: IrExpression, rhs: IrExpression): IrExpression","{
    return irCall(context.irBuiltIns.eqeqSymbol, null, null, null, lhs, rhs)
}",/** Compare [lhs] and [rhs] using structural equality (`==`). */,f9212:m1165
53470,"@SinceKotlin(""1.4"") public fun Element.appendElement(name: String, init: Element.() -> Unit): Element","{
    contract { callsInPlace(init, InvocationKind.EXACTLY_ONCE) }
    return ownerDocument!!.createElement(name, init).also { appendChild(it) }
}","/**

 * Appends a newly created element with the specified [name] to this element.

 *

 * The element is initialized with the specified [init] function.

 */",f16682:m43
15037,"@SinceKotlin(""1.1"") @kotlin.internal.InlineOnly public actual inline fun minOf(a: Byte, b: Byte): Byte","{
    return minOf(a.toInt(), b.toInt()).toByte()
}","/**

 * Returns the smaller of two values.

 */",f3836:m471
52023,"inline fun <T, R> Iterable<T>.mapSuccess(body: (T) -> ResultWithDiagnostics<R>): ResultWithDiagnostics<List<R>>","mapSuccessImpl(body) { results, r -> results.add(r) }","/**

 * maps transformation ([body]) over iterable merging diagnostics

 * return failure with merged diagnostics after first failed transformation

 * and success with merged diagnostics and list of results if all transformations succeeded

 */",f16426:m287
34311,private fun isCastToAForwardDeclaration(forwardDeclarationType: KotlinType): Boolean,"{
    val forwardDeclarationClassDescriptor = forwardDeclarationType.constructor.declarationDescriptor
    if (forwardDeclarationClassDescriptor !is ClassDescriptor) return false
    return forwardDeclarationClassDescriptor.getForwardDeclarationKindOrNull() != null
}","/**

     * Here, we only check that we are casting to a forward declaration to suppress a CAST_NEVER_SUCCEEDS warning. The cast is further

     * checked in NativeForwardDeclarationRttiChecker.

     */",f11279:m35
58894,"@SinceKotlin(""1.2"") public fun <T> Sequence<T>.windowed(size: Int, step: Int = 1, partialWindows: Boolean = false): Sequence<List<T>>","{
    return windowedSequence(size, step, partialWindows, reuseBuffer = false)
}","/**

 * Returns a sequence of snapshots of the window of the given [size]

 * sliding along this sequence with the given [step], where each

 * snapshot is a list.

 * 

 * Several last lists may have fewer elements than the given [size].

 * 

 * Both [size] and [step] must be positive and can be greater than the number of elements in this sequence.

 * @param size the number of elements to take in each window

 * @param step the number of elements to move the window forward by on an each step, by default 1

 * @param partialWindows controls whether or not to keep partial windows in the end if any,

 * by default `false` which means partial windows won't be preserved

 * 

 * @sample samples.collections.Sequences.Transformations.takeWindows

 */",f17096:m5547
13955,"@ExperimentalNativeApi @Suppress(""DEPRECATION"") public fun Char.Companion.toChars(codePoint: Int): CharArray","when {
    codePoint in 0 until MIN_SUPPLEMENTARY_CODE_POINT -> charArrayOf(codePoint.toChar())
    codePoint in MIN_SUPPLEMENTARY_CODE_POINT .. MAX_CODE_POINT -> {
        val low = ((codePoint - 0x10000) and 0x3FF) + MIN_LOW_SURROGATE.toInt()
        val high = (((codePoint - 0x10000) ushr 10) and 0x3FF) + MIN_HIGH_SURROGATE.toInt()
        charArrayOf(high.toChar(), low.toChar())
    }
    else -> throw IllegalArgumentException()
}","/**

 * Converts the codepoint specified to a char array. If the codepoint is not supplementary, the method will

 * return an array with one element otherwise it will return an array A with a high surrogate in A[0] and

 * a low surrogate in A[1].

 *

 *

 * Note that this function is unstable.

 * In the future it could be deprecated in favour of an overload that would accept a `CodePoint` type.

 */",f3711:m125
58816,public inline fun <T> Sequence<T>.any(predicate: (T) -> Boolean): Boolean,"{
    for (element in this) if (predicate(element)) return true
    return false
}","/**

 * Returns `true` if at least one element matches the given [predicate].

 *

 * The operation is _terminal_.

 * 

 * @sample samples.collections.Collections.Aggregates.anyWithPredicate

 */",f17096:m2485
21681,private fun KtElement.getContainingUnaryIncOrDecExpression(): KtUnaryExpression?,"{
    if (this !is KtExpression) return null
    val baseExpression = deparenthesize(this)
    val unaryExpression = parentOfType<KtUnaryExpression>() ?: return null
    if (deparenthesize(unaryExpression.baseExpression) != baseExpression || unaryExpression.operationToken !in KtTokens.INCREMENT_AND_DECREMENT) return null
    return unaryExpression
}","/**

     * For prefix and postfix `++` and `--`, the idea is the same because FIR represents it as several operations. For example, for `i++`,

     * if the input PSI is `i`, we instead resolve `i++` and extract the read part of this access for `i`.

     */",f8624:m669
58892,public operator fun <T> Sequence<T>.plus(elements: Sequence<T>): Sequence<T>,"{
    return sequenceOf(this, elements).flatten()
}","/**

 * Returns a sequence containing all elements of original sequence and then all elements of the given [elements] sequence.

 * 

 * Note that the source sequence and the sequence being added are iterated only when an `iterator` is requested from

 * the resulting sequence. Changing any of them between successive calls to `iterator` may affect the result.

 *

 * The operation is _intermediate_ and _stateless_.

 */",f17096:m5503
57077,@kotlin.internal.InlineOnly public inline fun File.printWriter(charset: Charset = Charsets.UTF_8): PrintWriter,PrintWriter(bufferedWriter(charset)),"/**

 * Returns a new [PrintWriter] for writing the content of this file.

 */",f16956:m109
14836,"@Deprecated(""Use Kotlin compiler 1.4 to avoid deprecation warning."") @SinceKotlin(""1.1"") @DeprecatedSinceKotlin(hiddenSince = ""1.4"") public infix fun <T> Array<out T>.contentEquals(other: Array<out T>): Boolean","{
    return this.contentEquals(other)
}","/**

 * Checks if the two specified arrays are *structurally* equal to one another.

 * 

 * Two arrays are considered structurally equal if they have the same size, and elements at corresponding indices are equal.

 * Elements are compared for equality using the [equals][Any.equals] function.

 * For floating point numbers, this means `NaN` is equal to itself and `-0.0` is not equal to `0.0`.

 * 

 * If the arrays contain nested arrays, use [contentDeepEquals] to recursively compare their elements.

 * 

 * @param other the array to compare with this array.

 * @return `true` if the two arrays are structurally equal, `false` otherwise.

 * 

 * @sample samples.collections.Arrays.ContentOperations.arrayContentEquals

 */",f3831:m653
56556,@kotlin.internal.InlineOnly public inline fun <T: Any> ThreadLocal<T>.getOrSet(default: () -> T): T,"{
    return get() ?: default().also(this::set)
}","/**

 * Gets the value in the current thread's copy of this

 * thread-local variable or replaces the value with the result of calling

 * [default] function in case if that value was `null`.

 *

 * If the variable has no value for the current thread,

 * it is first initialized to the value returned

 * by an invocation of the [ThreadLocal.initialValue] method.

 * Then if it is still `null`, the provided [default] function is called and its result

 * is stored for the current thread and then returned.

 */",f16895:m91
54705,"@Suppress(""NOTHING_TO_INLINE"") public actual inline fun FloatArray.copyOf(): FloatArray","{
    return this.asDynamic().slice()
}","/**

 * Returns new array which is a copy of the original array.

 * 

 * @sample samples.collections.Arrays.CopyOfOperations.copyOf

 */",f16713:m1741
63499,public actual fun CharArray.copyOf(): CharArray,"{
    return this.copyOfUninitializedElements(size)
}","/**

 * Returns new array which is a copy of the original array.

 * 

 * @sample samples.collections.Arrays.CopyOfOperations.copyOf

 */",f17396:m2809
53134,"@SinceKotlin(""1.2"") @kotlin.internal.InlineOnly public actual inline fun Byte.toString(radix: Int): String",this.toInt().toString(radix),"/**

 * Returns a string representation of this [Byte] value in the specified [radix].

 *

 * @throws IllegalArgumentException when [radix] is not a valid radix for number to string conversion.

 */",f16618:m201
12147,public fun get(): T,"@Suppress(""UNCHECKED_CAST"") (derefStablePointer(stablePtr) as T)","/**

     * Returns the underlying pinned object.

     */",f3623:m41
58518,"@SinceKotlin(""1.7"") public fun ULongProgression.last(): ULong","{
    if (isEmpty()) throw NoSuchElementException(""Progression $this is empty."")
    return this.last
}","/**

 * Returns the last element.

 * 

 * @throws NoSuchElementException if the progression is empty.

 * 

 * @sample samples.collections.Collections.Elements.last

 */",f17090:m145
20080,@KtAllowAnalysisOnEdt public inline fun <T> allowAnalysisOnEdt(action: () -> T): T,"{
    if (KtReadActionConfinementLifetimeToken.allowOnEdt.get()) return action()
    KtReadActionConfinementLifetimeToken.allowOnEdt.set(true)
    try {
        return action()
    } finally {
        KtReadActionConfinementLifetimeToken.allowOnEdt.set(false)
    }
}","/**

 * @see KtAnalysisSession

 * @see KtReadActionConfinementLifetimeToken

 */",f5760:m189
65053,"internal fun suite(name: String, ignored: Boolean, suiteFn: () -> Unit)","{
    adapter().suite(name, ignored, suiteFn)
}","/**

 * The functions below are used by the compiler to describe the tests structure, e.g.

 *

 * suite('a suite', false, function() {

 *   suite('a subsuite', false, function() {

 *     test('a test', false, function() {...});

 *     test('an ignored/pending test', true, function() {...});

 *   });

 *   suite('an ignored/pending test', true, function() {...});

 * });

 */",f17560:m25
46109,inline fun <reified T> T.withClosure(edges: (T) -> Iterable<T>): Set<T>,"{
    val initialEdges = edges(this)
    val dequeue = if (initialEdges is Collection) {
        if (initialEdges.isEmpty()) return setOf(this)
        createDequeue(initialEdges)
    } else createDequeueFromIterable(initialEdges)
    val results = createResultSet<T>(dequeue.size)
    results.add(this)
    while (dequeue.isNotEmpty()) {
        val element = dequeue.removeAt(0)
        if (results.add(element)) {
            dequeue.addAll(edges(element))
        }
    }
    return results
}","/**

 * Similar to [closure], but will also include the receiver(seed) of this function into the final set

 * @see closure

 */",f15014:m137
43594,"fun BuildResult.assertOutputContainsNativeFrameworkVariant(variantName: String, gradleVersion: GradleVersion)","{
    val isAtLeastGradle75 = gradleVersion >= GradleVersion.version(TestVersions.Gradle.G_7_5)
    try {
        assertOutputContains(if (isAtLeastGradle75) ""Variant $variantName"" else ""variant \""$variantName\"" ["")
    } catch (originalError: AssertionError) {
        val regexPattern = if (isAtLeastGradle75) {
            ""Variant (.*?):""
        } else {
            ""variant \""(.*?)\"" \\[""
        }
        val matchedVariants = Regex(regexPattern).findAll(output).toList()
        throw AssertionError(""Expected variant $variantName. "" + if (matchedVariants.isNotEmpty()) ""Found instead: "" + matchedVariants.joinToString { it.groupValues[1] } else ""No match."", originalError)
    }
}","/**

 * Asserts that the output of a Gradle build contains a variant with the given name.

 *

 * @param variantName The name of the variant to look for in the output.

 * @param gradleVersion The version of Gradle used to build the variant.

 * @throws AssertionError if no variant with the given name and Gradle version is found in the output.

 */",f13457:m789
64188,public operator fun rangeTo(other: Long): LongRange,"LongRange(this.toLong(), other)",/** Creates a range from this value to the specified [other] value. */,f17455:m2365
56217,"@SinceKotlin(""1.6"") @WasExperimental(ExperimentalStdlibApi::class) public fun Short.rotateLeft(bitCount: Int): Short",(toInt().shl(bitCount and 15) or (toInt() and 0xFFFF).ushr(16 - (bitCount and 15))).toShort(),"/**

 * Rotates the binary representation of this [Short] number left by the specified [bitCount] number of bits.

 * The most significant bits pushed out from the left side reenter the number as the least significant bits on the right side.

 *

 * Rotating the number left by a negative bit count is the same as rotating it right by the negated bit count:

 * `number.rotateLeft(-n) == number.rotateRight(n)`

 *

 * Rotating by a multiple of [Short.SIZE_BITS] (16) returns the same number, or more generally

 * `number.rotateLeft(n) == number.rotateLeft(n % 16)`

 */",f16841:m477
1459,fun translate(): JsCatch?,"{
    if (catches.isEmpty()) return null
    val firstCatch = catches.first()
    val catchParameter = firstCatch.catchParameter
    val parameterDescriptor = BindingUtils.getDescriptorForElement(bindingContext(), catchParameter!!)
    val parameterName = context().getNameForDescriptor(parameterDescriptor).ident
    val jsCatch = JsCatch(context().scope(), parameterName)
    val parameterRef = jsCatch.parameter.name.makeRef()
    val catchContext = context().innerContextWithAliased(parameterDescriptor, parameterRef)
    jsCatch.body = JsBlock(translateCatches(catchContext, parameterRef, catches.iterator()))
    return jsCatch
}","/**

     * In JavaScript there is no multiple catches, so we translate

     * multiple catch to single catch with instanceof checks for

     * every catch clause.

     *

     * For example this code:

     *  try {

     *      ...

     *  } catch(e: NullPointerException) {

     *      ...

     *  } catch(e: RuntimeException) {

     *      ...

     *  }

     *

     *  is translated to the following JsCode

     *

     *  try {

     *      ...

     *  } catch(e) {

     *      if (e instanceof NullPointerException) {

     *          ...

     *      } else {

     *          if (e instanceof RuntimeException) {

     *              ...

     *          } else throw e;

     *      }

     *  }

     */",f354:m79
55735,"@kotlin.internal.IntrinsicConstEvaluation public fun String.trimMargin(marginPrefix: String = ""|""): String","replaceIndentByMargin("""", marginPrefix)","/**

 * Trims leading whitespace characters followed by [marginPrefix] from every line of a source string and removes

 * the first and the last lines if they are blank (notice difference blank vs empty).

 *

 * Doesn't affect a line if it doesn't contain [marginPrefix] except the first and the last blank lines.

 *

 * Doesn't preserve the original line endings.

 *

 * @param marginPrefix non-blank string, which is used as a margin delimiter. Default is `|` (pipe character).

 *

 * @sample samples.text.Strings.trimMargin

 * @see trimIndent

 * @see kotlin.text.isWhitespace

 */",f16789:m21
57986,"@PublishedApi @SinceKotlin(""1.3"") internal fun getProgressionLastElement(start: ULong, end: ULong, step: Long): ULong","when {
    step > 0 -> if (start >= end) end else end - differenceModulo(end, start, step.toULong())
    step < 0 -> if (start <= end) end else end + differenceModulo(start, end, (-step).toULong())
    else -> throw kotlin.IllegalArgumentException(""Step is zero."")
}","/**

 * Calculates the final element of a bounded arithmetic progression, i.e. the last element of the progression which is in the range

 * from [start] to [end] in case of a positive [step], or from [end] to [start] in case of a negative

 * [step].

 *

 * No validation on passed parameters is performed. The given parameters should satisfy the condition:

 *

 * - either `step > 0` and `start <= end`,

 * - or `step < 0` and `start >= end`.

 *

 * @param start first element of the progression

 * @param end ending bound for the progression

 * @param step increment, or difference of successive elements in the progression

 * @return the final element of the progression

 * @suppress

 */",f17054:m89
63739,public actual fun print(message: Any?),"{
    printImpl(message?.toString(), useErrorStream = false, newLine = false)
}",/** Prints the given [message] to the standard output stream. */,f17418:m177
46120,inline fun <reified T: Any> T.withLinearClosureSequence(crossinline next: (T) -> T?): Sequence<T>,"{
    val initial = next(this) ?: return sequenceOf(this)
    val results = HashSet<T>()
    return sequence {
        results.add(this@withLinearClosureSequence)
        yield(this@withLinearClosureSequence)
        var enqueued: T? = initial
        while (enqueued != null) {
            if (results.add(enqueued)) {
                yield(enqueued)
                enqueued = next(enqueued)
            } else break
        }
    }
}","/**

 * @see closure

 * @receiver is included in the return set

 */",f15014:m587
43583,fun BuildResult.assertDeprecationWarningsArePresent(warningMode: WarningMode),"{
    assertOutputContains(""[GradleWarningsDetectorPlugin] The plugin is being applied"", NO_GRADLE_WARNINGS_DETECTOR_PLUGIN_ERROR_MESSAGE)
    assertOutputContains(""[GradleWarningsDetectorPlugin] Some deprecation warnings were found during this build."", getWarningModeChangeAdvice(warningMode))
}","/**

 * Asserts that the build produced some deprecation warnings.

 *

 * Expected to be executed only for the case when [BuildOptions.warningMode] is not set to [WarningMode.Fail]

 */",f13457:m449
43533,fun Path.removePod(podName: String),"{
    val text = readText()
    val begin = text.indexOf(""""""pod(""$podName"")"""""")
    require(begin != -1) { """"""
    
            Pod doesn't exist in file. File content is:
    
            ${text}
    
            """""".trimIndent() }
    var index = begin + """"""pod(""$podName"")"""""".length - 1
    if (text.indexOf(""""""pod(""$podName"") {"""""", startIndex = begin) != -1) {
        index += 2
        var bracket = 1
        while (bracket != 0) {
            if (text[++index] == '{') {
                bracket++
            } else if (text[index] == '}') {
                bracket--
            }
        }
    }
    writeText(text.removeRange(begin .. index))
}","/**

 * Removes a Cocoapods dependency from [this] build script.

 *

 * @param podName The name of the Cocoapods dependency to be removes.

 */",f13455:m225
822,"fun suggest(descriptor: DeclarationDescriptor, bindingContext: BindingContext)","cache.getOrPut(descriptor) { generate(descriptor.original, bindingContext) }","/**

     * Generates names for declarations. Name consists of the following parts:

     *

     *   * Aliasing declaration, if the given `descriptor` does not have its own entity in JS.

     *   * Scoping declaration. Declarations are usually compiled to the hierarchy of nested JS objects,

     *     this attribute allows to find out where to put the declaration.

     *   * Simple name, which is a name that object must (or may) get on the generated JS.

     *   * Whether the name is stable. Stable names are visible to other modules and to native JS.

     *     Unstable names do not require particular name, so the code generator can invent any name

     *     which does not clash with anything; however, it may derive the name from the suggested name to

     *     improve readability and debugging experience.

     *

     * This method returns `null` for root declarations (modules and root packages).

     * It's guaranteed that a particular name is returned for any other declarations.

     *

     * Since packages in Kotlin do not always form hierarchy, suggested name is a list of strings. This

     * list consists of exactly one string for any declaration except for package. Package name lists

     * have at least one string.

     */",f219:m105
57018,public inline fun <T> Reader.useLines(block: (Sequence<String>) -> T): T,"{
    contract { callsInPlace(block, InvocationKind.EXACTLY_ONCE) }
    return buffered().use { block(it.lineSequence()) }
}","/**

 * Calls the [block] callback giving it a sequence of all the lines in this file and closes the reader once

 * the processing is complete.

 * @return the value returned by [block].

 */",f16950:m95
58103,@kotlin.internal.InlineOnly public inline fun mod(other: UShort): UShort,this.toUInt().mod(other.toUInt()).toUShort(),"/**

     * Calculates the remainder of flooring division of this value (dividend) by the other value (divisor).

     *

     * The result is always less than the divisor.

     *

     * For unsigned types, the remainders of flooring division and truncating division are the same.

     */",f17059:m385
20217,public fun <S: KtFunctionLikeSymbol> S.asSignature(): KtFunctionLikeSignature<S>,withValidityAssertion { analysisSession.signatureSubstitutor.asSignature(this) },"/**

     * Creates a new [KtCallableSignature] by given symbol and leave all types intact

     */",f5793:m133
58099,@kotlin.internal.InlineOnly public inline fun floorDiv(other: UShort): UInt,this.toUInt().floorDiv(other.toUInt()),"/**

     * Divides this value by the other value, flooring the result to an integer that is closer to negative infinity.

     *

     * For unsigned types, the results of flooring division and truncating division are the same.

     */",f17059:m323
20162,"@Suppress(""DeprecatedCallableAddReplaceWith"") @Deprecated(""Avoid using this function"") public fun KtCallableSymbol.getDispatchReceiverType(): KtType?",withValidityAssertion { analysisSession.typeProvider.getDispatchReceiverType(this) },"/**

     * This function is provided for a few use-cases where it's hard to go without it.

     *

     * **Please avoid using it**; it will probably be removed in the future.

     *

     * The function is instantly deprecated, so it's not shown in the completion.

     *

     * @receiver A target callable symbol.

     * @return A dispatch receiver type for this symbol if it has any.

     */",f5780:m303
14240,public fun getAndDecrement(): Int,this::value.getAndAddField(-1),"/**

     * Atomically decrements the current value by one and returns the old value.

     */",f3762:m133
13578,public operator fun rangeTo(other: Long): LongRange,"LongRange(this.toLong(), other)",/** Creates a range from this value to the specified [other] value. */,f3686:m1493
56088,public fun <T> MutableCollection<in T>.addAll(elements: Iterable<T>): Boolean,"{
    when (elements) {
        is Collection -> return addAll(elements)
        else -> {
            var result: Boolean = false
            for (item in elements) if (add(item)) result = true
            return result
        }
    }
}","/**

 * Adds all elements of the given [elements] collection to this [MutableCollection].

 */",f16825:m217
57490,"@SinceKotlin(""1.3"") @ExperimentalUnsignedTypes public fun UByteArray.binarySearch(element: UByte, fromIndex: Int = 0, toIndex: Int = size): Int","{
    AbstractList.checkRangeIndexes(fromIndex, toIndex, size)
    val signedElement = element.toInt()
    var low = fromIndex
    var high = toIndex - 1
    while (low <= high) {
        val mid = (low + high).ushr(1)
        val midVal = storage[mid]
        val cmp = uintCompare(midVal.toInt(), signedElement)
        if (cmp < 0) low = mid + 1 else if (cmp > 0) high = mid - 1 else return mid
    }
    return -(low + 1)
}","/**

 * Searches the array or the range of the array for the provided [element] using the binary search algorithm.

 * The array is expected to be sorted, otherwise the result is undefined.

 * 

 * If the array contains multiple elements equal to the specified [element], there is no guarantee which one will be found.

 * 

 * @param element the to search for.

 * @param fromIndex the start of the range (inclusive) to search in, 0 by default.

 * @param toIndex the end of the range (exclusive) to search in, size of this array by default.

 * 

 * @return the index of the element, if it is contained in the array within the specified range;

 * otherwise, the inverted insertion point `(-insertion point - 1)`.

 * The insertion point is defined as the index at which the element should be inserted,

 * so that the array (or the specified subrange of array) still remains sorted.

 * 

 * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.

 * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].

 */",f16971:m419
21270,public fun KtModule.allDirectDependencies(): Sequence<KtModule>,"sequence {
    yieldAll(directRegularDependencies)
    yieldAll(directDependsOnDependencies)
    yieldAll(directFriendDependencies)
}","/**

 * A list of all other modules that the current module can depend on.

 *

 * @see KtModule.directRegularDependencies

 * @see KtModule.directDependsOnDependencies

 * @see KtModule.directFriendDependencies

 */",f8524:m67
58714,"public fun Int.coerceIn(minimumValue: Int, maximumValue: Int): Int","{
    if (minimumValue > maximumValue) throw IllegalArgumentException(""Cannot coerce value to an empty range: maximum $maximumValue is less than minimum $minimumValue."")
    if (this < minimumValue) return minimumValue
    if (this > maximumValue) return maximumValue
    return this
}","/**

 * Ensures that this value lies in the specified range [minimumValue]..[maximumValue].

 * 

 * @return this value if it's in the range, or [minimumValue] if this value is less than [minimumValue], or [maximumValue] if this value is greater than [maximumValue].

 * 

 * @sample samples.comparisons.ComparableOps.coerceIn

 */",f17092:m2811
57173,"@SinceKotlin(""1.1"") @kotlin.internal.InlineOnly public actual inline fun minOf(a: Double, b: Double, c: Double): Double","{
    return minOf(a, minOf(b, c))
}","/**

 * Returns the smaller of three values.

 * 

 * If any value is `NaN`, returns `NaN`.

 */",f16966:m707
13661,@kotlin.internal.IntrinsicConstEvaluation public inline operator fun compareTo(other: Short): Int,this.compareTo(other.toLong()),"/**

     * Compares this value with the specified value for order.

     * Returns zero if this value is equal to the specified other value, a negative number if it's less than other,

     * or a positive number if it's greater than other.

     */",f3686:m2797
58635,"@kotlin.jvm.JvmName(""byteRangeContains"") public operator fun ClosedRange<Byte>.contains(value: Short): Boolean","{
    return value.toByteExactOrNull().let { if (it != null) contains(it) else false }
}","/**

 * Checks if the specified [value] belongs to this range.

 */",f17092:m1383
20159,public fun getImplicitReceiverTypesAtPosition(position: KtElement): List<KtType>,withValidityAssertion { analysisSession.typeProvider.getImplicitReceiverTypesAtPosition(position) },"/**

     * Gets all the implicit receiver types available at the given position. The type of the outermost receiver appears at the beginning

     * of the returned list.

     */",f5780:m245
58054,"@SinceKotlin(""1.9"") @WasExperimental(ExperimentalStdlibApi::class) @kotlin.internal.InlineOnly public inline operator fun rangeUntil(other: UShort): UIntRange",this.toUInt() until other.toUInt(),"/**

     * Creates a range from this value up to but excluding the specified [other] value.

     *

     * If the [other] value is less than or equal to `this` value, then the returned range is empty.

     */",f17058:m481
58496,"@SinceKotlin(""1.4"") @kotlin.internal.InlineOnly public inline fun <K, V, R: Comparable<R>> Map<out K, V>.minByOrNull(selector: (Map.Entry<K, V>) -> R): Map.Entry<K, V>?","{
    return entries.minByOrNull(selector)
}","/**

 * Returns the first entry yielding the smallest value of the given function or `null` if there are no entries.

 * 

 * @sample samples.collections.Collections.Aggregates.minByOrNull

 */",f17089:m787
69355,fun getPossibleSyntheticNestedClassNames(thisDescriptor: ClassDescriptor): List<Name>?,getSyntheticNestedClassNames(thisDescriptor),"/**

     * This method should return either superset of what [getSyntheticNestedClassNames] returns,

     * or null in case it needs to run resolution and inference and/or it is very costly.

     * Override this method if resolution started to fail with recursion.

     */",f19487:m301
57351,public actual operator fun ShortArray.plus(elements: Collection<Short>): ShortArray,"{
    var index = size
    val result = java.util.Arrays.copyOf(this, index + elements.size)
    for (element in elements) result[index++] = element
    return result
}","/**

 * Returns an array containing all elements of the original array and then all elements of the given [elements] collection.

 */",f16970:m3647
24960,private fun alphaRename(): Scheme,"{
    if ((target !is Open || target.index in -1 .. 0) && parameters.isEmpty()) return this
    val alphaRenameMap = mutableMapOf<Int, Int>()
    var next = 0
    fun scan(scheme: Scheme) {
        val target = scheme.target
        val parameters = scheme.parameters
        val result = scheme.result
        if (target is Open) {
            val index = target.index
            if (index in alphaRenameMap) {
                if (index >= 0 && alphaRenameMap[index] == -1) alphaRenameMap[index] = next++
            } else alphaRenameMap[index] = -1
        }
        parameters.forEach { scan(it) }
        result?.let { scan(it) }
    }
    scan(this)
    if (alphaRenameMap.isEmpty()) return this
    fun rename(scheme: Scheme): Scheme {
        val target = scheme.target
        val parameters = scheme.parameters
        val result = scheme.result
        val newTarget = if (target is Open && target.index != alphaRenameMap[target.index]) Open(alphaRenameMap[target.index]!!) else target
        val newParameters = parameters.map { rename(it) }
        val newResult = result?.let { rename(it) }
        return if (target !== newTarget || newParameters.zip(parameters).any { (a, b) -> a !== b } || newResult != result) Scheme(newTarget, newParameters, newResult) else scheme
    }
    return rename(this)
}","/**

     * Both hashCode and equals are in terms of alpha rename equivalents. That means that the scheme

     * [0, [0]] and [2, [2]] should be treated as equal even though they have different indexes

     * because they are alpha rename equivalent. This method will rename all variables

     * consistently so that if they are alpha equivalent then they will have the same open

     * indexes in the same location. If the scheme is already alpha rename consistent then this is

     * returned.

     */",f9236:m311
63653,"@SinceKotlin(""1.1"") @kotlin.internal.InlineOnly public actual inline fun minOf(a: Double, b: Double, c: Double): Double","{
    return minOf(a, minOf(b, c))
}","/**

 * Returns the smaller of three values.

 * 

 * If any value is `NaN`, returns `NaN`.

 */",f17406:m717
14935,internal fun <T> Array<T>.copyOfUninitializedElements(newSize: Int): Array<T>,"{
    return copyOfUninitializedElements(0, newSize)
}","/**

 * Returns new array which is a copy of the original array with new elements filled with **lateinit** _uninitialized_ values.

 * Attempts to read _uninitialized_ values from this array work in implementation-dependent manner,

 * either throwing exception or returning some kind of implementation-specific default value.

 */",f3831:m3549
14016,@kotlin.internal.InlineOnly public actual inline fun String.toInt(): Int,toIntOrNull() ?: throw NumberFormatException(),"/**

 * Parses the string as an [Int] number and returns the result.

 * @throws NumberFormatException if the string is not a valid representation of a number.

 */",f3714:m191
63578,public actual fun FloatArray.sort(): Unit,"{
    if (size > 1) sortArray(this, 0, size)
}","/**

 * Sorts the array in-place.

 * 

 * @sample samples.collections.Arrays.Sorting.sortArray

 */",f17396:m4751
56422,"@SinceKotlin(""1.9"") @WasExperimental(ExperimentalTime::class) public inline fun TimeSource.Monotonic.measureTime(block: () -> Unit): Duration","{
    contract { callsInPlace(block, InvocationKind.EXACTLY_ONCE) }
    val mark = markNow()
    block()
    return mark.elapsedNow()
}","/**

 * Executes the given function [block] and returns the duration of elapsed time interval.

 *

 * The elapsed time is measured with the specified `this` [TimeSource.Monotonic] instance.

 */",f16862:m83
14169,"@Suppress(""DEPRECATION"") @Deprecated(""ImmutableBlob is deprecated. Use ByteArray instead. To get a stable C pointer to a `ByteArray`, pin it first."") @DeprecatedSinceKotlin(warningSince = ""1.9"") public fun ImmutableBlob.asCPointer(offset: Int = 0): CPointer<ByteVar>",interpretCPointer<ByteVar>(asCPointerImpl(offset))!!,"/**

 * Returns stable C pointer to data at certain [offset], useful as a way to pass resource

 * to C APIs.

 *

 * `ImmutableBlob` is deprecated since Kotlin 1.9. It is recommended to use `ByteArray` instead.

 * To get a stable C pointer to `ByteArray` data the array needs to be pinned first.

 * ```

 * byteArray.usePinned {

 *     val cpointer = it.addressOf(offset)

 *     // use the stable C pointer

 * }

 * ```

 * @see kotlinx.cinterop.CPointer

 */",f3746:m143
24108,"private fun <T: FunctionDescriptor> addNonExistent(result: MutableCollection<T>, toAdd: List<T>)","{
    toAdd.forEach { f -> if (result.none { sameSignature(it, f) }) {
        result += f
    } }
}","/**

     * Deduplicates generated functions using name and argument counts, as lombok does

     */",f9114:m227
54717,"@Suppress(""ACTUAL_WITHOUT_EXPECT"") public actual fun <T> Array<out T>.copyOf(newSize: Int): Array<T?>","{
    require(newSize >= 0) { ""Invalid new array size: $newSize."" }
    return arrayCopyResize(this, newSize, null)
}","/**

 * Returns new array which is a copy of the original array, resized to the given [newSize].

 * The copy is either truncated or padded at the end with `null` values if necessary.

 * 

 * - If [newSize] is less than the size of the original array, the copy array is truncated to the [newSize].

 * - If [newSize] is greater than the size of the original array, the extra elements in the copy array are filled with `null` values.

 * 

 * @sample samples.collections.Arrays.CopyOfOperations.resizingCopyOf

 */",f16713:m2041
58503,"@SinceKotlin(""1.4"") @OptIn(kotlin.experimental.ExperimentalTypeInference::class) @OverloadResolutionByLambdaReturnType @kotlin.internal.InlineOnly public inline fun <K, V, R> Map<out K, V>.minOfWith(comparator: Comparator<in R>, selector: (Map.Entry<K, V>) -> R): R","{
    return entries.minOfWith(comparator, selector)
}","/**

 * Returns the smallest value according to the provided [comparator]

 * among all values produced by [selector] function applied to each entry in the map.

 * 

 * @throws NoSuchElementException if the map is empty.

 */",f17089:m981
58817,public fun <T> Sequence<T>.count(): Int,"{
    var count = 0
    for (element in this) checkCountOverflow(++count)
    return count
}","/**

 * Returns the number of elements in this sequence.

 *

 * The operation is _terminal_.

 */",f17096:m2509
24808,"fun <T> root(keys: MutableSet<String> = mutableSetOf(), block: () -> T): T","{
    val prevKeys = this.keys
    val prevCurrent = current
    val prevParent = parent
    val prevSibling = sibling
    try {
        this.keys = keys
        current = PathPartInfo.ROOT
        parent = null
        sibling = null
        return siblings(block)
    } finally {
        this.keys = prevKeys
        current = prevCurrent
        parent = prevParent
        sibling = prevSibling
    }
}","/**

     * This API is meant to allow for a sub-hierarchy of the tree to be treated as its own scope.

     * This will use the provided [keys] Set as the container for keys that are built while in

     * this scope. Inside of this scope, the previous scope will be completely ignored.

     */",f9214:m265
34347,"@Suppress(""UNCHECKED_CAST"") private fun testArguments(key: String): Array<String>","{
    (NSProcessInfo.processInfo.arguments as? List<String>)?.let { return it.drop(1).toTypedArray() }
    (NSProcessInfo.processInfo.environment[key] as? String)?.let { return it.split("" "").toTypedArray() }
    NSBundle.allBundles.mapNotNull { (it as? NSBundle)?.infoDictionary?.get(key) as? String }.singleOrNull()?.let { return it.split("" "").toTypedArray() }
    return emptyArray()
}","/**

 * Gets test arguments from the Info.plist using the provided key to create test settings.

 *

 * @param key a key used in the `Info.plist` file or as environment variable to pass test arguments

 */",f11291:m133
58077,@kotlin.internal.InlineOnly public inline operator fun compareTo(other: ULong): Int,this.toULong().compareTo(other),"/**

     * Compares this value with the specified value for order.

     * Returns zero if this value is equal to the specified other value, a negative number if it's less than other,

     * or a positive number if it's greater than other.

     */",f17059:m131
56959,"@SinceKotlin(""1.3"") @JvmName(""getSpilledVariableFieldMapping"") internal fun BaseContinuationImpl.getSpilledVariableFieldMapping(): Array<String>?","{
    val debugMetadata = getDebugMetadataAnnotation() ?: return null
    checkDebugMetadataVersion(COROUTINES_DEBUG_METADATA_VERSION, debugMetadata.version)
    val res = arrayListOf<String>()
    val label = getLabel()
    for ((i, labelOfIndex) in debugMetadata.indexToLabel.withIndex()) {
        if (labelOfIndex == label) {
            res.add(debugMetadata.spilled[i])
            res.add(debugMetadata.localNames[i])
        }
    }
    return res.toTypedArray()
}","/**

 * Returns an array of spilled variable names and continuation's field names where the variable has been spilled.

 * The structure is the following:

 * - field names take 2*k'th indices

 * - corresponding variable names take (2*k + 1)'th indices.

 *

 * The function is for debugger to use, thus it returns simplest data type possible.

 * This function should only be called on suspended coroutines to get accurate mapping.

 *

 * The result is `null` when debug metadata is not available.

 */",f16941:m213
13985,public actual fun CharSequence.repeat(n: Int): String,"{
    require(n >= 0) { ""Count 'n' must be non-negative, but was $n."" }
    return when (n) {
        0 -> """"
        1 -> this.toString()
        else -> { when (length) {
            0 -> """"
            1 -> this[0].let { char -> CharArray(n) { char }.concatToString() }
            else -> {
                val sb = StringBuilder(n * length)
                for (i in 1 .. n) {
                    sb.append(this)
                }
                sb.toString()
            }
        } }
    }
}","/**

 * Returns a string containing this char sequence repeated [n] times.

 * @throws [IllegalArgumentException] when n < 0.

 * @sample samples.text.Strings.repeat

 */",f3713:m571
15039,"@SinceKotlin(""1.1"") @kotlin.internal.InlineOnly public actual inline fun minOf(a: Int, b: Int): Int","{
    return if (a <= b) a else b
}","/**

 * Returns the smaller of two values.

 */",f3836:m507
58937,"@SinceKotlin(""1.4"") @kotlin.internal.InlineOnly public inline fun CharSequence.randomOrNull(): Char?","{
    return randomOrNull(Random)
}","/**

 * Returns a random character from this char sequence, or `null` if this char sequence is empty.

 */",f17097:m501
20000,public inline fun <reified PSI: PsiElement> KtSymbol.sourcePsiSafe(): PSI?,"{
    if (origin != KtSymbolOrigin.SOURCE) return null
    return psi as? PSI
}","/**

 * Get symbol [PsiElement] if its type is [PSI] and [KtSymbol.origin] is [KtSymbolOrigin.SOURCE], otherwise null

 *

 * @see KtSymbol.psiSafe

 */",f5735:m109
14917,"public actual fun <T> Array<T>.copyOfRange(fromIndex: Int, toIndex: Int): Array<T>","{
    checkCopyOfRangeArguments(fromIndex, toIndex, size)
    return copyOfUninitializedElements(fromIndex, toIndex)
}","/**

 * Returns a new array which is a copy of the specified range of the original array.

 * 

 * @param fromIndex the start of the range (inclusive) to copy.

 * @param toIndex the end of the range (exclusive) to copy.

 * 

 * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.

 * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].

 */",f3831:m3009
56923,"@SinceKotlin(""1.2"") @kotlin.internal.InlineOnly public inline fun Double.toBigDecimal(): BigDecimal",BigDecimal(this.toString()),"/**

 * Returns the value of this [Double] number as a [BigDecimal].

 *

 * The number is converted to a string and then the string is converted to a [BigDecimal].

 */",f16935:m239
53163,"private fun codePointFrom2(bytes: ByteArray, byte1: Int, index: Int, endIndex: Int, throwOnMalformed: Boolean): Int","{
    if (byte1 and 0x1E == 0 || index >= endIndex) {
        return malformed(0, index, throwOnMalformed)
    }
    val byte2 = bytes[index].toInt()
    if (byte2 and 0xC0 != 0x80) {
        return malformed(0, index, throwOnMalformed)
    }
    return (byte1 shl 6) xor byte2 xor 0xF80
}","/**

 * Returns code point corresponding to UTF-8 sequence of two bytes,

 * where the first byte of the sequence is the [byte1] and the second byte is in the [bytes] array at the [index].

 * Returns zero if the sequence is malformed and [throwOnMalformed] is false.

 *

 * @throws CharacterCodingException if the sequence of two bytes is malformed and [throwOnMalformed] is true.

 */",f16626:m63
54823,"@SinceKotlin(""1.1"") @Suppress(""NOTHING_TO_INLINE"") public actual inline fun minOf(a: Long, b: Long): Long","{
    return if (a <= b) a else b
}","/**

 * Returns the smaller of two values.

 */",f16714:m527
56005,"public fun <K, V> linkedMapOf(vararg pairs: Pair<K, V>): LinkedHashMap<K, V>",pairs.toMap(LinkedHashMap(mapCapacity(pairs.size))),"/**

 * Returns a new [LinkedHashMap] with the specified contents, given as a list of pairs

 * where the first component is the key and the second is the value.

 *

 * If multiple pairs have the same key, the resulting map will contain the value from the last of those pairs.

 *

 * Entries of the map are iterated in the order they were specified.

 *

 * @sample samples.collections.Maps.Instantiation.linkedMapFromPairs

 */",f16823:m249
63368,"@Suppress(""UNCHECKED_CAST"") @kotlin.internal.InlineOnly public actual inline fun <R, T> (suspend R.() -> T).startCoroutineUninterceptedOrReturn(receiver: R, completion: Continuation<T>): Any?","startCoroutineUninterceptedOrReturnIntrinsic1(this, receiver, if (this !is CoroutineImpl) createSimpleCoroutineFromSuspendFunction(completion) else completion)","/**

 * Starts an unintercepted coroutine with receiver type [R] and result type [T] and executes it until its first suspension.

 * Returns the result of the coroutine or throws its exception if it does not suspend or [COROUTINE_SUSPENDED] if it suspends.

 * In the latter case, the [completion] continuation is invoked when the coroutine completes with a result or an exception.

 *

 * The coroutine is started directly in the invoker's thread without going through the [ContinuationInterceptor] that might

 * be present in the completion's [CoroutineContext]. It is the invoker's responsibility to ensure that a proper invocation

 * context is established.

 *

 * This function is designed to be used from inside of [suspendCoroutineUninterceptedOrReturn] to resume the execution of the suspended

 * coroutine using a reference to the suspending function.

 */",f17386:m61
9078,"private fun buildClassSuite(suiteName: String, testClass: IrClass, testCompanion: IrClass?, functions: Collection<TestFunction>, irFile: IrFile): IrClass","{
    return context.irFactory.createClass(testClass.startOffset, testClass.endOffset, TEST_SUITE_CLASS, testClass.name.synthesizeSuiteClassName(), DescriptorVisibilities.PRIVATE, IrClassSymbolImpl(), ClassKind.CLASS, Modality.FINAL).apply {
        irFile.addChild(this)
        createParameterDeclarations()
        val testClassType = testClass.defaultType
        val testCompanionType = if (testClass.kind == ClassKind.OBJECT) {
            testClassType
        } else {
            testCompanion?.defaultType ?: context.irBuiltIns.nothingType
        }
        val constructor = buildClassSuiteConstructor(suiteName, testClassType, testCompanionType, symbol, this, functions, testClass.ignored)
        val instanceGetter: IrFunction
        val companionGetter: IrFunction?
        if (testClass.kind == ClassKind.OBJECT) {
            instanceGetter = buildObjectGetter(testClass.symbol, this, INSTANCE_GETTER_NAME)
            companionGetter = buildObjectGetter(testClass.symbol, this, COMPANION_GETTER_NAME)
        } else {
            instanceGetter = buildInstanceGetter(testClass.symbol, this, INSTANCE_GETTER_NAME)
            companionGetter = testCompanion?.let { buildObjectGetter(it.symbol, this, COMPANION_GETTER_NAME) }
        }
        declarations += constructor
        declarations += instanceGetter
        companionGetter?.let { declarations += it }
        superTypes += symbols.baseClassSuite.typeWith(listOf(testClassType, testCompanionType))
        addFakeOverrides(context.typeSystem)
    }
}","/**

     * Builds a test suite class representing a test class (any class in the original IrFile with method(s)

     * annotated with @Test). The test suite class is a subclass of ClassTestSuite<T> where T is the test class.

     */",f3318:m925
63435,"@Deprecated(""Use Kotlin compiler 1.4 to avoid deprecation warning."") @SinceKotlin(""1.1"") @DeprecatedSinceKotlin(hiddenSince = ""1.4"") public infix fun BooleanArray.contentEquals(other: BooleanArray): Boolean","{
    return this.contentEquals(other)
}","/**

 * Checks if the two specified arrays are *structurally* equal to one another.

 * 

 * Two arrays are considered structurally equal if they have the same size, and elements at corresponding indices are equal.

 * 

 * @param other the array to compare with this array.

 * @return `true` if the two arrays are structurally equal, `false` otherwise.

 * 

 * @sample samples.collections.Arrays.ContentOperations.booleanArrayContentEquals

 */",f17396:m907
15821,"fun KtAnalysisSession.renderResolvedTo(symbols: List<KtSymbol>, renderPsiClassName: Boolean = false, renderer: KtDeclarationRenderer = KtDeclarationRendererForDebug.WITH_QUALIFIED_NAMES, additionalInfo: KtAnalysisSession.(KtSymbol) -> String? = { null }): String","{
    if (symbols.isEmpty()) return UNRESOLVED_REFERENCE_RESULT
    return symbols.map { renderResolveResult(it, renderPsiClassName, renderer, additionalInfo) }.sorted().withIndex().joinToString(separator = ""\n"") { ""${it.index}: ${it.value}"" }
}","/**

     * Empty [symbols] list equals to unresolved reference.

     */",f3997:m39
55159,@kotlin.internal.IntrinsicConstEvaluation public infix fun ushr(bitCount: Int): Long,shiftRightUnsigned(bitCount),"/**

     * Shifts this value right by the [bitCount] number of bits, filling the leftmost bits with zeros.

     *

     * Note that only the six lowest-order bits of the [bitCount] are used as the shift distance.

     * The shift distance actually used is therefore always in the range `0..63`.

     */",f16727:m3073
64804,public actual fun todo(block: () -> Unit),"{
    println(""TODO at "" + block)
}","/**

 * Takes the given [block] of test code and _doesn't_ execute it.

 *

 * This keeps the code under test referenced, but doesn't actually test it until it is implemented.

 */",f17514:m19
15376,@Test fun absF(),"{
    assertTrue(""Incorrect float abs value"", abs(-1908.8976f) == 1908.8976f)
    assertTrue(""Incorrect float abs value"", abs(1908.8976f) == 1908.8976f)
}","/**

     * Tests kotlin.math.abs(float)

     */",f3868:m159
47955,"internal fun downloadNativeDependencies(bundleDir: File, konanDataDir: String?, konanTargets: Set<KonanTarget>, logger: Logger): Set<String>","{
    val requiredDependencies = mutableSetOf<String>()
    val distribution = Distribution(bundleDir.absolutePath, konanDataDir = konanDataDir)
    konanTargets.forEach { konanTarget -> if (konanTarget.enabledOnCurrentHostForBinariesCompilation()) {
        val konanPropertiesLoader = loadConfigurables(konanTarget, distribution.properties, distribution.dependenciesDir, progressCallback = { url, currentBytes, totalBytes -> logger.info(""Downloading dependency for Kotlin Native: $url (${currentBytes}/${totalBytes}). "") }) as KonanPropertiesLoader
        requiredDependencies.addAll(konanPropertiesLoader.dependencies)
        konanPropertiesLoader.downloadDependencies(DependencyExtractor())
    } }
    return requiredDependencies
}","/**

     * Downloads native dependencies for Kotlin Native based on the provided configuration.

     * @return A set of required dependencies that were downloaded.

     */",f15492:m289
52037,"fun String.asErrorDiagnostics(code: Int = ScriptDiagnostic.unspecifiedError, locationWithId: SourceCode.LocationWithId?): ScriptDiagnostic","ScriptDiagnostic(code, this, ScriptDiagnostic.Severity.ERROR, locationWithId)","/**

 * Converts the receiver String to error diagnostic report with optional [locationWithId]

 */",f16426:m551
56290,public open fun isEmpty(): Boolean,if (step > 0) first > last else first < last,"/**

     * Checks if the progression is empty.

     *

     * Progression with a positive step is empty if its first element is greater than the last element.

     * Progression with a negative step is empty if its first element is less than the last element.

     */",f16847:m337
8767,private fun provideIrClassForCEnum(descriptor: ClassDescriptor): IrClass,"createClass(descriptor) { enumIrClass ->
    enumIrClass.addMember(createEnumPrimaryConstructor(descriptor))
    enumIrClass.addMember(createValueProperty(enumIrClass))
    descriptor.enumEntries.mapTo(enumIrClass.declarations) { entryDescriptor -> createEnumEntry(descriptor, entryDescriptor) }
    enumClassMembersGenerator.generateSpecialMembers(enumIrClass)
    enumIrClass.addChild(cEnumCompanionGenerator.generate(enumIrClass))
    enumIrClass.addChild(cEnumVarClassGenerator.generate(enumIrClass))
}","/**

     * The main function that for given [descriptor] of the enum generates the whole

     * IR tree including entries, CEnumVar class, and companion objects.

     */",f3296:m149
58514,"@SinceKotlin(""1.7"") public fun ULongProgression.first(): ULong","{
    if (isEmpty()) throw NoSuchElementException(""Progression $this is empty."")
    return this.first
}","/**

 * Returns the first element.

 * 

 * @throws NoSuchElementException if the progression is empty.

 */",f17090:m61
63380,public operator fun minus(other: Int): Pointer,Pointer(address - other.toUInt()),/** Subtracts an [Int] from the address of this [Pointer] */,f17391:m43
14210,"@ExperimentalNativeApi @SinceKotlin(""1.9"") @ExportForCompiler public fun <T> createCleaner(resource: T, cleanupAction: (resource: T) -> Unit): Cleaner","createCleanerImpl(resource, cleanupAction)","/**

 * Creates a [Cleaner] object that runs [cleanupAction] with given [resource] some time after its deallocation.

 *

 * Example of usage:

 * ```

 * class ResourceWrapper {

 *     private val resource = Resource()

 *

 *     private val cleaner = createCleaner(resource) { it.dispose() }

 * }

 * ```

 *

 * When `ResourceWrapper` becomes unused and gets deallocated, its `cleaner`

 * is also deallocated, and the resource is disposed later.

 *

 * It is not specified which thread runs [cleanupAction], as well as whether two or more

 * cleanup actions from different cleaners can be run in parallel.

 *

 * Note: if [resource] refers (directly or indirectly) the cleaner, then both

 * might leak, and the [cleanupAction] will not be called in this case.

 * For example, the code below has a leak:

 * ```

 * class LeakingResourceWrapper {

 *     private val resource = Resource()

 *     private val cleaner = createCleaner(this) { it.resource.dispose() }

 * }

 * ```

 * In this case cleaner's argument (`LeakingResourceWrapper`) can't be deallocated

 * until [cleanupAction] (`it.resource.dispose()`) is executed, which can happen only strictly after

 * the cleaner is deallocated, which can't happen until `LeakingResourceWrapper`

 * is deallocated. So the requirements on object deallocations are contradictory

 * in this case, which can't be handled gracefully. The cleanup action

 * is not executed then, and cleaner and its argument might leak

 * (depending on the implementation).

 * The same problem occures when [cleanupAction] captures a value that refers (directly or indirectly) the cleaner:

 * ```

 * class LeakingResourceWrapper {

 *     private val cleaner = createCleaner(...) {

 *         doSomething()

 *         ...

 *     }

 *

 *     private fun doSomething() {

 *         ...

 *     }

 * }

 * ```

 * In the example above the cleanup lambda implicitly captures `this` object to call `doSomething()`.

 *

 * [cleanupAction] should not use `@ThreadLocal` globals, because it may

 * be executed on a different thread.

 *

 * If [cleanupAction] throws an exception, the behavior is unspecified.

 *

 * Cleaners cannot be used to perform actions during the program shutdown:

 * * cleaners that are referenced from globals will not be garbage collected at all,

 * * cleaners that become unreferenced just before exiting main() might not be garbage collected,

     because the GC might not get a chance to run.

 *

 * @param resource an object for which to perform [cleanupAction]

 * @param cleanupAction a cleanup to perform on [resource]. Must not capture anything.

 */",f3756:m47
58089,@kotlin.internal.InlineOnly public inline operator fun times(other: ULong): ULong,this.toULong().times(other),/** Multiplies this value by the other value. */,f17059:m217
58221,@kotlin.internal.InlineOnly public inline operator fun compareTo(other: UShort): Int,this.compareTo(other.toULong()),"/**

     * Compares this value with the specified value for order.

     * Returns zero if this value is equal to the specified other value, a negative number if it's less than other,

     * or a positive number if it's greater than other.

     */",f17066:m97
56228,"@SinceKotlin(""1.5"") @kotlin.internal.InlineOnly @kotlin.internal.IntrinsicConstEvaluation public inline fun Short.mod(other: Byte): Byte",this.toInt().mod(other.toInt()).toByte(),"/**

 * Calculates the remainder of flooring division of this value (dividend) by the other value (divisor).

 *

 * The result is either zero or has the same sign as the _divisor_ and has the absolute value less than the absolute value of the divisor.

 */",f16842:m187
54796,public actual fun BooleanArray.toTypedArray(): Array<Boolean>,"{
    return js(""[]"").slice.call(this)
}","/**

 * Returns a *typed* object array containing all of the elements of this primitive array.

 */",f16713:m3835
56332,"@SinceKotlin(""1.9"") @WasExperimental(ExperimentalStdlibApi::class) public operator fun Float.rangeUntil(that: Float): OpenEndRange<Float>","OpenEndFloatRange(this, that)","/**

 * Creates an open-ended range from this [Float] value to the specified [that] value.

 *

 * Numbers are compared with the ends of this range according to IEEE-754.

 */",f16848:m483
55702,"@SinceKotlin(""1.5"") @WasExperimental(ExperimentalStdlibApi::class) public fun Char.digitToIntOrNull(): Int?","{
    return digitOf(this, 10).takeIf { it >= 0 }
}","/**

 *

 * Returns the numeric value of the decimal digit that this Char represents, or `null` if this Char is not a valid decimal digit.

 *

 * A Char is considered to represent a decimal digit if [isDigit] is true for the Char.

 * In this case, the Unicode decimal digit value of the character is returned.

 *

 * @sample samples.text.Chars.digitToIntOrNull

 */",f16785:m93
23063,"fun Project.nativeTest(taskName: String, tag: String?, requirePlatformLibs: Boolean = false, customCompilerDependencies: List<Configuration> = emptyList(), customTestDependencies: List<Configuration> = emptyList(), compilerPluginDependencies: List<Configuration> = emptyList(), allowParallelExecution: Boolean = true, body: Test.() -> Unit = {})","projectTest(taskName, jUnitMode = JUnitMode.JUnit5, maxHeapSizeMb = 3072) {
    group = ""verification""
    if (kotlinBuildProperties.isKotlinNativeEnabled) {
        workingDir = rootDir
        outputs.upToDateWhen { false }
        jvmArgs(""-XX:MaxJavaStackTraceDepth=1000000"")
        jvmArgs(""-Xss2m"")
        val availableCpuCores: Int = if (allowParallelExecution) Runtime.getRuntime().availableProcessors() else 1
        if (!kotlinBuildProperties.isTeamcityBuild && minOf(kotlinBuildProperties.junit5NumberOfThreadsForParallelExecution ?: 16, availableCpuCores) > 4) {
            logger.info(""$path JIT C2 compiler has been disabled"")
            jvmArgs(""-XX:TieredStopAtLevel=1"")
        }
        val computedTestProperties = ComputedTestProperties {
            compute(KOTLIN_NATIVE_HOME) {
                val testTarget = readFromGradle(TEST_TARGET)
                if (testTarget != null) {
                    dependsOn("":kotlin-native:${testTarget}CrossDist"")
                    if (requirePlatformLibs) dependsOn("":kotlin-native:${testTarget}PlatformLibs"")
                } else {
                    dependsOn("":kotlin-native:dist"")
                    if (requirePlatformLibs) dependsOn("":kotlin-native:distPlatformLibs"")
                }
                project("":kotlin-native"").projectDir.resolve(""dist"").absolutePath
            }
            computeLazy(COMPILER_CLASSPATH) {
                val customNativeHome = readFromGradle(KOTLIN_NATIVE_HOME)
                val kotlinNativeCompilerEmbeddable = if (customNativeHome == null) configurations.detachedConfiguration(dependencies.project("":kotlin-native:prepare:kotlin-native-compiler-embeddable""), dependencies.create(commonDependency(""org.jetbrains.intellij.deps:trove4j""))).also { dependsOn(it) } else null
                customCompilerDependencies.forEach(::dependsOn)
                lazyClassPath {
                    if (customNativeHome == null) {
                        addAll(kotlinNativeCompilerEmbeddable!!.files)
                    } else {
                        this += file(customNativeHome).resolve(""konan/lib/kotlin-native-compiler-embeddable.jar"")
                        this += file(customNativeHome).resolve(""konan/lib/trove4j.jar"")
                    }
                    customCompilerDependencies.flatMapTo(this) { it.files }
                }
            }
            computeLazy(COMPILER_PLUGINS) {
                compilerPluginDependencies.forEach(::dependsOn)
                lazyClassPath { compilerPluginDependencies.flatMapTo(this) { it.files } }
            }
            computeLazy(CUSTOM_KLIBS) {
                customTestDependencies.forEach(::dependsOn)
                lazyClassPath { customTestDependencies.flatMapTo(this) { it.files } }
            }
            compute(TEST_KIND) { readFromGradle(FORCE_STANDALONE)?.let { ""STANDALONE"" } }
            compute(TEST_TARGET)
            compute(TEST_MODE)
            compute(COMPILE_ONLY)
            compute(OPTIMIZATION_MODE)
            compute(USE_THREAD_STATE_CHECKER)
            compute(GC_TYPE)
            compute(GC_SCHEDULER)
            compute(ALLOCATOR)
            compute(CACHE_MODE)
            compute(EXECUTION_TIMEOUT)
            compute(SANITIZER)
            compute(SHARED_TEST_EXECUTION)
            compute(EAGER_GROUP_CREATION)
            computePrivate(TEAMCITY) { kotlinBuildProperties.isTeamcityBuild.toString() }
        }
        environment(""GRADLE_TASK_NAME"", path)
        useJUnitPlatform { tag?.let { includeTags(it) } }
        if (!allowParallelExecution) {
            systemProperty(""junit.jupiter.execution.parallel.enabled"", ""false"")
        }
        doFirst {
            logger.info(buildString {
                appendLine(""$path parallel test execution parameters:"")
                append(""  Available CPU cores = $availableCpuCores"")
                systemProperties.filterKeys { it.startsWith(""junit.jupiter"") }.toSortedMap().forEach { (key, value) -> append(""\n  $key = $value"") }
            })
            computedTestProperties.resolveAndApplyToTask()
        }
    } else doFirst { throw GradleException(""""""
    
                        Can't run task $path. The Kotlin/Native part of the project is currently disabled.
    
                        Make sure that ""kotlin.native.enabled"" is set to ""true"" in local.properties file, or is passed
    
                        as a Gradle command-line parameter via ""-Pkotlin.native.enabled=true"".
    
                    """""".trimIndent()) }
    body()
}","/**

 * @param taskName Name of Gradle task.

 * @param tag Optional JUnit test tag. See https://junit.org/junit5/docs/current/user-guide/#writing-tests-tagging-and-filtering

 * @param requirePlatformLibs Where platform KLIBs from the Kotlin/Native distribution are required for running this test.

 * @param customCompilerDependencies The [Configuration]s that provide additional JARs to be added to the compiler's classpath.

 * @param customTestDependencies The [Configuration]s that provide KLIBs to be added to Kotlin/Native compiler dependencies list

 *   along with Kotlin/Native stdlib KLIB and Kotlin/Native platform KLIBs (the latter only if [requirePlatformLibs] is `true`).

 * @param compilerPluginDependencies The [Configuration]s that provide compiler plugins to be enabled for the Kotlin/Native compiler

 *   for the duration of test execution.

 * @param allowParallelExecution if false, force junit to execute test sequentially

 */",f8837:m167
56003,"public fun <K, V> hashMapOf(vararg pairs: Pair<K, V>): HashMap<K, V>","HashMap<K, V>(mapCapacity(pairs.size)).apply { putAll(pairs) }","/**

 * Returns a new [HashMap] with the specified contents, given as a list of pairs

 * where the first component is the key and the second is the value.

 *

 * @sample samples.collections.Maps.Instantiation.hashMapFromPairs

 */",f16823:m219
20161,public fun KtType.getAllSuperTypes(shouldApproximate: Boolean = false): List<KtType>,"withValidityAssertion { analysisSession.typeProvider.getAllSuperTypes(this, shouldApproximate) }","/**

     * Gets all the super types of the given type. The returned result is ordered by a BFS traversal of the class hierarchy, without any

     * duplicates.

     *

     * @param shouldApproximate see [getDirectSuperTypes]

     */",f5780:m285
13353,fun String.asSimpleName(): String,"if (this in kotlinKeywords || this.contains(""$"")) {
    ""`$this`""
} else {
    this.replace(':', '_')
}","/**

 * For this identifier constructs the string to be parsed by Kotlin as `SimpleName`

 * defined [here](https://kotlinlang.org/docs/reference/grammar.html#SimpleName).

 */",f3663:m73
58885,public operator fun <T> Sequence<T>.minus(elements: Iterable<T>): Sequence<T>,"{
    return object : Sequence<T> {
        override fun iterator(): Iterator<T> {
            val other = elements.convertToListIfNotCollection()
            if (other.isEmpty()) return this@minus.iterator() else return this@minus.filterNot { it in other }.iterator()
        }
    }
}","/**

 * Returns a sequence containing all elements of original sequence except the elements contained in the given [elements] collection.

 * 

 * Note that the source sequence and the collection being subtracted are iterated only when an `iterator` is requested from

 * the resulting sequence. Changing any of them between successive calls to `iterator` may affect the result.

 *

 * The operation is _intermediate_ and _stateful_.

 */",f17096:m5293
65265,"fun markFilesForCurrentRound(target: ModuleBuildTarget, files: Collection<File>)","{
    require(target in chunk.targets)
    val targetDirtyFiles = dirtyFilesHolder.byTarget.getValue(target)
    val dirtyFileToRoot = HashMap<File, JavaSourceRootDescriptor>()
    files.forEach { file ->
        val root = compileContext.projectDescriptor.buildRootIndex.findAllParentDescriptors<BuildRootDescriptor>(file, compileContext).single { sourceRoot -> sourceRoot.target == target }
        targetDirtyFiles._markDirty(file, root as JavaSourceRootDescriptor)
        dirtyFileToRoot[file] = root
    }
    markFilesImpl(files, currentRound = true) { it.exists() }
    cleanOutputsForNewDirtyFilesInCurrentRound(target, dirtyFileToRoot)
}","/**

     * Marks given [files] as dirty for current round and given [target] of [chunk].

     */",f17612:m157
43551,"fun assertDirectoryExists(dirPath: Path, message: String? = null)","assertDirectoriesExist(dirPath, message = message)","/**

 * Asserts directory under [dirPath] exists and is a directory.

 */",f13456:m267
57288,"@SinceKotlin(""1.3"") @Suppress(""ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS"") public actual fun ShortArray.copyInto(destination: ShortArray, destinationOffset: Int = 0, startIndex: Int = 0, endIndex: Int = size): ShortArray","{
    System.arraycopy(this, startIndex, destination, destinationOffset, endIndex - startIndex)
    return destination
}","/**

 * Copies this array or its subrange into the [destination] array and returns that array.

 * 

 * It's allowed to pass the same array in the [destination] and even specify the subrange so that it overlaps with the destination range.

 * 

 * @param destination the array to copy to.

 * @param destinationOffset the position in the [destination] array to copy to, 0 by default.

 * @param startIndex the beginning (inclusive) of the subrange to copy, 0 by default.

 * @param endIndex the end (exclusive) of the subrange to copy, size of this array by default.

 * 

 * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of this array indices or when `startIndex > endIndex`.

 * @throws IndexOutOfBoundsException when the subrange doesn't fit into the [destination] array starting at the specified [destinationOffset],

 * or when that index is out of the [destination] array indices range.

 * 

 * @return the [destination] array.

 */",f16970:m1917
46111,inline fun <reified T> Iterable<T>.closure(edges: (T) -> Iterable<T>): Set<T>,"{
    if (this is Collection && this.isEmpty()) return emptySet()
    val thisSet = this.toSet()
    val dequeue = createDequeue<T>()
    thisSet.forEach { seed -> dequeue.addAll(edges(seed)) }
    if (dequeue.isEmpty()) return emptySet()
    val results = createResultSet<T>()
    while (dequeue.isNotEmpty()) {
        val element = dequeue.removeAt(0)
        if (element !in thisSet && results.add(element)) {
            dequeue.addAll(edges(element))
        }
    }
    return results
}","/**

 * @see closure

 * @receiver: Will not be included in the return set

 */",f15014:m251
57025,public fun URL.readBytes(): ByteArray,openStream().use { it.readBytes() },"/**

 * Reads the entire content of the URL as byte array.

 *

 * This method is not recommended on huge files.

 *

 * @return a byte array with this URL entire content.

 */",f16950:m295
13354,internal fun mangleSimple(name: String): String,"{
    val reserved = setOf(""Companion"")
    val postfix = ""\$""
    return if (name in reserved) ""$name$postfix"" else name
}","/**

 * Yet another mangler, particularly to avoid secondary clash, e.g. when a property

 * in prototype (interface) is mangled and that will cause another clash in the class

 * which implements this interface.

 * Rationale: keep algorithm simple but use the mangling characters which are rare

 * in normal code, and keep mangling easy readable.

 */",f3663:m93
43531,fun Path.addFrameworkBlock(str: String),"addCocoapodsBlock(str.wrapIntoBlock(""framework""))","/**

 * Wraps the given string into a Framework block and adds this block to the end of the [this] path.

 *

 * @param str The code to be wrapped with the Cocoapods block.

 */",f13455:m185
14849,"@SinceKotlin(""1.4"") public actual infix fun LongArray?.contentEquals(other: LongArray?): Boolean","{
    if (this === other) return true
    if (this === null || other === null) return false
    if (size != other.size) return false
    for (i in indices) {
        if (this[i] != other[i]) return false
    }
    return true
}","/**

 * Checks if the two specified arrays are *structurally* equal to one another.

 * 

 * Two arrays are considered structurally equal if they have the same size, and elements at corresponding indices are equal.

 * 

 * The arrays are also considered structurally equal if both are `null`.

 * 

 * @param other the array to compare with this array.

 * @return `true` if the two arrays are structurally equal, `false` otherwise.

 * 

 * @sample samples.collections.Arrays.ContentOperations.intArrayContentEquals

 */",f3831:m1167
57310,@kotlin.internal.InlineOnly public actual inline fun BooleanArray.copyOf(newSize: Int): BooleanArray,"{
    return java.util.Arrays.copyOf(this, newSize)
}","/**

 * Returns new array which is a copy of the original array, resized to the given [newSize].

 * The copy is either truncated or padded at the end with `false` values if necessary.

 * 

 * - If [newSize] is less than the size of the original array, the copy array is truncated to the [newSize].

 * - If [newSize] is greater than the size of the original array, the extra elements in the copy array are filled with `false` values.

 * 

 * @sample samples.collections.Arrays.CopyOfOperations.resizedPrimitiveCopyOf

 */",f16970:m2587
14257,public fun getAndSet(newValue: T): T,this::value.getAndSetField(newValue),"/**

     * Atomically sets the value to the given [new value][newValue] and returns the old value.

     */",f3762:m367
58556,"@SinceKotlin(""1.5"") @WasExperimental(ExperimentalUnsignedTypes::class) public fun UShort.coerceAtMost(maximumValue: UShort): UShort","{
    return if (this > maximumValue) maximumValue else this
}","/**

 * Ensures that this value is not greater than the specified [maximumValue].

 * 

 * @return this value if it's less than or equal to the [maximumValue] or the [maximumValue] otherwise.

 * 

 * @sample samples.comparisons.ComparableOps.coerceAtMostUnsigned

 */",f17090:m1019
45760,"fun project(path: String, configuration: String? = null): ProjectDependency","project(listOf(""path"", ""configuration"").zip(listOfNotNull(path, configuration)).toMap())","/**

     * Creates a Gradle project dependency.

     *

     * Note: The created dependency should be manually added to this entity using other methods from this DSL:

     * ```

     * kotlin.sourceSets[""jvmMain""].dependencies {

     *     implementation(project("":my-library"", ""customLibraryConfiguration""))

     * }

     * ```

     *

     * @param path The project path

     * @param configuration The optional target configuration in the project

     */",f14927:m601
58738,@kotlin.internal.InlineOnly public inline fun <T> Sequence<T>.findLast(predicate: (T) -> Boolean): T?,"{
    return lastOrNull(predicate)
}","/**

 * Returns the last element matching the given [predicate], or `null` if no such element was found.

 *

 * The operation is _terminal_.

 * 

 * @sample samples.collections.Collections.Elements.find

 */",f17096:m187
56138,public infix fun <T> Comparator<T>.thenDescending(comparator: Comparator<in T>): Comparator<T>,"Comparator<T> { a, b ->
    val previousCompare = this@thenDescending.compare(a, b)
    if (previousCompare != 0) previousCompare else comparator.compare(b, a)
}","/**

 * Combines this comparator and the given [comparator] such that the latter is applied only

 * when the former considered values equal.

 *

 * @sample samples.comparisons.Comparisons.thenDescending

 */",f16832:m423
58493,"@SinceKotlin(""1.7"") @kotlin.jvm.JvmName(""maxWithOrThrow"") @kotlin.internal.InlineOnly @Suppress(""CONFLICTING_OVERLOADS"") public inline fun <K, V> Map<out K, V>.maxWith(comparator: Comparator<in Map.Entry<K, V>>): Map.Entry<K, V>","{
    return entries.maxWith(comparator)
}","/**

 * Returns the first entry having the largest value according to the provided [comparator].

 * 

 * @throws NoSuchElementException if the map is empty.

 */",f17089:m713
14012,@kotlin.internal.InlineOnly public actual inline fun String.toByte(): Byte,toByteOrNull() ?: throw NumberFormatException(),"/**

 * Parses the string as a signed [Byte] number and returns the result.

 * @throws NumberFormatException if the string is not a valid representation of a number.

 */",f3714:m127
21267,public inline fun <reified M: KtModule> KtModule.directRegularDependenciesOfType(): Sequence<M>,directRegularDependencies.asSequence().filterIsInstance<M>(),"/**

 * A list of all modules that the current module can depend on with regular dependency.

 *

 * @see KtModule.directRegularDependencies

 */",f8524:m19
53094,"@SinceKotlin(""1.2"") @Deprecated(""Use CharArray.concatToString() instead"", ReplaceWith(""chars.concatToString()"")) @DeprecatedSinceKotlin(warningSince = ""1.4"", errorSince = ""1.5"") public actual fun String(chars: CharArray): String","{
    var result = """"
    for (char in chars) {
        result += char
    }
    return result
}","/**

 * Converts the characters in the specified array to a string.

 */",f16617:m19
58847,"@SinceKotlin(""1.4"") @OptIn(kotlin.experimental.ExperimentalTypeInference::class) @OverloadResolutionByLambdaReturnType @kotlin.internal.InlineOnly public inline fun <T> Sequence<T>.minOf(selector: (T) -> Float): Float","{
    val iterator = iterator()
    if (!iterator.hasNext()) throw NoSuchElementException()
    var minValue = selector(iterator.next())
    while (iterator.hasNext()) {
        val v = selector(iterator.next())
        minValue = minOf(minValue, v)
    }
    return minValue
}","/**

 * Returns the smallest value among all values produced by [selector] function

 * applied to each element in the sequence.

 * 

 * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.

 *

 * The operation is _terminal_.

 * 

 * @throws NoSuchElementException if the sequence is empty.

 */",f17096:m3767
9964,"private fun compressedModules(deserializers: Collection<IrModuleDeserializer>): Map<ResolvedDependencyId, ResolvedDependency>","{
    val compressedModules: MutableMap<ResolvedDependencyId, ResolvedDependency> = mergedModules(deserializers)
    var platformLibrariesVersion: ResolvedDependencyVersion? = null
    val platformLibraries: MutableList<ResolvedDependency> = mutableListOf()
    val outgoingDependencyIds: MutableSet<ResolvedDependencyId> = mutableSetOf()
    for ((moduleId, module) in compressedModules) {
        if (moduleId.isKonanPlatformLibrary) {
            if (sourceCodeModuleId !in module.requestedVersionsByIncomingDependencies) {
                continue
            }
            platformLibrariesVersion = when (platformLibrariesVersion) {
                null, module.selectedVersion -> module.selectedVersion
                else -> {
                    return compressedModules
                }
            }
            platformLibraries += module
        } else { module.requestedVersionsByIncomingDependencies.keys.forEach { incomingDependencyId -> if (incomingDependencyId.isKonanPlatformLibrary) {
            outgoingDependencyIds += moduleId
        } } }
    }
    if (platformLibraries.isNotEmpty()) {
        platformLibraries.forEach { it.visibleAsFirstLevelDependency = false }
        val compressedModuleId = ResolvedDependencyId(""$KONAN_PLATFORM_LIBS_NAME_PREFIX* (${platformLibraries.size} libraries)"")
        val compressedModule = ResolvedDependency(id = compressedModuleId, selectedVersion = platformLibrariesVersion!!, requestedVersionsByIncomingDependencies = mutableMapOf(sourceCodeModuleId to platformLibrariesVersion), artifactPaths = mutableSetOf())
        outgoingDependencyIds.forEach { outgoingDependencyId ->
            val outgoingDependency = compressedModules.getValue(outgoingDependencyId)
            outgoingDependency.requestedVersionsByIncomingDependencies[compressedModuleId] = compressedModule.selectedVersion
        }
        compressedModules[compressedModuleId] = compressedModule
    }
    return compressedModules
}","/**

     * This is an optimization to avoid displaying 100+ Kotlin/Native platform libraries to the user.

     * Instead, lets compress them into a single row and avoid excessive output.

     */",f3395:m167
58840,"@SinceKotlin(""1.4"") public fun <T> Sequence<T>.maxWithOrNull(comparator: Comparator<in T>): T?","{
    val iterator = iterator()
    if (!iterator.hasNext()) return null
    var max = iterator.next()
    while (iterator.hasNext()) {
        val e = iterator.next()
        if (comparator.compare(max, e) < 0) max = e
    }
    return max
}","/**

 * Returns the first element having the largest value according to the provided [comparator] or `null` if there are no elements.

 *

 * The operation is _terminal_.

 */",f17096:m3441
14906,public actual fun BooleanArray.copyOf(): BooleanArray,"{
    return this.copyOfUninitializedElements(size)
}","/**

 * Returns new array which is a copy of the original array.

 * 

 * @sample samples.collections.Arrays.CopyOfOperations.copyOf

 */",f3831:m2739
43512,fun BuildResult.assertIncrementalCompilation(expectedCompiledKotlinFiles: Iterable<Path>? = null),"{
    assertOutputContains(INCREMENTAL_COMPILATION_COMPLETED)
    assertOutputDoesNotContain(NON_INCREMENTAL_COMPILATION_WILL_BE_PERFORMED)
    assertOutputDoesNotContain(FALLING_BACK_TO_NON_INCREMENTAL_COMPILATION)
    expectedCompiledKotlinFiles?.let { assertSameFiles(expected = it, actual = extractCompiledKotlinFiles(output), ""Compiled Kotlin files differ:\n"") }
}","/**

 * Asserts that compilation was incremental and the set of compiled .kt files exactly match [expectedCompiledKotlinFiles].

 *

 * [expectedCompiledKotlinFiles] are relative to the project directory.

 *

 * Note: Log level of output must be set to [LogLevel.DEBUG].

 */",f13451:m181
56871,"@SinceKotlin(""1.4"") @kotlin.internal.InlineOnly public actual inline fun Long.countLeadingZeroBits(): Int",java.lang.Long.numberOfLeadingZeros(this),"/**

 * Counts the number of consecutive most significant bits that are zero in the binary representation of this [Long] number.

 */",f16929:m345
56861,"@SinceKotlin(""1.2"") @kotlin.internal.InlineOnly public actual inline fun Float.toRawBits(): Int",java.lang.Float.floatToRawIntBits(this),"/**

 * Returns a bit representation of the specified floating-point value as [Int]

 * according to the IEEE 754 floating-point ""single format"" bit layout,

 * preserving `NaN` values exact layout.

 */",f16929:m159
56128,@kotlin.internal.InlineOnly public inline fun <T> compareBy(crossinline selector: (T) -> Comparable<*>?): Comparator<T>,"Comparator { a, b -> compareValuesBy(a, b, selector) }","/**

 * Creates a comparator using the function to transform value to a [Comparable] instance for comparison.

 *

 * @sample samples.comparisons.Comparisons.compareByWithSingleSelector

 */",f16832:m189
55855,public fun <T> Iterator<T>.asSequence(): Sequence<T>,Sequence { this }.constrainOnce(),"/**

 * Creates a sequence that returns all elements from this iterator. The sequence is constrained to be iterated only once.

 *

 * @sample samples.collections.Sequences.Building.sequenceFromIterator

 */",f16815:m49
14175,"@ExperimentalNativeApi @SinceKotlin(""1.6"") @OptIn(FreezingIsDeprecated::class) public fun getUnhandledExceptionHook(): ReportUnhandledExceptionHook?","{
    return UnhandledExceptionHookHolder.hook.value
}","/**

 * Returns a user-defined unhandled exception hook set by [setUnhandledExceptionHook] or `null` if no user-defined hooks were set.

 */",f3747:m117
57182,"public fun <C: MutableCollection<in R>, R> Iterable<*>.filterIsInstanceTo(destination: C, klass: Class<R>): C","{
    @Suppress(""UNCHECKED_CAST"") for (element in this) if (klass.isInstance(element)) destination.add(element as R)
    return destination
}","/**

 * Appends all elements that are instances of specified class to the given [destination].

 * 

 * @sample samples.collections.Collections.Filtering.filterIsInstanceToJVM

 */",f16967:m55
54776,"@SinceKotlin(""1.4"") @Suppress(""ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS"") public actual fun IntArray.sort(fromIndex: Int = 0, toIndex: Int = size): Unit","{
    AbstractList.checkRangeIndexes(fromIndex, toIndex, size)
    val subarray = this.asDynamic().subarray(fromIndex, toIndex).unsafeCast<IntArray>()
    subarray.sort()
}","/**

 * Sorts a range in the array in-place.

 * 

 * @param fromIndex the start of the range (inclusive) to sort, 0 by default.

 * @param toIndex the end of the range (exclusive) to sort, size of this array by default.

 * 

 * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.

 * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].

 * 

 * @sample samples.collections.Arrays.Sorting.sortRangeOfArray

 */",f16713:m3371
11098,fun queue(packet: Packet): TaskControlBlock?,"{
    val t = this.blocks[packet.id]
    if (t == null) return t
    this.queueCount++
    packet.link = null
    packet.id = this.currentId
    return t.checkPriorityAdd(this.currentTcb!!, packet)
}","/**

     * Add the specified packet to the end of the work list used by the task

     * associated with the packet and make the task runnable if it is currently

     * suspended.

     * @param {Packet} packet the packet to add

     */",f3500:m437
63413,public actual fun <T> Array<out T>.asList(): List<T>,"{
    return object : AbstractList<T>(), RandomAccess {
        override val size: Int get() = this@asList.size
    
        override fun isEmpty(): Boolean = this@asList.isEmpty()
    
        override fun contains(element: T): Boolean = this@asList.contains(element)
    
        override fun get(index: Int): T = this@asList[index]
    
        override fun indexOf(element: T): Int = this@asList.indexOf(element)
    
        override fun lastIndexOf(element: T): Int = this@asList.lastIndexOf(element)
    }
}","/**

 * Returns a [List] that wraps the original array.

 */",f17396:m211
9080,"private fun checkTopLevelSuiteName(irFile: IrFile, topLevelSuiteName: String): Boolean","{
    if (topLevelSuiteNames.contains(topLevelSuiteName)) {
        context.reportCompilationError(""Package '${irFile.packageFqName}' has top-level test "" + ""functions in several files with the same name: '${irFile.fileName}'"")
    }
    topLevelSuiteNames.add(topLevelSuiteName)
    return true
}",/** Check if this fqName already used or not. */,f3318:m1057
57091,@kotlin.internal.InlineOnly public inline fun File.outputStream(): FileOutputStream,"{
    return FileOutputStream(this)
}","/**

 * Constructs a new FileOutputStream of this file and returns it as a result.

 */",f16956:m509
56190,@kotlin.internal.InlineOnly public inline fun error(message: Any): Nothing,throw IllegalStateException(message.toString()),"/**

 * Throws an [IllegalStateException] with the given [message].

 *

 * @sample samples.misc.Preconditions.failWithError

 */",f16839:m273
63666,"@SinceKotlin(""1.3"") @ExperimentalUnsignedTypes public actual fun UIntArray.asList(): List<UInt>","{
    return object : AbstractList<UInt>(), RandomAccess {
        override val size: Int get() = this@asList.size
    
        override fun isEmpty(): Boolean = this@asList.isEmpty()
    
        override fun contains(element: UInt): Boolean = this@asList.contains(element)
    
        override fun get(index: Int): UInt = this@asList[index]
    
        override fun indexOf(element: UInt): Int = this@asList.indexOf(element)
    
        override fun lastIndexOf(element: UInt): Int = this@asList.lastIndexOf(element)
    }
}","/**

 * Returns a [List] that wraps the original array.

 */",f17408:m127
239,fun JsFunction.getInnerFunction(): JsFunction?,"{
    val statements = body.statements
    if (statements.size != 1) return null
    val statement = statements.get(0)
    val returnExpr = (statement as? JsReturn)?.expression
    return returnExpr as? JsFunction
}","/**

 * Gets inner function from function, that creates closure

 *

 * For example:

 * function(a) {

 *   return function() { return a; }

 * }

 *

 * Inner functions can only be generated when lambda

 * with closure is created

 */",f108:m49
55161,@kotlin.internal.IntrinsicConstEvaluation public infix fun or(other: Long): Long,"Long(this.low or other.low, this.high or other.high)",/** Performs a bitwise OR operation between the two values. */,f16727:m3103
46618,"fun fill(charCode: Int, categoryId: String): Boolean","{
    return categoryIds.fill(charCode, categoryId)
}","/**

     * Returns true if the [charCode] with the [categoryId] was successfully placed in [categoryIds].

     */",f15082:m329
63541,"@SinceKotlin(""1.3"") @Suppress(""ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS"") public actual fun FloatArray.fill(element: Float, fromIndex: Int = 0, toIndex: Int = size): Unit","{
    AbstractList.checkRangeIndexes(fromIndex, toIndex, size)
    for (index in fromIndex until toIndex) {
        this[index] = element
    }
}","/**

 * Fills this array or its subrange with the specified [element] value.

 * 

 * @param fromIndex the start of the range (inclusive) to fill, 0 by default.

 * @param toIndex the end of the range (exclusive) to fill, size of this array by default.

 * 

 * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.

 * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].

 */",f17396:m3943
64481,internal fun Path.checkFileName(),"{
    val fileName = this.name
    if (fileName == "".."" || fileName == ""../"" || fileName == ""..\\"" || fileName == ""."" || fileName == ""./"" || fileName == "".\\"") throw IllegalFileNameException(this)
}","/**

 * Checks whether the name of this file is legal for traversal to prevent cycles.

 *

 * Some names are considered illegal as they may cause traversal cycles.

 * This function is intended for use with entries whose parent directories have already been traversed.

 * The file being checked is not the starting point of traversal.

 *

 * For instance, ""/a/b/.."" is a valid starting path for traversal. However, if traversal begins from ""/a""

 * and reaches ""a/b/.."", it will result in a cycle.

 *

 * @throws IllegalFileNameException if the file name is "".."", ""../"", , ""..\"", ""."", ""./"", or "".\"" since these may lead to traversal cycles.

 *

 * See KT-63103 for more details on the issue.

 */",f17471:m947
53125,public actual fun String.toShort(radix: Int): Short,toShortOrNull(radix) ?: numberFormatError(this),"/**

 * Parses the string as a [Short] number and returns the result.

 * @throws NumberFormatException if the string is not a valid representation of a number.

 * @throws IllegalArgumentException when [radix] is not a valid radix for string to number conversion.

 */",f16618:m73
17553,fun KtTestModuleStructure.publishWildcardModificationEventsByDirective(modificationEventKind: ModificationEventKind),"{
    if (modificationEventKind.isModuleLevel) { mainModules.forEach { ktTestModule -> ktTestModule.publishWildcardModificationEventByDirectiveIfPresent(modificationEventKind) } } else {
        if (!testModuleStructure.allDirectives.contains(ModificationEventDirectives.WILDCARD_MODIFICATION_EVENT)) {
            return
        }
        publishGlobalModificationEvent(modificationEventKind, project)
    }
}","/**

 * For each test module that contains a [ModificationEventDirectives.WILDCARD_MODIFICATION_EVENT] directive, publishes a modification event

 * as defined in [KotlinTopics][org.jetbrains.kotlin.analysis.providers.topics.KotlinTopics] based on the given [modificationEventKind] in

 * a write action.

 *

 * Global-level modification events will only be published *once*, regardless of how many `WILDCARD_MODIFICATION_EVENT` directives the test

 * modules contain, as long as at least one test module contains it (to support test cases which don't want to publish any modification

 * events).

 */",f5259:m179
58022,@kotlin.internal.InlineOnly public inline operator fun compareTo(other: ULong): Int,this.toULong().compareTo(other),"/**

     * Compares this value with the specified value for order.

     * Returns zero if this value is equal to the specified other value, a negative number if it's less than other,

     * or a positive number if it's greater than other.

     */",f17058:m131
58053,@kotlin.internal.InlineOnly public inline operator fun rangeTo(other: UShort): UIntRange,"UIntRange(this.toUInt(), other.toUInt())",/** Creates a range from this value to the specified [other] value. */,f17058:m473
63463,"@SinceKotlin(""1.4"") public actual fun CharArray?.contentHashCode(): Int","{
    if (this === null) return 0
    var result = 1
    for (element in this) result = 31 * result + element.hashCode()
    return result
}","/**

 * Returns a hash code based on the contents of this array as if it is [List].

 */",f17396:m1777
14086,@ExperimentalAssociatedObjects public inline fun <reified T: Annotation> KClass<*>.findAssociatedObject(): Any?,this.findAssociatedObject(T::class),"/**

 * If [T] is an @[AssociatedObjectKey]-annotated annotation class and [this] class is annotated with @[T] (`S::class`),

 * returns object `S`.

 *

 * Otherwise returns `null`.

 */",f3720:m65
45736,fun configure(configuration: CO.() -> Unit),"{
    configuration(options)
}","/**

     * @suppress

     */",f14926:m45
59112,"@SinceKotlin(""1.3"") @ExperimentalUnsignedTypes public fun Collection<UShort>.toUShortArray(): UShortArray","{
    val result = UShortArray(size)
    var index = 0
    for (element in this) result[index++] = element
    return result
}","/**

 * Returns an array of UShort containing all of the elements of this collection.

 */",f17099:m119
55288,public inline fun <T> arrayOfNulls(size: Int): Array<T?>,"fillArrayVal<T?>(Array<T?>(size), null)","/**

 * Returns an array of objects of the given type with the given [size], initialized with null values.

 */",f16731:m51
23027,private fun Project.commonVariantAttributes(): Action<Configuration>,"Action<Configuration> { attributes { attribute(TargetJvmEnvironment.TARGET_JVM_ENVIRONMENT_ATTRIBUTE, objects.named(TargetJvmEnvironment.STANDARD_JVM)) } }","/**

 * All additional configuration attributes in plugin variant should be the same as in the 'main' variant.

 * Otherwise, Gradle <7.0 will fail to select plugin variant.

 */",f8830:m1055
17195,public fun Project.createPackagePartProvider(scope: GlobalSearchScope): PackagePartProvider,getService(PackagePartProviderFactory::class.java).createPackagePartProvider(scope),"/**

 * Create a [PackagePartProvider] for a given scope. [PackagePartProvider] is responsible for searching sub packages in a library.

 */",f5182:m37
53144,public actual operator fun contains(char: Char): Boolean,char.getCategoryValue() == this.value,"/**

     * Returns `true` if [char] character belongs to this category.

     */",f16622:m319
63676,"@Deprecated(""Use Kotlin compiler 1.4 to avoid deprecation warning."") @SinceKotlin(""1.3"") @DeprecatedSinceKotlin(hiddenSince = ""1.4"") @ExperimentalUnsignedTypes public fun UByteArray.contentHashCode(): Int","{
    return this.contentHashCode()
}","/**

 * Returns a hash code based on the contents of this array as if it is [List].

 */",f17408:m443
63550,public actual operator fun FloatArray.plus(element: Float): FloatArray,"{
    val index = size
    val result = copyOfUninitializedElements(index + 1)
    result[index] = element
    return result
}","/**

 * Returns an array containing all elements of the original array and then the given [element].

 */",f17396:m4187
56100,public fun <T> MutableIterable<T>.retainAll(predicate: (T) -> Boolean): Boolean,"filterInPlace(predicate, false)","/**

 * Retains only elements of this [MutableIterable] that match the given [predicate].

 *

 * @return `true` if any element was removed from this collection, or `false` when all elements were retained and collection was not modified.

 */",f16825:m425
64885,"internal actual fun AssertionErrorWithCause(message: String?, cause: Throwable?): AssertionError","{
    val assertionError = if (message == null) AssertionError() else AssertionError(message)
    assertionError.initCause(cause)
    return assertionError
}",/** Platform-specific construction of AssertionError with cause */,f17532:m229
54711,public actual fun IntArray.copyOf(newSize: Int): IntArray,"{
    require(newSize >= 0) { ""Invalid new array size: $newSize."" }
    return fillFrom(this, IntArray(newSize))
}","/**

 * Returns new array which is a copy of the original array, resized to the given [newSize].

 * The copy is either truncated or padded at the end with zero values if necessary.

 * 

 * - If [newSize] is less than the size of the original array, the copy array is truncated to the [newSize].

 * - If [newSize] is greater than the size of the original array, the extra elements in the copy array are filled with zero values.

 * 

 * @sample samples.collections.Arrays.CopyOfOperations.resizedPrimitiveCopyOf

 */",f16713:m1873
38077,public fun createDummyLogger(): SwiftExportLogger,"object : SwiftExportLogger {
    override fun report(severity: SwiftExportLogger.Severity, message: String) {
        println(""$severity: $message"")
    }
}","/**

 * Primitive implementation of [SwiftExportLogger] which should be sufficient for testing purposes.

 */",f12055:m153
56475,"@SinceKotlin(""1.1"") @kotlin.internal.InlineOnly public actual inline fun Short.toString(radix: Int): String",this.toInt().toString(radix),"/**

 * Returns a string representation of this [Short] value in the specified [radix].

 *

 * @throws IllegalArgumentException when [radix] is not a valid radix for number to string conversion.

 */",f16885:m41
64039,@kotlin.internal.IntrinsicConstEvaluation public inline operator fun minus(other: Byte): Int,this.toInt() - other.toInt(),/** Subtracts the other value from this value. */,f17455:m251
14842,"@Deprecated(""Use Kotlin compiler 1.4 to avoid deprecation warning."") @SinceKotlin(""1.1"") @DeprecatedSinceKotlin(hiddenSince = ""1.4"") public infix fun DoubleArray.contentEquals(other: DoubleArray): Boolean","{
    return this.contentEquals(other)
}","/**

 * Checks if the two specified arrays are *structurally* equal to one another.

 * 

 * Two arrays are considered structurally equal if they have the same size, and elements at corresponding indices are equal.

 * Elements are compared for equality using the [equals][Any.equals] function.

 * This means `NaN` is equal to itself and `-0.0` is not equal to `0.0`.

 * 

 * @param other the array to compare with this array.

 * @return `true` if the two arrays are structurally equal, `false` otherwise.

 * 

 * @sample samples.collections.Arrays.ContentOperations.doubleArrayContentEquals

 */",f3831:m869
54745,"@Suppress(""ACTUAL_WITHOUT_EXPECT"") public actual operator fun <T> Array<out T>.plus(elements: Collection<T>): Array<T>","{
    return arrayPlusCollection(this, elements)
}","/**

 * Returns an array containing all elements of the original array and then all elements of the given [elements] collection.

 */",f16713:m2759
49311,private fun KotlinToolingDiagnosticsCollector.reportForDefaultPlatformCompilations(compilations: Collection<KotlinCompilation<*>>),"{
    val alreadyReportedSourceSet = mutableSetOf<KotlinSourceSet>()
    for (compilation in compilations) {
        val expectedSourceSetRoot = when {
            compilation.isMain() -> COMMON_MAIN_SOURCE_SET_NAME
            compilation.isTest() -> COMMON_TEST_SOURCE_SET_NAME
            else -> continue
        }
        val unexpectedSourceSetRoots = compilation.sourceSetRoots().filter { it.name != expectedSourceSetRoot }
        unexpectedSourceSetRoots.forEach { unexpectedSourceSetRoot ->
            if (!alreadyReportedSourceSet.add(unexpectedSourceSetRoot)) return@forEach
            val includedIntoCompilations = unexpectedSourceSetRoot.internal.compilations.filter { it.platformType != KotlinPlatformType.common }
            if (includedIntoCompilations.isEmpty()) return@forEach
            val singleCompilation = includedIntoCompilations.singleOrNull()
            val diagnostic = if (singleCompilation != null) {
                MultipleSourceSetRootsInCompilation(singleCompilation, unexpectedSourceSetRoot.name, expectedSourceSetRoot)
            } else {
                MultipleSourceSetRootsInCompilation(targetNames = includedIntoCompilations.map { it.target.name }, unexpectedSourceSetRoot.name, expectedSourceSetRoot)
            }
            report(compilation.project, diagnostic)
        }
    }
}","/**

     * Report for 'main' and 'test' compilations.

     * These are special because we know that all source sets should depend on `commonMain` or `commonTest` accordingly.

     */",f15802:m89
57355,public actual operator fun DoubleArray.plus(elements: Collection<Double>): DoubleArray,"{
    var index = size
    val result = java.util.Arrays.copyOf(this, index + elements.size)
    for (element in elements) result[index++] = element
    return result
}","/**

 * Returns an array containing all elements of the original array and then all elements of the given [elements] collection.

 */",f16970:m3727
63523,"internal fun FloatArray.copyOfUninitializedElements(fromIndex: Int, toIndex: Int): FloatArray","{
    val newSize = toIndex - fromIndex
    if (newSize < 0) {
        throw IllegalArgumentException(""$fromIndex > $toIndex"")
    }
    val result = FloatArray(newSize)
    this.copyInto(result, 0, fromIndex, toIndex.coerceAtMost(size))
    return result
}","/**

 * Returns new array which is a copy of the original array's range between [fromIndex] (inclusive)

 * and [toIndex] (exclusive) with new elements filled with **lateinit** _uninitialized_ values.

 * Attempts to read _uninitialized_ values from this array work in implementation-dependent manner,

 * either throwing exception or returning some kind of implementation-specific default value.

 */",f17396:m3473
59084,public fun CharSequence.asSequence(): Sequence<Char>,"{
    if (this is String && isEmpty()) return emptySequence()
    return Sequence { this.iterator() }
}","/**

 * Creates a [Sequence] instance that wraps the original char sequence returning its characters when being iterated.

 */",f17097:m4957
15033,"@SinceKotlin(""1.4"") public actual fun maxOf(a: Long, vararg other: Long): Long","{
    var max = a
    for (e in other) max = maxOf(max, e)
    return max
}","/**

 * Returns the greater of the given values.

 */",f3836:m383
58695,public infix fun Byte.until(to: Short): IntRange,"{
    return this.toInt() .. (to.toInt() - 1).toInt()
}","/**

 * Returns a range from this value up to but excluding the specified [to] value.

 * 

 * If the [to] value is less than or equal to `this` value, then the returned range is empty.

 */",f17092:m2371
54786,"@Deprecated(""Use other sorting functions from the Standard Library"") @DeprecatedSinceKotlin(warningSince = ""1.6"") @kotlin.internal.InlineOnly public inline fun DoubleArray.sort(noinline comparison: (a: Double, b: Double) -> Int): Unit","{
    nativeSort(comparison)
}","/**

 * Sorts the array in-place according to the order specified by the given [comparison] function.

 */",f16713:m3657
11092,"fun addRunningTask(id: Int, priority: Int, queue: Packet?, task: Task)","{
    this.addTask(id, priority, queue, task)
    this.currentTcb!!.setRunning()
}","/**

     * Add the specified task and mark it as running.

     * @param {int} id the identity of the task

     * @param {int} priority the task's priority

     * @param {Packet} queue the queue of work to be processed by the task

     * @param {Task} task the task to add

     */",f3500:m287
15384,@Test fun withSign_D(),"{
    for (i in COPYSIGN_DD_CASES.indices) {
        val magnitude = COPYSIGN_DD_CASES[i]
        val absMagnitudeBits = abs(magnitude).toBits()
        val negMagnitudeBits = (-abs(magnitude)).toBits()
        assertTrue(""The result should be NaN."", Double.isNaN(Double.NaN.withSign(magnitude)))
        for (j in COPYSIGN_DD_CASES.indices) {
            val sign = COPYSIGN_DD_CASES[j]
            val resultBits = magnitude.withSign(sign).toBits()
            if (sign > 0 || (+0.0).toBits() == sign.toBits() || 0.0.toBits() == sign.toBits()) {
                assertEquals(""If the sign is positive, the result should be positive."", absMagnitudeBits, resultBits)
            }
            if (sign < 0 || (-0.0).toBits() == sign.toBits()) {
                assertEquals(""If the sign is negative, the result should be negative."", negMagnitudeBits, resultBits)
            }
        }
    }
    assertTrue(""The result should be NaN."", Double.isNaN(Double.NaN.withSign(Double.NaN)))
}","/**

     * Tests kotlin.math.withSign(Double)

     */",f3868:m323
54774,"@SinceKotlin(""1.4"") @Suppress(""ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS"") public actual fun ByteArray.sort(fromIndex: Int = 0, toIndex: Int = size): Unit","{
    AbstractList.checkRangeIndexes(fromIndex, toIndex, size)
    val subarray = this.asDynamic().subarray(fromIndex, toIndex).unsafeCast<ByteArray>()
    subarray.sort()
}","/**

 * Sorts a range in the array in-place.

 * 

 * @param fromIndex the start of the range (inclusive) to sort, 0 by default.

 * @param toIndex the end of the range (exclusive) to sort, size of this array by default.

 * 

 * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.

 * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].

 * 

 * @sample samples.collections.Arrays.Sorting.sortRangeOfArray

 */",f16713:m3295
63444,"@SinceKotlin(""1.4"") public actual infix fun BooleanArray?.contentEquals(other: BooleanArray?): Boolean","{
    if (this === other) return true
    if (this === null || other === null) return false
    if (size != other.size) return false
    for (i in indices) {
        if (this[i] != other[i]) return false
    }
    return true
}","/**

 * Checks if the two specified arrays are *structurally* equal to one another.

 * 

 * Two arrays are considered structurally equal if they have the same size, and elements at corresponding indices are equal.

 * 

 * The arrays are also considered structurally equal if both are `null`.

 * 

 * @param other the array to compare with this array.

 * @return `true` if the two arrays are structurally equal, `false` otherwise.

 * 

 * @sample samples.collections.Arrays.ContentOperations.booleanArrayContentEquals

 */",f17396:m1313
63437,"@SinceKotlin(""1.4"") public actual infix fun <T> Array<out T>?.contentEquals(other: Array<out T>?): Boolean","{
    if (this === other) return true
    if (this === null || other === null) return false
    if (size != other.size) return false
    for (i in indices) {
        if (this[i] != other[i]) return false
    }
    return true
}","/**

 * Checks if the two specified arrays are *structurally* equal to one another.

 * 

 * Two arrays are considered structurally equal if they have the same size, and elements at corresponding indices are equal.

 * Elements are compared for equality using the [equals][Any.equals] function.

 * For floating point numbers, this means `NaN` is equal to itself and `-0.0` is not equal to `0.0`.

 * 

 * The arrays are also considered structurally equal if both are `null`.

 * 

 * If the arrays contain nested arrays, use [contentDeepEquals] to recursively compare their elements.

 * 

 * @param other the array to compare with this array.

 * @return `true` if the two arrays are structurally equal, `false` otherwise.

 * 

 * @sample samples.collections.Arrays.ContentOperations.arrayContentEquals

 */",f17396:m975
14929,"internal fun IntArray.copyOfUninitializedElements(fromIndex: Int, toIndex: Int): IntArray","{
    val newSize = toIndex - fromIndex
    if (newSize < 0) {
        throw IllegalArgumentException(""$fromIndex > $toIndex"")
    }
    val result = IntArray(newSize)
    this.copyInto(result, 0, fromIndex, toIndex.coerceAtMost(size))
    return result
}","/**

 * Returns new array which is a copy of the original array's range between [fromIndex] (inclusive)

 * and [toIndex] (exclusive) with new elements filled with **lateinit** _uninitialized_ values.

 * Attempts to read _uninitialized_ values from this array work in implementation-dependent manner,

 * either throwing exception or returning some kind of implementation-specific default value.

 */",f3831:m3357
57996,"@SinceKotlin(""1.6"") @WasExperimental(ExperimentalStdlibApi::class, ExperimentalUnsignedTypes::class) @kotlin.internal.InlineOnly public inline fun UInt.rotateLeft(bitCount: Int): UInt",toInt().rotateLeft(bitCount).toUInt(),"/**

 * Rotates the binary representation of this [UInt] number left by the specified [bitCount] number of bits.

 * The most significant bits pushed out from the left side reenter the number as the least significant bits on the right side.

 *

 * Rotating the number left by a negative bit count is the same as rotating it right by the negated bit count:

 * `number.rotateLeft(-n) == number.rotateRight(n)`

 *

 * Rotating by a multiple of [UInt.SIZE_BITS] (32) returns the same number, or more generally

 * `number.rotateLeft(n) == number.rotateLeft(n % 32)`

 */",f17056:m101
54829,"@SinceKotlin(""1.1"") @kotlin.internal.InlineOnly public actual inline fun minOf(a: Int, b: Int, c: Int): Int","{
    return JsMath.min(a, b, c)
}","/**

 * Returns the smaller of three values.

 */",f16714:m645
58294,"@SinceKotlin(""1.5"") @WasExperimental(ExperimentalUnsignedTypes::class) public fun String.toUShortOrNull(radix: Int): UShort?","{
    val int = this.toUIntOrNull(radix) ?: return null
    if (int > UShort.MAX_VALUE) return null
    return int.toUShort()
}","/**

 * Parses the string as an [UShort] number and returns the result

 * or `null` if the string is not a valid representation of a number.

 *

 * @throws IllegalArgumentException when [radix] is not a valid radix for string to number conversion.

 */",f17067:m307
57389,public actual fun ShortArray.toTypedArray(): Array<Short>,"{
    val result = arrayOfNulls<Short>(size)
    for (index in indices) result[index] = this[index]
    @Suppress(""UNCHECKED_CAST"") return result as Array<Short>
}","/**

 * Returns a *typed* object array containing all of the elements of this primitive array.

 */",f16970:m4543
195,private fun JsNode.match(predicate: (JsNode) -> Boolean): Set<JsNode>,"{
    val visitor = object : JsExpressionVisitor() {
        val matched = IdentitySet<JsNode>()
    
        override fun <R: JsNode> doTraverse(node: R, ctx: JsContext<JsNode>?) {
            super.doTraverse(node, ctx)
            if (node !in matched && predicate(node)) {
                matched.add(node)
            }
        }
    }
    visitor.accept(this)
    return visitor.matched
}","/**

 * Returns descendants of receiver, matched by [predicate].

 */",f100:m939
58084,@kotlin.internal.InlineOnly public inline operator fun minus(other: UInt): UInt,this.toUInt().minus(other),/** Subtracts the other value from this value. */,f17059:m185
52862,public actual fun Double.isInfinite(): Boolean,this == Double.POSITIVE_INFINITY || this == Double.NEGATIVE_INFINITY,"/**

 * Returns `true` if this value is infinitely large in magnitude.

 */",f16581:m39
56159,"@kotlin.internal.InlineOnly public inline fun <T, R> T.let(block: (T) -> R): R","{
    contract { callsInPlace(block, InvocationKind.EXACTLY_ONCE) }
    return block(this)
}","/**

 * Calls the specified function [block] with `this` value as its argument and returns its result.

 *

 * For detailed usage information see the documentation for [scope functions](https://kotlinlang.org/docs/reference/scope-functions.html#let).

 */",f16833:m203
59015,"public inline fun CharSequence.forEachIndexed(action: (index: Int, Char) -> Unit): Unit","{
    var index = 0
    for (item in this) action(index++, item)
}","/**

 * Performs the given [action] on each character, providing sequential index with the character.

 * @param [action] function that takes the index of a character and the character itself

 * and performs the action on the character.

 */",f17097:m2363
57276,"@SinceKotlin(""1.4"") @kotlin.internal.InlineOnly public actual inline fun CharArray?.contentHashCode(): Int","{
    return java.util.Arrays.hashCode(this)
}","/**

 * Returns a hash code based on the contents of this array as if it is [List].

 */",f16970:m1609
58763,"public inline fun <reified R, C: MutableCollection<in R>> Sequence<*>.filterIsInstanceTo(destination: C): C","{
    for (element in this) if (element is R) destination.add(element)
    return destination
}","/**

 * Appends all elements that are instances of specified type parameter R to the given [destination].

 *

 * The operation is _terminal_.

 * 

 * @sample samples.collections.Collections.Filtering.filterIsInstanceTo

 */",f17096:m959
33525,"@SinceKotlin(""1.1"") fun <D> KProperty2<D, *, *>.getExtensionDelegate(receiver: D): Any?","{
    @Suppress(""UNCHECKED_CAST"") return (this as KProperty2<D, Any?, *>).getDelegate(receiver, KPropertyImpl.EXTENSION_PROPERTY_DELEGATE)
}","/**

 * Returns the instance of a delegated **member extension property**, or `null` if this property is not delegated.

 * Throws an exception if this is not an extension property.

 *

 * @param receiver the instance of the class used to retrieve the value of the property delegate.

 *

 * @see [KProperty2.getDelegate]

 */",f11195:m73
14851,"@SinceKotlin(""1.4"") public actual infix fun DoubleArray?.contentEquals(other: DoubleArray?): Boolean","{
    if (this === other) return true
    if (this === null || other === null) return false
    if (size != other.size) return false
    for (i in indices) {
        if (!this[i].equals(other[i])) return false
    }
    return true
}","/**

 * Checks if the two specified arrays are *structurally* equal to one another.

 * 

 * Two arrays are considered structurally equal if they have the same size, and elements at corresponding indices are equal.

 * Elements are compared for equality using the [equals][Any.equals] function.

 * This means `NaN` is equal to itself and `-0.0` is not equal to `0.0`.

 * 

 * The arrays are also considered structurally equal if both are `null`.

 * 

 * @param other the array to compare with this array.

 * @return `true` if the two arrays are structurally equal, `false` otherwise.

 * 

 * @sample samples.collections.Arrays.ContentOperations.doubleArrayContentEquals

 */",f3831:m1263
21947,"private fun KtAnalysisSession.findParentSymbol(symbol: KtSymbol, goBackSteps: Int, selectedFqName: FqName): KtSymbol?","{
    if (symbol !is KtDeclarationSymbol && symbol !is KtPackageSymbol) return null
    if (symbol is KtDeclarationSymbol) {
        goToNthParent(symbol, goBackSteps)?.let { return it }
    }
    return getPackageSymbolIfPackageExists(selectedFqName)
}","/**

     * Finds the parent symbol of the given KtSymbol by traversing back up the symbol hierarchy a certain number of steps,

     * or until the containing class or object symbol is found.

     *

     * @param symbol The KtSymbol whose parent symbol needs to be found.

     * @param goBackSteps The number of steps to go back up the symbol hierarchy.

     * @param selectedFqName The fully qualified name of the selected package.

     * @return The [goBackSteps]-th parent [KtSymbol]

     */",f8670:m191
57489,"@SinceKotlin(""1.3"") @ExperimentalUnsignedTypes public fun ULongArray.binarySearch(element: ULong, fromIndex: Int = 0, toIndex: Int = size): Int","{
    AbstractList.checkRangeIndexes(fromIndex, toIndex, size)
    val signedElement = element.toLong()
    var low = fromIndex
    var high = toIndex - 1
    while (low <= high) {
        val mid = (low + high).ushr(1)
        val midVal = storage[mid]
        val cmp = ulongCompare(midVal, signedElement)
        if (cmp < 0) low = mid + 1 else if (cmp > 0) high = mid - 1 else return mid
    }
    return -(low + 1)
}","/**

 * Searches the array or the range of the array for the provided [element] using the binary search algorithm.

 * The array is expected to be sorted, otherwise the result is undefined.

 * 

 * If the array contains multiple elements equal to the specified [element], there is no guarantee which one will be found.

 * 

 * @param element the to search for.

 * @param fromIndex the start of the range (inclusive) to search in, 0 by default.

 * @param toIndex the end of the range (exclusive) to search in, size of this array by default.

 * 

 * @return the index of the element, if it is contained in the array within the specified range;

 * otherwise, the inverted insertion point `(-insertion point - 1)`.

 * The insertion point is defined as the index at which the element should be inserted,

 * so that the array (or the specified subrange of array) still remains sorted.

 * 

 * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.

 * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].

 */",f16971:m341
58889,public operator fun <T> Sequence<T>.plus(element: T): Sequence<T>,"{
    return sequenceOf(this, sequenceOf(element)).flatten()
}","/**

 * Returns a sequence containing all elements of the original sequence and then the given [element].

 *

 * The operation is _intermediate_ and _stateless_.

 */",f17096:m5437
58877,"@SinceKotlin(""1.4"") @OptIn(kotlin.experimental.ExperimentalTypeInference::class) @OverloadResolutionByLambdaReturnType @kotlin.jvm.JvmName(""sumOfLong"") @kotlin.internal.InlineOnly public inline fun <T> Sequence<T>.sumOf(selector: (T) -> Long): Long","{
    var sum: Long = 0.toLong()
    for (element in this) {
        sum += selector(element)
    }
    return sum
}","/**

 * Returns the sum of all values produced by [selector] function applied to each element in the sequence.

 *

 * The operation is _terminal_.

 */",f17096:m5027
13729,@kotlin.internal.IntrinsicConstEvaluation public operator fun compareTo(other: Long): Int,this.compareTo(other.toFloat()),"/**

     * Compares this value with the specified value for order.

     * Returns zero if this value is equal to the specified other value, a negative number if it's less than other,

     * or a positive number if it's greater than other.

     */",f3686:m3841
58055,@kotlin.internal.InlineOnly public inline infix fun and(other: UShort): UShort,UShort(this.data and other.data),/** Performs a bitwise AND operation between the two values. */,f17058:m501
56205,"@SinceKotlin(""1.4"") @kotlin.internal.InlineOnly public inline fun Byte.countOneBits(): Int",(toInt() and 0xFF).countOneBits(),"/**

 * Counts the number of set bits in the binary representation of this [Byte] number.

 */",f16841:m263
67167,fun File.setFileContent(content: String),"{
    check(!exists()) { ""File `$this` already exists,"" + ""\n\n============= contents ============\n"" + readText() + ""\n===================================\n"" + ""\n============ new content ==========\n"" + content + ""\n===================================\n"" }
    parentFile.mkdirs()
    writeText(content)
}","/**

     * Set required content for [this] [File].

     */",f19109:m101
52790,@Test fun testLookAheadBehind(),"{
    var regex: Regex
    var result: List<String>
    regex = ""a(?=b?)(\\w|)c"".toRegex()
    result = regex.allGroups(""abcfgac"")
    assertEquals(2, result.count())
    assertEquals(""0 => abc; 1 => b"", result[0])
    assertEquals(""0 => ac; 1 => "", result[1])
    regex = ""[a!](?=d|&)\\b[&d]"".toRegex()
    result = regex.allGroups(""ada& !d!&"")
    assertEquals(2, result.count())
    assertEquals(""0 => a&"", result[0])
    assertEquals(""0 => !d"", result[1])
    regex = ""(?=ab)(a|^)b"".toRegex()
    result = regex.allGroups(""abcab"")
    assertEquals(2, result.count())
    assertEquals(""0 => ab; 1 => a"", result[0])
    assertEquals(""0 => ab; 1 => a"", result[1])
    regex = ""(?=[a-k][a-z])(?=[a-d][c-x])[d-y][x-z]"".toRegex()
    result = regex.allGroups(""abdydx"")
    assertEquals(1, result.count())
    assertEquals(""0 => dx"", result[0])
}","/**

     * Tests regular expressions with lookahead asserts.

     */",f16574:m79
64127,public operator fun rangeTo(other: Short): IntRange,"IntRange(this.toInt(), other.toInt())",/** Creates a range from this value to the specified [other] value. */,f17455:m1477
46994,override fun getCompilerPluginId(),"""androidx.compose.compiler.plugins.kotlin""",/** Get ID of the Kotlin Compiler plugin */,f15202:m245
13321,private fun generateEnumAsConstants(enumDef: EnumDef): List<StubIrElement>,"{
    val entries = mutableListOf<PropertyStub>()
    val typealiases = mutableListOf<TypealiasStub>()
    val constants = enumDef.constants.filter { it.name !in context.macroConstantsByName }
    val kotlinType: KotlinType
    val baseKotlinType = context.mirror(enumDef.baseType).argType
    val meta = if (enumDef.isAnonymous) {
        kotlinType = baseKotlinType
        StubContainerMeta(textAtStart = if (constants.isNotEmpty()) ""// ${enumDef.spelling}:"" else """")
    } else {
        val typeMirror = context.mirror(EnumType(enumDef))
        if (typeMirror !is TypeMirror.ByValue) {
            error(""unexpected enum type mirror: $typeMirror"")
        }
        val varTypeName = typeMirror.info.constructPointedType(typeMirror.valueType)
        val varTypeClassifier = typeMirror.pointedType.classifier
        val valueTypeClassifier = typeMirror.valueType.classifier
        val origin = StubOrigin.Enum(enumDef)
        typealiases += TypealiasStub(varTypeClassifier, varTypeName.toStubIrType(), StubOrigin.VarOf(origin))
        typealiases += TypealiasStub(valueTypeClassifier, baseKotlinType.toStubIrType(), origin)
        kotlinType = typeMirror.valueType
        StubContainerMeta()
    }
    for (constant in constants) {
        val literal = context.tryCreateIntegralStub(enumDef.baseType, constant.value) ?: continue
        val kind = when (context.generationMode) {
            GenerationMode.SOURCE_CODE -> {
                val getter = PropertyAccessor.Getter.SimpleGetter(constant = literal)
                PropertyStub.Kind.Val(getter)
            }
            GenerationMode.METADATA -> {
                PropertyStub.Kind.Constant(literal)
            }
        }
        entries += PropertyStub(constant.name, kotlinType.toStubIrType(), kind, MemberStubModality.FINAL, null, origin = StubOrigin.EnumEntry(constant))
    }
    val container = SimpleStubContainer(meta, properties = entries.toList(), typealiases = typealiases.toList())
    return listOf(container)
}","/**

     * Produces to [out] the Kotlin definitions for given enum which shouldn't be represented as Kotlin enum.

     */",f3659:m1111
59092,"@SinceKotlin(""1.5"") @WasExperimental(ExperimentalUnsignedTypes::class) @kotlin.internal.InlineOnly public inline fun maxOf(a: UShort, b: UShort, c: UShort): UShort","{
    return maxOf(a, maxOf(b, c))
}","/**

 * Returns the greater of three values.

 */",f17098:m169
58808,"public inline fun <T, R: Any, C: MutableCollection<in R>> Sequence<T>.mapNotNullTo(destination: C, transform: (T) -> R?): C","{
    forEach { element -> transform(element)?.let { destination.add(it) } }
    return destination
}","/**

 * Applies the given [transform] function to each element in the original sequence

 * and appends only the non-null results to the given [destination].

 *

 * The operation is _terminal_.

 */",f17096:m2281
58560,"@SinceKotlin(""1.5"") @WasExperimental(ExperimentalUnsignedTypes::class) public fun UShort.coerceIn(minimumValue: UShort, maximumValue: UShort): UShort","{
    if (minimumValue > maximumValue) throw IllegalArgumentException(""Cannot coerce value to an empty range: maximum $maximumValue is less than minimum $minimumValue."")
    if (this < minimumValue) return minimumValue
    if (this > maximumValue) return maximumValue
    return this
}","/**

 * Ensures that this value lies in the specified range [minimumValue]..[maximumValue].

 * 

 * @return this value if it's in the range, or [minimumValue] if this value is less than [minimumValue], or [maximumValue] if this value is greater than [maximumValue].

 * 

 * @sample samples.comparisons.ComparableOps.coerceInUnsigned

 */",f17090:m1141
16686,"private fun rebindThisRef(expression: FirExpression, newTarget: FirPropertySymbol, oldTarget: FirPropertySymbol, canHavePropertySymbolAsThisReference: Boolean)","{
    if (expression is FirLiteralExpression<*>) return
    requireWithAttachment(expression is FirThisReceiverExpression, { ""Unexpected this reference expression: ${expression::class.simpleName}"" }) {
        withFirSymbolEntry(""newTarget"", newTarget)
        withFirSymbolEntry(""oldTarget"", oldTarget)
        withFirEntry(""expression"", expression)
    }
    val boundSymbol = expression.calleeReference.boundSymbol
    if (boundSymbol is FirClassSymbol<*>) return
    requireWithAttachment(canHavePropertySymbolAsThisReference, { ""Class bound symbol is not found: ${boundSymbol?.let { it::class.simpleName }}"" }) {
        withFirSymbolEntry(""newTarget"", newTarget)
        withFirSymbolEntry(""oldTarget"", oldTarget)
        boundSymbol?.let { withFirSymbolEntry(""boundSymbol"", boundSymbol) }
    }
    requireWithAttachment(boundSymbol == oldTarget, { ""Unexpected bound symbol: ${boundSymbol?.let { it::class.simpleName }}"" }) {
        withFirSymbolEntry(""newTarget"", newTarget)
        withFirSymbolEntry(""oldTarget"", oldTarget)
        boundSymbol?.let { withFirSymbolEntry(""boundSymbol"", boundSymbol) }
    }
    expression.replaceCalleeReference(buildImplicitThisReference { this.boundSymbol = newTarget })
}","/**

 * To cover `thisRef` function

 *

 * @see org.jetbrains.kotlin.fir.builder.generateAccessorsByDelegate

 */",f4161:m651
58991,"public inline fun <K> CharSequence.groupBy(keySelector: (Char) -> K): Map<K, List<Char>>","{
    return groupByTo(LinkedHashMap<K, MutableList<Char>>(), keySelector)
}","/**

 * Groups characters of the original char sequence by the key returned by the given [keySelector] function

 * applied to each character and returns a map where each group key is associated with a list of corresponding characters.

 * 

 * The returned map preserves the entry iteration order of the keys produced from the original char sequence.

 * 

 * @sample samples.collections.Collections.Transformations.groupBy

 */",f17097:m1787
22254,private fun KtFile.facadeIsPossible(): Boolean,"when {
    isCompiled && !name.endsWith("".class"") -> false
    isScript() -> false
    canHaveAdditionalFilesInFacade() -> true
    else -> hasTopLevelCallables()
}","/**

     * lightweight applicability check

     */",f8725:m109
14146,"@SinceKotlin(""1.3"") public actual fun <T> Continuation<T>.intercepted(): Continuation<T>",(this as? ContinuationImpl)?.intercepted() ?: this,"/**

 * Intercepts this continuation with [ContinuationInterceptor].

 *

 * This function shall be used on the immediate result of [createCoroutineUnintercepted] or [suspendCoroutineUninterceptedOrReturn],

 * in which case it checks for [ContinuationInterceptor] in the continuation's [context][Continuation.context],

 * invokes [ContinuationInterceptor.interceptContinuation], caches and returns the result.

 *

 * If this function is invoked on other [Continuation] instances it returns `this` continuation unchanged.

 */",f3737:m381
58244,@kotlin.internal.InlineOnly public inline fun floorDiv(other: UByte): ULong,this.floorDiv(other.toULong()),"/**

     * Divides this value by the other value, flooring the result to an integer that is closer to negative infinity.

     *

     * For unsigned types, the results of flooring division and truncating division are the same.

     */",f17066:m309
55149,public operator fun rangeTo(other: Byte): LongRange,"LongRange(this, other.toLong())",/** Creates a range from this value to the specified [other] value. */,f16727:m2921
58074,"@kotlin.internal.InlineOnly @Suppress(""OVERRIDE_BY_INLINE"") public override inline operator fun compareTo(other: UByte): Int",this.toInt().compareTo(other.toInt()),"/**

     * Compares this value with the specified value for order.

     * Returns zero if this value is equal to the specified other value, a negative number if it's less than other,

     * or a positive number if it's greater than other.

     */",f17059:m81
56512,"@SinceKotlin(""1.4"") @kotlin.internal.InlineOnly public actual inline fun StringBuilder.appendRange(value: CharSequence, startIndex: Int, endIndex: Int): StringBuilder","this.append(value, startIndex, endIndex)","/**

 * Appends a subsequence of the specified character sequence [value] to this string builder and returns this instance.

 *

 * @param value the character sequence from which a subsequence is appended.

 * @param startIndex the beginning (inclusive) of the subsequence to append.

 * @param endIndex the end (exclusive) of the subsequence to append.

 *

 * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of the [value] character sequence indices or when `startIndex > endIndex`.

 */",f16890:m295
57977,public open fun isEmpty(): Boolean,if (step > 0) first > last else first < last,"/** 

     * Checks if the progression is empty.

     

     * Progression with a positive step is empty if its first element is greater than the last element.

     * Progression with a negative step is empty if its first element is less than the last element.

     */",f17053:m177
58568,"@SinceKotlin(""1.7"") public fun LongProgression.first(): Long","{
    if (isEmpty()) throw NoSuchElementException(""Progression $this is empty."")
    return this.first
}","/**

 * Returns the first element.

 * 

 * @throws NoSuchElementException if the progression is empty.

 */",f17092:m61
43509,"fun assertCompiledKotlinSources(expectedSources: Iterable<Path>, output: String, errorMessageSuffix: String = """")","{
    val actualSources = extractCompiledKotlinFiles(output)
    assertSameFiles(expectedSources, actualSources, ""Compiled Kotlin files differ${errorMessageSuffix}:\n"")
}","/**

 * Asserts all the .kt files from [expectedSources] and only they are compiled

 *

 * Note: log level of output should be set to [LogLevel.DEBUG]

 */",f13451:m91
14261,public fun getAndSet(newValue: NativePtr): NativePtr,"{
    while (true) {
        val old = value
        if (this::value.compareAndSetField(old, newValue)) {
            return old
        }
    }
}","/**

     * Atomically sets the value to the given [new value][newValue] and returns the old value.

     */",f3762:m449
21945,"internal fun resolveKdocFqName(analysisSession: KtAnalysisSession, selectedFqName: FqName, fullFqName: FqName, contextElement: KtElement): Collection<KtSymbol>","{
    with(analysisSession) {
        val fullSymbolsResolved = resolveKdocFqName(fullFqName, contextElement)
        if (selectedFqName == fullFqName) return fullSymbolsResolved.mapTo(mutableSetOf()) { it.symbol }
        if (fullSymbolsResolved.isEmpty()) {
            val parent = fullFqName.parent()
            return resolveKdocFqName(analysisSession, selectedFqName, parent, contextElement)
        }
        val goBackSteps = fullFqName.pathSegments().size - selectedFqName.pathSegments().size
        check(goBackSteps > 0) { ""Selected FqName ($selectedFqName) should be smaller than the whole FqName ($fullFqName)"" }
        return fullSymbolsResolved.mapNotNullTo(mutableSetOf()) { findParentSymbol(it, goBackSteps, selectedFqName) }
    }
}","/**

     * Resolves the [selectedFqName] of KDoc

     *

     * To properly resolve qualifier parts in the middle,

     * we need to resolve the whole qualifier to understand which parts of the qualifier are package or class qualifiers.

     * And then we will be able to resolve the qualifier selected by the user to the proper class, package or callable.

     *

     * It's possible that the whole qualifier is invalid, in this case we still want to resolve our [selectedFqName].

     * To do this, we are trying to resolve the whole qualifier until we succeed.

     *

     * @param selectedFqName the selected fully qualified name of the KDoc

     * @param fullFqName the whole fully qualified name of the KDoc

     * @param contextElement the context element in which the KDoc is defined

     *

     * @return the collection of KtSymbol(s) resolved from the fully qualified name

     *         based on the selected FqName and context element

     */",f8670:m87
58639,"@kotlin.jvm.JvmName(""longRangeContains"") @SinceKotlin(""1.9"") @WasExperimental(ExperimentalStdlibApi::class) public operator fun OpenEndRange<Long>.contains(value: Short): Boolean","{
    return contains(value.toLong())
}","/**

 * Checks if the specified [value] belongs to this range.

 */",f17092:m1459
48237,internal suspend fun Project.isPluginApplied(pluginId: String): Boolean,"{
    val result = CompletableFuture<Boolean>()
    pluginManager.withPlugin(pluginId) {
        check(!result.isCompleted) { ""Plugin '$pluginId' was applied too late. It was expected to be applied during build script evaluation"" }
        result.complete(true)
    }
    launchInStage(AfterEvaluateBuildscript) { if (!result.isCompleted) result.complete(false) }
    return result.await()
}","/**

 * Returns true as soon as Gradle plugin with [pluginId] is applied.

 * Returns false if plugin wasn't applied during

 */",f15580:m23
56188,@kotlin.internal.InlineOnly public inline fun <T: Any> checkNotNull(value: T?): T,"{
    contract { returns() implies (value != null) }
    return checkNotNull(value) { ""Required value was null."" }
}","/**

 * Throws an [IllegalStateException] if the [value] is null. Otherwise

 * returns the not null value.

 *

 * @sample samples.misc.Preconditions.failCheckWithLazyMessage

 */",f16839:m203
50909,fun Gradle.registerMinimalVariantImplementationFactoriesForTests(),"{
    VariantImplementationFactoriesConfigurator.get(gradle).putIfAbsent(ConfigurationTimePropertiesAccessor.ConfigurationTimePropertiesAccessorVariantFactory::class, DefaultConfigurationTimePropertiesAccessorVariantFactory())
    VariantImplementationFactoriesConfigurator.get(gradle).putIfAbsent(IdeaSyncDetector.IdeaSyncDetectorVariantFactory::class, DefaultIdeaSyncDetectorVariantFactory())
}","/**

 * Configures some default factories that are usually automatically registered in

 * [org.jetbrains.kotlin.gradle.plugin.DefaultKotlinBasePlugin.apply]

 *

 * This function can be used in some minimal tests that do not apply the full KGP plugin but still touch

 * some parts of its code

 */",f16188:m31
14054,public fun decrementAndGet(): Int,this::value.getAndAddField(-1) - 1,"/**

     * Atomically decrements the current value by one and returns the new value.

     */",f3718:m123
30852,fun String.decapitalizeSmart(asciiOnly: Boolean = false): String,"{
    return decapitalizeWithUnderscores(this, asciiOnly) ?: decapitalizeSmartForCompiler(asciiOnly)
}","/**

 * ""FooBar"" -> ""fooBar""

 * ""FOOBar"" -> ""fooBar""

 * ""FOO"" -> ""foo""

 * ""FOO_BAR"" -> ""fooBar""

 * ""__F_BAR"" -> ""fBar""

 */",f10787:m77
63455,"@SinceKotlin(""1.4"") public actual fun <T> Array<out T>?.contentHashCode(): Int","{
    if (this === null) return 0
    var result = 1
    for (element in this) result = 31 * result + element.hashCode()
    return result
}","/**

 * Returns a hash code based on the contents of this array as if it is [List].

 */",f17396:m1585
57348,public actual operator fun CharArray.plus(element: Char): CharArray,"{
    val index = size
    val result = java.util.Arrays.copyOf(this, index + 1)
    result[index] = element
    return result
}","/**

 * Returns an array containing all elements of the original array and then the given [element].

 */",f16970:m3587
63627,"@SinceKotlin(""1.1"") @kotlin.internal.InlineOnly public actual inline fun maxOf(a: Byte, b: Byte, c: Byte): Byte","{
    return maxOf(a.toInt(), maxOf(b.toInt(), c.toInt())).toByte()
}","/**

 * Returns the greater of three values.

 */",f17406:m183
13548,@kotlin.internal.IntrinsicConstEvaluation public inline operator fun minus(other: Short): Int,this.toInt() - other.toInt(),/** Subtracts the other value from this value. */,f3686:m1127
54660,"@SinceKotlin(""1.1"") @kotlin.internal.LowPriorityInOverloadResolution public actual fun <T> Array<out T>.contentDeepHashCode(): Int","{
    return this.contentDeepHashCode()
}","/**

 * Returns a hash code based on the contents of this array as if it is [List].

 * Nested arrays are treated as lists too.

 * 

 * If any of arrays contains itself on any nesting level the behavior is undefined.

 */",f16713:m461
49802,@ExternalKotlinTargetApi fun <T: DecoratedExternalKotlinTarget> KotlinMultiplatformExtension.createExternalKotlinTarget(descriptor: ExternalKotlinTargetDescriptorBuilder<T>.() -> Unit): T,"{
    return createExternalKotlinTarget(ExternalKotlinTargetDescriptor(descriptor))
}","/**

 * @see createExternalKotlinTarget

 */",f15963:m247
14959,public actual operator fun DoubleArray.plus(element: Double): DoubleArray,"{
    val index = size
    val result = copyOfUninitializedElements(index + 1)
    result[index] = element
    return result
}","/**

 * Returns an array containing all elements of the original array and then the given [element].

 */",f3831:m4101
59027,"@SinceKotlin(""1.4"") public fun CharSequence.maxOrNull(): Char?","{
    if (isEmpty()) return null
    var max = this[0]
    for (i in 1 .. lastIndex) {
        val e = this[i]
        if (max < e) max = e
    }
    return max
}","/**

 * Returns the largest character or `null` if there are no characters.

 */",f17097:m2855
63502,public actual fun IntArray.copyOf(newSize: Int): IntArray,"{
    return this.copyOfUninitializedElements(newSize)
}","/**

 * Returns new array which is a copy of the original array, resized to the given [newSize].

 * The copy is either truncated or padded at the end with zero values if necessary.

 * 

 * - If [newSize] is less than the size of the original array, the copy array is truncated to the [newSize].

 * - If [newSize] is greater than the size of the original array, the extra elements in the copy array are filled with zero values.

 * 

 * @sample samples.collections.Arrays.CopyOfOperations.resizedPrimitiveCopyOf

 */",f17396:m2879
13934,"@SinceKotlin(""1.4"") public actual fun Long.countTrailingZeroBits(): Int",if (this == 0L) 64 else countTrailingZeroBits(this),"/**

 * Counts the number of consecutive least significant bits that are zero in the binary representation of this [Long] number.

 */",f3706:m437
51538,override fun hashCode(): Int,31 * className.hashCode() + arguments.hashCode(),"/**

     * Returns hash code of this instance.

     * Hash code is computed based on [className] and [arguments].

     */",f16336:m57
57256,"@SinceKotlin(""1.4"") @JvmName(""contentDeepHashCodeNullable"") @kotlin.internal.InlineOnly public actual inline fun <T> Array<out T>?.contentDeepHashCode(): Int","{
    if (kotlin.internal.apiVersionIsAtLeast(1, 3, 0)) return contentDeepHashCodeImpl() else return java.util.Arrays.deepHashCode(this)
}","/**

 * Returns a hash code based on the contents of this array as if it is [List].

 * Nested arrays are treated as lists too.

 * 

 * If any of arrays contains itself on any nesting level the behavior is undefined.

 */",f16970:m1021
15030,"@SinceKotlin(""1.4"") public actual fun maxOf(a: Byte, vararg other: Byte): Byte","{
    var max = a
    for (e in other) max = maxOf(max, e)
    return max
}","/**

 * Returns the greater of the given values.

 */",f3836:m323
56917,"@SinceKotlin(""1.2"") @kotlin.internal.InlineOnly public inline fun Int.toBigDecimal(): BigDecimal",BigDecimal.valueOf(this.toLong()),"/**

 * Returns the value of this [Int] number as a [BigDecimal].

 */",f16935:m135
9781,fun dwarfVersion(config: KonanConfig),"when (config.debugInfoVersion()) {
    1 -> 2
    2 -> 4
    else -> TODO(""unsupported debug info format version"")
}","/**

     * Note: Kotlin language constant appears in DWARF v6, while modern linker fails to links DWARF other then [2;4],

     * that why we emit version 4 actually.

     */",f3383:m81
63562,public actual operator fun CharArray.plus(elements: Collection<Char>): CharArray,"{
    var index = size
    val result = copyOfUninitializedElements(index + elements.size)
    for (element in elements) result[index++] = element
    return result
}","/**

 * Returns an array containing all elements of the original array and then all elements of the given [elements] collection.

 */",f17396:m4427
14961,public actual operator fun CharArray.plus(element: Char): CharArray,"{
    val index = size
    val result = copyOfUninitializedElements(index + 1)
    result[index] = element
    return result
}","/**

 * Returns an array containing all elements of the original array and then the given [element].

 */",f3831:m4141
54678,"@SinceKotlin(""1.4"") public actual fun FloatArray?.contentHashCode(): Int","{
    return contentHashCodeInternal()
}","/**

 * Returns a hash code based on the contents of this array as if it is [List].

 */",f16713:m967
56244,"@SinceKotlin(""1.5"") @kotlin.internal.InlineOnly @kotlin.internal.IntrinsicConstEvaluation public inline fun Long.mod(other: Byte): Byte",this.mod(other.toLong()).toByte(),"/**

 * Calculates the remainder of flooring division of this value (dividend) by the other value (divisor).

 *

 * The result is either zero or has the same sign as the _divisor_ and has the absolute value less than the absolute value of the divisor.

 */",f16842:m485
53103,"@SinceKotlin(""1.4"") public actual fun String.encodeToByteArray(): ByteArray","{
    return encodeUtf8(this, 0, length, false)
}","/**

 * Encodes this string to an array of bytes in UTF-8 encoding.

 *

 * Any malformed char sequence is replaced by the replacement byte sequence.

 */",f16617:m319
54820,"@SinceKotlin(""1.1"") @kotlin.internal.InlineOnly public actual inline fun minOf(a: Byte, b: Byte): Byte","{
    return minOf(a.toInt(), b.toInt()).unsafeCast<Byte>()
}","/**

 * Returns the smaller of two values.

 */",f16714:m473
46619,"private fun Array<String?>.fill(charCode: Int, categoryId: String): Boolean","{
    val index = charCode % sequenceLength
    val current = this[index]
    if (current == null || (isPeriodic && current == categoryId)) {
        this[index] = categoryId
        return true
    }
    return false
}","/**

     * Returns true if the [charCode] with the [categoryId] was successfully placed in this array.

     *

     * The [charCode] is placed at index `charCode % sequenceLength`.

     */",f15082:m343
58484,"@SinceKotlin(""1.4"") @kotlin.internal.InlineOnly public inline fun <K, V, R: Comparable<R>> Map<out K, V>.maxByOrNull(selector: (Map.Entry<K, V>) -> R): Map.Entry<K, V>?","{
    return entries.maxByOrNull(selector)
}","/**

 * Returns the first entry yielding the largest value of the given function or `null` if there are no entries.

 * 

 * @sample samples.collections.Collections.Aggregates.maxByOrNull

 */",f17089:m467
57284,"@SinceKotlin(""1.4"") @kotlin.internal.InlineOnly public actual inline fun BooleanArray?.contentToString(): String","{
    return java.util.Arrays.toString(this)
}","/**

 * Returns a string representation of the contents of the specified array as if it is [List].

 * 

 * @sample samples.collections.Arrays.ContentOperations.contentToString

 */",f16970:m1781
8360,private fun String.looksLikeRemovedTarget(): Boolean,"this in removedTargetsNames || this.startsWith(""zephyr_"")","/**

 * [this] is a value passed to `-target` CLI-argument (see [KonanConfigKeys.TARGET])

 * Returns 'true' if this argument is most likely a removed [KonanTarget], allowing for a

 * more readable and graceful error message.

 */",f3239:m55
27520,fun invalidateIsolatingForOriginTypes(originatingTypes: Set<String>),"{
    val isolatingGenerated = mutableSetOf<File>()
    isolatingMapping.forEach { (file, type) -> if (type in originatingTypes) {
        isolatingGenerated.add(file)
    } }
    isolatingGenerated.forEach {
        isolatingMapping.remove(it)
        it.delete()
    }
}","/**

     * Prepares isolating processors for incremental compilation. The specified generated files are removed, and mapping

     * information is deleted for them. The invalidation is non-transitive.

     */",f9701:m137
57377,"@SinceKotlin(""1.4"") @Suppress(""ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS"") public actual fun <T: Comparable<T>> Array<out T>.sort(fromIndex: Int = 0, toIndex: Int = size): Unit","{
    java.util.Arrays.sort(this, fromIndex, toIndex)
}","/**

 * Sorts a range in the array in-place.

 * 

 * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.

 * 

 * @param fromIndex the start of the range (inclusive) to sort, 0 by default.

 * @param toIndex the end of the range (exclusive) to sort, size of this array by default.

 * 

 * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.

 * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].

 * 

 * @sample samples.collections.Arrays.Sorting.sortRangeOfArrayOfComparable

 */",f16970:m4175
48959,"private fun <A, B> matchSymmetricallyByNames(containerA: NamedDomainObjectCollection<out A>, containerB: NamedDomainObjectCollection<out B>, whenMatched: (A, B) -> Unit)","{
    val matchedNames = mutableSetOf<String>()
    fun <T, R> NamedDomainObjectCollection<T>.matchAllWith(other: NamedDomainObjectCollection<R>, match: (T, R) -> Unit) {
        this@matchAllWith.all { item ->
            val itemName = this@matchAllWith.namer.determineName(item)
            if (itemName !in matchedNames) {
                val otherItem = other.findByName(itemName)
                if (otherItem != null) {
                    matchedNames += itemName
                    match(item, otherItem)
                }
            }
        }
    }
    containerA.matchAllWith(containerB) { a, b -> whenMatched(a, b) }
    containerB.matchAllWith(containerA) { b, a -> whenMatched(a, b) }
}","/**

     * Applies [whenMatched] to pairs of items with the same name in [containerA] and [containerB],

     * regardless of the order in which they are added to the containers.

     */",f15720:m263
59056,"@SinceKotlin(""1.4"") public inline fun <R> CharSequence.runningFold(initial: R, operation: (acc: R, Char) -> R): List<R>","{
    if (isEmpty()) return listOf(initial)
    val result = ArrayList<R>(length + 1).apply { add(initial) }
    var accumulator = initial
    for (element in this) {
        accumulator = operation(accumulator, element)
        result.add(accumulator)
    }
    return result
}","/**

 * Returns a list containing successive accumulation values generated by applying [operation] from left to right

 * to each character and current accumulator value that starts with [initial] value.

 * 

 * Note that `acc` value passed to [operation] function should not be mutated;

 * otherwise it would affect the previous value in resulting list.

 * 

 * @param [operation] function that takes current accumulator value and a character, and calculates the next accumulator value.

 * 

 * @sample samples.collections.Collections.Aggregates.runningFold

 */",f17097:m3943
58742,"@SinceKotlin(""1.5"") @kotlin.internal.InlineOnly public inline fun <T, R: Any> Sequence<T>.firstNotNullOfOrNull(transform: (T) -> R?): R?","{
    for (element in this) {
        val result = transform(element)
        if (result != null) {
            return result
        }
    }
    return null
}","/**

 * Returns the first non-null value produced by [transform] function being applied to elements of this sequence in iteration order,

 * or `null` if no non-null value was produced.

 *

 * The operation is _terminal_.

 * 

 * @sample samples.collections.Collections.Transformations.firstNotNullOf

 */",f17096:m289
64146,@kotlin.internal.IntrinsicConstEvaluation public inline operator fun compareTo(other: Short): Int,this.compareTo(other.toInt()),"/**

     * Compares this value with the specified value for order.

     * Returns zero if this value is equal to the specified other value, a negative number if it's less than other,

     * or a positive number if it's greater than other.

     */",f17455:m1829
50920,"fun assertContains(expected: String, actual: String, ignoreCase: Boolean = false)","{
    if (!actual.contains(expected, ignoreCase = ignoreCase)) {
        fail(""expected:<string contains '$expected' (ignoreCase:$ignoreCase)> but was:<$actual>"")
    }
}",/** Assert that [actual] contains substring [expected] */,f16189:m263
13728,@kotlin.internal.IntrinsicConstEvaluation public operator fun compareTo(other: Int): Int,this.compareTo(other.toFloat()),"/**

     * Compares this value with the specified value for order.

     * Returns zero if this value is equal to the specified other value, a negative number if it's less than other,

     * or a positive number if it's greater than other.

     */",f3686:m3823
13665,@kotlin.internal.IntrinsicConstEvaluation public inline operator fun compareTo(other: Double): Int,this.toDouble().compareTo(other),"/**

     * Compares this value with the specified value for order.

     * Returns zero if this value is equal to the specified other value, a negative number if it's less than other,

     * or a positive number if it's greater than other.

     */",f3686:m2869
56095,public fun <T> MutableCollection<in T>.retainAll(elements: Iterable<T>): Boolean,"{
    return retainAll(elements.convertToListIfNotCollection())
}","/**

 * Retains only elements of this [MutableCollection] that are contained in the given [elements] collection.

 */",f16825:m341
58686,public infix fun Long.until(to: Int): LongRange,"{
    return this .. (to.toLong() - 1).toLong()
}","/**

 * Returns a range from this value up to but excluding the specified [to] value.

 * 

 * If the [to] value is less than or equal to `this` value, then the returned range is empty.

 */",f17092:m2197
58922,public inline fun CharSequence.first(predicate: (Char) -> Boolean): Char,"{
    for (element in this) if (predicate(element)) return element
    throw NoSuchElementException(""Char sequence contains no character matching the predicate."")
}","/**

 * Returns the first character matching the given [predicate].

 * @throws [NoSuchElementException] if no such character is found.

 */",f17097:m159
14971,public actual operator fun <T> Array<T>.plus(elements: Array<out T>): Array<T>,"{
    val thisSize = size
    val arraySize = elements.size
    val result = copyOfUninitializedElements(thisSize + arraySize)
    elements.copyInto(result, thisSize)
    return result
}","/**

 * Returns an array containing all elements of the original array and then all elements of the given [elements] array.

 */",f3831:m4341
56213,"@SinceKotlin(""1.4"") @kotlin.internal.InlineOnly public inline fun Short.countLeadingZeroBits(): Int",(toInt() and 0xFFFF).countLeadingZeroBits() - (Int.SIZE_BITS - Short.SIZE_BITS),"/**

 * Counts the number of consecutive most significant bits that are zero in the binary representation of this [Short] number.

 */",f16841:m413
56038,"public inline fun <K, V> Map<out K, V>.filterValues(predicate: (V) -> Boolean): Map<K, V>","{
    val result = LinkedHashMap<K, V>()
    for (entry in this) {
        if (predicate(entry.value)) {
            result.put(entry.key, entry.value)
        }
    }
    return result
}","/**

 * Returns a map containing all key-value pairs with values matching the given [predicate].

 *

 * The returned map preserves the entry iteration order of the original map.

 *  @sample samples.collections.Maps.Filtering.filterValues

 */",f16823:m991
37342,@TodoAnalysisApi @Test fun `test - constructors`(),"{
    doTest(headersTestDataDir.resolve(""constructors""))
}","/**

     * - requires mangling

     */",f11809:m541
57350,public actual operator fun ByteArray.plus(elements: Collection<Byte>): ByteArray,"{
    var index = size
    val result = java.util.Arrays.copyOf(this, index + elements.size)
    for (element in elements) result[index++] = element
    return result
}","/**

 * Returns an array containing all elements of the original array and then all elements of the given [elements] collection.

 */",f16970:m3627
69366,fun MemberDescriptor.isInlineOnlyPrivateInBytecode(): Boolean,isInlineOnly() || isPrivateInlineSuspend(),"/**

 * @return true if this member should be private in bytecode because it's effectively inline-only.

 */",f19490:m45
15018,"@SinceKotlin(""1.1"") @kotlin.internal.InlineOnly public actual inline fun maxOf(a: Int, b: Int): Int","{
    return if (a >= b) a else b
}","/**

 * Returns the greater of two values.

 */",f3836:m83
20389,public fun getClassifierSymbols(vararg names: Name): Sequence<KtClassifierSymbol>,getClassifierSymbols(names.toList()),"/**

     * Return a sequence of [KtClassifierSymbol] which current scope contains, if classifier name present in [names].

     *

     * @see getClassifierSymbols

     */",f5838:m123
43586,"fun BuildResult.assertNativeTasksClasspath(vararg tasksPaths: String, toolName: NativeToolKind = NativeToolKind.KONANC, assertions: (List<String>) -> Unit)","tasksPaths.forEach { taskPath -> assertions(extractNativeCompilerClasspath(getOutputForTask(taskPath, LogLevel.INFO), toolName)) }","/**

 * Asserts classpath of the given K/N compiler tool for given tasks' paths.

 *

 * Note: Log level of output must be set to [LogLevel.INFO].

 *

 * @param tasksPaths tasks' paths, for which classpath should be checked with give assertions

 * @param toolName name of build tool

 * @param assertions assertions, with will be applied to each classpath of each given task

 */",f13457:m531
56450,public operator fun minus(other: ValueTimeMark): Duration,"MonotonicTimeSource.differenceBetween(this, other)","/**

             * Returns the duration elapsed between the [other] time mark obtained from the same [TimeSource.Monotonic] time source and `this` time mark.

             *

             * The returned duration can be infinite if the time marks are far away from each other and

             * the result doesn't fit into [Duration] type,

             * or if one time mark is infinitely distant, or if both `this` and [other] time marks

             * lie infinitely distant on the opposite sides of the time scale.

             *

             * Two infinitely distant time marks on the same side of the time scale are considered equal and

             * the duration between them is [Duration.ZERO].

             */",f16867:m157
55716,public fun Char.isSurrogate(): Boolean,this in Char.MIN_SURROGATE .. Char.MAX_SURROGATE,"/**

 * Returns `true` if this character is a Unicode surrogate code unit.

 */",f16785:m485
63580,public actual fun <T: Comparable<T>> Array<out T>.sort(): Unit,"{
    if (size > 1) sortArray(this, 0, size)
}","/**

 * Sorts the array in-place according to the natural order of its elements.

 * 

 * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.

 * 

 * @sample samples.collections.Arrays.Sorting.sortArrayOfComparable

 */",f17396:m4787
64138,@kotlin.internal.IntrinsicConstEvaluation public override fun toLong(): Long,wasm_i64_extend_i32_s(this.toInt()),"/**

     * Converts this [Short] value to [Long].

     *

     * The resulting `Long` value represents the same numerical value as this `Short`.

     *

     * The least significant 16 bits of the resulting `Long` value are the same as the bits of this `Short` value,

     * whereas the most significant 48 bits are filled with the sign bit of this value.

     */",f17455:m1663
13634,public operator fun rangeTo(other: Byte): IntRange,"IntRange(this, other.toInt())",/** Creates a range from this value to the specified [other] value. */,f3686:m2331
57253,"@SinceKotlin(""1.1"") @kotlin.internal.LowPriorityInOverloadResolution @JvmName(""contentDeepEqualsInline"") @kotlin.internal.InlineOnly public actual inline infix fun <T> Array<out T>.contentDeepEquals(other: Array<out T>): Boolean","{
    return this.contentDeepEquals(other)
}","/**

 * Checks if the two specified arrays are *deeply* equal to one another.

 * 

 * Two arrays are considered deeply equal if they have the same size, and elements at corresponding indices are deeply equal.

 * That is, if two corresponding elements are nested arrays, they are also compared deeply.

 * Elements of other types are compared for equality using the [equals][Any.equals] function.

 * For floating point numbers, this means `NaN` is equal to itself and `-0.0` is not equal to `0.0`.

 * 

 * If any of the arrays contain themselves at any nesting level, the behavior is undefined.

 * 

 * @param other the array to compare deeply with this array.

 * @return `true` if the two arrays are deeply equal, `false` otherwise.

 * 

 * @sample samples.collections.Arrays.ContentOperations.contentDeepEquals

 */",f16970:m893
15665,"private inline fun <reified T: PsiElement> PsiElement.forEachDescendantOfType(noinline predicate: (T) -> Boolean = { true }, noinline action: (T) -> Unit)","this.accept(object : PsiRecursiveElementVisitor() {
    override fun visitElement(element: PsiElement) {
        if (element is T && predicate(element)) {
            action(element)
        }
        super.visitElement(element)
    }
})","/**

     * Processes the descendants of the element using the preorder implementation of tree traversal.

     */",f3923:m109
7376,fun makeMaze(s: String): Maze,"{
    val lines = s.split(""\n"")!!
    val w = lines.maxWithOrNull(Comparator { o1, o2 ->
        val l1: Int = o1?.length ?: 0
        val l2 = o2?.length ?: 0
        l1 - l2
    })!!
    val data = Array<Array<Boolean>>(lines.size) { Array<Boolean>(w.length) { false } }
    var start: Pair<Int, Int>? = null
    var end: Pair<Int, Int>? = null
    for (line in lines.indices) { for (x in lines[line].indices) {
        val c = lines[line]!![x]
        data[line][x] = c == 'O'
        when (c) {
            'I' -> start = Pair(line, x)
            '$' -> end = Pair(line, x)
            else -> { }
        }
    } }
    if (start == null) {
        throw IllegalArgumentException(""No starting point in the maze (should be indicated with 'I')"")
    }
    if (end == null) {
        throw IllegalArgumentException(""No goal point in the maze (should be indicated with a '$' sign)"")
    }
    return Maze(w.length, lines.size, data, start!!, end!!)
}","/**

 * A maze is encoded in the string s: the big 'O' letters are walls.

 * I stand where a big 'I' stands and the prize is marked with

 * a '$' sign.

 *

 * Example:

 *

 *    OOOOOOOOOOOOOOOOO

 *    O               O

 *    O$  O           O

 *    OOOOO           O

 *    O               O

 *    O  OOOOOOOOOOOOOO

 *    O           O I O

 *    O               O

 *    OOOOOOOOOOOOOOOOO

 */",f3085:m319
63457,"@SinceKotlin(""1.4"") public actual fun ShortArray?.contentHashCode(): Int","{
    if (this === null) return 0
    var result = 1
    for (element in this) result = 31 * result + element.hashCode()
    return result
}","/**

 * Returns a hash code based on the contents of this array as if it is [List].

 */",f17396:m1633
57074,"@kotlin.internal.InlineOnly public inline fun File.bufferedReader(charset: Charset = Charsets.UTF_8, bufferSize: Int = DEFAULT_BUFFER_SIZE): BufferedReader",reader(charset).buffered(bufferSize),"/**

 * Returns a new [BufferedReader] for reading the content of this file.

 *

 * @param bufferSize necessary size of the buffer.

 */",f16956:m59
58775,public fun <T> Sequence<T>.sortedWith(comparator: Comparator<in T>): Sequence<T>,"{
    return object : Sequence<T> {
        override fun iterator(): Iterator<T> {
            val sortedList = this@sortedWith.toMutableList()
            sortedList.sortWith(comparator)
            return sortedList.iterator()
        }
    }
}","/**

 * Returns a sequence that yields elements of this sequence sorted according to the specified [comparator].

 * 

 * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.

 *

 * The operation is _intermediate_ and _stateful_.

 */",f17096:m1263
15015,"@SinceKotlin(""1.1"") public actual fun <T: Comparable<T>> maxOf(a: T, b: T): T","{
    return if (a >= b) a else b
}","/**

 * Returns the greater of two values.

 * 

 * If values are equal, returns the first one.

 */",f3836:m27
14857,"@Deprecated(""Use Kotlin compiler 1.4 to avoid deprecation warning."") @SinceKotlin(""1.1"") @DeprecatedSinceKotlin(hiddenSince = ""1.4"") public fun IntArray.contentHashCode(): Int","{
    return this.contentHashCode()
}","/**

 * Returns a hash code based on the contents of this array as if it is [List].

 */",f3831:m1465
43550,fun GradleProject.assertDirectoryInProjectExists(pathToDir: String),assertDirectoryExists(projectPath.resolve(pathToDir)),"/**

 * Asserts directory under [pathToDir] relative to the test project exists and is a directory.

 */",f13456:m253
58715,"public fun Long.coerceIn(minimumValue: Long, maximumValue: Long): Long","{
    if (minimumValue > maximumValue) throw IllegalArgumentException(""Cannot coerce value to an empty range: maximum $maximumValue is less than minimum $minimumValue."")
    if (this < minimumValue) return minimumValue
    if (this > maximumValue) return maximumValue
    return this
}","/**

 * Ensures that this value lies in the specified range [minimumValue]..[maximumValue].

 * 

 * @return this value if it's in the range, or [minimumValue] if this value is less than [minimumValue], or [maximumValue] if this value is greater than [maximumValue].

 * 

 * @sample samples.comparisons.ComparableOps.coerceIn

 */",f17092:m2839
54846,"@SinceKotlin(""1.3"") @ExperimentalUnsignedTypes public actual fun UByteArray.elementAt(index: Int): UByte","{
    return elementAtOrElse(index) { throw IndexOutOfBoundsException(""index: $index, size: $size}"") }
}","/**

 * Returns an element at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this array.

 * 

 * @sample samples.collections.Collections.Elements.elementAt

 */",f16716:m77
58550,"@SinceKotlin(""1.5"") @WasExperimental(ExperimentalUnsignedTypes::class) public fun ULong.coerceAtLeast(minimumValue: ULong): ULong","{
    return if (this < minimumValue) minimumValue else this
}","/**

 * Ensures that this value is not less than the specified [minimumValue].

 * 

 * @return this value if it's greater than or equal to the [minimumValue] or the [minimumValue] otherwise.

 * 

 * @sample samples.comparisons.ComparableOps.coerceAtLeastUnsigned

 */",f17090:m863
16683,"private fun rebindDelegatedAccessorBody(newTarget: FirPropertyAccessor, oldTarget: FirPropertyAccessor)","{
    if (newTarget.source?.kind != KtFakeSourceElementKind.DelegatedPropertyAccessor) return
    val body = newTarget.body
    requireWithAttachment(body is FirSingleExpressionBlock, { ""Unexpected body for generated accessor ${body?.let { it::class.simpleName }}"" }) {
        withFirSymbolEntry(""newTarget"", newTarget.propertySymbol)
        withFirSymbolEntry(""oldTarget"", oldTarget.propertySymbol)
        body?.let { withFirEntry(""body"", it) } ?: withEntry(""body"", ""null"")
    }
    val returnExpression = body.statement
    rebindReturnExpression(returnExpression = returnExpression, newTarget = newTarget, oldTarget = oldTarget)
}","/**

 * This function is required to correctly rebind symbols

 * after [generateAccessorsByDelegate][org.jetbrains.kotlin.fir.builder.generateAccessorsByDelegate]

 * for correct work

 *

 * @see org.jetbrains.kotlin.fir.builder.generateAccessorsByDelegate

 * @see rebindDelegate

 */",f4161:m537
29396,private fun kotlinClassHeaderVisitor(body: (Metadata) -> Unit): AnnotationVisitor,"object : AnnotationVisitor(Opcodes.API_VERSION) {
    var kind: Int = 1

    var metadataVersion: IntArray = intArrayOf()

    var data1: MutableList<String> = mutableListOf()

    var data2: MutableList<String> = mutableListOf()

    var extraString: String? = null

    var packageName: String? = null

    var extraInt: Int = 0

    override fun visit(name: String, value: Any?) {
        when (name) {
            KIND_FIELD_NAME -> kind = value as Int
            METADATA_EXTRA_INT_FIELD_NAME -> extraInt = value as Int
            METADATA_VERSION_FIELD_NAME -> metadataVersion = value as IntArray
            METADATA_EXTRA_STRING_FIELD_NAME -> extraString = value as String
            METADATA_PACKAGE_NAME_FIELD_NAME -> packageName = value as String
        }
    }

    override fun visitArray(name: String): AnnotationVisitor? {
        val destination = when (name) {
            METADATA_DATA_FIELD_NAME -> data1
            METADATA_STRINGS_FIELD_NAME -> data2
            else -> return null
        }
        return object : AnnotationVisitor(Opcodes.API_VERSION) {
            override fun visit(name: String?, value: Any?) {
                destination += value as String
            }
        }
    }

    override fun visitEnd() {
        body(Metadata(kind, metadataVersion, data1.toTypedArray(), data2.toTypedArray(), extraString, packageName, extraInt))
    }
}","/**

 * Parse a KotlinClassHeader from an existing Kotlin Metadata annotation visitor.

 */",f10310:m161
64206,@kotlin.internal.IntrinsicConstEvaluation public override fun toDouble(): Double,wasm_f64_convert_i32_s(this),"/**

     * Converts this [Int] value to [Double].

     *

     * The resulting `Double` value represents the same numerical value as this `Int`.

     */",f17455:m2695
54800,"@SinceKotlin(""1.1"") @kotlin.internal.InlineOnly public actual inline fun maxOf(a: Short, b: Short): Short","{
    return maxOf(a.toInt(), b.toInt()).unsafeCast<Short>()
}","/**

 * Returns the greater of two values.

 */",f16714:m67
70201,"@JvmOverloads fun findInterfaceImplementation(descriptor: CallableMemberDescriptor, returnImplNotDelegate: Boolean = false): CallableMemberDescriptor?","{
    if (descriptor.kind.isReal) return null
    if (isOrOverridesSynthesized(descriptor)) return null
    val implementation = findImplementationFromInterface(descriptor) ?: return null
    val immediateConcreteSuper = firstSuperMethodFromKotlin(descriptor, implementation) ?: return null
    if (!DescriptorUtils.isInterface(immediateConcreteSuper.containingDeclaration)) {
        return null
    }
    return if (returnImplNotDelegate) implementation else immediateConcreteSuper
}","/**

 * Given a fake override in a class, returns an overridden declaration with implementation in trait, such that a method delegating to that

 * trait implementation should be generated into the class containing the fake override; or null if the given function is not a fake

 * override of any trait implementation or such method was already generated into the superclass or is a method from Any.

 */",f19609:m103
56087,@kotlin.internal.InlineOnly public inline operator fun <T> MutableCollection<in T>.minusAssign(elements: Sequence<T>),"{
    this.removeAll(elements)
}","/**

 * Removes all elements contained in the given [elements] sequence from this mutable collection.

 */",f16825:m201
15051,"@SinceKotlin(""1.4"") public actual fun minOf(a: Byte, vararg other: Byte): Byte","{
    var min = a
    for (e in other) min = minOf(min, e)
    return min
}","/**

 * Returns the smaller of the given values.

 */",f3836:m763
63574,public actual fun LongArray.sort(): Unit,"{
    if (size > 1) sortArray(this, 0, size)
}","/**

 * Sorts the array in-place.

 * 

 * @sample samples.collections.Arrays.Sorting.sortArray

 */",f17396:m4679
64093,@kotlin.internal.IntrinsicConstEvaluation public inline operator fun plus(other: Short): Int,this.toInt() + other.toInt(),/** Adds the other value to this value. */,f17455:m1067
23552,fun IrProperty.getEncodeDefaultAnnotationValue(): Boolean?,"{
    val call = annotations.findAnnotation(SerializationAnnotations.encodeDefaultFqName) ?: return null
    val arg = call.getValueArgument(0) ?: return true
    val argValue = (arg as? IrGetEnumValue ?: error(""Argument of enum constructor expected to implement IrGetEnumValue, got $arg"")).symbol.owner.name.toString()
    return when (argValue) {
        ""ALWAYS"" -> true
        ""NEVER"" -> false
        else -> error(""Unknown EncodeDefaultMode enum value: $argValue"")
    }
}","/**

 * True — ALWAYS

 * False — NEVER

 * null — not specified

 */",f8987:m467
53149,"@Suppress(""ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS"") public actual fun String.endsWith(suffix: String, ignoreCase: Boolean = false): Boolean","{
    if (!ignoreCase) return nativeEndsWith(suffix) else return regionMatches(length - suffix.length, suffix, 0, suffix.length, ignoreCase)
}","/**

 * Returns `true` if this string ends with the specified suffix.

 */",f16624:m75
58235,@kotlin.internal.InlineOnly public inline operator fun times(other: ULong): ULong,ULong(this.data.times(other.data)),/** Multiplies this value by the other value. */,f17066:m217
31446,"fun getContributedClassifierIncludeDeprecated(name: Name, location: LookupLocation): DescriptorWithDeprecation<ClassifierDescriptor>?","getContributedClassifier(name, location)?.let { DescriptorWithDeprecation.createNonDeprecated(it) }","/**

     * Returns contributed classifier, but discriminates deprecated

     *

     * This method can return some classifier where [getContributedClassifier] haven't returned any,

     * but it should never return different one, even if it is deprecated.

     * Note that implementors are encouraged to provide non-deprecated classifier if it doesn't contradict

     * contract above.

     */",f10889:m61
58720,public fun Int.coerceIn(range: ClosedRange<Int>): Int,"{
    if (range is ClosedFloatingPointRange) {
        return this.coerceIn<Int>(range)
    }
    if (range.isEmpty()) throw IllegalArgumentException(""Cannot coerce value to an empty range: $range."")
    return when {
        this < range.start -> range.start
        this > range.endInclusive -> range.endInclusive
        else -> this
    }
}","/**

 * Ensures that this value lies in the specified [range].

 * 

 * @return this value if it's in the [range], or `range.start` if this value is less than `range.start`, or `range.endInclusive` if this value is greater than `range.endInclusive`.

 * 

 * @sample samples.comparisons.ComparableOps.coerceIn

 */",f17092:m2999
28995,fun newArray(size: Int): Array<T>,"{
    throw NotImplementedError(""Generated by Android Extensions automatically"")
}","/**

     * Returns a new [Array]<T> with the given array [size].

     */",f10122:m71
21352,private inline fun <reified T: FirCallableDeclaration> T.unwrapSubstitutionOverrideIfNeeded(): T?,"{
    unwrapUseSiteSubstitutionOverride()?.let { return it }
    unwrapInheritanceSubstitutionOverrideIfNeeded()?.let { return it }
    return null
}","/**

     * N.B. This functions lifts only a single layer of SUBSTITUTION_OVERRIDE at a time.

     */",f8536:m1029
56162,"@kotlin.internal.InlineOnly public inline fun repeat(times: Int, action: (Int) -> Unit)","{
    contract { callsInPlace(action) }
    for (index in 0 until times) {
        action(index)
    }
}","/**

 * Executes the given function [action] specified number of [times].

 *

 * A zero-based index of current iteration is passed as a parameter to [action].

 *

 * @sample samples.misc.ControlFlow.repeat

 */",f16833:m285
54635,internal fun Char.isWhitespaceImpl(): Boolean,"{
    val ch = this.code
    return ch in 0x0009 .. 0x000d || ch in 0x001c .. 0x0020 || ch == 0x00a0 || ch > 0x1000 && (ch == 0x1680 || ch in 0x2000 .. 0x200a || ch == 0x2028 || ch == 0x2029 || ch == 0x202f || ch == 0x205f || ch == 0x3000)
}","/**

 * Returns `true` if this character is a whitespace.

 */",f16710:m27
58110,@kotlin.internal.InlineOnly public inline infix fun and(other: UByte): UByte,UByte(this.data and other.data),/** Performs a bitwise AND operation between the two values. */,f17059:m501
58645,public infix fun Byte.downTo(to: Byte): IntProgression,"{
    return IntProgression.fromClosedRange(this.toInt(), to.toInt(), -1)
}","/**

 * Returns a progression from this value down to the specified [to] value with the step -1.

 * 

 * The [to] value should be less than or equal to `this` value.

 * If the [to] value is greater than `this` value the returned progression is empty.

 */",f17092:m1571
18049,fun allFiles(): List<KtFile>,analyzedElements.mapTo(mutableSetOf()) { it.containingKtFile }.toList(),"/**

     * Returns the list of files that contain all reached inline functions.

     */",f5399:m189
58955,"public inline fun <C: Appendable> CharSequence.filterIndexedTo(destination: C, predicate: (index: Int, Char) -> Boolean): C","{
    forEachIndexed { index, element -> if (predicate(index, element)) destination.append(element) }
    return destination
}","/**

 * Appends all characters matching the given [predicate] to the given [destination].

 * @param [predicate] function that takes the index of a character and the character itself

 * and returns the result of predicate evaluation on the character.

 * 

 * @sample samples.collections.Collections.Filtering.filterIndexedTo

 */",f17097:m917
13858,"@Suppress(""UNUSED_PARAMETER"") @Deprecated(""Synchronization on Any? object is not supported."", ReplaceWith(""lazy(initializer)"")) @DeprecatedSinceKotlin(errorSince = ""1.9"") public actual fun <T> lazy(lock: Any?, initializer: () -> T): Lazy<T>",throw UnsupportedOperationException(),"/**

 * Creates a new instance of the [Lazy] that uses the specified initialization function [initializer]

 * and the default thread-safety mode [LazyThreadSafetyMode.SYNCHRONIZED].

 *

 * If the initialization of a value throws an exception, it will attempt to reinitialize the value at next access.

 *

 * The returned instance uses the specified [lock] object to synchronize on.

 * When the [lock] is not specified the instance uses itself to synchronize on,

 * in this case do not synchronize from external code on the returned instance as it may cause accidental deadlock.

 * Also this behavior can be changed in the future.

 */",f3698:m85
14627,fun process(): TestSettings,"{
    val listeners = mutableSetOf<TestListener>()
    val filters = mutableListOf<TestFilter>()
    var logger: TestLogger = GTestLogger()
    var runTests = true
    var useExitCode = true
    var iterations = 1
    args.filter { it.startsWith(""--gtest_"") || it.startsWith(""--ktest_"") || it == ""--help"" || it == ""-h"" }.forEach {
        val arg = it.split('=')
        when (arg.size) {
            1 -> when (arg[0]) {
                ""--gtest_list_tests"", ""--ktest_list_tests"" -> {
                    logger.logTestList(suites.filterWith(filters))
                    runTests = false
                }
                ""-h"", ""--help"" -> {
                    logger.log(help)
                    runTests = false
                }
                ""--ktest_no_exit_code"" -> useExitCode = false
                else -> throw IllegalArgumentException(""Unknown option: $it\n$help"")
            }
            2 -> {
                val key = arg[0]
                val value = arg[1]
                when (key) {
                    ""--ktest_logger"" -> logger = loggerFromArg(value)
                    ""--gtest_filter"", ""--ktest_filter"" -> filters.add(gTestFilterFromArg(value))
                    ""--ktest_regex_filter"" -> filters.add(regexFilterFromArg(value, true))
                    ""--ktest_negative_regex_filter"" -> filters.add(regexFilterFromArg(value, false))
                    ""--ktest_gradle_filter"" -> filters.add(gradleFilterFromArg(value, true))
                    ""--ktest_negative_gradle_filter"" -> filters.add(gradleFilterFromArg(value, false))
                    ""--ktest_repeat"", ""--gtest_repeat"" -> iterations = value.toIntOrNull() ?: throw IllegalArgumentException(""Cannot parse number: $value"")
                    else -> throw IllegalArgumentException(""Unknown option: $it\n$help"")
                }
            }
            else -> throw IllegalArgumentException(""Unknown option: $it\n$help"")
        }
    }
    val testSuites = suites.filterWith(filters).toList()
    return TestSettings(testSuites, listeners, logger, runTests, iterations, useExitCode)
}","/**

     * Processes given arguments to set test settings and filter tests to be run

     *

     * @see TestSettings

     */",f3802:m67
13479,@kotlin.internal.IntrinsicConstEvaluation public inline operator fun compareTo(other: Long): Int,this.toLong().compareTo(other),"/**

     * Compares this value with the specified value for order.

     * Returns zero if this value is equal to the specified other value, a negative number if it's less than other,

     * or a positive number if it's greater than other.

     */",f3686:m137
57382,"@Suppress(""ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS"") public actual fun FloatArray.sort(fromIndex: Int = 0, toIndex: Int = size): Unit","{
    java.util.Arrays.sort(this, fromIndex, toIndex)
}","/**

 * Sorts a range in the array in-place.

 * 

 * @param fromIndex the start of the range (inclusive) to sort, 0 by default.

 * @param toIndex the end of the range (exclusive) to sort, size of this array by default.

 * 

 * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.

 * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].

 * 

 * @sample samples.collections.Arrays.Sorting.sortRangeOfArray

 */",f16970:m4341
58014,"@SinceKotlin(""1.5"") @WasExperimental(ExperimentalUnsignedTypes::class, ExperimentalStdlibApi::class) @kotlin.internal.InlineOnly public inline fun UShort.countTrailingZeroBits(): Int",toShort().countTrailingZeroBits(),"/**

 * Counts the number of consecutive least significant bits that are zero in the binary representation of this [UShort] number.

 */",f17056:m487
20218,public fun <S: KtVariableLikeSymbol> S.asSignature(): KtVariableLikeSignature<S>,withValidityAssertion { analysisSession.signatureSubstitutor.asSignature(this) },"/**

     * Creates a new [KtCallableSignature] by given symbol and leave all types intact

     */",f5793:m145
58000,"@SinceKotlin(""1.5"") @WasExperimental(ExperimentalUnsignedTypes::class, ExperimentalStdlibApi::class) @kotlin.internal.InlineOnly public inline fun ULong.countTrailingZeroBits(): Int",toLong().countTrailingZeroBits(),"/**

 * Counts the number of consecutive least significant bits that are zero in the binary representation of this [ULong] number.

 */",f17056:m197
68898,"fun getSmartCastVariantsExcludingReceiver(context: ResolutionContext<*>, receiverToCast: ReceiverValue): Collection<KotlinType>","{
    return getSmartCastVariantsExcludingReceiver(context.trace.bindingContext, context.scope.ownerDescriptor, context.dataFlowInfo, receiverToCast, context.languageVersionSettings, context.dataFlowValueFactory)
}","/**

     * @return variants @param receiverToCast may be cast to according to context dataFlowInfo, receiverToCast itself is NOT included

     */",f19395:m121
55962,"@SinceKotlin(""1.1"") public inline fun <S, T: S, K, M: MutableMap<in K, S>> Grouping<T, K>.reduceTo(destination: M, operation: (key: K, accumulator: S, element: T) -> S): M","aggregateTo(destination) { key, acc, e, first -> @Suppress(""UNCHECKED_CAST"") if (first) e else operation(key, acc as S, e) }","/**

 * Groups elements from the [Grouping] source by key and applies the reducing [operation] to the elements of each group

 * sequentially starting from the second element of the group,

 * passing the previously accumulated value and the current element as arguments,

 * and stores the results in the given [destination] map.

 * An initial value of accumulator is the first element of the group.

 *

 * If the [destination] map already has a value corresponding to the key of some group,

 * that value is used as an initial value of the accumulator for that group and the first element of that group is also

 * subjected to the [operation].



 * @param operation a function that is invoked on each subsequent element of the group with the following parameters:

 *  - `accumulator`: the current value of the accumulator of the group;

 *  - `element`: the element from the source being folded;

 *

 * @return the [destination] map associating the key of each group with the result of accumulating the group elements.

 * @sample samples.collections.Grouping.reduceByMaxVowelsTo

 */",f16820:m431
10447,override fun recalculate(),"{
    val ihn = input()
    val out = output()
    out.walkStrength = Strength.weakestOf(this.strength, ihn.walkStrength)
    out.stay = ihn.stay
    if (out.stay) execute()
}","/**

   * Calculate the walkabout strength, the stay flag, and, if it is

   * 'stay', the value for the current output of this

   * constraint. Assume this constraint is satisfied.

   */",f3476:m705
52869,"@SinceKotlin(""1.2"") public actual fun Float.toBits(): Int",floatToRawBits(if (this.isNaN()) Float.NaN else this),"/**

 * Returns a bit representation of the specified floating-point value as [Int]

 * according to the IEEE 754 floating-point ""single format"" bit layout.

 *

 * Note that in Kotlin/JS [Float] range is wider than ""single format"" bit layout can represent,

 * so some [Float] values may overflow, underflow or loose their accuracy after conversion to bits and back.

 */",f16581:m131
54833,"@SinceKotlin(""1.4"") public actual fun <T: Comparable<T>> minOf(a: T, vararg other: T): T","{
    var min = a
    for (e in other) min = minOf(min, e)
    return min
}","/**

 * Returns the smaller of the given values.

 * 

 * If there are multiple equal minimal values, returns the first of them.

 */",f16714:m725
56596,"@SinceKotlin(""1.4"") public fun <K, V> sortedMapOf(comparator: Comparator<in K>, vararg pairs: Pair<K, V>): SortedMap<K, V>","TreeMap<K, V>(comparator).apply { putAll(pairs) }","/**

 * Returns a new [SortedMap] with the specified contents, given as a list of pairs

 * where the first value is the key and the second is the value.

 *

 * The resulting [SortedMap] determines the equality and order of keys according to the sorting order provided by the given [comparator].

 *

 * @sample samples.collections.Maps.Instantiation.sortedMapWithComparatorFromPairs

 */",f16913:m219
58552,"@SinceKotlin(""1.5"") @WasExperimental(ExperimentalUnsignedTypes::class) public fun UShort.coerceAtLeast(minimumValue: UShort): UShort","{
    return if (this < minimumValue) minimumValue else this
}","/**

 * Ensures that this value is not less than the specified [minimumValue].

 * 

 * @return this value if it's greater than or equal to the [minimumValue] or the [minimumValue] otherwise.

 * 

 * @sample samples.comparisons.ComparableOps.coerceAtLeastUnsigned

 */",f17090:m915
20394,public fun mayContainName(name: Name): Boolean,withValidityAssertion { name in getPossibleCallableNames() || name in getPossibleClassifierNames() },"/**

     * return true if the scope may contain name, false otherwise.

     *

     * In other words `(mayContainName(name) == false) => (name !in scope)`; vice versa is not always true

     */",f5839:m65
14876,"@Deprecated(""Use Kotlin compiler 1.4 to avoid deprecation warning."") @SinceKotlin(""1.1"") @DeprecatedSinceKotlin(hiddenSince = ""1.4"") public fun LongArray.contentToString(): String","{
    return this.contentToString()
}","/**

 * Returns a string representation of the contents of the specified array as if it is [List].

 * 

 * @sample samples.collections.Arrays.ContentOperations.contentToString

 */",f3831:m1897
46117,inline fun <reified T: Any> T.linearClosure(next: (T) -> T?): Set<T>,"{
    val initial = next(this) ?: return emptySet()
    val results = createResultSet<T>()
    var enqueued: T? = initial
    while (enqueued != null) {
        if (enqueued != this && results.add(enqueued)) {
            enqueued = next(enqueued)
        } else break
    }
    return results
}","/**

 * @see closure

 * @receiver is not included in the return set

 */",f15014:m477
63493,public actual fun ShortArray.copyOf(): ShortArray,"{
    return this.copyOfUninitializedElements(size)
}","/**

 * Returns new array which is a copy of the original array.

 * 

 * @sample samples.collections.Arrays.CopyOfOperations.copyOf

 */",f17396:m2701
57272,"@SinceKotlin(""1.4"") @kotlin.internal.InlineOnly public actual inline fun LongArray?.contentHashCode(): Int","{
    return java.util.Arrays.hashCode(this)
}","/**

 * Returns a hash code based on the contents of this array as if it is [List].

 */",f16970:m1537
56840,"@SinceKotlin(""1.2"") @kotlin.internal.InlineOnly public inline operator fun BigInteger.dec(): BigInteger",this.subtract(BigInteger.ONE),"/**

 * Enables the use of the `--` operator for [BigInteger] instances.

 */",f16927:m117
47984,"@JvmName(""isAllowCommonizer"") internal fun Project.isAllowCommonizer(): Boolean","{
    assert(state.executed) { ""'isAllowCommonizer' can only be called after project evaluation"" }
    multiplatformExtensionOrNull ?: return false
    return multiplatformExtension.targets.any { it.platformType == KotlinPlatformType.native } && isKotlinGranularMetadataEnabled
}","/**

 * Function signature needs to be kept stable since this is used during import

 * in IDEs (KotlinCommonizerModelBuilder) < 222

 *

 * IDEs >= will use the [ideaImportDependsOn] infrastructure

 */",f15502:m29
58919,@kotlin.internal.InlineOnly public inline fun CharSequence.find(predicate: (Char) -> Boolean): Char?,"{
    return firstOrNull(predicate)
}","/**

 * Returns the first character matching the given [predicate], or `null` if no such character was found.

 * 

 * @sample samples.collections.Collections.Elements.find

 */",f17097:m97
14799,"@Deprecated(""Use Kotlin compiler 1.4 to avoid deprecation warning."") @SinceKotlin(""1.3"") @DeprecatedSinceKotlin(hiddenSince = ""1.4"") @ExperimentalUnsignedTypes public fun UShortArray.contentHashCode(): Int","{
    return this.contentHashCode()
}","/**

 * Returns a hash code based on the contents of this array as if it is [List].

 */",f3828:m465
12009,"private fun ffiCreateCif(returnType: ffi_type, paramTypes: List<ffi_type>): ffi_cif","{
    val nArgs = paramTypes.size
    val argTypes = nativeHeap.allocArrayOfPointersTo(*paramTypes.toTypedArray(), null)
    val res = ffiCreateCif0(nArgs, returnType.rawPtr, argTypes.rawValue)
    when (res) {
        0L -> throw OutOfMemoryError()
        -1L -> throw Error(""FFI_BAD_TYPEDEF"")
        -2L -> throw Error(""FFI_BAD_ABI"")
        -3L -> throw Error(""libffi error occurred"")
    }
    caches.addCif(res)
    return interpretPointed(res)
}","/**

 * Creates and prepares an `ffi_cif`.

 *

 * @param returnType native function return value type

 * @param paramTypes native function parameter types

 *

 * @return the initialized `ffi_cif`

 */",f3613:m949
58488,"@SinceKotlin(""1.4"") @OptIn(kotlin.experimental.ExperimentalTypeInference::class) @OverloadResolutionByLambdaReturnType @kotlin.internal.InlineOnly public inline fun <K, V> Map<out K, V>.maxOfOrNull(selector: (Map.Entry<K, V>) -> Double): Double?","{
    return entries.maxOfOrNull(selector)
}","/**

 * Returns the largest value among all values produced by [selector] function

 * applied to each entry in the map or `null` if there are no entries.

 * 

 * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.

 */",f17089:m581
57345,public actual operator fun FloatArray.plus(element: Float): FloatArray,"{
    val index = size
    val result = java.util.Arrays.copyOf(this, index + 1)
    result[index] = element
    return result
}","/**

 * Returns an array containing all elements of the original array and then the given [element].

 */",f16970:m3527
56075,public fun <T> Iterable<Iterable<T>>.flatten(): List<T>,"{
    val result = ArrayList<T>()
    for (element in this) {
        result.addAll(element)
    }
    return result
}","/**

 * Returns a single list of all elements from all collections in the given collection.

 * @sample samples.collections.Iterables.Operations.flattenIterable

 */",f16824:m83
56471,"@SinceKotlin(""1.5"") @WasExperimental(ExperimentalStdlibApi::class) @kotlin.internal.InlineOnly public actual inline fun Char(code: UShort): Char","{
    return code.toInt().toChar()
}","/**

 * Creates a Char with the specified [code].

 *

 * @sample samples.text.Chars.charFromCode

 */",f16881:m15
63521,"internal fun IntArray.copyOfUninitializedElements(fromIndex: Int, toIndex: Int): IntArray","{
    val newSize = toIndex - fromIndex
    if (newSize < 0) {
        throw IllegalArgumentException(""$fromIndex > $toIndex"")
    }
    val result = IntArray(newSize)
    this.copyInto(result, 0, fromIndex, toIndex.coerceAtMost(size))
    return result
}","/**

 * Returns new array which is a copy of the original array's range between [fromIndex] (inclusive)

 * and [toIndex] (exclusive) with new elements filled with **lateinit** _uninitialized_ values.

 * Attempts to read _uninitialized_ values from this array work in implementation-dependent manner,

 * either throwing exception or returning some kind of implementation-specific default value.

 */",f17396:m3409
63426,"@SinceKotlin(""1.1"") @kotlin.internal.LowPriorityInOverloadResolution public actual fun <T> Array<out T>.contentDeepToString(): String","{
    return this.contentDeepToString()
}","/**

 * Returns a string representation of the contents of this array as if it is a [List].

 * Nested arrays are treated as lists too.

 * 

 * If any of arrays contains itself on any nesting level that reference

 * is rendered as `""[...]""` to prevent recursion.

 * 

 * @sample samples.collections.Arrays.ContentOperations.contentDeepToString

 */",f17396:m595
37109,@InternalKotlinNativeApi fun <T: CallableMemberDescriptor> T.resolveFakeOverride(allowAbstract: Boolean = false): T,"{
    if (this.kind.isReal) {
        return this
    } else {
        val overridden = OverridingUtil.getOverriddenDeclarations(this)
        val filtered = OverridingUtil.filterOutOverridden(overridden)
        @Suppress(""UNCHECKED_CAST"") return filtered.first { allowAbstract || it.modality != Modality.ABSTRACT } as T
    }
}","/**

 * Implementation of given method.

 *

 * TODO: this method is actually a part of resolve and probably duplicates another one

 */",f11709:m37
43535,@Synchronized fun ensureCocoapodsInstalled(),"{
    if (shouldInstallLocalCocoapods) {
        val installDir = cocoapodsInstallationRoot.absolutePathString()
        println(""Installing CocoaPods..."")
        try {
            gem(""install"", ""--install-dir"", installDir, ""ffi"", ""-v"", ""1.15.5"", ""--"", ""--enable-libffi-alloc"")
        } catch (e: AssertionError) {
            System.err.println(""ffi installation with '--enable-libffi-alloc' has failed but we'll try to continue with a default ffi"")
            System.err.println(e.toString())
        }
        gem(""install"", ""--install-dir"", installDir, ""cocoapods"", ""-v"", TestVersions.COCOAPODS.VERSION)
    } else if (!isCocoapodsInstalled()) {
        fail(""""""
        
                            Running CocoaPods integration tests requires cocoapods to be installed.
        
                            Please install them manually:
        
                                gem install cocoapods
        
                            Or re-run the tests with the 'installCocoapods=true' Gradle property.
        
                        """""".trimIndent())
    }
}","/**

 * This method checks if Cocoapods should be installed and verifies its installation status.

 * If [shouldInstallLocalCocoapods] is true, it tries to install Cocoapods into the specified [cocoapodsInstallationRoot]

 * if it is not already installed.

 *

 * @throws AssertionError if [shouldInstallLocalCocoapods] is false and  cocoapods has not been installed

 */",f13455:m319
43560,"fun assertFileDoesNotContain(file: Path, vararg unexpectedText: String)","{
    assertFileExists(file)
    val text = file.readText()
    val textInTheFile = unexpectedText.filter { text.contains(it) }
    assert(textInTheFile.isEmpty()) { """"""
    
            |$file contains lines which it should not contain:
    
            |${textInTheFile.joinToString(separator = ""\n"")}
    
            |
    
            |actual file content:
    
            |$text""
    
            |       
    
            """""".trimMargin() }
}","/**

 * Asserts file under [file] exists and does not contain any line from [unexpectedText]

 */",f13456:m517
57273,"@SinceKotlin(""1.4"") @kotlin.internal.InlineOnly public actual inline fun FloatArray?.contentHashCode(): Int","{
    return java.util.Arrays.hashCode(this)
}","/**

 * Returns a hash code based on the contents of this array as if it is [List].

 */",f16970:m1555
59064,"@SinceKotlin(""1.4"") @OptIn(kotlin.experimental.ExperimentalTypeInference::class) @OverloadResolutionByLambdaReturnType @kotlin.jvm.JvmName(""sumOfDouble"") @kotlin.internal.InlineOnly public inline fun CharSequence.sumOf(selector: (Char) -> Double): Double","{
    var sum: Double = 0.toDouble()
    for (element in this) {
        sum += selector(element)
    }
    return sum
}","/**

 * Returns the sum of all values produced by [selector] function applied to each character in the char sequence.

 */",f17097:m4249
53101,"@SinceKotlin(""1.4"") public actual fun ByteArray.decodeToString(): String","{
    return decodeUtf8(this, 0, size, false)
}","/**

 * Decodes a string from the bytes in UTF-8 encoding in this array.

 *

 * Malformed byte sequences are replaced by the replacement char `\uFFFD`.

 */",f16617:m255
14911,public actual fun LongArray.copyOf(newSize: Int): LongArray,"{
    return this.copyOfUninitializedElements(newSize)
}","/**

 * Returns new array which is a copy of the original array, resized to the given [newSize].

 * The copy is either truncated or padded at the end with zero values if necessary.

 * 

 * - If [newSize] is less than the size of the original array, the copy array is truncated to the [newSize].

 * - If [newSize] is greater than the size of the original array, the extra elements in the copy array are filled with zero values.

 * 

 * @sample samples.collections.Arrays.CopyOfOperations.resizedPrimitiveCopyOf

 */",f3831:m2853
56495,"@SinceKotlin(""1.2"") @kotlin.internal.InlineOnly public inline fun String.toBigDecimal(): java.math.BigDecimal",java.math.BigDecimal(this),"/**

 * Parses the string as a [java.math.BigDecimal] number and returns the result.

 * @throws NumberFormatException if the string is not a valid representation of a number.

 */",f16885:m403
50450,@Test fun `exception thrown in AfterEvaluateBuildscript`(),"{
    val project = buildProjectWithMPP()
    val executed = mutableListOf<String>()
    project.launchInStage(AfterEvaluateBuildscript) { executed.add(""AfterEvaluateBuildscript 1"") }
    project.launchInStage(AfterEvaluateBuildscript) {
        executed.add(""AfterEvaluateBuildscript 2"")
        throw TestException()
    }
    project.launchInStage(AfterEvaluateBuildscript) { executed.add(""AfterEvaluateBuildscript 3"") }
    project.launchInStage(ReadyForExecution) { executed.add(""ReadyForExecution"") }
    assertFails { project.evaluate() }
    run {
        assertEquals(AfterEvaluateBuildscript, project.kotlinPluginLifecycle.stage)
        assertEquals(listOf(""AfterEvaluateBuildscript 1"", ""AfterEvaluateBuildscript 2""), executed)
        assertIsInstance<ProjectConfigurationResult.Failure>(project.configurationResult.getOrThrow())
    }
    run {
        assertNotNull(project.future { KotlinPluginLifecycle.Stage.EvaluateBuildscript.await() }.getOrThrow())
        assertNotNull(project.future { KotlinPluginLifecycle.Stage.AfterEvaluateBuildscript.await() }.getOrThrow())
        assertFailsWith<IllegalLifecycleException> { project.future { KotlinPluginLifecycle.Stage.ReadyForExecution.await() }.getOrThrow() }
    }
}","/**

     * Sample showcases how an exception thrown within a stage like [AfterEvaluateBuildscript] is handled:

     * All coroutines scheduled after the throwing coroutine will not be executed!

     * Coroutines already waiting for the projects configuration result will be unsuspended.

     *

     * Coroutines launched *after* the failure state has reached will be launched w/o suspensions.

     */",f16110:m511
58530,"@SinceKotlin(""1.5"") @WasExperimental(ExperimentalUnsignedTypes::class) @kotlin.internal.InlineOnly public inline operator fun ULongRange.contains(element: ULong?): Boolean","{
    return element != null && contains(element)
}","/**

 * Returns `true` if this range contains the specified [element].

 * 

 * Always returns `false` if the [element] is `null`.

 */",f17090:m429
14062,public fun getAndIncrement(): Long,this::value.getAndAddField(1L),"/**

     * Atomically increments the current value by one and returns the old value.

     */",f3718:m231
20177,public fun KtExpression.getSmartCastInfo(): KtSmartCastInfo?,withValidityAssertion { analysisSession.smartCastProvider.getSmartCastedInfo(this) },"/**

     * Gets the smart-cast information of the given expression or null if the expression is not smart casted.

     */",f5786:m39
15399,@Test fun maxJJ(),"{
    assertEquals(""Incorrect long max value"", 19088976000089L, max(-19088976000089L, 19088976000089L))
    assertEquals(""Incorrect long max value"", 19088976000089L, max(20, 19088976000089L))
    assertEquals(""Incorrect long max value"", -20, max(-20, -19088976000089L))
}","/**

     * Tests kotlin.math.max(long, long)

     */",f3868:m959
58998,"public inline fun <R: Any> CharSequence.mapIndexedNotNull(transform: (index: Int, Char) -> R?): List<R>","{
    return mapIndexedNotNullTo(ArrayList<R>(), transform)
}","/**

 * Returns a list containing only the non-null results of applying the given [transform] function

 * to each character and its index in the original char sequence.

 * @param [transform] function that takes the index of a character and the character itself

 * and returns the result of the transform applied to the character.

 */",f17097:m1975
56576,public actual fun <T> setOf(element: T): Set<T>,java.util.Collections.singleton(element),"/**

 * Returns a new read-only set containing only the specified object [element].

 *

 * The returned set is serializable.

 *

 * @sample samples.collections.Collections.Sets.singletonReadOnlySet

 */",f16911:m25
54703,"@Suppress(""NOTHING_TO_INLINE"") public actual inline fun IntArray.copyOf(): IntArray","{
    return this.asDynamic().slice()
}","/**

 * Returns new array which is a copy of the original array.

 * 

 * @sample samples.collections.Arrays.CopyOfOperations.copyOf

 */",f16713:m1703
52882,"@SinceKotlin(""1.4"") public actual fun Long.takeHighestOneBit(): Long","when (val high = this.high) {
    0 -> Long(low.takeHighestOneBit(), 0)
    else -> Long(0, high.takeHighestOneBit())
}","/**

 * Returns a number having a single bit set in the position of the most significant set bit of this [Long] number,

 * or zero, if this number is zero.

 */",f16581:m407
49801,@ExternalKotlinTargetApi fun <T: DecoratedExternalKotlinTarget> KotlinMultiplatformExtension.createExternalKotlinTarget(descriptor: ExternalKotlinTargetDescriptor<T>): T,"{
    val apiElementsConfiguration = project.configurations.maybeCreateConsumable(lowerCamelCaseName(descriptor.targetName, ""apiElements""))
    val runtimeElementsConfiguration = project.configurations.maybeCreateConsumable(lowerCamelCaseName(descriptor.targetName, ""runtimeElements""))
    val sourcesElementsConfiguration = project.configurations.maybeCreateConsumable(lowerCamelCaseName(descriptor.targetName, ""sourcesElements""))
    fun Configuration.notVisible() = apply { isVisible = false }
    val apiElementsPublishedConfiguration = project.configurations.maybeCreateDependencyScope(lowerCamelCaseName(descriptor.targetName, ""apiElements-published"")).notVisible()
    val runtimeElementsPublishedConfiguration = project.configurations.maybeCreateDependencyScope(lowerCamelCaseName(descriptor.targetName, ""runtimeElements-published"")).notVisible()
    val sourcesElementsPublishedConfiguration = project.configurations.maybeCreateDependencyScope(lowerCamelCaseName(descriptor.targetName, ""sourcesElements-published"")).notVisible()
    val resourcesElementsPublishedConfiguration = project.configurations.maybeCreateDependencyScope(lowerCamelCaseName(descriptor.targetName, ""resourcesElements-published"")).notVisible()
    val kotlinTargetComponent = ExternalKotlinTargetComponent(ExternalKotlinTargetComponent.TargetProvider.byTargetName(this, descriptor.targetName))
    val artifactsTaskLocator = ExternalKotlinTargetImpl.ArtifactsTaskLocator { target -> target.project.locateOrRegisterTask<Jar>(lowerCamelCaseName(descriptor.targetName, ""jar"")) }
    val compilerOptions = when (descriptor.platformType) {
        KotlinPlatformType.androidJvm, KotlinPlatformType.jvm -> project.objects.newInstance<KotlinJvmCompilerOptionsDefault>()
        KotlinPlatformType.wasm, KotlinPlatformType.js -> project.objects.newInstance<KotlinJsCompilerOptionsDefault>()
        KotlinPlatformType.common -> project.objects.newInstance<KotlinCommonCompilerOptionsDefault>()
        KotlinPlatformType.native -> project.objects.newInstance<KotlinNativeCompilerOptionsDefault>()
    }
    val target = ExternalKotlinTargetImpl(project = project, targetName = descriptor.targetName, platformType = descriptor.platformType, publishable = true, compilerOptions = compilerOptions, apiElementsConfiguration = apiElementsConfiguration, runtimeElementsConfiguration = runtimeElementsConfiguration, sourcesElementsConfiguration = sourcesElementsConfiguration, apiElementsPublishedConfiguration = apiElementsPublishedConfiguration, runtimeElementsPublishedConfiguration = runtimeElementsPublishedConfiguration, sourcesElementsPublishedConfiguration = sourcesElementsPublishedConfiguration, resourcesElementsPublishedConfiguration = resourcesElementsPublishedConfiguration, kotlinTargetComponent = kotlinTargetComponent, artifactsTaskLocator = artifactsTaskLocator)
    target.setupApiElements(apiElementsConfiguration)
    target.setupApiElements(apiElementsPublishedConfiguration)
    target.setupRuntimeElements(runtimeElementsConfiguration)
    target.setupRuntimeElements(runtimeElementsPublishedConfiguration)
    target.setupSourcesElements(sourcesElementsConfiguration)
    target.setupSourcesElements(sourcesElementsPublishedConfiguration)
    val decorated = descriptor.targetFactory.create(DecoratedExternalKotlinTarget.Delegate(target))
    target.onCreated()
    descriptor.configure?.invoke(decorated)
    descriptor.apiElements.configure?.invoke(decorated, apiElementsConfiguration)
    descriptor.runtimeElements.configure?.invoke(decorated, runtimeElementsConfiguration)
    descriptor.sourcesElements.configure?.invoke(decorated, sourcesElementsConfiguration)
    descriptor.apiElementsPublished.configure?.invoke(decorated, apiElementsPublishedConfiguration)
    descriptor.runtimeElementsPublished.configure?.invoke(decorated, runtimeElementsPublishedConfiguration)
    descriptor.sourcesElementsPublished.configure?.invoke(decorated, sourcesElementsPublishedConfiguration)
    descriptor.configureIdeImport?.invoke(project.kotlinIdeMultiplatformImport)
    targets.add(decorated)
    decorated.logger.info(""Created ${descriptor.platformType} target"")
    return decorated
}","/**

 * Creates an adhoc/external Kotlin Target which can be maintained and evolved outside the kotlin.git repository.

 * The target will be created adhering to the configuration provided by the [descriptor].

 * The instance will be backed by an internal implementation of [KotlinTarget]

 * The instance will be created using the [ExternalKotlinTargetDescriptor.targetFactory] which will have to inject the backing

 * internal implementation using the [DecoratedExternalKotlinTarget.Delegate] into [DecoratedExternalKotlinTarget]

 */",f15963:m61
56092,public fun <T> MutableCollection<in T>.removeAll(elements: Iterable<T>): Boolean,"{
    return removeAll(elements.convertToListIfNotCollection())
}","/**

 * Removes all elements from this [MutableCollection] that are also contained in the given [elements] collection.

 */",f16825:m297
57240,public actual fun FloatArray.asList(): List<Float>,"{
    return object : AbstractList<Float>(), RandomAccess {
        override val size: Int get() = this@asList.size
    
        override fun isEmpty(): Boolean = this@asList.isEmpty()
    
        override fun contains(element: Float): Boolean = this@asList.any { it.toBits() == element.toBits() }
    
        override fun get(index: Int): Float = this@asList[index]
    
        override fun indexOf(element: Float): Int = this@asList.indexOfFirst { it.toBits() == element.toBits() }
    
        override fun lastIndexOf(element: Float): Int = this@asList.indexOfLast { it.toBits() == element.toBits() }
    }
}","/**

 * Returns a [List] that wraps the original array.

 */",f16970:m383
54903,"@ExperimentalJsExport @ExperimentalJsCollectionsApi @SinceKotlin(""2.0"") public fun asJsArrayView(): JsArray<E>",createJsArrayViewFrom(this),"/**

     * Returns a view with the [JsArray] methods to consume it in JavaScript as a regular array.

     * Structural changes in the base list are synchronized with the view, and vice verse.

     */",f16726:m551
14972,public actual operator fun ByteArray.plus(elements: ByteArray): ByteArray,"{
    val thisSize = size
    val arraySize = elements.size
    val result = copyOfUninitializedElements(thisSize + arraySize)
    elements.copyInto(result, thisSize)
    return result
}","/**

 * Returns an array containing all elements of the original array and then all elements of the given [elements] array.

 */",f3831:m4363
63556,public actual operator fun ShortArray.plus(elements: Collection<Short>): ShortArray,"{
    var index = size
    val result = copyOfUninitializedElements(index + elements.size)
    for (element in elements) result[index++] = element
    return result
}","/**

 * Returns an array containing all elements of the original array and then all elements of the given [elements] collection.

 */",f17396:m4307
57520,"@SinceKotlin(""1.4"") @OptIn(kotlin.experimental.ExperimentalTypeInference::class) @OverloadResolutionByLambdaReturnType @Suppress(""INAPPLICABLE_JVM_NAME"") @kotlin.jvm.JvmName(""sumOfBigInteger"") @ExperimentalUnsignedTypes @kotlin.internal.InlineOnly public inline fun UIntArray.sumOf(selector: (UInt) -> java.math.BigInteger): java.math.BigInteger","{
    var sum: java.math.BigInteger = 0.toBigInteger()
    for (element in this) {
        sum += selector(element)
    }
    return sum
}","/**

 * Returns the sum of all values produced by [selector] function applied to each element in the array.

 */",f16971:m1167
53175,@ExperimentalAssociatedObjects public inline fun <reified T: Annotation> KClass<*>.findAssociatedObject(): Any?,this.findAssociatedObject(T::class),"/**

 * If [T] is an @[AssociatedObjectKey]-annotated annotation class and [this] class is annotated with @[T] (`S::class`),

 * returns object `S`.

 *

 * Otherwise returns `null`.

 */",f16632:m65
64116,"@SinceKotlin(""1.1"") @kotlin.internal.IntrinsicConstEvaluation public inline operator fun rem(other: Byte): Int",this.toInt() % other.toInt(),"/**

     * Calculates the remainder of truncating division of this value (dividend) by the other value (divisor).

     *

     * The result is either zero or has the same sign as the _dividend_ and has the absolute value less than the absolute value of the divisor.

     */",f17455:m1297
64105,@kotlin.internal.IntrinsicConstEvaluation public inline operator fun times(other: Short): Int,this.toInt() * other.toInt(),/** Multiplies this value by the other value. */,f17455:m1187
63452,"@Deprecated(""Use Kotlin compiler 1.4 to avoid deprecation warning."") @SinceKotlin(""1.1"") @DeprecatedSinceKotlin(hiddenSince = ""1.4"") public fun DoubleArray.contentHashCode(): Int","{
    return this.contentHashCode()
}","/**

 * Returns a hash code based on the contents of this array as if it is [List].

 */",f17396:m1525
46115,inline fun <reified T> Iterable<T>.withClosureSequence(crossinline edges: (T) -> Iterable<T>): Sequence<T>,"{
    return asSequence().withClosureSequence(edges)
}","/**

 * @see withClosure

 * @receiver: Will be included in the return set

 */",f15014:m405
64128,public operator fun rangeTo(other: Int): IntRange,"IntRange(this.toInt(), other)",/** Creates a range from this value to the specified [other] value. */,f17455:m1485
53161,"private fun malformed(size: Int, index: Int, throwOnMalformed: Boolean): Int","{
    if (throwOnMalformed) throw CharacterCodingException(""Malformed sequence starting at ${index - 1}"")
    return -size
}","/** Returns the negative [size] if [throwOnMalformed] is false, throws [CharacterCodingException] otherwise. */",f16626:m15
56131,"@kotlin.internal.InlineOnly public inline fun <T, K> compareByDescending(comparator: Comparator<in K>, crossinline selector: (T) -> K): Comparator<T>","Comparator { a, b -> compareValuesBy(b, a, comparator, selector) }","/**

 * Creates a descending comparator using the [selector] function to transform values being compared and then applying

 * the specified [comparator] to compare transformed values.

 *

 * Note that an order of [comparator] is reversed by this wrapper.

 *

 * @sample samples.comparisons.Comparisons.compareByDescendingWithComparator

 */",f16832:m245
58143,"@kotlin.internal.InlineOnly @Suppress(""OVERRIDE_BY_INLINE"") public override inline operator fun compareTo(other: UInt): Int","uintCompare(this.data, other.data)","/**

     * Compares this value with the specified value for order.

     * Returns zero if this value is equal to the specified other value, a negative number if it's less than other,

     * or a positive number if it's greater than other.

     */",f17063:m113
45747,"fun <T: Dependency> implementation(dependency: T, configure: Action<T>)",implementation(dependency) { configure.execute(this) },"/**

     * Adds an `implementation` dependency to this entity.

     *

     * @see [HasKotlinDependencies.implementationConfigurationName]

     *

     * @param dependency The dependency to add.

     * @param configure Additional configuration for the [dependency].

     * @return The added [dependency].

     */",f14927:m253
14252,public fun getAndDecrement(): Long,this::value.getAndAddField(-1L),"/**

     * Atomically decrements the current value by one and returns the old value.

     */",f3762:m291
45779,"@Deprecated(""Dukat integration is in redesigning process. Now it does not work."") fun optionalNpm(directory: File, generateExternals: Boolean): Dependency","{
    @Suppress(""deprecation_error"") (warnNpmGenerateExternals(project.logger))
    return optionalNpm(directory)
}","/**

     * @suppress

     */",f14927:m1215
8539,internal fun IrFunction.isCEnumVarValueAccessor(symbols: KonanSymbols): Boolean,"{
    val parent = parent as? IrClass ?: return false
    return if (symbols.interopCEnumVar in parent.superClasses && isPropertyAccessor) {
        (propertyIfAccessor as IrProperty).name.asString() == ""value""
    } else {
        false
    }
}","/**

 * Check given function is a getter or setter

 * for `value` property of CEnumVar subclass.

 */",f3277:m193
15026,"@SinceKotlin(""1.1"") @kotlin.internal.InlineOnly public actual inline fun maxOf(a: Long, b: Long, c: Long): Long","{
    return maxOf(a, maxOf(b, c))
}","/**

 * Returns the greater of three values.

 */",f3836:m237
55703,"@SinceKotlin(""1.5"") @WasExperimental(ExperimentalStdlibApi::class) public fun Char.digitToIntOrNull(radix: Int): Int?","{
    checkRadix(radix)
    return digitOf(this, radix).takeIf { it >= 0 }
}","/**

 * Returns the numeric value of the digit that this Char represents in the specified [radix], or `null` if this Char is not a valid digit in the specified [radix].

 * Throws an exception if the [radix] is not in the range `2..36`.

 *

 * A Char is considered to represent a digit in the specified [radix] if at least one of the following is true:

 *  - [isDigit] is `true` for the Char and the Unicode decimal digit value of the character is less than the specified [radix]. In this case the decimal digit value is returned.

 *  - The Char is one of the uppercase Latin letters 'A' through 'Z' and its [code] is less than `radix + 'A'.code - 10`. In this case, `this.code - 'A'.code + 10` is returned.

 *  - The Char is one of the lowercase Latin letters 'a' through 'z' and its [code] is less than `radix + 'a'.code - 10`. In this case, `this.code - 'a'.code + 10` is returned.

 *  - The Char is one of the fullwidth Latin capital letters '\uFF21' through '\uFF3A' and its [code] is less than `radix + 0xFF21 - 10`. In this case, `this.code - 0xFF21 + 10` is returned.

 *  - The Char is one of the fullwidth Latin small letters '\uFF41' through '\uFF5A' and its [code] is less than `radix + 0xFF41 - 10`. In this case, `this.code - 0xFF41 + 10` is returned.

 *

 * @sample samples.text.Chars.digitToIntOrNull

 */",f16785:m123
63442,"@SinceKotlin(""1.4"") public actual infix fun FloatArray?.contentEquals(other: FloatArray?): Boolean","{
    if (this === other) return true
    if (this === null || other === null) return false
    if (size != other.size) return false
    for (i in indices) {
        if (!this[i].equals(other[i])) return false
    }
    return true
}","/**

 * Checks if the two specified arrays are *structurally* equal to one another.

 * 

 * Two arrays are considered structurally equal if they have the same size, and elements at corresponding indices are equal.

 * Elements are compared for equality using the [equals][Any.equals] function.

 * This means `NaN` is equal to itself and `-0.0` is not equal to `0.0`.

 * 

 * The arrays are also considered structurally equal if both are `null`.

 * 

 * @param other the array to compare with this array.

 * @return `true` if the two arrays are structurally equal, `false` otherwise.

 * 

 * @sample samples.collections.Arrays.ContentOperations.doubleArrayContentEquals

 */",f17396:m1213
58718,"@SinceKotlin(""1.1"") public fun <T: Comparable<T>> T.coerceIn(range: ClosedFloatingPointRange<T>): T","{
    if (range.isEmpty()) throw IllegalArgumentException(""Cannot coerce value to an empty range: $range."")
    return when {
        range.lessThanOrEquals(this, range.start) && !range.lessThanOrEquals(range.start, this) -> range.start
        range.lessThanOrEquals(range.endInclusive, this) && !range.lessThanOrEquals(this, range.endInclusive) -> range.endInclusive
        else -> this
    }
}","/**

 * Ensures that this value lies in the specified [range].

 * 

 * @return this value if it's in the [range], or `range.start` if this value is less than `range.start`, or `range.endInclusive` if this value is greater than `range.endInclusive`.

 * 

 * @sample samples.comparisons.ComparableOps.coerceInFloatingPointRange

 */",f17092:m2923
43617,fun BuildResult.assertTasksNoSource(vararg taskPaths: String),"{
    assertTasksHaveOutcome(TaskOutcome.NO_SOURCE, taskPaths.asList())
}","/**

 * Asserts given [taskPaths] have [TaskOutcome.NO_SOURCE] execution state.

 */",f13463:m199
63261,public actual fun String.toDoubleOrNull(): Double?,"{
    try {
        return toDouble()
    } catch (e: NumberFormatException) {
        return null
    }
}","/**

 * Parses the string as a [Double] number and returns the result

 * or `null` if the string is not a valid representation of a number.

 */",f17352:m173
21180,fun findJvmRootsForJavaFiles(files: List<PsiJavaFile>): List<PsiDirectory>,"{
    if (files.isEmpty()) return emptyList()
    val result = mutableSetOf<PsiDirectory>()
    for (file in files) {
        val packageParts = file.packageName.takeIf { it.isNotEmpty() }?.split('.') ?: emptyList()
        var javaDir: PsiDirectory? = file.parent
        for (part in packageParts.reversed()) {
            if (javaDir?.name == part) {
                javaDir = javaDir.parent
            } else {
                break
            }
        }
        javaDir?.let { result += it }
    }
    return result.toList()
}","/**

     * Note that [findJvmRootsForJavaFiles] parses the given [files] because it needs access to each file's package name. To avoid parsing

     * errors, [registerJavaPsiFacade] ensures that the Java language level is configured before [findJvmRootsForJavaFiles] is called.

     */",f8501:m613
64457,"@SinceKotlin(""1.5"") @WasExperimental(ExperimentalPathApi::class) @Throws(IOException::class) @kotlin.internal.InlineOnly public inline fun Path.outputStream(vararg options: OpenOption): OutputStream","{
    return Files.newOutputStream(this, *options)
}","/**

 * Constructs a new OutputStream of this file and returns it as a result.

 *

 * The [options] parameter determines how the file is opened. If no options are present then it is

 * equivalent to opening the file with the [CREATE][StandardOpenOption.CREATE],

 * [TRUNCATE_EXISTING][StandardOpenOption.TRUNCATE_EXISTING], and [WRITE][StandardOpenOption.WRITE]

 * options.

 */",f17469:m471
63251,public actual fun String.toByte(radix: Int): Byte,toByteOrNull(radix) ?: numberFormatError(this),"/**

 * Parses the string as a signed [Byte] number and returns the result.

 * @throws NumberFormatException if the string is not a valid representation of a number.

 * @throws IllegalArgumentException when [radix] is not a valid radix for string to number conversion.

 */",f17352:m45
48355,"internal fun runCommandWithFallback(command: List<String>, logger: Logger? = null, fallback: (result: RunProcessResult) -> CommandFallback, processConfiguration: ProcessBuilder.() -> Unit = {}): String","{
    val runResult = assembleAndRunProcess(command, logger, processConfiguration)
    return if (runResult.retCode != 0) { when (val fallbackOption = fallback(runResult)) {
        is CommandFallback.Action -> fallbackOption.fallback
        is CommandFallback.Error -> error(fallbackOption.error ?: createErrorMessage(command, runResult))
    } } else {
        runResult.stdOut
    }
}","/**

 * Executes the specified command with fallback behavior in case of non-zero return code.

 *

 * @param command the command and its arguments to be executed as a list of strings.

 * @param logger an optional logger to log information about the command execution.

 * @param fallback a function that provides the fallback behavior. It takes the return code, output, and process as parameters and returns a [CommandFallback] object.

 * @param processConfiguration a function to configure the process before execution.

 * @return the output of the command if the return code is 0, otherwise the fallback action or error.

 */",f15610:m113
63536,"@SinceKotlin(""1.3"") @Suppress(""ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS"") public actual fun <T> Array<T>.fill(element: T, fromIndex: Int = 0, toIndex: Int = size): Unit","{
    AbstractList.checkRangeIndexes(fromIndex, toIndex, size)
    for (index in fromIndex until toIndex) {
        this[index] = element
    }
}","/**

 * Fills this array or its subrange with the specified [element] value.

 * 

 * @param fromIndex the start of the range (inclusive) to fill, 0 by default.

 * @param toIndex the end of the range (exclusive) to fill, size of this array by default.

 * 

 * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.

 * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].

 */",f17396:m3763
59022,"@SinceKotlin(""1.4"") @OptIn(kotlin.experimental.ExperimentalTypeInference::class) @OverloadResolutionByLambdaReturnType @kotlin.internal.InlineOnly public inline fun CharSequence.maxOfOrNull(selector: (Char) -> Double): Double?","{
    if (isEmpty()) return null
    var maxValue = selector(this[0])
    for (i in 1 .. lastIndex) {
        val v = selector(this[i])
        maxValue = maxOf(maxValue, v)
    }
    return maxValue
}","/**

 * Returns the largest value among all values produced by [selector] function

 * applied to each character in the char sequence or `null` if there are no characters.

 * 

 * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.

 */",f17097:m2651
14013,"@SinceKotlin(""1.1"") @kotlin.internal.InlineOnly public actual inline fun String.toByte(radix: Int): Byte",toByteOrNull(radix) ?: throw NumberFormatException(),"/**

 * Parses the string as a signed [Byte] number and returns the result.

 * @throws NumberFormatException if the string is not a valid representation of a number.

 * @throws IllegalArgumentException when [radix] is not a valid radix for string to number conversion.

 */",f3714:m141
52890,"public fun json(vararg pairs: Pair<String, Any?>): Json","{
    val res: dynamic = js(""({})"")
    for ((name, value) in pairs) {
        res[name] = value
    }
    return res
}","/**

 * Returns a simple JavaScript object (as [Json]) using provided key-value pairs as names and values of its properties.

 */",f16586:m103
53464,"@SinceKotlin(""1.4"") public fun Element.hasClass(cssClass: String): Boolean","className.matches(""""""(^|.*\s+)$cssClass($|\s+.*)"""""".toRegex())",/** Returns true if the element has the given CSS class style in its 'class' attribute */,f16680:m19
54831,"@SinceKotlin(""1.1"") @kotlin.internal.InlineOnly public actual inline fun minOf(a: Float, b: Float, c: Float): Float","{
    return JsMath.min(a, b, c)
}","/**

 * Returns the smaller of three values.

 * 

 * If any value is `NaN`, returns `NaN`.

 */",f16714:m681
63494,public actual fun IntArray.copyOf(): IntArray,"{
    return this.copyOfUninitializedElements(size)
}","/**

 * Returns new array which is a copy of the original array.

 * 

 * @sample samples.collections.Arrays.CopyOfOperations.copyOf

 */",f17396:m2719
53126,public actual fun String.toInt(): Int,toIntOrNull() ?: numberFormatError(this),"/**

 * Parses the string as an [Int] number and returns the result.

 * @throws NumberFormatException if the string is not a valid representation of a number.

 */",f16618:m87
57235,public actual fun <T> Array<out T>.asList(): List<T>,"{
    return ArraysUtilJVM.asList(this)
}","/**

 * Returns a [List] that wraps the original array.

 */",f16970:m257
13702,public operator fun rangeTo(other: Int): LongRange,"LongRange(this, other.toLong())",/** Creates a range from this value to the specified [other] value. */,f3686:m3315
63243,"@SinceKotlin(""1.9"") @kotlin.internal.InlineOnly public actual inline fun StringBuilder.appendLine(value: Long): StringBuilder",append(value).appendLine(),"/** Appends [value] to this [StringBuilder], followed by a line feed character (`\n`). */",f17351:m49
59062,"@Deprecated(""Use sumOf instead."", ReplaceWith(""this.sumOf(selector)"")) @DeprecatedSinceKotlin(warningSince = ""1.5"") public inline fun CharSequence.sumBy(selector: (Char) -> Int): Int","{
    var sum: Int = 0
    for (element in this) {
        sum += selector(element)
    }
    return sum
}","/**

 * Returns the sum of all values produced by [selector] function applied to each character in the char sequence.

 */",f17097:m4197
13953,@ExperimentalNativeApi public fun Char.Companion.isSupplementaryCodePoint(codepoint: Int): Boolean,codepoint in MIN_SUPPLEMENTARY_CODE_POINT .. MAX_CODE_POINT,"/**

 * Checks if the codepoint specified is a supplementary codepoint or not.

 *

 * Note that this function is unstable.

 * In the future it could be deprecated in favour of an overload that would accept a `CodePoint` type.

 */",f3711:m89
14022,"@SinceKotlin(""1.1"") public actual fun String.toFloatOrNull(): Float?","{
    try {
        return toFloat()
    } catch (e: NumberFormatException) {
        return null
    }
}","/**

 * Parses the string as a [Float] number and returns the result

 * or `null` if the string is not a valid representation of a number.

 */",f3714:m281
13965,"@Suppress(""ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS"") public actual fun String.replace(oldValue: String, newValue: String, ignoreCase: Boolean = false): String","splitToSequence(oldValue, ignoreCase = ignoreCase).joinToString(separator = newValue)","/**

 * Returns a new string obtained by replacing all occurrences of the [oldValue] substring in this string

 * with the specified [newValue] string.

 *

 * @sample samples.text.Strings.replace

 */",f3713:m175
63421,public actual fun CharArray.asList(): List<Char>,"{
    return object : AbstractList<Char>(), RandomAccess {
        override val size: Int get() = this@asList.size
    
        override fun isEmpty(): Boolean = this@asList.isEmpty()
    
        override fun contains(element: Char): Boolean = this@asList.contains(element)
    
        override fun get(index: Int): Char = this@asList[index]
    
        override fun indexOf(element: Char): Int = this@asList.indexOf(element)
    
        override fun lastIndexOf(element: Char): Int = this@asList.lastIndexOf(element)
    }
}","/**

 * Returns a [List] that wraps the original array.

 */",f17396:m435
56258,public override fun toString(): String,"""($first, $second, $third)""","/**

     * Returns string representation of the [Triple] including its [first], [second] and [third] values.

     */",f16844:m143
56922,"@SinceKotlin(""1.2"") @kotlin.internal.InlineOnly public inline fun Float.toBigDecimal(mathContext: MathContext): BigDecimal","BigDecimal(this.toString(), mathContext)","/**

 * Returns the value of this [Float] number as a [BigDecimal].

 *

 * The number is converted to a string and then the string is converted to a [BigDecimal].

 *

 * @param mathContext specifies the precision and the rounding mode.

 */",f16935:m217
58752,public inline fun <T> Sequence<T>.lastOrNull(predicate: (T) -> Boolean): T?,"{
    var last: T? = null
    for (element in this) {
        if (predicate(element)) {
            last = element
        }
    }
    return last
}","/**

 * Returns the last element matching the given [predicate], or `null` if no such element was found.

 *

 * The operation is _terminal_.

 * 

 * @sample samples.collections.Collections.Elements.last

 */",f17096:m623
14919,"public actual fun ShortArray.copyOfRange(fromIndex: Int, toIndex: Int): ShortArray","{
    checkCopyOfRangeArguments(fromIndex, toIndex, size)
    return copyOfUninitializedElements(fromIndex, toIndex)
}","/**

 * Returns a new array which is a copy of the specified range of the original array.

 * 

 * @param fromIndex the start of the range (inclusive) to copy.

 * @param toIndex the end of the range (exclusive) to copy.

 * 

 * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.

 * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].

 */",f3831:m3065
11452,"fun <T: Any> SingleNullableOption<T>.default(value: T): SingleOption<T, DefaultRequiredType.Default>","{
    val newOption = with((delegate.cast<ParsingValue<T, T>>()).descriptor as OptionDescriptor) { SingleOption<T, DefaultRequiredType.Default>(OptionDescriptor(optionFullFormPrefix, optionShortFromPrefix, type, fullName, shortName, description, value, required, multiple, delimiter, deprecatedWarning), owner) }
    owner.entity = newOption
    return newOption
}","/**

 * Specifies the default value for the option, that will be used when no value is provided for it

 * in command line string.

 *

 * @param value the default value.

 */",f3549:m281
16399,private fun KotlinDeclarationProvider.getTopLevelCallables(callableId: CallableId): List<KtCallableDeclaration>,getTopLevelFunctions(callableId) + getTopLevelProperties(callableId),"/**

 * Callables are provided very rarely (compared to functions/properties individually), so it's okay to hit indices twice here.

 */",f4112:m325
9638,private fun qualifyInternalName(declaration: IrDeclaration): String,"{
    return getFqName(declaration).asString() + ""#internal""
}","/**

     * Produces the name to be used for non-exported LLVM declarations corresponding to [declaration].

     *

     * Note: since these declarations are going to be private, the name is only required not to clash with any

     * exported declarations.

     */",f3375:m337
58709,public fun Float.coerceAtMost(maximumValue: Float): Float,"{
    return if (this > maximumValue) maximumValue else this
}","/**

 * Ensures that this value is not greater than the specified [maximumValue].

 * 

 * @return this value if it's less than or equal to the [maximumValue] or the [maximumValue] otherwise.

 * 

 * @sample samples.comparisons.ComparableOps.coerceAtMost

 */",f17092:m2671
58646,public infix fun Short.downTo(to: Byte): IntProgression,"{
    return IntProgression.fromClosedRange(this.toInt(), to.toInt(), -1)
}","/**

 * Returns a progression from this value down to the specified [to] value with the step -1.

 * 

 * The [to] value should be less than or equal to `this` value.

 * If the [to] value is greater than `this` value the returned progression is empty.

 */",f17092:m1591
48548,"@JvmOverloads fun framework(buildTypes: Collection<NativeBuildType> = NativeBuildType.DEFAULT_BUILD_TYPES, configure: Action<Framework>)",framework(buildTypes) { configure.execute(this) },/** Creates an Objective-C framework with the default name prefix for each build type and configures it. */,f15652:m567
57391,public actual fun LongArray.toTypedArray(): Array<Long>,"{
    val result = arrayOfNulls<Long>(size)
    for (index in indices) result[index] = this[index]
    @Suppress(""UNCHECKED_CAST"") return result as Array<Long>
}","/**

 * Returns a *typed* object array containing all of the elements of this primitive array.

 */",f16970:m4587
56233,"@SinceKotlin(""1.5"") @kotlin.internal.InlineOnly @kotlin.internal.IntrinsicConstEvaluation public inline fun Short.floorDiv(other: Long): Long",this.toLong().floorDiv(other),"/** Divides this value by the other value, flooring the result to an integer that is closer to negative infinity. */",f16842:m281
53123,public actual fun String.toByte(radix: Int): Byte,toByteOrNull(radix) ?: numberFormatError(this),"/**

 * Parses the string as a signed [Byte] number and returns the result.

 * @throws NumberFormatException if the string is not a valid representation of a number.

 * @throws IllegalArgumentException when [radix] is not a valid radix for string to number conversion.

 */",f16618:m45
58856,"@SinceKotlin(""1.4"") public fun <T: Comparable<T>> Sequence<T>.minOrNull(): T?","{
    val iterator = iterator()
    if (!iterator.hasNext()) return null
    var min = iterator.next()
    while (iterator.hasNext()) {
        val e = iterator.next()
        if (min > e) min = e
    }
    return min
}","/**

 * Returns the smallest element or `null` if there are no elements.

 *

 * The operation is _terminal_.

 */",f17096:m4177
16751,"fun lazyResolveRecursively(target: FirElementWithResolveState, toPhase: FirResolvePhase)","{
    lazyResolve(target, toPhase, LLFirResolveDesignationCollector::getDesignationToResolveRecursively)
}","/**

     * Lazily resolves the [target] with nested declarations to a given [toPhase] recursively.

     *

     * Might resolve additional required declarations.

     *

     * Resolution is performed under the lock specific to each declaration that is going to be resolved.

     */",f4163:m111
20216,public fun <S: KtCallableSymbol> S.asSignature(): KtCallableSignature<S>,withValidityAssertion { analysisSession.signatureSubstitutor.asSignature(this) },"/**

     * Creates a new [KtCallableSignature] by given symbol and leave all types intact

     */",f5793:m121
59028,"@SinceKotlin(""1.7"") @kotlin.jvm.JvmName(""maxWithOrThrow"") @Suppress(""CONFLICTING_OVERLOADS"") public fun CharSequence.maxWith(comparator: Comparator<in Char>): Char","{
    if (isEmpty()) throw NoSuchElementException()
    var max = this[0]
    for (i in 1 .. lastIndex) {
        val e = this[i]
        if (comparator.compare(max, e) < 0) max = e
    }
    return max
}","/**

 * Returns the first character having the largest value according to the provided [comparator].

 * 

 * @throws NoSuchElementException if the char sequence is empty.

 */",f17097:m2883
11894,"@Suppress(""FINAL_UPPER_BOUND"") @ExperimentalForeignApi public fun <T: UShort> NativePlacement.alloc(value: T): UShortVarOf<T>",alloc<UShortVarOf<T>> { this.value = value },"/**

 * Allocates variable with given value type and initializes it with given value.

 */",f3606:m117
40922,"fun findSealedSupertypes(fqName: FqName, caches: Iterable<IncrementalCacheCommon>): Collection<FqName>","{
    if (isSealed(fqName, caches)) {
        return listOf(fqName)
    }
    return caches.flatMap { cache -> cache.getSupertypesOf(fqName).filter { cache.isSealed(it) ?: false } }
}","/**

 * Finds sealed supertypes of class in same module.

 * This method should be used for processing freedomOsSealedClasses feature, because

 * mutually declared list of sealed subclasses could be declared only in the same module.

 */",f12967:m515
52887,"@SinceKotlin(""1.1"") public actual fun <T, K> Grouping<T, K>.eachCount(): Map<K, Int>","fold(0) { acc, _ -> acc + 1 }","/**

 * Groups elements from the [Grouping] source by key and counts elements in each group.

 *

 * @return a [Map] associating the key of each group with the count of elements in the group.

 *

 * @sample samples.collections.Grouping.groupingByEachCount

 */",f16585:m15
63670,"@Deprecated(""Use Kotlin compiler 1.4 to avoid deprecation warning."") @SinceKotlin(""1.3"") @DeprecatedSinceKotlin(hiddenSince = ""1.4"") @ExperimentalUnsignedTypes public infix fun UIntArray.contentEquals(other: UIntArray): Boolean","{
    return this.contentEquals(other)
}","/**

 * Checks if the two specified arrays are *structurally* equal to one another.

 * 

 * Two arrays are considered structurally equal if they have the same size, and elements at corresponding indices are equal.

 * 

 * @param other the array to compare with this array.

 * @return `true` if the two arrays are structurally equal, `false` otherwise.

 * 

 * @sample samples.collections.Arrays.ContentOperations.intArrayContentEquals

 */",f17408:m255
56124,"@kotlin.internal.InlineOnly public inline fun <T> compareValuesBy(a: T, b: T, selector: (T) -> Comparable<*>?): Int","{
    return compareValues(selector(a), selector(b))
}","/**

 * Compares two values using the specified [selector] function to calculate the result of the comparison.

 * The function is applied to the given values [a] and [b] and return [Comparable] objects.

 * The result of comparison of these [Comparable] instances is returned.

 *

 * @sample samples.comparisons.Comparisons.compareValuesByWithSingleSelector

 */",f16832:m65
55632,"@SinceKotlin(""1.4"") @kotlin.internal.InlineOnly public inline operator fun <T, V> KMutableProperty1<T, V>.setValue(thisRef: T, property: KProperty<*>, value: V)","{
    set(thisRef, value)
}","/**

 * An extension operator that allows delegating a mutable member or extension property of type [V]

 * to a property reference to a member or extension mutable property of the same type [V].

 *

 * @receiver A property reference to a read-only or mutable property of type [V] or its subtype.

 * The reference has an unbound receiver of type [T].

 *

 * Example:

 *

 * ```

 * class Login(val username: String, var incorrectAttemptCounter: Int)

 * var Login.attempts by Login::incorrectAttemptCounter

 * // equivalent to

 * var Login.attempts: Int

 *     get() = this.incorrectAttemptCounter

 *     set(value) { this.incorrectAttemptCounter = value }

 * ```

 */",f16773:m167
8491,"fun makeObjectFile(bitcodeFile: File, objectFile: File)","when (val configurables = platform.configurables) {
    is ClangFlags -> clang(configurables, bitcodeFile, objectFile)
    else -> error(""Unsupported configurables kind: ${configurables::class.simpleName}!"")
}","/**

     * Compile [bitcodeFile] to [objectFile].

     */",f3270:m163
63469,"@Deprecated(""Use Kotlin compiler 1.4 to avoid deprecation warning."") @SinceKotlin(""1.1"") @DeprecatedSinceKotlin(hiddenSince = ""1.4"") public fun FloatArray.contentToString(): String","{
    return this.contentToString()
}","/**

 * Returns a string representation of the contents of the specified array as if it is [List].

 * 

 * @sample samples.collections.Arrays.ContentOperations.contentToString

 */",f17396:m1921
54713,public actual fun FloatArray.copyOf(newSize: Int): FloatArray,"{
    require(newSize >= 0) { ""Invalid new array size: $newSize."" }
    return fillFrom(this, FloatArray(newSize))
}","/**

 * Returns new array which is a copy of the original array, resized to the given [newSize].

 * The copy is either truncated or padded at the end with zero values if necessary.

 * 

 * - If [newSize] is less than the size of the original array, the copy array is truncated to the [newSize].

 * - If [newSize] is greater than the size of the original array, the extra elements in the copy array are filled with zero values.

 * 

 * @sample samples.collections.Arrays.CopyOfOperations.resizedPrimitiveCopyOf

 */",f16713:m1929
8269,"internal fun resolveCacheBinaries(cachedLibraries: CachedLibraries, dependenciesTrackingResult: DependenciesTrackingResult): ResolvedCacheBinaries","{
    val staticCaches = mutableListOf<String>()
    val dynamicCaches = mutableListOf<String>()
    dependenciesTrackingResult.allCachedBitcodeDependencies.forEach { dependency ->
        val library = dependency.library
        val cache = cachedLibraries.getLibraryCache(library) ?: error(""Library $library is expected to be cached"")
        val list = when (cache.kind) {
            CachedLibraries.Kind.DYNAMIC -> dynamicCaches
            CachedLibraries.Kind.STATIC -> staticCaches
            CachedLibraries.Kind.HEADER -> error(""Header cache ${cache.path} cannot be used for linking"")
        }
        list += if (dependency.kind is DependenciesTracker.DependencyKind.CertainFiles && cache is CachedLibraries.Cache.PerFile) dependency.kind.files.map { cache.getFileBinaryPath(it) } else cache.binariesPaths
    }
    return ResolvedCacheBinaries(static = staticCaches, dynamic = dynamicCaches)
}","/**

 * Find binary files for compiler caches that are actually required for the linkage.

 */",f3225:m61
58489,"@SinceKotlin(""1.4"") @OptIn(kotlin.experimental.ExperimentalTypeInference::class) @OverloadResolutionByLambdaReturnType @kotlin.internal.InlineOnly public inline fun <K, V> Map<out K, V>.maxOfOrNull(selector: (Map.Entry<K, V>) -> Float): Float?","{
    return entries.maxOfOrNull(selector)
}","/**

 * Returns the largest value among all values produced by [selector] function

 * applied to each entry in the map or `null` if there are no entries.

 * 

 * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.

 */",f17089:m609
16615,fun KtModule.getFirResolveSession(project: Project): LLFirResolveSession,LLFirResolveSessionService.getInstance(project).getFirResolveSession(this),"/**

 * Returns [LLFirResolveSession] which corresponds to containing module

 */",f4145:m39
63594,public actual fun LongArray.toTypedArray(): Array<Long>,"{
    return Array(size) { index -> this[index] }
}","/**

 * Returns a *typed* object array containing all of the elements of this primitive array.

 */",f17396:m5195
63621,"@SinceKotlin(""1.1"") @kotlin.internal.InlineOnly public actual inline fun maxOf(a: Short, b: Short): Short","{
    return maxOf(a.toInt(), b.toInt()).toShort()
}","/**

 * Returns the greater of two values.

 */",f17406:m65
18887,"private fun PrettyPrinter.handleCompiledClassDeclaration(classOrObject: KtClassOrObject, text: String)","{
    handleClassDeclaration(classOrObject, text)
    appendLine()
    classOrObject.declarations.forEach { declaration -> when (declaration) {
        is KtEnumEntry -> {
            handleClassDeclaration(declaration, text)
            appendLine()
        }
        is KtClassOrObject -> handleCompiledClassDeclaration(declaration, text)
    } }
}","/**

     * [handleCompiledClassDeclaration] uses a custom traversal instead of [forEachDescendantOfType] because trying to access the PSI of

     * compiled code in this test results in exceptions. Hence, we have to traverse nested classes and enum entries manually.

     */",f5551:m241
52689,"internal fun <T: Comparable<T>> sortArray(array: Array<out T>, fromIndex: Int, toIndex: Int)","{
    if (fromIndex < toIndex - 1) {
        @Suppress(""UNCHECKED_CAST"") mergeSort(array as Array<T>, fromIndex, toIndex - 1)
    }
}","/**

 * Sorts a subarray of [Comparable] elements specified by [fromIndex] (inclusive) and

 * [toIndex] (exclusive) parameters using the merge sort algorithm.

 */",f16557:m747
57317,"@JvmName(""copyOfRangeInline"") @kotlin.internal.InlineOnly public actual inline fun LongArray.copyOfRange(fromIndex: Int, toIndex: Int): LongArray","{
    return if (kotlin.internal.apiVersionIsAtLeast(1, 3, 0)) {
        copyOfRangeImpl(fromIndex, toIndex)
    } else {
        if (toIndex > size) throw IndexOutOfBoundsException(""toIndex: $toIndex, size: $size"")
        java.util.Arrays.copyOfRange(this, fromIndex, toIndex)
    }
}","/**

 * Returns a new array which is a copy of the specified range of the original array.

 * 

 * @param fromIndex the start of the range (inclusive) to copy.

 * @param toIndex the end of the range (exclusive) to copy.

 * 

 * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.

 * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].

 */",f16970:m2831
43520,internal fun TestProject.chooseCompilerVersion(version: String),"{
    buildGradle.append(""""""
    
            kotlin {
    
                compilerVersion.set(""$version"")
    
            }
    
            """""".trimIndent())
}","/**

 * Chooses compiler version used for JVM compilation in the build tools API mode.

 *

 * If the chosen version requires additional repositories, please consider using [DependencyManagement.DefaultDependencyManagement].

 *

 * Ensure [BuildOptions.runViaBuildToolsApi] is set to true for the builds!

 */",f13453:m391
63254,public actual fun String.toInt(): Int,toIntOrNull() ?: numberFormatError(this),"/**

 * Parses the string as an [Int] number and returns the result.

 * @throws NumberFormatException if the string is not a valid representation of a number.

 */",f17352:m85
63443,"@SinceKotlin(""1.4"") public actual infix fun DoubleArray?.contentEquals(other: DoubleArray?): Boolean","{
    if (this === other) return true
    if (this === null || other === null) return false
    if (size != other.size) return false
    for (i in indices) {
        if (!this[i].equals(other[i])) return false
    }
    return true
}","/**

 * Checks if the two specified arrays are *structurally* equal to one another.

 * 

 * Two arrays are considered structurally equal if they have the same size, and elements at corresponding indices are equal.

 * Elements are compared for equality using the [equals][Any.equals] function.

 * This means `NaN` is equal to itself and `-0.0` is not equal to `0.0`.

 * 

 * The arrays are also considered structurally equal if both are `null`.

 * 

 * @param other the array to compare with this array.

 * @return `true` if the two arrays are structurally equal, `false` otherwise.

 * 

 * @sample samples.collections.Arrays.ContentOperations.doubleArrayContentEquals

 */",f17396:m1263
54791,public actual fun ShortArray.toTypedArray(): Array<Short>,"{
    return js(""[]"").slice.call(this)
}","/**

 * Returns a *typed* object array containing all of the elements of this primitive array.

 */",f16713:m3765
17898,private fun handleAsGenericTypeQualifier(element: KtElement): KtCallInfo?,"{
    if (element !is KtExpression) return null
    val wholeQualifier = element.getQualifiedExpressionForSelector() as? KtDotQualifiedExpression ?: element
    val call = wholeQualifier.getPossiblyQualifiedCallExpression() ?: return null
    if (call.typeArgumentList == null || call.valueArgumentList != null) return null
    return KtSuccessCallInfo(KtGenericTypeQualifier(token, wholeQualifier))
}","/**

     * Handles call expressions like `Foo<Bar>` or `test.Foo<Bar>` in calls like `Foo<Bar>::foo` and `test.Foo<Bar>::foo`.

     *

     * ATM does not perform any resolve checks, since it does not seem possible with [BindingContext], so it might give some

     * false positives.

     */",f5366:m843
57060,@kotlin.internal.InlineOnly public inline fun println(message: CharArray),"{
    System.out.println(message)
}",/** Prints the given [message] and the line separator to the standard output stream. */,f16953:m261
9288,"private fun InteropCallContext.castFromBoolean(targetClass: IrClassSymbol, value: IrExpression): IrExpression","{
    val (thenPart, elsePart) = when (targetClass) {
        symbols.byte -> builder.irByte(1) to builder.irByte(0)
        symbols.long -> builder.irLong(1) to builder.irLong(0)
        else -> error(""Unsupported cast from boolean to ${targetClass.owner.name}"")
    }
    return builder.irIfThenElse(targetClass.defaultType, value, thenPart, elsePart)
}","/**

 * Perform if (value) 1 else 0

 */",f3339:m331
15378,@Test fun absJ(),"{
    assertTrue(""Incorrect long abs value"", abs(-19088976000089L) == 19088976000089L)
    assertTrue(""Incorrect long abs value"", abs(19088976000089L) == 19088976000089L)
}","/**

     * Tests kotlin.math.abs(long)

     */",f3868:m199
63682,internal fun Char.isLetterImpl(): Boolean,"{
    return getLetterType() != 0
}","/**

 * Returns `true` if this character is a letter.

 */",f17409:m119
16617,"@Suppress(""INVISIBLE_REFERENCE"", ""INVISIBLE_MEMBER"") inline fun <reified S: FirBasedSymbol<*>> KtDeclaration.resolveToFirSymbolOfType(firResolveSession: LLFirResolveSession, phase: FirResolvePhase = FirResolvePhase.RAW_FIR): @kotlin.internal.NoInfer S","{
    val symbol = resolveToFirSymbol(firResolveSession, phase)
    if (symbol !is S) {
        throwUnexpectedFirElementError(symbol, this, S::class)
    }
    return symbol
}","/**

 * Creates [FirBasedSymbol] by [KtDeclaration] .

 * returned [FirDeclaration] will be resolved at least to [phase]

 *

 * If resulted [FirBasedSymbol] is not subtype of [S], throws [InvalidFirElementTypeException]

 */",f4145:m77
15004,public actual fun DoubleArray.toTypedArray(): Array<Double>,"{
    return Array(size) { index -> this[index] }
}","/**

 * Returns a *typed* object array containing all of the elements of this primitive array.

 */",f3831:m5117
55114,@kotlin.internal.IntrinsicConstEvaluation public inline operator fun compareTo(other: Double): Int,this.toDouble().compareTo(other),"/**

     * Compares this value with the specified value for order.

     * Returns zero if this value is equal to the specified other value, a negative number if it's less than other,

     * or a positive number if it's greater than other.

     */",f16727:m2491
56877,"@kotlin.internal.InlineOnly public inline fun <R> synchronized(lock: Any, block: () -> R): R","{
    contract { callsInPlace(block, InvocationKind.EXACTLY_ONCE) }
    val lockLocal = lock
    @Suppress(""NON_PUBLIC_CALL_FROM_PUBLIC_INLINE"", ""INVISIBLE_MEMBER"", ""INVISIBLE_REFERENCE"") monitorEnter(lockLocal)
    try {
        return block()
    } finally {
        @Suppress(""NON_PUBLIC_CALL_FROM_PUBLIC_INLINE"", ""INVISIBLE_MEMBER"", ""INVISIBLE_REFERENCE"") monitorExit(lockLocal)
    }
}","/**

 * Executes the given function [block] while holding the monitor of the given object [lock].

 */",f16930:m25
37784,"fun createStandaloneAnalysisApiSession(tempDir: File, kotlinSourceModuleName: String = defaultKotlinSourceModuleName, kotlinSources: Map<String, String>, dependencyKlibs: List<Path> = emptyList()): StandaloneAnalysisAPISession","{
    val testModuleRoot = tempDir.resolve(""testModule"")
    testModuleRoot.mkdirs()
    kotlinSources.forEach { (fileName, sourceCode) -> testModuleRoot.resolve(fileName).apply { writeText(sourceCode) } }
    return createStandaloneAnalysisApiSession(kotlinSourceModuleName, listOf(testModuleRoot), dependencyKlibs)
}","/**

 * Creates a standalone analysis session from Kotlin source code passed as [kotlinSources]

 */",f11917:m49
54825,"@SinceKotlin(""1.1"") @kotlin.internal.InlineOnly public actual inline fun minOf(a: Double, b: Double): Double","{
    return JsMath.min(a, b)
}","/**

 * Returns the smaller of two values.

 * 

 * If either value is `NaN`, returns `NaN`.

 */",f16714:m567
32521,fun isNumberedFunctionClassFqName(fqName: FqNameUnsafe): Boolean,"{
    return fqName.startsWith(BUILT_INS_PACKAGE_NAME) && fqName.getFunctionTypeKind() == FunctionTypeKind.Function
}","/**

 * @return true if this is an FQ name of a fictitious class representing the function type,

 * e.g. kotlin.Function1 (but NOT kotlin.reflect.KFunction1)

 */",f11021:m231
49766,@ExternalKotlinTargetApi fun DecoratedExternalKotlinTarget.sourcesJarTask(compilation: DecoratedExternalKotlinCompilation): TaskProvider<Jar>,"{
    return sourcesJarTask(compilation, componentName = lowerCamelCaseName(targetName, compilation.name.takeUnless { compilation.isMain() }), artifactNameAppendix = targetName.toLowerCaseAsciiOnly())
}","/**

 * Registers, or returns if already existing, a sources jar task that contains

 * all sources of the given compilation (see [includeSources])

 *

 * @since 1.9.20

 */",f15951:m83
43590,"fun BuildResult.assertNativeTasksCustomEnvironment(vararg tasksPaths: String, toolName: NativeToolKind = NativeToolKind.KONANC, assertions: (Map<String, String>) -> Unit)","tasksPaths.forEach { taskPath -> assertions(extractNativeCustomEnvironment(taskPath, toolName)) }","/**

 * Asserts environment variables of the given K/N compiler for given tasks' paths

 *

 * Note: Log level of output must be set to [LogLevel.INFO].

 *

 * @param tasksPaths tasks' paths, for which command line arguments should be checked with give assertions.

 * @param toolName name of build tool

 * @param assertions assertions, with will be applied to each command line arguments of each given task

 */",f13457:m657
58111,@kotlin.internal.InlineOnly public inline infix fun or(other: UByte): UByte,UByte(this.data or other.data),/** Performs a bitwise OR operation between the two values. */,f17059:m507
43620,"@OptIn(EnvironmentalVariablesOverride::class) fun TestProject.buildAndAssertAllTasks(registeredTasks: List<String> = emptyList(), notRegisteredTasks: List<String> = emptyList(), buildOptions: BuildOptions = this.buildOptions, environmentVariables: EnvironmentalVariables = EnvironmentalVariables())","{
    build(""tasks"", ""--all"", buildOptions = buildOptions, environmentVariables = environmentVariables) { assertTasksInBuildOutput(registeredTasks, notRegisteredTasks) }
}","/**

 * Builds test project with 'tasks --all' arguments and then

 * asserts that [registeredTasks] of the given tasks have been registered

 * and tasks from the [notRegisteredTasks] list have not been registered.

 *

 * @param registeredTasks The names of the tasks that should have been registered,

 *                          it could contain task paths as well, but without the first semicolon.

 * @param notRegisteredTasks An optional list of task names that should not have been registered,

 *                           it could contain task paths as well, but without the first semicolon.

 * @param environmentVariables environmental variables for build process

 * @throws AssertionError if any of the registered tasks do not match the expected task names,

 * or if any of the not-registered tasks were actually registered.

 */",f13463:m269
63642,"@SinceKotlin(""1.1"") @kotlin.internal.InlineOnly public actual inline fun minOf(a: Short, b: Short): Short","{
    return minOf(a.toInt(), b.toInt()).toShort()
}","/**

 * Returns the smaller of two values.

 */",f17406:m489
64117,"@SinceKotlin(""1.1"") @kotlin.internal.IntrinsicConstEvaluation public inline operator fun rem(other: Short): Int",this.toInt() % other.toInt(),"/**

     * Calculates the remainder of truncating division of this value (dividend) by the other value (divisor).

     *

     * The result is either zero or has the same sign as the _dividend_ and has the absolute value less than the absolute value of the divisor.

     */",f17455:m1317
14147,"@SinceKotlin(""1.3"") @Suppress(""UNCHECKED_CAST"") private inline fun <T> createCoroutineFromSuspendFunction(completion: Continuation<T>, crossinline block: (Continuation<T>) -> Any?): Continuation<Unit>","{
    val context = completion.context
    return if (context === EmptyCoroutineContext) object : RestrictedContinuationImpl(completion as Continuation<Any?>) {
        private var label = 0
    
        override fun invokeSuspend(result: Result<Any?>): Any? = when (label) {
            0 -> {
                label = 1
                result.getOrThrow()
                block(this)
            }
            1 -> {
                label = 2
                result.getOrThrow()
            }
            else -> error(""This coroutine had already completed"")
        }
    } else object : ContinuationImpl(completion as Continuation<Any?>, context) {
        private var label = 0
    
        override fun invokeSuspend(result: Result<Any?>): Any? = when (label) {
            0 -> {
                label = 1
                result.getOrThrow()
                block(this)
            }
            1 -> {
                label = 2
                result.getOrThrow()
            }
            else -> error(""This coroutine had already completed"")
        }
    }
}","/**

 * This function is used when [createCoroutineUnintercepted] encounters suspending lambda that does not extend BaseContinuationImpl.

 *

 * It happens in two cases:

 *   1. Callable reference to suspending function,

 *   2. Suspending function reference implemented by Java code.

 *

 * We must wrap it into an instance that extends [BaseContinuationImpl], because that is an expectation of all coroutines machinery.

 * As an optimization we use lighter-weight [RestrictedContinuationImpl] base class (it has less fields) if the context is

 * [EmptyCoroutineContext], and a full-blown [ContinuationImpl] class otherwise.

 *

 * The instance of [BaseContinuationImpl] is passed to the [block] so that it can be passed to the corresponding invocation.

 */",f3737:m411
15025,"@SinceKotlin(""1.1"") @kotlin.internal.InlineOnly public actual inline fun maxOf(a: Int, b: Int, c: Int): Int","{
    return maxOf(a, maxOf(b, c))
}","/**

 * Returns the greater of three values.

 */",f3836:m219
24999,"fun visitVariable(variable: Node, initializer: Node)","restartable(variable) { bindings, _, callBindingsOf ->
    val initializerBinding = callBindingsOf(initializer) ?: return@restartable
    val variableBindings = callBindingsOf(variable) ?: return@restartable
    bindings.unify(variable, variableBindings, initializerBinding)
}","/**

     * Infer the scheme of the variable from the scheme of the initializer.

     */",f9239:m745
56474,"@SinceKotlin(""1.1"") @kotlin.internal.InlineOnly public actual inline fun Byte.toString(radix: Int): String",this.toInt().toString(radix),"/**

 * Returns a string representation of this [Byte] value in the specified [radix].

 *

 * @throws IllegalArgumentException when [radix] is not a valid radix for number to string conversion.

 */",f16885:m23
61686,public infix fun UInt.until(to: UInt): UIntRange,"{
    if (to <= UInt.MIN_VALUE) return UIntRange.EMPTY
    return this .. (to - 1u).toUInt()
}","/**

 * Returns a range from this value up to but excluding the specified [to] value.

 *

 * If the [to] value is less than or equal to `this` value, then the returned range is empty.

 */",f17250:m41
63569,public actual operator fun DoubleArray.plus(elements: DoubleArray): DoubleArray,"{
    val thisSize = size
    val arraySize = elements.size
    val result = copyOfUninitializedElements(thisSize + arraySize)
    elements.copyInto(result, thisSize)
    return result
}","/**

 * Returns an array containing all elements of the original array and then all elements of the given [elements] array.

 */",f17396:m4579
57995,"@SinceKotlin(""1.5"") @WasExperimental(ExperimentalUnsignedTypes::class, ExperimentalStdlibApi::class) @kotlin.internal.InlineOnly public inline fun UInt.takeLowestOneBit(): UInt",toInt().takeLowestOneBit().toUInt(),"/**

 * Returns a number having a single bit set in the position of the least significant set bit of this [UInt] number,

 * or zero, if this number is zero.

 */",f17056:m83
54642,public actual fun ShortArray.elementAt(index: Int): Short,"{
    return elementAtOrElse(index) { throw IndexOutOfBoundsException(""index: $index, size: $size}"") }
}","/**

 * Returns an element at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this array.

 * 

 * @sample samples.collections.Collections.Elements.elementAt

 */",f16713:m73
7529,"fun Task.dependsOnKonanBuildingTask(artifact: String, target: KonanTarget)","{
    val buildTask = project.findKonanBuildTask(artifact, target)
    buildTask.get().apply {
        konanOldPluginTaskDependenciesWalker { dependsOnDist() }
        sameDependenciesAs(this@dependsOnKonanBuildingTask)
    }
    dependsOn(buildTask)
}","/**

 * Set dependency on [artifact] built by the Konan Plugin for the receiver task,

 * also make [artifact] depend on `dist` and all dependencies of the task to make [artifact] execute before the task.

 */",f3111:m531
11472,"private fun recognizeAndSaveOptionFullForm(candidate: String, argIterator: Iterator<String>): Boolean","{
    if (prefixStyle == OptionPrefixStyle.GNU && candidate == optionFullFormPrefix) {
        treatAsOption = false
        return false
    }
    if (!candidate.startsWith(optionFullFormPrefix)) return false
    val optionString = candidate.substring(optionFullFormPrefix.length)
    val argValue = if (prefixStyle == OptionPrefixStyle.GNU) null else options[optionString]
    if (argValue != null) {
        saveStandardOptionForm(argValue, argIterator)
        return true
    } else {
        if (prefixStyle == OptionPrefixStyle.GNU) {
            if (options[optionString]?.descriptor?.type?.hasParameter == false) {
                saveOptionWithoutParameter(options[optionString]!!)
                return true
            }
            val optionParts = optionString.split('=', limit = 2)
            if (optionParts.size != 2) return false
            if (options[optionParts[0]] != null) {
                saveAsOption(options[optionParts[0]]!!, optionParts[1])
                return true
            }
        }
    }
    return false
}","/**

     * Try to recognize and save command line element as full form of option.

     *

     * @param candidate string with candidate in options.

     * @param argIterator iterator over command line arguments.

     */",f3554:m779
49312,private fun KotlinToolingDiagnosticsCollector.reportForNonDefaultCompilations(compilations: Collection<KotlinCompilation<*>>),"{
    for (compilation in compilations) {
        if (compilation.target.platformType == KotlinPlatformType.androidJvm) continue
        val diagnostic = MultipleSourceSetRootsInCompilation(compilation, compilation.sourceSetRoots().map { it.name })
        report(compilation.project, diagnostic)
    }
}","/**

     * For non-default compilations, we don't know which of the multiple source set roots should win so report diagnostic differently

     */",f15802:m181
14980,@kotlin.internal.InlineOnly public actual inline fun <T> Array<T>.plusElement(element: T): Array<T>,"{
    return plus(element)
}","/**

 * Returns an array containing all elements of the original array and then the given [element].

 */",f3831:m4539
57144,"@SinceKotlin(""1.1"") @kotlin.internal.InlineOnly public actual inline fun maxOf(a: Float, b: Float): Float","{
    return Math.max(a, b)
}","/**

 * Returns the greater of two values.

 * 

 * If either value is `NaN`, returns `NaN`.

 */",f16966:m125
64283,@kotlin.internal.IntrinsicConstEvaluation public override operator fun compareTo(other: Float): Int,"{
    if (this > other) return 1
    if (this < other) return -1
    val thisBits = this.toBits()
    val otherBits = other.toBits()
    return thisBits.compareTo(otherBits)
}","/**

     * Compares this value with the specified value for order.

     * Returns zero if this value is equal to the specified other value, a negative number if it's less than other,

     * or a positive number if it's greater than other.

     */",f17455:m3917
27508,fun getSourceFileDefinedTypesCount(): Int,"{
    return sourceCache.values.sumOf {
        val structure = it as? SourceFileStructure ?: return@sumOf 0
        if (structure.declaredTypes.size == 1 && structure.declaredTypes.single() == ""error.NonExistentClass"") {
            return@sumOf 0
        }
        return@sumOf structure.declaredTypes.size
    }
}",/** Returns total number of declared types in .java source files that were processed. */,f9700:m323
24041,"private fun sameSignature(a: FirFunction, b: FirFunction): Boolean","{
    if (a is FirConstructor && b !is FirConstructor || a !is FirConstructor && b is FirConstructor) return false
    if (a.symbol.callableId.callableName != b.symbol.callableId.callableName) return false
    val aVararg = a.valueParameters.any { it.isVararg }
    val bVararg = b.valueParameters.any { it.isVararg }
    val aSize = a.valueParameters.size
    val bSize = b.valueParameters.size
    return aVararg && bVararg || aVararg && bSize >= (aSize - 1) || bVararg && aSize >= (bSize - 1) || aSize == bSize
}","/**

 * Lombok treat functions as having the same signature by arguments count only

 * Corresponding code in lombok - https://github.com/projectlombok/lombok/blob/v1.18.20/src/core/lombok/javac/handlers/JavacHandlerUtil.java#L752

 */",f9103:m135
47965,internal fun setupTransform(project: Project),"{
    project.dependencies.artifactTypes.maybeCreate(""tar.gz"").also { artifactType -> artifactType.attributes.setAttribute(attribute, KotlinNativeBundleArtifactsTypes.ARCHIVE) }
    project.dependencies.artifactTypes.maybeCreate(""zip"").also { artifactType -> artifactType.attributes.setAttribute(attribute, KotlinNativeBundleArtifactsTypes.ARCHIVE) }
    project.dependencies.registerTransform(UnzipTransformationAction::class.java) { transform ->
        transform.from.setAttribute(attribute, KotlinNativeBundleArtifactsTypes.ARCHIVE)
        transform.to.setAttribute(attribute, KotlinNativeBundleArtifactsTypes.DIRECTORY)
    }
}","/**

     * Sets up the necessary transformations for handling artifact types ""tar.gz"" and ""zip"" in the given project.

     *

     * @param project The project in which to set up the transformations.

     */",f15493:m81
57141,"@SinceKotlin(""1.1"") @kotlin.internal.InlineOnly public actual inline fun maxOf(a: Short, b: Short): Short","{
    return Math.max(a.toInt(), b.toInt()).toShort()
}","/**

 * Returns the greater of two values.

 */",f16966:m71
57016,public fun Reader.forEachLine(action: (String) -> Unit): Unit,useLines { it.forEach(action) },"/**

 * Iterates through each line of this reader, calls [action] for each line read

 * and closes the [Reader] when it's completed.

 *

 * @param action function to process file lines.

 */",f16950:m57
58694,public infix fun Long.until(to: Short): LongRange,"{
    return this .. (to.toLong() - 1).toLong()
}","/**

 * Returns a range from this value up to but excluding the specified [to] value.

 * 

 * If the [to] value is less than or equal to `this` value, then the returned range is empty.

 */",f17092:m2353
54797,public actual fun CharArray.toTypedArray(): Array<Char>,"{
    return Array(size) { index -> this[index] }
}","/**

 * Returns a *typed* object array containing all of the elements of this primitive array.

 */",f16713:m3849
63641,"@SinceKotlin(""1.1"") @kotlin.internal.InlineOnly public actual inline fun minOf(a: Byte, b: Byte): Byte","{
    return minOf(a.toInt(), b.toInt()).toByte()
}","/**

 * Returns the smaller of two values.

 */",f17406:m471
12274,fun List<List<String>>.mapFragmentIsCompilable(originalLibrary: CompilationWithPCH): List<Boolean>,"{
    val library: CompilationWithPCH = originalLibrary.copy(compilerArgs = originalLibrary.compilerArgs + ""-ferror-limit=0"")
    val indicesOfNonCompilable = mutableSetOf<Int>()
    val fragmentsToCheck = this.withIndex().toMutableList()
    withIndex(excludeDeclarationsFromPCH = true) { index ->
        val sourceFile = library.createTempSource()
        val translationUnit = parseTranslationUnit(index, sourceFile, library.compilerArgs, options = CXTranslationUnit_DetailedPreprocessingRecord)
        try {
            translationUnit.ensureNoCompileErrors()
            while (fragmentsToCheck.isNotEmpty()) {
                sourceFile.bufferedWriter().use { writer ->
                    writer.appendPreamble(library)
                    fragmentsToCheck.forEach { it.value.forEach {
                        assert(!it.contains('\n'))
                        writer.appendLine(it)
                    } }
                }
                clang_reparseTranslationUnit(translationUnit, 0, null, CXTranslationUnit_DetailedPreprocessingRecord)
                val errorLineNumbers = translationUnit.getErrorLineNumbers().toSet()
                var lastLineNumber = library.preambleLines.size
                fragmentsToCheck.retainAll {
                    val firstLineNumber = lastLineNumber + 1
                    lastLineNumber += it.value.size
                    (firstLineNumber .. lastLineNumber).any { it in errorLineNumbers }
                }
                if (fragmentsToCheck.isNotEmpty()) {
                    val firstFragment = fragmentsToCheck.removeAt(0)
                    indicesOfNonCompilable.add(firstFragment.index)
                }
            }
        } finally {
            clang_disposeTranslationUnit(translationUnit)
        }
    }
    return this.indices.map { it !in indicesOfNonCompilable }
}","/**

 * For each list of lines, checks if the code fragment composed from these lines is compilable against given library.

 */",f3631:m935
58485,"@SinceKotlin(""1.4"") @OptIn(kotlin.experimental.ExperimentalTypeInference::class) @OverloadResolutionByLambdaReturnType @kotlin.internal.InlineOnly public inline fun <K, V> Map<out K, V>.maxOf(selector: (Map.Entry<K, V>) -> Double): Double","{
    return entries.maxOf(selector)
}","/**

 * Returns the largest value among all values produced by [selector] function

 * applied to each entry in the map.

 * 

 * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.

 * 

 * @throws NoSuchElementException if the map is empty.

 */",f17089:m489
63263,"@SinceKotlin(""1.2"") public actual fun Short.toString(radix: Int): String",this.toInt().toString(radix),"/**

 * Returns a string representation of this [Short] value in the specified [radix].

 *

 * @throws IllegalArgumentException when [radix] is not a valid radix for number to string conversion.

 */",f17352:m213
57365,public actual operator fun BooleanArray.plus(elements: BooleanArray): BooleanArray,"{
    val thisSize = size
    val arraySize = elements.size
    val result = java.util.Arrays.copyOf(this, thisSize + arraySize)
    System.arraycopy(elements, 0, result, thisSize, arraySize)
    return result
}","/**

 * Returns an array containing all elements of the original array and then all elements of the given [elements] array.

 */",f16970:m3941
30909,fun <T> Sequence<T>.atMostOne(): T?,"{
    val iterator = iterator()
    if (!iterator.hasNext()) return null
    val single = iterator.next()
    if (iterator.hasNext()) {
        throw IllegalArgumentException(""Sequence has more than one element."")
    }
    return single
}","/**

 * [Sequence] variant of [org.jetbrains.kotlin.utils.atMostOne]

 *

 * So, when:

 * - there is no element then `null` will be returned

 * - there is a single element then the element will be returned

 * - there is more than one element then the error will be thrown

 * @see org.jetbrains.kotlin.utils.atMostOne

 */",f10791:m211
9237,"private fun IrBlockBuilder.nullableArgToStringType(argument: IrExpression, stringType: IrType, ifNull: IrExpression)","{
    val (firstExpression, secondExpression) = twoExpressionsForSubsequentUsages(argument)
    +irIfThenElse(stringType, condition = irEqeqeq(firstExpression, irNull()), thenPart = ifNull, elsePart = buildNonNullableArgToString(secondExpression), origin = null)
}","/** Builds snippet of type String:

     *      val arg = argument

     *      if (arg==null) ifNull else arg.toString()

     *  In case ""argument"" is IrGetValue => temporary val is omitted due to side effect absence

     */",f3332:m227
61006,private fun specialDoubleToULong(v: Double): ULong,"{
    require(v >= 2.0.pow(63))
    require(v < 2.0.pow(64))
    val bits = v.toBits().toULong()
    return (1uL shl 63) + ((bits and (1uL shl 52) - 1u) shl 11)
}","/** Creates an ULong value directly from mantissa bits of Double that is in range [2^63, 2^64). */",f17198:m559
54779,"@SinceKotlin(""1.4"") @Suppress(""ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS"") public actual fun DoubleArray.sort(fromIndex: Int = 0, toIndex: Int = size): Unit","{
    AbstractList.checkRangeIndexes(fromIndex, toIndex, size)
    val subarray = this.asDynamic().subarray(fromIndex, toIndex).unsafeCast<DoubleArray>()
    subarray.sort()
}","/**

 * Sorts a range in the array in-place.

 * 

 * @param fromIndex the start of the range (inclusive) to sort, 0 by default.

 * @param toIndex the end of the range (exclusive) to sort, size of this array by default.

 * 

 * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.

 * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].

 * 

 * @sample samples.collections.Arrays.Sorting.sortRangeOfArray

 */",f16713:m3483
48855,internal fun Project.registerKotlinPluginExtensions(),"{
    KotlinProjectSetupAction.extensionPoint.apply {
        register(project, AddNpmDependencyExtensionProjectSetupAction)
        register(project, RegisterBuildKotlinToolingMetadataTask)
        register(project, KotlinToolingDiagnosticsSetupAction)
        register(project, SyncLanguageSettingsWithKotlinExtensionSetupAction)
        register(project, UserDefinedAttributesSetupAction)
        register(project, CustomizeKotlinDependenciesSetupAction)
        register(project, AddKotlinPlatformIntegersSupportLibrary)
        register(project, SetupKotlinNativePlatformDependenciesForLegacyImport)
        if (isJvm || isMultiplatform) {
            register(project, ScriptingGradleSubpluginSetupAction)
        }
        if (isMultiplatform) {
            register(project, ApplyJavaBasePluginSetupAction)
            register(project, DeprecatedMppGradlePropertiesMigrationSetupAction)
            register(project, KotlinMultiplatformTargetPresetAction)
            register(project, KotlinMultiplatformSourceSetSetupAction)
            register(project, MultiplatformBuildStatsReportSetupAction)
            register(project, KotlinMetadataTargetSetupAction)
            register(project, KotlinArtifactsExtensionSetupAction)
            register(project, MultiplatformPublishingSetupAction)
            register(project, LanguageSettingsSetupAction)
            register(project, GlobalProjectStructureMetadataStorageSetupAction)
            register(project, IdeMultiplatformImportSetupAction)
            register(project, IdeResolveDependenciesTaskSetupAction)
            register(project, CInteropCommonizedCInteropApiElementsConfigurationsSetupAction)
            register(project, XcodeVersionSetupAction)
            register(project, AddBuildListenerForXCodeSetupAction)
            register(project, CreateFatFrameworksSetupAction)
            register(project, KotlinRegisterCompilationArchiveTasksExtension)
            register(project, IdeMultiplatformImportActionSetupAction)
            register(project, KotlinLLDBScriptSetupAction)
            register(project, ExcludeDefaultPlatformDependenciesFromKotlinNativeCompileTasks)
            register(project, SetupConsistentMetadataDependenciesResolution)
            register(project, RegisterMultiplatformResourcesPublicationExtensionAction)
            register(project, SetUpMultiplatformJvmResourcesPublicationAction)
            register(project, SetUpMultiplatformAndroidAssetsAndResourcesPublicationAction)
        }
    }
    KotlinTargetSideEffect.extensionPoint.apply {
        register(project, CreateDefaultCompilationsSideEffect)
        register(project, CreateTargetConfigurationsSideEffect)
        register(project, NativeForwardImplementationToApiElementsSideEffect)
        register(project, CreateArtifactsSideEffect)
        register(project, ConfigureBuildSideEffect)
        register(project, KotlinNativeConfigureBinariesSideEffect)
        register(project, CreateDefaultTestRunSideEffect)
        register(project, ConfigureFrameworkExportSideEffect)
        register(project, SetupCInteropApiElementsConfigurationSideEffect)
        register(project, SetupEmbedAndSignAppleFrameworkTaskSideEffect)
    }
    KotlinCompilationSideEffect.extensionPoint.apply {
        register(project, KotlinCreateSourcesJarTaskSideEffect)
        register(project, KotlinCreateResourcesTaskSideEffect)
        register(project, KotlinCreateLifecycleTasksSideEffect)
        register(project, KotlinCreateNativeCompileTasksSideEffect)
        register(project, KotlinCompilationProcessorSideEffect)
        register(project, KotlinCreateNativeCInteropTasksSideEffect)
        register(project, KotlinCreateCompilationArchivesTask)
        register(project, SetupKotlinNativePlatformDependenciesAndStdlib)
    }
    KotlinTargetArtifact.extensionPoint.apply {
        register(project, KotlinMetadataArtifact)
        register(project, KotlinLegacyCompatibilityMetadataArtifact)
        register(project, KotlinLegacyMetadataArtifact)
        register(project, KotlinJvmJarArtifact)
        register(project, KotlinJsKlibArtifact)
        register(project, KotlinNativeKlibArtifact)
        register(project, KotlinNativeHostSpecificMetadataArtifact)
    }
    KotlinGradleProjectChecker.extensionPoint.apply {
        register(project, CommonMainOrTestWithDependsOnChecker)
        register(project, DeprecatedKotlinNativeTargetsChecker)
        register(project, MissingNativeStdlibChecker)
        register(project, UnusedSourceSetsChecker)
        register(project, AndroidSourceSetLayoutV1SourceSetsNotFoundChecker)
        register(project, AndroidPluginWithoutAndroidTargetChecker)
        register(project, NoKotlinTargetsDeclaredChecker)
        register(project, DisabledCinteropCommonizationInHmppProjectChecker)
        register(project, DisabledNativeTargetsChecker)
        register(project, JsEnvironmentChecker)
        register(project, PreHmppDependenciesUsageChecker)
        register(project, ExperimentalTryNextUsageChecker)
        register(project, KotlinSourceSetTreeDependsOnMismatchChecker)
        register(project, PlatformSourceSetConventionsChecker)
        register(project, AndroidMainSourceSetConventionsChecker)
        register(project, IosSourceSetConventionChecker)
        register(project, KotlinTargetAlreadyDeclaredChecker)
        register(project, InternalGradlePropertiesUsageChecker)
        register(project, WasmSourceSetsNotFoundChecker)
        register(project, DuplicateSourceSetChecker)
        register(project, CInteropInputChecker)
        register(project, IncorrectCompileOnlyDependenciesChecker)
        register(project, GradleDeprecatedPropertyChecker)
        if (isMultiplatform) {
            register(project, KotlinMultiplatformAndroidGradlePluginCompatibilityChecker)
            register(project, MultipleSourceSetRootsInCompilationChecker)
        }
    }
}","/**

 * Active Extensions (using the [KotlinGradlePluginExtensionPoint] infrastructure) will be registered here by the Kotlin Gradle Plugin.

 */",f15697:m89
58586,"@SinceKotlin(""1.4"") @kotlin.internal.InlineOnly public inline fun LongRange.randomOrNull(): Long?","{
    return randomOrNull(Random)
}","/**

 * Returns a random element from this range, or `null` if this range is empty.

 */",f17092:m469
14986,public actual fun FloatArray.sort(): Unit,"{
    if (size > 1) sortArray(this, 0, size)
}","/**

 * Sorts the array in-place.

 * 

 * @sample samples.collections.Arrays.Sorting.sortArray

 */",f3831:m4645
40432,fun dynamicTest(@TestDataFile testDataFilePath: String): Collection<DynamicNode>,"{
    val testCaseId = TestCaseId.TestDataFile(getAbsoluteFile(testDataFilePath))
    return dynamicTestCase(testCaseId)
}","/**

     * Run JUnit dynamic test.

     *

     * This function should be called from a method annotated with [org.junit.jupiter.api.TestFactory].

     */",f12847:m121
48552,"@JvmOverloads fun test(buildTypes: Collection<NativeBuildType> = NativeBuildType.DEFAULT_BUILD_TYPES, configure: Action<TestExecutable>)",test(buildTypes) { configure.execute(this) },/** Creates a test executable with the default name prefix for each build type and configures it. */,f15652:m627
55411,"internal fun <CT> construct(constructorType: dynamic, resultType: dynamic, vararg args: Any?): Any","{
    return js(""Reflect"").construct(constructorType, args, resultType)
}","/**

 * @param CT is return type of calling constructor (uses in DCE)

 */",f16746:m15
10445,fun input(),if (direction == Direction.FORWARD) v1 else v2,"/**

   * Returns the current input variable

   */",f3476:m685
43646,fun BuildOptions.withBundledKotlinNative(),copy(nativeOptions = nativeOptions.copy(version = null)),"/**

 * This wrapper erases k/n version from passing parameters,

 * because we should use Kotlin Native bundled in KGP instead of which built from current branch.

 *

 * In this case we will use k/n version, which declared in KGP.

 *

 * The most common case is when we override local konan dir for some reason.

 */",f13470:m615
54708,public actual fun CharArray.copyOf(): CharArray,"{
    return withType(""CharArray"", this.asDynamic().slice())
}","/**

 * Returns new array which is a copy of the original array.

 * 

 * @sample samples.collections.Arrays.CopyOfOperations.copyOf

 */",f16713:m1799
14985,public actual fun DoubleArray.sort(): Unit,"{
    if (size > 1) sortArray(this, 0, size)
}","/**

 * Sorts the array in-place.

 * 

 * @sample samples.collections.Arrays.Sorting.sortArray

 */",f3831:m4627
63565,public actual operator fun ShortArray.plus(elements: ShortArray): ShortArray,"{
    val thisSize = size
    val arraySize = elements.size
    val result = copyOfUninitializedElements(thisSize + arraySize)
    elements.copyInto(result, thisSize)
    return result
}","/**

 * Returns an array containing all elements of the original array and then all elements of the given [elements] array.

 */",f17396:m4491
7611,"fun artifact(name: String, friend: Boolean)","artifact(project, name, friend)",/** Artifact in the current project by name */,f3130:m157
14442,@InternalForKotlinNative public fun Any.collectReferenceFieldValues(): List<Any>,"{
    return when {
        this is Array<*> -> this.filterNotNull()
        else -> (0 until getObjectReferenceFieldsCount(this@collectReferenceFieldValues)).mapNotNull { getObjectReferenceFieldByIndex(this@collectReferenceFieldValues, it) }
    }
}","/**

 * Returns [List] of non-null reference fields of the object.

 *

 * This function is intended to be used for testing and debugging purposes.

 * - It heavily relies on internal ABI details. No compatibility guarantees on exact list contents are provided.

 * - Order and representation of object's fields are subject to change.

 * - Performance characteristics of the implementation

 *

 * Limitations:

 *  - Primitives (unboxed [Int], [Double], [Float], etc.) are not included in the result.

 *  - Non-boxed value classes over primitives are not included in the result.

 *  - Non-boxed value classes over references are included in the result as the underlying reference type.

 *  - Synthetic fields (e.g. special fields for delegation) are included in the result.

 *  - There is no way to find which reference in the result corresponds to which field.

 *

 *  For `Array<T>` list of all its non-null elements is returned.

 *  For primitive arrays ([IntArray], [DoubleArray], [FloatArray], etc.) empty list is returned.

 */",f3785:m59
34354,override fun testCaseDidFinish(testCase: XCTestCase),"{
    val duration = testCase.getTestDuration()
    if (testCase.testRun?.hasSucceeded == true) {
        if (testCase is XCTestCaseWrapper) {
            val test = testCase.testCase
            if (!test.ignored) sendToListeners { pass(test, duration.inWholeMilliseconds) }
        }
    }
}","/**

     * Test case finish notification.

     * Both successful and failed executions get this notification.

     */",f11292:m127
20187,public fun KtClassOrObjectSymbol.isDirectSubClassOf(superClass: KtClassOrObjectSymbol): Boolean,"withValidityAssertion { analysisSession.symbolDeclarationOverridesProvider.isDirectSubClassOf(this, superClass) }","/**

     * Checks if [this] class has [superClass] listed as its direct superclass.

     *

     * N.B. The class is not considered to be a direct subclass of itself, so `myClass.isDirectSubClassOf(myClass)` is always `false`.

     */",f5787:m119
51955,open fun <T> runInCoroutineContext(block: suspend () -> T): T,"@Suppress(""DEPRECATION_ERROR"") internalScriptingRunSuspend { block() }","/**

     * The overridable wrapper for executing evaluation in a desired coroutines context

     */",f16418:m61
57997,"@SinceKotlin(""1.6"") @WasExperimental(ExperimentalStdlibApi::class, ExperimentalUnsignedTypes::class) @kotlin.internal.InlineOnly public inline fun UInt.rotateRight(bitCount: Int): UInt",toInt().rotateRight(bitCount).toUInt(),"/**

 * Rotates the binary representation of this [UInt] number right by the specified [bitCount] number of bits.

 * The least significant bits pushed out from the right side reenter the number as the most significant bits on the left side.

 *

 * Rotating the number right by a negative bit count is the same as rotating it left by the negated bit count:

 * `number.rotateRight(-n) == number.rotateLeft(n)`

 *

 * Rotating by a multiple of [UInt.SIZE_BITS] (32) returns the same number, or more generally

 * `number.rotateRight(n) == number.rotateRight(n % 32)`

 */",f17056:m133
40864,"fun getSimulatorDevices(json: String): Map<String, List<SimulatorDeviceDescriptor>>","gson.fromJson(json, ListDevicesReport::class.java).devices","/**

 * Returns map of simulator devices from the json input

 */",f12940:m233
58961,public fun String.slice(indices: IntRange): String,"{
    if (indices.isEmpty()) return """"
    return substring(indices)
}","/**

 * Returns a string containing characters of the original string at the specified range of [indices].

 */",f17097:m1043
56544,"@kotlin.internal.InlineOnly public inline fun Timer.schedule(time: Date, crossinline action: TimerTask.() -> Unit): TimerTask","{
    val task = timerTask(action)
    schedule(task, time)
    return task
}","/**

 * Schedules an [action] to be executed at the specified [time].

 */",f16894:m45
14890,"@SinceKotlin(""1.3"") @Suppress(""ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS"") public actual fun <T> Array<out T>.copyInto(destination: Array<T>, destinationOffset: Int = 0, startIndex: Int = 0, endIndex: Int = size): Array<T>","{
    @Suppress(""UNCHECKED_CAST"") arrayCopy(this as Array<Any?>, startIndex, destination as Array<Any?>, destinationOffset, endIndex - startIndex)
    return destination
}","/**

 * Copies this array or its subrange into the [destination] array and returns that array.

 * 

 * It's allowed to pass the same array in the [destination] and even specify the subrange so that it overlaps with the destination range.

 * 

 * @param destination the array to copy to.

 * @param destinationOffset the position in the [destination] array to copy to, 0 by default.

 * @param startIndex the beginning (inclusive) of the subrange to copy, 0 by default.

 * @param endIndex the end (exclusive) of the subrange to copy, size of this array by default.

 * 

 * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of this array indices or when `startIndex > endIndex`.

 * @throws IndexOutOfBoundsException when the subrange doesn't fit into the [destination] array starting at the specified [destinationOffset],

 * or when that index is out of the [destination] array indices range.

 * 

 * @return the [destination] array.

 */",f3831:m2197
58636,"@Deprecated(""This `contains` operation mixing integer and floating point arguments has ambiguous semantics and is going to be removed."") @DeprecatedSinceKotlin(warningSince = ""1.3"", errorSince = ""1.4"", hiddenSince = ""1.5"") @kotlin.jvm.JvmName(""doubleRangeContains"") public operator fun ClosedRange<Double>.contains(value: Short): Boolean","{
    return contains(value.toDouble())
}","/**

 * Checks if the specified [value] belongs to this range.

 */",f17092:m1399
16397,"private inline fun <A: KtCallableDeclaration> forEachCallableProvider(packageFqName: FqName, name: Name, getCallables: (CallableId) -> Collection<A>, provide: LLFirKotlinSymbolProvider.(CallableId, Collection<A>) -> Unit)","{
    if (!symbolNamesProvider.mayHaveTopLevelCallable(packageFqName, name)) return
    val callableId = CallableId(packageFqName, name)
    getCallables(callableId).groupBy { getModule(it) }.forEach { (ktModule, callables) ->
        val provider = providersByKtModule[ktModule] ?: return@forEach
        provider.provide(callableId, callables)
    }
}","/**

     * Calls [provide] on those providers which can contribute a callable of the given name.

     */",f4112:m193
56068,"@SinceKotlin(""1.1"") @kotlin.internal.InlineOnly public inline operator fun <K, V> MutableMap<K, V>.minusAssign(keys: Array<out K>)","{
    this.keys.removeAll(keys)
}","/**

 * Removes all entries the keys of which are contained in the given [keys] array from this mutable map.

 */",f16823:m1575
56519,"@SinceKotlin(""1.4"") @kotlin.internal.InlineOnly public actual inline fun StringBuilder.appendLine(value: Byte): StringBuilder",append(value.toInt()).appendLine(),"/** Appends [value] to this [StringBuilder], followed by a line feed character (`\n`). */",f16890:m437
27664,"@Test fun testCleanupWithDynamicNonIncremental(@TempDir baseSourcesDir: File, @TempDir outputDir: File, @TempDir incrementalCacheDir: File, @TempDir projectBaseDirFirstRun: File, @TempDir projectBaseDirSecondRun: File)","{
    val sourcesDir = baseSourcesDir.resolve(""test"").also { base ->
        base.mkdir()
        listOf(""User.java"", ""Address.java"", ""Observable.java"").map { TEST_DATA_DIR.resolve(it).copyTo(base.resolve(it)) }
    }
    val options = KaptOptions.Builder().apply {
        projectBaseDir = projectBaseDirFirstRun
        javaSourceRoots.add(sourcesDir)
        sourcesOutputDir = outputDir
        classesOutputDir = outputDir
        stubsOutputDir = outputDir
        incrementalDataOutputDir = outputDir
        incrementalCache = incrementalCacheDir
    }.build()
    val logger = WriterBackedKaptLogger(isVerbose = true)
    KaptContext(options, true, logger).use { it.doAnnotationProcessing(options.collectJavaSourceFiles(SourcesToReprocess.FullRebuild), listOf(DynamicProcessor(RuntimeProcType.NON_INCREMENTAL).toDynamic())) }
    val optionsForSecondRun = KaptOptions.Builder().apply {
        projectBaseDir = projectBaseDirSecondRun
        javaSourceRoots.add(sourcesDir)
        sourcesOutputDir = outputDir
        classesOutputDir = outputDir
        stubsOutputDir = outputDir
        incrementalDataOutputDir = outputDir
        incrementalCache = incrementalCacheDir
        changedFiles.add(sourcesDir.resolve(""User.java""))
        flags.add(KaptFlag.INCREMENTAL_APT)
    }.build()
    KaptContext(optionsForSecondRun, true, logger).use {
        assertEquals(SourcesToReprocess.FullRebuild, it.sourcesToReprocess)
        assertEquals(listOf(outputDir), outputDir.walkTopDown().toList())
        it.doAnnotationProcessing(optionsForSecondRun.collectJavaSourceFiles(it.sourcesToReprocess), listOf(DynamicProcessor(RuntimeProcType.NON_INCREMENTAL).toDynamic()))
    }
    assertTrue(outputDir.resolve(""test/UserGenerated.java"").exists())
}",/** Regression test for KT-31322. */,f9729:m319
26977,"private fun findDisplayOffset(expression: IrExpression, sourceRangeInfo: SourceRangeInfo, source: String): Int","{
    return when (expression) {
        is IrMemberAccessExpression<*> -> memberAccessOffset(expression, sourceRangeInfo, source)
        is IrTypeOperatorCall -> typeOperatorOffset(expression, sourceRangeInfo, source)
        else -> 0
    }
}","/**

 * Responsible for determining the diagram display offset of the expression

 * beginning from the startOffset of the expression.

 *

 * Equality:

 * ```

 * number == 42

 * | <- startOffset

 *        | <- display offset: 7

 * ```

 *

 * Arithmetic:

 * ```

 * i + 2

 * | <- startOffset

 *   | <- display offset: 2

 * ```

 *

 * Infix:

 * ```

 * 1 shl 2

 * | <- startOffset

 *   | <- display offset: 2

 * ```

 *

 * Standard:

 * ```

 * 1.shl(2)

 *   | <- startOffset

 *   | <- display offset: 0

 * ```

 */",f9507:m239
50107,"fun runJsCompilerAsync(args: K2JSCompilerArguments, environment: GradleCompilerEnvironment, taskOutputsBackup: TaskOutputsBackup?): WorkQueue?","{
    return runCompilerAsync(KotlinCompilerClass.JS, args, environment, taskOutputsBackup)
}","/**

     * Compiler might be executed asynchronously. Do not do anything requiring end of compilation after this function is called.

     * @see [GradleKotlinCompilerWork]

     */",f16053:m267
14901,public actual fun ShortArray.copyOf(): ShortArray,"{
    return this.copyOfUninitializedElements(size)
}","/**

 * Returns new array which is a copy of the original array.

 * 

 * @sample samples.collections.Arrays.CopyOfOperations.copyOf

 */",f3831:m2649
58513,"@SinceKotlin(""1.7"") public fun UIntProgression.first(): UInt","{
    if (isEmpty()) throw NoSuchElementException(""Progression $this is empty."")
    return this.first
}","/**

 * Returns the first element.

 * 

 * @throws NoSuchElementException if the progression is empty.

 */",f17090:m37
58786,public fun <T> Sequence<T>.toList(): List<T>,"{
    val it = iterator()
    if (!it.hasNext()) return emptyList()
    val element = it.next()
    if (!it.hasNext()) return listOf(element)
    val dst = ArrayList<T>()
    dst.add(element)
    while (it.hasNext()) dst.add(it.next())
    return dst
}","/**

 * Returns a [List] containing all elements.

 *

 * The operation is _terminal_.

 */",f17096:m1611
58497,"@SinceKotlin(""1.4"") @OptIn(kotlin.experimental.ExperimentalTypeInference::class) @OverloadResolutionByLambdaReturnType @kotlin.internal.InlineOnly public inline fun <K, V> Map<out K, V>.minOf(selector: (Map.Entry<K, V>) -> Double): Double","{
    return entries.minOf(selector)
}","/**

 * Returns the smallest value among all values produced by [selector] function

 * applied to each entry in the map.

 * 

 * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.

 * 

 * @throws NoSuchElementException if the map is empty.

 */",f17089:m809
50921,"fun assertNotContains(expected: String, actual: String, ignoreCase: Boolean = false)","{
    if (actual.contains(expected, ignoreCase = ignoreCase)) {
        fail(""expected:<string does not contain '$expected' (ignoreCase:$ignoreCase)> but was:<$actual>"")
    }
}",/** Assert that [actual] does _not_ contain substring [expected] */,f16189:m285
57349,public actual operator fun <T> Array<T>.plus(elements: Collection<T>): Array<T>,"{
    var index = size
    val result = java.util.Arrays.copyOf(this, index + elements.size)
    for (element in elements) result[index++] = element
    return result
}","/**

 * Returns an array containing all elements of the original array and then all elements of the given [elements] collection.

 */",f16970:m3607
58706,public fun Short.coerceAtMost(maximumValue: Short): Short,"{
    return if (this > maximumValue) maximumValue else this
}","/**

 * Ensures that this value is not greater than the specified [maximumValue].

 * 

 * @return this value if it's less than or equal to the [maximumValue] or the [maximumValue] otherwise.

 * 

 * @sample samples.comparisons.ComparableOps.coerceAtMost

 */",f17092:m2605
59083,public fun CharSequence.asIterable(): Iterable<Char>,"{
    if (this is String && isEmpty()) return emptyList()
    return Iterable { this.iterator() }
}","/**

 * Creates an [Iterable] instance that wraps the original char sequence returning its characters when being iterated.

 */",f17097:m4941
48406,internal fun Task.doNotTrackStateCompat(because: String),"{
    if (GradleVersion.current() < GradleVersion.version(""7.3"")) {
        logger.info(""Not UP-TO-DATE because $because"")
        outputs.upToDateWhen { false }
    } else {
        doNotTrackState(because)
    }
}","/**

 * According to [Gradle 7.3 release notes](https://docs.gradle.org/7.3/release-notes.html#allow-plugin-authors-to-declare-tasks-as-untracked)

 * [Task.doNotTrackState] is a better replacement for `Task.outputs.upToDateWhen { false }`

 */",f15623:m127
56498,"@SinceKotlin(""1.2"") public fun String.toBigDecimalOrNull(mathContext: java.math.MathContext): java.math.BigDecimal?",screenFloatValue(this) { it.toBigDecimal(mathContext) },"/**

 * Parses the string as a [java.math.BigDecimal] number and returns the result

 * or `null` if the string is not a valid representation of a number.

 *

 * @param mathContext specifies the precision and the rounding mode.

 * @throws ArithmeticException if the rounding is needed, but the rounding mode is [java.math.RoundingMode.UNNECESSARY].

 */",f16885:m461
64873,"@PublishedApi internal actual fun <T: Throwable> checkResultIsFailure(exceptionClass: KClass<T>, message: String?, blockResult: Result<Unit>): T","{
    blockResult.fold(onSuccess = {
        val msg = messagePrefix(message)
        asserter.fail(msg + ""Expected an exception of ${exceptionClass.java} to be thrown, but was completed successfully."")
    }, onFailure = { e ->
        if (exceptionClass.java.isInstance(e)) {
            @Suppress(""UNCHECKED_CAST"") return e as T
        }
        asserter.fail(messagePrefix(message) + ""Expected an exception of ${exceptionClass.java} to be thrown, but was $e"", e)
    })
}",/** Asserts that a [blockResult] is a failure with the specific exception type being thrown. */,f17532:m31
58538,"@SinceKotlin(""1.5"") @WasExperimental(ExperimentalUnsignedTypes::class) public infix fun UInt.downTo(to: UInt): UIntProgression","{
    return UIntProgression.fromClosedRange(this, to, -1)
}","/**

 * Returns a progression from this value down to the specified [to] value with the step -1.

 * 

 * The [to] value should be less than or equal to `this` value.

 * If the [to] value is greater than `this` value the returned progression is empty.

 */",f17090:m585
64219,@kotlin.internal.IntrinsicConstEvaluation public inline operator fun compareTo(other: Double): Int,this.toDouble().compareTo(other),"/**

     * Compares this value with the specified value for order.

     * Returns zero if this value is equal to the specified other value, a negative number if it's less than other,

     * or a positive number if it's greater than other.

     */",f17455:m2921
27537,"override fun inferBinaryName(location: JavaFileManager.Location?, file: JavaFileObject): String?","super.inferBinaryName(location, unwrapObject(file) as JavaFileObject)",/** javac does not play nice with wrapped file objects in this method; so we unwrap */,f9703:m171
36244,fun `test sample 3 - with dependencies`(),"{
    fun InlineSourceBuilder.ModuleBuilder.commonDependencies() {
        source(""""""
        
                        class X
        
                        typealias A = X
        
                        """""".trimIndent(), ""commonDependencies.kt"")
    }
    fun InlineSourceBuilder.ModuleBuilder.targetDependencies() {
        dependency { commonDependencies() }
        source(""""""
        
                        class Y
        
                        typealias B = Y
        
                        typealias C = A
        
                        """""".trimIndent(), ""targetDependencies.kt"")
    }
    val root = createCirTreeRoot {
        dependency { commonDependencies() }
        dependency { targetDependencies() }
        source(""""""
        
                        class Z
        
                        typealias D = C
        
                        typealias E = Z
        
                        """""".trimIndent())
    }
    val classifiers = CirKnownClassifiers(classifierIndices = TargetDependent(target to CirClassifierIndex(root)), commonDependencies = createCirProvidedClassifiers { commonDependencies() }, targetDependencies = TargetDependent(target to createCirProvidedClassifiers { targetDependencies() }), commonizedNodes = CirCommonizedClassifierNodes.default())
    val idOfX = CirEntityId.create(""X"")
    val idOfY = CirEntityId.create(""Y"")
    val idOfZ = CirEntityId.create(""Z"")
    val idOfA = CirEntityId.create(""A"")
    val idOfB = CirEntityId.create(""B"")
    val idOfC = CirEntityId.create(""C"")
    val idOfD = CirEntityId.create(""D"")
    val idOfE = CirEntityId.create(""E"")
    val typeX = mockClassType(""X"")
    val typeY = mockClassType(""Y"")
    val typeZ = mockClassType(""Z"")
    val typeA = mockTAType(""A"") { typeX }
    val typeB = mockTAType(""B"") { typeY }
    val typeC = mockTAType(""C"") { typeA }
    val typeD = mockTAType(""D"") { typeC }
    val typeE = mockTAType(""E"") { typeZ }
    assertEquals(CirTypeDistance(1), typeDistance(classifiers, target, typeA, idOfX))
    assertEquals(CirTypeDistance(-1), typeDistance(classifiers, target, typeX, idOfA))
    assertEquals(CirTypeDistance(1), typeDistance(classifiers, target, typeB, idOfY))
    assertEquals(CirTypeDistance(-1), typeDistance(classifiers, target, typeY, idOfB))
    assertEquals(CirTypeDistance(2), typeDistance(classifiers, target, typeC, idOfX))
    assertEquals(CirTypeDistance(-2), typeDistance(classifiers, target, typeX, idOfC))
    assertEquals(CirTypeDistance(3), typeDistance(classifiers, target, typeD, idOfX))
    assertEquals(CirTypeDistance(-3), typeDistance(classifiers, target, typeX, idOfD))
    assertEquals(CirTypeDistance(2), typeDistance(classifiers, target, typeD, idOfA))
    assertEquals(CirTypeDistance(-2), typeDistance(classifiers, target, typeA, idOfD))
    assertEquals(CirTypeDistance(1), typeDistance(classifiers, target, typeE, idOfZ))
    assertEquals(CirTypeDistance(-1), typeDistance(classifiers, target, typeZ, idOfE))
}","/**

     * Type Alias Chains:

     * E -> Z

     * B -> Y

     * D -> C -> A -> X

     */",f11556:m375
50046,"fun getForSplitPaths(bottom: List<File>, top: List<File>): ClassLoader","{
    return if (bottom.isEmpty() || top.isEmpty()) {
        getForClassPath(bottom + top)
    } else {
        val key = makeKey(bottom + top)
        cache.getOrPut(key) {
            val parent = getForClassPath(top)
            makeClassLoader(makeKey(bottom), parent)
        }
    }
}","/**

     * Gets or creates [ClassLoader] from [bottom] + [top] files.

     * When creating new [ClassLoader] it tries to get [top] from cache first and then create new ClassLoader from [bottom] files,

     * providing [top] [ClassLoader] as parent.

     * Useful when you have internal and external artifacts and internal ones can be references from other internal artefacts only.

     * So you can safely cache [ClassLoader] from external artifacts and use it for internal ones.

     */",f16034:m97
68290,"fun getQualifiedExpressionTypeInfo(expression: KtQualifiedExpression, context: ExpressionTypingContext): KotlinTypeInfo","{
    val currentContext = context.replaceExpectedType(NO_EXPECTED_TYPE).replaceContextDependency(INDEPENDENT)
    val trace = currentContext.trace
    val elementChain = expression.elementChain(currentContext)
    val firstReceiver = elementChain.first().receiver
    var receiverTypeInfo = when (trace.get(BindingContext.QUALIFIER, firstReceiver)) {
        null -> expressionTypingServices.getTypeInfo(firstReceiver, currentContext)
        else -> KotlinTypeInfo(null, currentContext.dataFlowInfo)
    }
    var resultTypeInfo = receiverTypeInfo
    var allUnsafe = true
    var branchPointDataFlowInfo = receiverTypeInfo.dataFlowInfo
    for (element in elementChain) {
        val receiverType = receiverTypeInfo.type ?: ErrorUtils.createErrorType(ErrorTypeKind.ERROR_RECEIVER_TYPE, when (val receiver = element.receiver) {
            is KtNameReferenceExpression -> receiver.getReferencedName()
            else -> receiver.text
        })
        val receiver = trace.get(BindingContext.QUALIFIER, element.receiver) ?: ExpressionReceiver.create(element.receiver, receiverType, trace.bindingContext)
        val qualifiedExpression = element.qualified
        val lastStage = qualifiedExpression === expression
        val contextForSelector = (if (lastStage) context else currentContext).replaceDataFlowInfo(if (receiver is ReceiverValue && TypeUtils.isNullableType(receiver.type) && !element.safe) {
            branchPointDataFlowInfo
        } else {
            receiverTypeInfo.dataFlowInfo
        })
        val selectorTypeInfo = getSafeOrUnsafeSelectorTypeInfo(receiver, element, contextForSelector)
        allUnsafe = allUnsafe && !element.safe
        if (allUnsafe) {
            branchPointDataFlowInfo = selectorTypeInfo.dataFlowInfo
        }
        resultTypeInfo = checkSelectorTypeInfo(qualifiedExpression, selectorTypeInfo, contextForSelector).replaceDataFlowInfo(branchPointDataFlowInfo)
        if (!lastStage) {
            recordResultTypeInfo(qualifiedExpression, resultTypeInfo, contextForSelector)
        }
        receiverTypeInfo = selectorTypeInfo
    }
    return resultTypeInfo
}","/**

     * Visits a qualified expression like x.y or x?.z controlling data flow information changes.



     * @return qualified expression type together with data flow information

     */",f19307:m861
58056,@kotlin.internal.InlineOnly public inline infix fun or(other: UShort): UShort,UShort(this.data or other.data),/** Performs a bitwise OR operation between the two values. */,f17058:m507
58516,"@SinceKotlin(""1.7"") public fun ULongProgression.firstOrNull(): ULong?","{
    return if (isEmpty()) null else this.first
}","/**

 * Returns the first element, or `null` if the progression is empty.

 */",f17090:m101
48520,fun getFramework(buildType: String): Framework,"getFramework("""", buildType)",/** Returns an Objective-C framework with the empty name prefix and the given build type. Throws an exception if there is no such binary.*/,f15652:m257
56476,"@SinceKotlin(""1.1"") @kotlin.internal.InlineOnly public actual inline fun Int.toString(radix: Int): String","java.lang.Integer.toString(this, checkRadix(radix))","/**

 * Returns a string representation of this [Int] value in the specified [radix].

 *

 * @throws IllegalArgumentException when [radix] is not a valid radix for number to string conversion.

 */",f16885:m59
40430,fun runTest(@TestDataFile testDataFilePath: String),"{
    val absoluteTestFile = getAbsoluteFile(testDataFilePath)
    val testCaseId = TestCaseId.TestDataFile(absoluteTestFile)
    try {
        runTestCase(testCaseId)
    } catch (e: CompilationToolException) {
        if (testRunSettings.isIgnoredTarget(absoluteTestFile)) println(""There was an expected failure: CompilationToolException: ${e.reason}"") else fail { e.reason }
    }
}","/**

     * Run JUnit test.

     *

     * This function should be called from a method annotated with [org.junit.jupiter.api.Test].

     */",f12847:m63
56018,"@kotlin.internal.InlineOnly public inline fun <@kotlin.internal.OnlyInputTypes K> Map<out K, *>.containsKey(key: K): Boolean","@Suppress(""UNCHECKED_CAST"") (this as Map<K, *>).containsKey(key)","/**

 * Returns `true` if the map contains the specified [key].

 *

 * Allows to overcome type-safety restriction of `containsKey` that requires to pass a key of type `K`.

 */",f16823:m539
14845,"@SinceKotlin(""1.4"") public actual infix fun <T> Array<out T>?.contentEquals(other: Array<out T>?): Boolean","{
    if (this === other) return true
    if (this === null || other === null) return false
    if (size != other.size) return false
    for (i in indices) {
        if (this[i] != other[i]) return false
    }
    return true
}","/**

 * Checks if the two specified arrays are *structurally* equal to one another.

 * 

 * Two arrays are considered structurally equal if they have the same size, and elements at corresponding indices are equal.

 * Elements are compared for equality using the [equals][Any.equals] function.

 * For floating point numbers, this means `NaN` is equal to itself and `-0.0` is not equal to `0.0`.

 * 

 * The arrays are also considered structurally equal if both are `null`.

 * 

 * If the arrays contain nested arrays, use [contentDeepEquals] to recursively compare their elements.

 * 

 * @param other the array to compare with this array.

 * @return `true` if the two arrays are structurally equal, `false` otherwise.

 * 

 * @sample samples.collections.Arrays.ContentOperations.arrayContentEquals

 */",f3831:m975
24128,"fun getIfAnnotated(annotated: Annotated, config: LombokConfig): T?","annotated.annotations.findAnnotation(annotationName)?.let { annotation -> extract(annotation, config) }","/**

     * If element is annotated, get from it or config or default

     */",f9118:m81
20154,public fun KtDoubleColonExpression.getReceiverKtType(): KtType?,withValidityAssertion { analysisSession.typeProvider.getReceiverTypeForDoubleColonExpression(this) },"/**

     * Resolve [KtDoubleColonExpression] and return [KtType] of its receiver.

     *

     * Return `null` if the resolution fails or the resolved callable reference is not a reflection type.

     */",f5780:m209
1325,suspend fun listenForMessages(receiveMessage: (String) -> Boolean),"{
    val session = webSocketSession ?: error(""Session closed"")
    do {
        val message = when (val frame = session.incoming.receive()) {
            is Frame.Text -> frame.readText()
            else -> error(""Unexpected frame kind: $frame"")
        }
        logger.finer { ""Received message:\n${prettyPrintJson(message)}"" }
    } while (!receiveMessage(message))
}","/**

     * Starts a loop that waits for incoming Chrome DevTools Protocol messages and invokes [receiveMessage] when one is received.

     * The loop stops as soon as at least one message is received *and* [receiveMessage] returns `true`.

     */",f337:m373
63491,public actual fun <T> Array<T>.copyOf(): Array<T>,"{
    return this.copyOfUninitializedElements(size)
}","/**

 * Returns new array which is a copy of the original array.

 * 

 * @sample samples.collections.Arrays.CopyOfOperations.copyOf

 */",f17396:m2665
58876,"@SinceKotlin(""1.4"") @OptIn(kotlin.experimental.ExperimentalTypeInference::class) @OverloadResolutionByLambdaReturnType @kotlin.jvm.JvmName(""sumOfInt"") @kotlin.internal.InlineOnly public inline fun <T> Sequence<T>.sumOf(selector: (T) -> Int): Int","{
    var sum: Int = 0.toInt()
    for (element in this) {
        sum += selector(element)
    }
    return sum
}","/**

 * Returns the sum of all values produced by [selector] function applied to each element in the sequence.

 *

 * The operation is _terminal_.

 */",f17096:m4991
55144,"@SinceKotlin(""1.1"") @kotlin.internal.IntrinsicConstEvaluation public inline operator fun rem(other: Double): Double",this.toDouble().rem(other),"/**

     * Calculates the remainder of truncating division of this value (dividend) by the other value (divisor).

     *

     * The result is either zero or has the same sign as the _dividend_ and has the absolute value less than the absolute value of the divisor.

     */",f16727:m2849
58821,public inline fun <T> Sequence<T>.forEach(action: (T) -> Unit): Unit,"{
    for (element in this) action(element)
}","/**

 * Performs the given [action] on each element.

 *

 * The operation is _terminal_.

 */",f17096:m2621
56507,"@SinceKotlin(""1.4"") @kotlin.internal.InlineOnly public actual inline fun StringBuilder.setRange(startIndex: Int, endIndex: Int, value: String): StringBuilder","this.replace(startIndex, endIndex, value)","/**

 * Replaces characters in the specified range of this string builder with characters in the specified string [value] and returns this instance.

 *

 * @param startIndex the beginning (inclusive) of the range to replace.

 * @param endIndex the end (exclusive) of the range to replace.

 * @param value the string to replace with.

 *

 * @throws IndexOutOfBoundsException or [IllegalArgumentException] if [startIndex] is less than zero, greater than the length of this string builder, or `startIndex > endIndex`.

 */",f16890:m149
10474,fun chainTest(n: Int),"{
    val planner = Planner()
    val variables = (0 .. n).map { Variable(""v$it"") }.toList()
    var first = variables.first()
    var last = variables.last()
    variables.windowed(2) { (v1, v2) -> planner.add(EqualityConstraint(v1, v2, Strength.REQUIRED)) }
    planner.add(StayConstraint(last, Strength.STRONG_DEFAULT))
    val edit = EditConstraint(first, Strength.PREFERRED)
    planner.add(edit)
    val edits = OrderedCollection<Constraint>()
    edits.add(edit)
    val plan = planner.extractPlanFromConstraints(edits)
    for (i in 0 until 100) {
        first.value = i
        plan.execute()
        if (last.value != i) alert(""Chain test failed."")
    }
}","/**

   * This is the standard DeltaBlue benchmark. A long chain of equality

   * constraints is constructed with a stay constraint on one end. An

   * edit constraint is then added to the opposite end and the time is

   * measured for adding and removing this constraint, and extracting

   * and executing a constraint satisfaction plan. There are two cases.

   * In case 1, the added constraint is stronger than the stay

   * constraint and values must propagate down the entire length of the

   * chain. In case 2, the added constraint is weaker than the stay

   * constraint so it cannot be accomodated. The cost in this case is,

   * of course, very low. Typical situations lie somewhere between these

   * two extremes.

   */",f3476:m1445
54824,"@SinceKotlin(""1.1"") @kotlin.internal.InlineOnly public actual inline fun minOf(a: Float, b: Float): Float","{
    return JsMath.min(a, b)
}","/**

 * Returns the smaller of two values.

 * 

 * If either value is `NaN`, returns `NaN`.

 */",f16714:m545
14875,"@Deprecated(""Use Kotlin compiler 1.4 to avoid deprecation warning."") @SinceKotlin(""1.1"") @DeprecatedSinceKotlin(hiddenSince = ""1.4"") public fun IntArray.contentToString(): String","{
    return this.contentToString()
}","/**

 * Returns a string representation of the contents of the specified array as if it is [List].

 * 

 * @sample samples.collections.Arrays.ContentOperations.contentToString

 */",f3831:m1873
56615,"@kotlin.internal.InlineOnly @SinceKotlin(""1.2"") public actual inline fun <T> MutableList<T>.shuffle()","{
    java.util.Collections.shuffle(this)
}","/**

 * Randomly shuffles elements in this mutable list.

 */",f16918:m113
55868,"@SinceKotlin(""1.4"") public fun <T> Sequence<T>.shuffled(random: Random): Sequence<T>","sequence<T> {
    val buffer = toMutableList()
    while (buffer.isNotEmpty()) {
        val j = random.nextInt(buffer.size)
        val last = buffer.removeLast()
        val value = if (j < buffer.size) buffer.set(j, last) else last
        yield(value)
    }
}","/**

 * Returns a sequence that yields elements of this sequence randomly shuffled

 * using the specified [random] instance as the source of randomness.

 *

 * Note that every iteration of the sequence returns elements in a different order.

 *

 * The operation is _intermediate_ and _stateful_.

 */",f16815:m259
56963,"@SinceKotlin(""1.3"") @InlineOnly public actual inline fun <T> (suspend () -> T).startCoroutineUninterceptedOrReturn(completion: Continuation<T>): Any?","if (this !is BaseContinuationImpl) wrapWithContinuationImpl(completion) else (this as Function1<Continuation<T>, Any?>).invoke(completion)","/**

 * Starts an unintercepted coroutine without a receiver and with result type [T] and executes it until its first suspension.

 * Returns the result of the coroutine or throws its exception if it does not suspend or [COROUTINE_SUSPENDED] if it suspends.

 * In the latter case, the [completion] continuation is invoked when the coroutine completes with a result or an exception.

 *

 * The coroutine is started directly in the invoker's thread without going through the [ContinuationInterceptor] that might

 * be present in the completion's [CoroutineContext]. It is the invoker's responsibility to ensure that a proper invocation

 * context is established.

 *

 * This function is designed to be used from inside of [suspendCoroutineUninterceptedOrReturn] to resume the execution of the suspended

 * coroutine using a reference to the suspending function.

 */",f16944:m31
48547,"@JvmOverloads fun framework(namePrefix: String, buildTypes: Collection<NativeBuildType> = NativeBuildType.DEFAULT_BUILD_TYPES, configure: Action<Framework>)","framework(namePrefix, buildTypes) { configure.execute(this) }",/** Creates an Objective-C framework with the given [namePrefix] for each build type and configures it. */,f15652:m551
69890,"@JvmStatic fun isCastErased(supertype: KotlinType, subtype: KotlinType, typeChecker: KotlinTypeChecker): Boolean","{
    val isNonReifiedTypeParameter = TypeUtils.isNonReifiedTypeParameter(subtype)
    val isUpcast = typeChecker.isSubtypeOf(supertype, subtype)
    if (isNonReifiedTypeParameter && !isUpcast) {
        val nullableToDefinitelyNotNull = !TypeUtils.isNullableType(subtype) && supertype.makeNotNullable() == subtype
        if (!nullableToDefinitelyNotNull) {
            return true
        }
    }
    if (supertype.isMarkedNullable || subtype.isMarkedNullable) {
        return isCastErased(TypeUtils.makeNotNullable(supertype), TypeUtils.makeNotNullable(subtype), typeChecker)
    }
    if (isUpcast) return false
    if (isNonReifiedTypeParameter) return true
    if (allParametersReified(subtype)) return false
    val staticallyKnownSubtype = findStaticallyKnownSubtype(supertype, subtype.constructor).resultingType ?: return true
    return !typeChecker.isSubtypeOf(staticallyKnownSubtype, subtype)
}","/**

     * Check if cast from supertype to subtype is erased.

     * It is an error in ""is"" statement and warning in ""as"".

     */",f19566:m201
64079,@kotlin.internal.IntrinsicConstEvaluation public override fun toLong(): Long,wasm_i64_extend_i32_s(this.toInt()),"/**

     * Converts this [Byte] value to [Long].

     *

     * The resulting `Long` value represents the same numerical value as this `Byte`.

     *

     * The least significant 8 bits of the resulting `Long` value are the same as the bits of this `Byte` value,

     * whereas the most significant 56 bits are filled with the sign bit of this value.

     */",f17455:m801
14260,public override fun toString(): String,"""${debugString(this)} -> ${debugString(value)}""","/**

     * Returns the string representation of this object.

     */",f3762:m417
59067,"@SinceKotlin(""1.5"") @OptIn(kotlin.experimental.ExperimentalTypeInference::class) @OverloadResolutionByLambdaReturnType @kotlin.jvm.JvmName(""sumOfUInt"") @WasExperimental(ExperimentalUnsignedTypes::class) @kotlin.internal.InlineOnly public inline fun CharSequence.sumOf(selector: (Char) -> UInt): UInt","{
    var sum: UInt = 0.toUInt()
    for (element in this) {
        sum += selector(element)
    }
    return sum
}","/**

 * Returns the sum of all values produced by [selector] function applied to each character in the char sequence.

 */",f17097:m4345
58951,public inline fun CharSequence.filter(predicate: (Char) -> Boolean): CharSequence,"{
    return filterTo(StringBuilder(), predicate)
}","/**

 * Returns a char sequence containing only those characters from the original char sequence that match the given [predicate].

 * 

 * @sample samples.text.Strings.filter

 */",f17097:m837
63673,"@Deprecated(""Use Kotlin compiler 1.4 to avoid deprecation warning."") @SinceKotlin(""1.3"") @DeprecatedSinceKotlin(hiddenSince = ""1.4"") @ExperimentalUnsignedTypes public infix fun UShortArray.contentEquals(other: UShortArray): Boolean","{
    return this.contentEquals(other)
}","/**

 * Checks if the two specified arrays are *structurally* equal to one another.

 * 

 * Two arrays are considered structurally equal if they have the same size, and elements at corresponding indices are equal.

 * 

 * @param other the array to compare with this array.

 * @return `true` if the two arrays are structurally equal, `false` otherwise.

 * 

 * @sample samples.collections.Arrays.ContentOperations.intArrayContentEquals

 */",f17408:m363
58834,"@SinceKotlin(""1.4"") @OptIn(kotlin.experimental.ExperimentalTypeInference::class) @OverloadResolutionByLambdaReturnType @kotlin.internal.InlineOnly public inline fun <T, R> Sequence<T>.maxOfWith(comparator: Comparator<in R>, selector: (T) -> R): R","{
    val iterator = iterator()
    if (!iterator.hasNext()) throw NoSuchElementException()
    var maxValue = selector(iterator.next())
    while (iterator.hasNext()) {
        val v = selector(iterator.next())
        if (comparator.compare(maxValue, v) < 0) {
            maxValue = v
        }
    }
    return maxValue
}","/**

 * Returns the largest value according to the provided [comparator]

 * among all values produced by [selector] function applied to each element in the sequence.

 * 

 * @throws NoSuchElementException if the sequence is empty.

 *

 * The operation is _terminal_.

 */",f17096:m3193
13664,@kotlin.internal.IntrinsicConstEvaluation public inline operator fun compareTo(other: Float): Int,this.toFloat().compareTo(other),"/**

     * Compares this value with the specified value for order.

     * Returns zero if this value is equal to the specified other value, a negative number if it's less than other,

     * or a positive number if it's greater than other.

     */",f3686:m2851
16062,fun getSession(module: KtModule): LLFirSession,"{
    return getSession(module, preferBinary = true)
}","/**

     * Returns an [LLFirSession] for the [module].

     * For a binary module, the resulting session will be a binary (non-resolvable) one.

     */",f4048:m47
56551,"@kotlin.internal.InlineOnly public inline fun timer(name: String? = null, daemon: Boolean = false, startAt: Date, period: Long, crossinline action: TimerTask.() -> Unit): Timer","{
    val timer = timer(name, daemon)
    timer.schedule(startAt, period, action)
    return timer
}","/**

 * Creates a timer that executes the specified [action] periodically, starting at the specified [startAt] date

 * and with the interval of [period] milliseconds between the end of the previous task and the start of the next one.

 *

 * @param name the name to use for the thread which is running the timer.

 * @param daemon if `true`, the thread is started as a daemon thread (the VM will exit when only daemon threads are running).

 */",f16894:m197
58927,"@kotlin.internal.InlineOnly public inline fun CharSequence.getOrElse(index: Int, defaultValue: (Int) -> Char): Char","{
    contract { callsInPlace(defaultValue, InvocationKind.AT_MOST_ONCE) }
    return if (index in indices) get(index) else defaultValue(index)
}","/**

 * Returns a character at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this char sequence.

 */",f17097:m267
63488,"@SinceKotlin(""1.3"") @Suppress(""ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS"") public actual fun DoubleArray.copyInto(destination: DoubleArray, destinationOffset: Int = 0, startIndex: Int = 0, endIndex: Int = size): DoubleArray","{
    AbstractList.checkRangeIndexes(startIndex, endIndex, this.size)
    val rangeSize = endIndex - startIndex
    AbstractList.checkRangeIndexes(destinationOffset, destinationOffset + rangeSize, destination.size)
    kotlin.wasm.internal.copyWasmArray(this.storage, destination.storage, startIndex, destinationOffset, rangeSize)
    return destination
}","/**

 * Copies this array or its subrange into the [destination] array and returns that array.

 * 

 * It's allowed to pass the same array in the [destination] and even specify the subrange so that it overlaps with the destination range.

 * 

 * @param destination the array to copy to.

 * @param destinationOffset the position in the [destination] array to copy to, 0 by default.

 * @param startIndex the beginning (inclusive) of the subrange to copy, 0 by default.

 * @param endIndex the end (exclusive) of the subrange to copy, size of this array by default.

 * 

 * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of this array indices or when `startIndex > endIndex`.

 * @throws IndexOutOfBoundsException when the subrange doesn't fit into the [destination] array starting at the specified [destinationOffset],

 * or when that index is out of the [destination] array indices range.

 * 

 * @return the [destination] array.

 */",f17396:m2509
55696,"@SinceKotlin(""1.4"") @kotlin.internal.InlineOnly public inline fun Appendable.appendLine(value: CharSequence?): Appendable",append(value).appendLine(),/** Appends value to the given Appendable and a line feed character (`\n`) after it. */,f16781:m141
54729,"@SinceKotlin(""1.3"") @Suppress(""ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS"") public actual fun ShortArray.fill(element: Short, fromIndex: Int = 0, toIndex: Int = size): Unit","{
    AbstractList.checkRangeIndexes(fromIndex, toIndex, size)
    nativeFill(element, fromIndex, toIndex)
}","/**

 * Fills this array or its subrange with the specified [element] value.

 * 

 * @param fromIndex the start of the range (inclusive) to fill, 0 by default.

 * @param toIndex the end of the range (exclusive) to fill, size of this array by default.

 * 

 * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.

 * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].

 */",f16713:m2389
54648,public actual fun CharArray.elementAt(index: Int): Char,"{
    return elementAtOrElse(index) { throw IndexOutOfBoundsException(""index: $index, size: $size}"") }
}","/**

 * Returns an element at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this array.

 * 

 * @sample samples.collections.Collections.Elements.elementAt

 */",f16713:m181
58982,public fun <C: MutableCollection<in Char>> CharSequence.toCollection(destination: C): C,"{
    for (item in this) {
        destination.add(item)
    }
    return destination
}","/**

 * Appends all characters to the given [destination] collection.

 */",f17097:m1585
19606,"fun isKotlinInternalCompiledFile(file: VirtualFile, fileContent: ByteArray? = null): Boolean","{
    if (!file.isValidAndExists(fileContent)) {
        return false
    }
    val clsKotlinBinaryClassCache = ClsKotlinBinaryClassCache.getInstance()
    if (!clsKotlinBinaryClassCache.isKotlinJvmCompiledFile(file, fileContent)) {
        return false
    }
    val innerClass = try {
        if (fileContent == null) {
            ClassFileViewProvider.isInnerClass(file)
        } else {
            ClassFileViewProvider.isInnerClass(file, fileContent)
        }
    } catch (exception: Exception) {
        Logger.getInstance(""org.jetbrains.kotlin.analysis.decompiler.stub.file.ClsClassFinder.isKotlinInternalCompiledFile"").debug(file.path, exception)
        return false
    }
    if (innerClass) {
        return true
    }
    val header = clsKotlinBinaryClassCache.getKotlinBinaryClassHeaderData(file, fileContent) ?: return false
    if (header.classId.isLocal) return true
    return header.kind == KotlinClassHeader.Kind.SYNTHETIC_CLASS || header.kind == KotlinClassHeader.Kind.MULTIFILE_CLASS_PART
}","/**

     * Checks if this file is a compiled ""internal"" Kotlin class, i.e. a Kotlin class (not necessarily ABI-compatible with the current plugin)

     * which should NOT be decompiled (and, as a result, shown under the library in the Project view, be searchable via Find class, etc.)

     */",f5620:m61
58600,"@kotlin.jvm.JvmName(""longRangeContains"") @SinceKotlin(""1.9"") @WasExperimental(ExperimentalStdlibApi::class) public operator fun OpenEndRange<Long>.contains(value: Byte): Boolean","{
    return contains(value.toLong())
}","/**

 * Checks if the specified [value] belongs to this range.

 */",f17092:m739
57087,"public fun File.forEachBlock(action: (buffer: ByteArray, bytesRead: Int) -> Unit): Unit","forEachBlock(DEFAULT_BLOCK_SIZE, action)","/**

 * Reads file by byte blocks and calls [action] for each block read.

 * Block has default size which is implementation-dependent.

 * This functions passes the byte array and amount of bytes in the array to the [action] function.

 *

 * You can use this function for huge files.

 *

 * @param action function to process file blocks.

 */",f16956:m395
58226,@kotlin.internal.InlineOnly public inline operator fun plus(other: UInt): ULong,this.plus(other.toULong()),/** Adds the other value to this value. */,f17066:m159
52035,"fun Throwable.asDiagnostics(code: Int = ScriptDiagnostic.unspecifiedException, customMessage: String? = null, locationWithId: SourceCode.LocationWithId?, severity: ScriptDiagnostic.Severity = ScriptDiagnostic.Severity.ERROR): ScriptDiagnostic","ScriptDiagnostic(code, customMessage ?: message ?: ""$this"", severity, locationWithId, this)","/**

 * Converts the receiver Throwable to the Failure results wrapper with optional [customMessage], [locationWithId]

 */",f16426:m509
57376,public fun <T> Array<out T>.sort(): Unit,"{
    if (size > 1) java.util.Arrays.sort(this)
}","/**

 * Sorts the array in-place according to the natural order of its elements.

 * 

 * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.

 * 

 * @throws ClassCastException if any element of the array is not [Comparable].

 */",f16970:m4153
43595,fun CommandLineArguments.assertNoDuplicates(),"{
    val argsWithoutLibraries = args.filter { it != ""-library"" }
    assertEquals(argsWithoutLibraries.joinToString(""\n""), argsWithoutLibraries.toSet().joinToString(""\n""), ""Link task has duplicated arguments"")
}","/**

 * Asserts that the command line arguments do not contain any duplicates.

 */",f13457:m855
56077,@kotlin.internal.InlineOnly public inline fun <@kotlin.internal.OnlyInputTypes T> MutableCollection<out T>.remove(element: T): Boolean,"@Suppress(""UNCHECKED_CAST"") (this as MutableCollection<T>).remove(element)","/**

 * Removes a single instance of the specified element from this

 * collection, if it is present.

 *

 * Allows to overcome type-safety restriction of `remove` that requires to pass an element of type `E`.

 *

 * @return `true` if the element has been successfully removed; `false` if it was not present in the collection.

 */",f16825:m21
21680,private fun KtElement.getContainingBinaryExpressionForIncompleteLhs(): KtBinaryExpression?,"{
    if (this !is KtExpression) return null
    val lhs = deparenthesize(this)
    val binaryExpression = parentOfType<KtBinaryExpression>() ?: return null
    if (binaryExpression.operationToken !in KtTokens.ALL_ASSIGNMENTS) return null
    val leftOfBinary = deparenthesize(binaryExpression.left)
    if (leftOfBinary != lhs && !(leftOfBinary is KtDotQualifiedExpression && leftOfBinary.selectorExpression == lhs)) return null
    val firBinaryExpression = binaryExpression.getOrBuildFir(analysisSession.firResolveSession)
    if (firBinaryExpression is FirFunctionCall) {
        if (firBinaryExpression.origin == FirFunctionCallOrigin.Operator && firBinaryExpression.calleeReference.name in OperatorNameConventions.ASSIGNMENT_OPERATIONS) {
            return null
        }
    }
    return binaryExpression
}","/**

     * For `=` and compound access like `+=`, `-=`, `*=`, `/=`, `%=`, the LHS of the binary expression is not a complete call. Hence we

     * find the containing binary expression and resolve that instead.

     *

     * However, if, say, `+=` resolves to `plusAssign`, then the LHS is self-contained. In this case we do not return the containing binary

     * expression so that the FIR element corresponding to the LHS is used directly.

     */",f8624:m619
53408,"@SinceKotlin(""1.3"") public actual fun <T> (suspend () -> T).createCoroutineUnintercepted(completion: Continuation<T>): Continuation<Unit>","createCoroutineFromSuspendFunction(completion) {
    val a = this.asDynamic()
    if (jsTypeOf(a) == ""function"") a(completion) else this.invokeSuspendSuperType(completion)
}","/**

 * Creates unintercepted coroutine without receiver and with result type [T].

 * This function creates a new, fresh instance of suspendable computation every time it is invoked.

 *

 * To start executing the created coroutine, invoke `resume(Unit)` on the returned [Continuation] instance.

 * The [completion] continuation is invoked when coroutine completes with result or exception.

 *

 * This function returns unintercepted continuation.

 * Invocation of `resume(Unit)` starts coroutine directly in the invoker's thread without going through the

 * [ContinuationInterceptor] that might be present in the completion's [CoroutineContext].

 * It is the invoker's responsibility to ensure that a proper invocation context is established.

 * [Continuation.intercepted] can be used to acquire the intercepted continuation.

 *

 * Repeated invocation of any resume function on the resulting continuation corrupts the

 * state machine of the coroutine and may result in arbitrary behaviour or exception.

 */",f16673:m223
57366,public actual operator fun CharArray.plus(elements: CharArray): CharArray,"{
    val thisSize = size
    val arraySize = elements.size
    val result = java.util.Arrays.copyOf(this, thisSize + arraySize)
    System.arraycopy(elements, 0, result, thisSize, arraySize)
    return result
}","/**

 * Returns an array containing all elements of the original array and then all elements of the given [elements] array.

 */",f16970:m3963
57313,"@JvmName(""copyOfRangeInline"") @kotlin.internal.InlineOnly public actual inline fun <T> Array<T>.copyOfRange(fromIndex: Int, toIndex: Int): Array<T>","{
    return if (kotlin.internal.apiVersionIsAtLeast(1, 3, 0)) {
        copyOfRangeImpl(fromIndex, toIndex)
    } else {
        if (toIndex > size) throw IndexOutOfBoundsException(""toIndex: $toIndex, size: $size"")
        java.util.Arrays.copyOfRange(this, fromIndex, toIndex)
    }
}","/**

 * Returns a new array which is a copy of the specified range of the original array.

 * 

 * @param fromIndex the start of the range (inclusive) to copy.

 * @param toIndex the end of the range (exclusive) to copy.

 * 

 * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.

 * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].

 */",f16970:m2671
48495,fun getExecutable(buildType: NativeBuildType): Executable,"getExecutable("""", buildType)",/** Returns an executable with the empty name prefix and the given build type. Throws an exception if there is no such binary.*/,f15652:m95
70200,fun findImplementationFromInterface(descriptor: CallableMemberDescriptor): CallableMemberDescriptor?,"{
    val overridden = OverridingUtil.getOverriddenDeclarations(descriptor)
    val filtered = OverridingUtil.filterOutOverridden(overridden)
    val result = filtered.firstOrNull { it.modality != Modality.ABSTRACT } ?: return null
    if (DescriptorUtils.isClassOrEnumClass(result.containingDeclaration)) return null
    return result
}","/**

 * Given a fake override, returns an overridden non-abstract function from an interface which is the actual implementation of this function

 * that should be called when the given fake override is called.

 */",f19609:m73
52721,@Test fun testCase(),"{
    var regex: Regex
    var result: MatchResult?
    regex = Regex(""([a-z]+)[0-9]+"")
    result = regex.find(""cAT123#dog345"")
    assertNotNull(result)
    assertEquals(""dog"", result!!.groupValues[1])
    assertNull(result.next())
    regex = Regex(""([a-z]+)[0-9]+"", RegexOption.IGNORE_CASE)
    result = regex.find(""cAt123#doG345"")
    assertNotNull(result)
    assertEquals(""cAt"", result!!.groupValues[1])
    result = result.next()
    assertNotNull(result)
    assertEquals(""doG"", result!!.groupValues[1])
    assertNull(result.next())
    regex = Regex(""(?i)([a-z]+)[0-9]+"")
    result = regex.find(""cAt123#doG345"")
    assertNotNull(result)
    assertEquals(""cAt"", result!!.groupValues[1])
    result = result.next()
    assertNotNull(result)
    assertEquals(""doG"", result!!.groupValues[1])
    assertNull(result.next())
}","/**

     * Tests Pattern compilation modes and modes triggered in pattern strings

     */",f16567:m47
55538,@PublishedApi internal fun <T> primitiveArrayConcat(vararg args: T): T,"{
    var size_local = 0
    for (i in 0 .. (args.size - 1)) {
        size_local += args[i].unsafeCast<Array<Any?>>().size
    }
    val a = args[0]
    val result = js(""new a.constructor(size_local)"").unsafeCast<Array<Any?>>()
    if (a.asDynamic().`$type$` != null) {
        withType(a.asDynamic().`$type$`, result)
    }
    size_local = 0
    for (i in 0 .. (args.size - 1)) {
        val arr = args[i].unsafeCast<Array<Any?>>()
        for (j in 0 .. (arr.size - 1)) {
            result[size_local++] = arr[j]
        }
    }
    return result.unsafeCast<T>()
}","/** Concat primitive arrays. Main use: prepare vararg arguments.

 */",f16758:m45
57405,public fun <T> Array<out T>.toSortedSet(comparator: Comparator<in T>): java.util.SortedSet<T>,"{
    return toCollection(java.util.TreeSet<T>(comparator))
}","/**

 * Returns a new [SortedSet][java.util.SortedSet] of all elements.

 * 

 * Elements in the set returned are sorted according to the given [comparator].

 */",f16970:m4823
58483,"@SinceKotlin(""1.7"") @kotlin.jvm.JvmName(""maxByOrThrow"") @kotlin.internal.InlineOnly @Suppress(""CONFLICTING_OVERLOADS"") public inline fun <K, V, R: Comparable<R>> Map<out K, V>.maxBy(selector: (Map.Entry<K, V>) -> R): Map.Entry<K, V>","{
    return entries.maxBy(selector)
}","/**

 * Returns the first entry yielding the largest value of the given function.

 * 

 * @throws NoSuchElementException if the map is empty.

 * 

 * @sample samples.collections.Collections.Aggregates.maxBy

 */",f17089:m437
63572,@kotlin.internal.InlineOnly public actual inline fun <T> Array<T>.plusElement(element: T): Array<T>,"{
    return plus(element)
}","/**

 * Returns an array containing all elements of the original array and then the given [element].

 */",f17396:m4645
21353,private inline fun <reified T: FirCallableDeclaration> T.unwrapUseSiteSubstitutionOverride(): T?,"{
    val originalDeclaration = originalForSubstitutionOverride ?: return null
    return originalDeclaration.takeIf { this.origin is FirDeclarationOrigin.SubstitutionOverride.CallSite }
}","/**

     * Use-site substitution override happens in situations like this:

     *

     * ```

     * interface List<A> { fun get(i: Int): A }

     *

     * fun take(list: List<String>) {

     *   list.get(10) // this call

     * }

     * ```

     *

     * In FIR, `List::get` symbol in the example will be a substitution override with a `String` instead of `A`.

     * We want to lift such substitution overrides.

     *

     * @receiver A declaration that needs to be unwrapped.

     * @return An unsubstituted declaration ([originalForSubstitutionOverride]]) if [this] is a use-site substitution override.

     */",f8536:m1051
64446,"@SinceKotlin(""1.5"") @WasExperimental(ExperimentalPathApi::class) @Throws(IOException::class) @kotlin.internal.InlineOnly public inline fun Path.bufferedReader(charset: Charset = Charsets.UTF_8, bufferSize: Int = DEFAULT_BUFFER_SIZE, vararg options: OpenOption): BufferedReader","{
    return BufferedReader(InputStreamReader(Files.newInputStream(this, *options), charset), bufferSize)
}","/**

 * Returns a new [BufferedReader] for reading the content of this file.

 *

 * @param charset character set to use for reading text, UTF-8 by default.

 * @param bufferSize necessary size of the buffer.

 * @param options options to determine how the file is opened.

 */",f17469:m71
56485,@kotlin.internal.InlineOnly public actual inline fun String.toLong(): Long,java.lang.Long.parseLong(this),"/**

 * Parses the string as a [Long] number and returns the result.

 * @throws NumberFormatException if the string is not a valid representation of a number.

 */",f16885:m211
49193,private fun TaskProvider<CheckKotlinGradlePluginConfigurationErrors>.addDependsOnFromTasksThatShouldFailWhenErrorsReported(tasks: TaskContainer),"{
    tasks.withType<KotlinCompileTool>().configureEach { it.dependsOn(this) }
}","/**

 * Adds dependsOn from some selection of the [tasks] to the [this]-task, effectively causing them to fail

 * if the ERROR-diagnostics were reported.

 *

 * Currently, we're doing it conservatively and instrumenting only [KotlinCompileTool]-tasks.

 * The intuition here is that if the build manages to do something useful for a user without compiling any .kt-sources,

 * then it's OK for KGP to let that build pass even if it reported ERROR-diagnostics.

 */",f15780:m149
63178,public actual fun Int.takeHighestOneBit(): Int,if (this == 0) 0 else 1.shl(32 - 1 - countLeadingZeroBits()),"/**

 * Returns a number having a single bit set in the position of the most significant set bit of this [Int] number,

 * or zero, if this number is zero.

 */",f17314:m61
63244,"@SinceKotlin(""1.9"") @kotlin.internal.InlineOnly public actual inline fun StringBuilder.appendLine(value: Float): StringBuilder",append(value).appendLine(),"/** Appends [value] to this [StringBuilder], followed by a line feed character (`\n`). */",f17351:m59
14975,public actual operator fun LongArray.plus(elements: LongArray): LongArray,"{
    val thisSize = size
    val arraySize = elements.size
    val result = copyOfUninitializedElements(thisSize + arraySize)
    elements.copyInto(result, thisSize)
    return result
}","/**

 * Returns an array containing all elements of the original array and then all elements of the given [elements] array.

 */",f3831:m4429
58952,public inline fun String.filter(predicate: (Char) -> Boolean): String,"{
    return filterTo(StringBuilder(), predicate).toString()
}","/**

 * Returns a string containing only those characters from the original string that match the given [predicate].

 * 

 * @sample samples.text.Strings.filter

 */",f17097:m855
22030,private fun ClassId.dropLastNestedClasses(classesToDrop: Int),generateSequence(this) { it.outerClassId }.drop(classesToDrop).firstOrNull(),"/**

     * @return class id without [classesToDrop] last nested classes, or `null` if [classesToDrop] is too big.

     *

     * Example: `foo.bar.Baz.Inner` with 1 dropped class is `foo.bar.Baz`, and with 2 dropped class is `null`.

     */",f8681:m1523
54698,"@SinceKotlin(""1.3"") @kotlin.internal.InlineOnly @Suppress(""ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS"") public actual inline fun BooleanArray.copyInto(destination: BooleanArray, destinationOffset: Int = 0, startIndex: Int = 0, endIndex: Int = size): BooleanArray","{
    arrayCopy(this.unsafeCast<Array<Boolean>>(), destination.unsafeCast<Array<Boolean>>(), destinationOffset, startIndex, endIndex)
    return destination
}","/**

 * Copies this array or its subrange into the [destination] array and returns that array.

 * 

 * It's allowed to pass the same array in the [destination] and even specify the subrange so that it overlaps with the destination range.

 * 

 * @param destination the array to copy to.

 * @param destinationOffset the position in the [destination] array to copy to, 0 by default.

 * @param startIndex the beginning (inclusive) of the subrange to copy, 0 by default.

 * @param endIndex the end (exclusive) of the subrange to copy, size of this array by default.

 * 

 * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of this array indices or when `startIndex > endIndex`.

 * @throws IndexOutOfBoundsException when the subrange doesn't fit into the [destination] array starting at the specified [destinationOffset],

 * or when that index is out of the [destination] array indices range.

 * 

 * @return the [destination] array.

 */",f16713:m1547
55638,"@SinceKotlin(""1.1"") @kotlin.internal.InlineOnly public inline infix fun Short.or(other: Short): Short",(this.toInt() or other.toInt()).toShort(),/** Performs a bitwise OR operation between the two values. */,f16775:m67
49161,internal fun collectProjectConfigurationTimeMetrics(project: Project): MetricContainer,"{
    val configurationTimeMetrics = MetricContainer()
    val statisticOverhead = measureTimeMillis {
        collectAppliedPluginsStatistics(project, configurationTimeMetrics)
        val configurations = project.configurations.asMap.values
        for (configuration in configurations) { try {
            val configurationName = configuration.name
            val dependencies = configuration.dependencies
            when (configurationName) {
                ""KoverEngineConfig"" -> {
                    configurationTimeMetrics.put(BooleanMetrics.ENABLED_KOVER, true)
                }
                ""kapt"" -> {
                    configurationTimeMetrics.put(BooleanMetrics.ENABLED_KAPT, true)
                    for (dependency in dependencies) { when (dependency.group) {
                        ""com.google.dagger"" -> configurationTimeMetrics.put(BooleanMetrics.ENABLED_DAGGER, true)
                        ""com.android.databinding"" -> configurationTimeMetrics.put(BooleanMetrics.ENABLED_DATABINDING, true)
                    } }
                }
                API -> {
                    configurationTimeMetrics.put(NumericalMetrics.CONFIGURATION_API_COUNT, 1)
                    reportLibrariesVersions(configurationTimeMetrics, dependencies)
                }
                IMPLEMENTATION -> {
                    configurationTimeMetrics.put(NumericalMetrics.CONFIGURATION_IMPLEMENTATION_COUNT, 1)
                    reportLibrariesVersions(configurationTimeMetrics, dependencies)
                }
                COMPILE -> {
                    configurationTimeMetrics.put(NumericalMetrics.CONFIGURATION_COMPILE_COUNT, 1)
                    reportLibrariesVersions(configurationTimeMetrics, dependencies)
                }
                COMPILE_ONLY -> {
                    configurationTimeMetrics.put(NumericalMetrics.CONFIGURATION_COMPILE_ONLY_COUNT, 1)
                    reportLibrariesVersions(configurationTimeMetrics, dependencies)
                }
                RUNTIME -> {
                    configurationTimeMetrics.put(NumericalMetrics.CONFIGURATION_RUNTIME_COUNT, 1)
                    reportLibrariesVersions(configurationTimeMetrics, dependencies)
                }
                RUNTIME_ONLY -> {
                    configurationTimeMetrics.put(NumericalMetrics.CONFIGURATION_RUNTIME_ONLY_COUNT, 1)
                    reportLibrariesVersions(configurationTimeMetrics, dependencies)
                }
            }
        } catch (e: Throwable) { } }
        configurationTimeMetrics.put(NumericalMetrics.NUMBER_OF_SUBPROJECTS, 1)
        configurationTimeMetrics.put(BooleanMetrics.KOTLIN_KTS_USED, project.buildscript.sourceFile?.name?.endsWith("".kts"") ?: false)
        addTaskMetrics(project, configurationTimeMetrics)
        if (project.name == ""buildSrc"") {
            configurationTimeMetrics.put(NumericalMetrics.BUILD_SRC_COUNT, 1)
            configurationTimeMetrics.put(BooleanMetrics.BUILD_SRC_EXISTS, true)
        }
    }
    configurationTimeMetrics.put(NumericalMetrics.STATISTICS_VISIT_ALL_PROJECTS_OVERHEAD, statisticOverhead)
    return configurationTimeMetrics
}","/**

 * Collect project's configuration metrics including applied plugins. It should be called inside afterEvaluate block.

 */",f15772:m135
57150,"@SinceKotlin(""1.1"") @kotlin.internal.InlineOnly public actual inline fun maxOf(a: Long, b: Long, c: Long): Long","{
    return maxOf(a, maxOf(b, c))
}","/**

 * Returns the greater of three values.

 */",f16966:m243
12146,public fun unpin(),"{
    disposeStablePointer(this.stablePtr)
}","/**

     * Disposes the handle. It must not be [used][get] after that.

     */",f3623:m27
57392,public actual fun FloatArray.toTypedArray(): Array<Float>,"{
    val result = arrayOfNulls<Float>(size)
    for (index in indices) result[index] = this[index]
    @Suppress(""UNCHECKED_CAST"") return result as Array<Float>
}","/**

 * Returns a *typed* object array containing all of the elements of this primitive array.

 */",f16970:m4609
59018,"@SinceKotlin(""1.4"") public inline fun <R: Comparable<R>> CharSequence.maxByOrNull(selector: (Char) -> R): Char?","{
    if (isEmpty()) return null
    var maxElem = this[0]
    val lastIndex = this.lastIndex
    if (lastIndex == 0) return maxElem
    var maxValue = selector(maxElem)
    for (i in 1 .. lastIndex) {
        val e = this[i]
        val v = selector(e)
        if (maxValue < v) {
            maxElem = e
            maxValue = v
        }
    }
    return maxElem
}","/**

 * Returns the first character yielding the largest value of the given function or `null` if there are no characters.

 * 

 * @sample samples.collections.Collections.Aggregates.maxByOrNull

 */",f17097:m2473
57170,"@SinceKotlin(""1.1"") @kotlin.internal.InlineOnly public actual inline fun minOf(a: Int, b: Int, c: Int): Int","{
    return minOf(a, minOf(b, c))
}","/**

 * Returns the smaller of three values.

 */",f16966:m649
37295,@Test fun `test - exportedAndNotExportedDependency`(),"{
    doTest(dependenciesDir.resolve(""exportedAndNotExportedDependency""), configuration = HeaderGenerator.Configuration(frameworkName = ""MyApp"", withObjCBaseDeclarationStubs = true, dependencies = listOf(testLibraryAKlibFile, testLibraryBKlibFile), exportedDependencies = setOf(testLibraryAKlibFile)))
}","/**

     * https://youtrack.jetbrains.com/issue/KT-65327/Support-reading-klib-contents-in-Analysis-API

     * Requires being able to use AA to iterate over symbols to 'export' the dependency

     */",f11808:m133
58727,@kotlin.internal.InlineOnly public inline fun <T> Set<T>.minusElement(element: T): Set<T>,"{
    return minus(element)
}","/**

 * Returns a set containing all elements of the original set except the given [element].

 * 

 * The returned set preserves the element iteration order of the original set.

 */",f17095:m139
58112,@kotlin.internal.InlineOnly public inline infix fun xor(other: UByte): UByte,UByte(this.data xor other.data),/** Performs a bitwise XOR operation between the two values. */,f17059:m513
57271,"@SinceKotlin(""1.4"") @kotlin.internal.InlineOnly public actual inline fun IntArray?.contentHashCode(): Int","{
    return java.util.Arrays.hashCode(this)
}","/**

 * Returns a hash code based on the contents of this array as if it is [List].

 */",f16970:m1519
47986,"fun writeCacheForUncachedTargets(outputTargets: Set<SharedCommonizerTarget>, writeCacheAction: (todoTargets: Set<SharedCommonizerTarget>) -> Unit)","lock.withLock {
    val todoOutputTargets = todoTargets(outputTargets)
    if (todoOutputTargets.isEmpty()) return@withLock
    writeCacheAction(todoOutputTargets)
    todoOutputTargets.map { outputTarget -> resolveCommonizedDirectory(outputDirectory, outputTarget) }.filter { commonizedDirectory -> commonizedDirectory.isDirectory }.forEach { commonizedDirectory -> commonizedDirectory.resolve("".success"").createNewFile() }
}","/**

     * Calls [writeCacheAction] for uncached targets and marks them as cached if it succeeds

     */",f15503:m57
43532,"fun Path.addPod(podName: String, configuration: String? = null)","{
    val pod = ""pod(\""$podName\"")""
    val podBlock = configuration?.wrapIntoBlock(pod) ?: pod
    addCocoapodsBlock(podBlock)
}","/**

 * Adds a Cocoapods dependency to [this] build script.

 *

 * @param podName The name of the Cocoapods dependency to be added.

 * @param configuration The optional configuration string for the Cocoapods dependency.

 */",f13455:m201
58836,"@SinceKotlin(""1.4"") public fun Sequence<Double>.maxOrNull(): Double?","{
    val iterator = iterator()
    if (!iterator.hasNext()) return null
    var max = iterator.next()
    while (iterator.hasNext()) {
        val e = iterator.next()
        max = maxOf(max, e)
    }
    return max
}","/**

 * Returns the largest element or `null` if there are no elements.

 * 

 * If any of elements is `NaN` returns `NaN`.

 *

 * The operation is _terminal_.

 */",f17096:m3289
14258,"public fun compareAndSet(expected: T, newValue: T): Boolean","this::value.compareAndSetField(expected, newValue)","/**

     * Atomically sets the value to the given [new value][newValue] if the current value equals the [expected value][expected],

     * returns true if the operation was successful and false only if the current value was not equal to the expected value.

     *

     * Provides sequential consistent ordering guarantees and cannot fail spuriously.

     *

     * Comparison of values is done by reference.

     */",f3762:m377
30902,"inline fun <T, R> Collection<T>.memoryOptimizedFlatMap(transform: (T) -> Iterable<R>): List<R>","{
    return flatMapTo(ArrayList<R>(), transform).compactIfPossible()
}","/**

 * A memory-optimized version of [Iterable.flatMap].

 * @see Iterable.flatMap

 */",f10791:m69
58082,@kotlin.internal.InlineOnly public inline operator fun minus(other: UByte): UInt,this.toUInt().minus(other.toUInt()),/** Subtracts the other value from this value. */,f17059:m173
59049,"public inline fun CharSequence.reduceIndexed(operation: (index: Int, acc: Char, Char) -> Char): Char","{
    if (isEmpty()) throw UnsupportedOperationException(""Empty char sequence can't be reduced."")
    var accumulator = this[0]
    for (index in 1 .. lastIndex) {
        accumulator = operation(index, accumulator, this[index])
    }
    return accumulator
}","/**

 * Accumulates value starting with the first character and applying [operation] from left to right

 * to current accumulator value and each character with its index in the original char sequence.

 * 

 * Throws an exception if this char sequence is empty. If the char sequence can be empty in an expected way,

 * please use [reduceIndexedOrNull] instead. It returns `null` when its receiver is empty.

 * 

 * @param [operation] function that takes the index of a character, current accumulator value and the character itself,

 * and calculates the next accumulator value.

 * 

 * @sample samples.collections.Collections.Aggregates.reduce

 */",f17097:m3631
63430,"@Deprecated(""Use Kotlin compiler 1.4 to avoid deprecation warning."") @SinceKotlin(""1.1"") @DeprecatedSinceKotlin(hiddenSince = ""1.4"") public infix fun ShortArray.contentEquals(other: ShortArray): Boolean","{
    return this.contentEquals(other)
}","/**

 * Checks if the two specified arrays are *structurally* equal to one another.

 * 

 * Two arrays are considered structurally equal if they have the same size, and elements at corresponding indices are equal.

 * 

 * @param other the array to compare with this array.

 * @return `true` if the two arrays are structurally equal, `false` otherwise.

 * 

 * @sample samples.collections.Arrays.ContentOperations.intArrayContentEquals

 */",f17396:m729
67600,private fun resolverForModuleDescriptorImpl(descriptor: ModuleDescriptor): ResolverForModule?,"{
    return projectContext.storageManager.compute {
        checkValid()
        descriptor.assertValid()
        val module = moduleInfoByDescriptor[descriptor]
        if (module == null) {
            if (delegateResolver is EmptyResolverForProject<*>) {
                return@compute null
            }
            return@compute (delegateResolver as AbstractResolverForProject<M>).resolverForModuleDescriptorImpl(descriptor)
        }
        resolverByModuleDescriptor.getOrPut(descriptor) {
            checkModuleIsCorrect(module)
            ResolverForModuleComputationTracker.getInstance(projectContext.project)?.onResolverComputed(module)
            createResolverForModule(descriptor, module)
        }
    }
}","/**

     * We have a problem investigating EA-214260 (KT-40301), that is why we separated searching the

     * [ResolverForModule] and reporting the problem in [resolverForModuleDescriptor] (so we can tweak the reported information more

     * accurately).

     *

     * We use the fact that [ResolverForProject] have only two inheritors: [EmptyResolverForProject] and [AbstractResolverForProject].

     * So if the [delegateResolver] is not an [EmptyResolverForProject], it has to be [AbstractResolverForProject].

     *

     * Knowing that, we can safely use [resolverForModuleDescriptorImpl] recursively, and get the same result

     * as with [resolverForModuleDescriptor].

     */",f19225:m239
47677,private fun areRuntimeOrCompileConfigurationsAvailable(): Boolean,"GradleVersion.version(project.gradle.gradleVersion) <= GradleVersion.version(""6.8.3"")","/**

     * Check if ""compile"" and ""runtime"" configurations are still available in current Gradle version.

     */",f15413:m661
63436,"@Deprecated(""Use Kotlin compiler 1.4 to avoid deprecation warning."") @SinceKotlin(""1.1"") @DeprecatedSinceKotlin(hiddenSince = ""1.4"") public infix fun CharArray.contentEquals(other: CharArray): Boolean","{
    return this.contentEquals(other)
}","/**

 * Checks if the two specified arrays are *structurally* equal to one another.

 * 

 * Two arrays are considered structurally equal if they have the same size, and elements at corresponding indices are equal.

 * 

 * @param other the array to compare with this array.

 * @return `true` if the two arrays are structurally equal, `false` otherwise.

 * 

 * @sample samples.collections.Arrays.ContentOperations.charArrayContentEquals

 */",f17396:m941
14991,"@SinceKotlin(""1.4"") @Suppress(""ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS"") public actual fun ShortArray.sort(fromIndex: Int = 0, toIndex: Int = size): Unit","{
    AbstractList.checkRangeIndexes(fromIndex, toIndex, size)
    sortArray(this, fromIndex, toIndex)
}","/**

 * Sorts a range in the array in-place.

 * 

 * @param fromIndex the start of the range (inclusive) to sort, 0 by default.

 * @param toIndex the end of the range (exclusive) to sort, size of this array by default.

 * 

 * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.

 * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].

 * 

 * @sample samples.collections.Arrays.Sorting.sortRangeOfArray

 */",f3831:m4779
45745,"fun implementation(dependencyNotation: String, configure: Action<ExternalModuleDependency>)",implementation(dependencyNotation) { configure.execute(this) },"/**

     * Adds an `implementation`

     * [module dependency](https://docs.gradle.org/current/userguide/declaring_dependencies.html#sub:module_dependencies) to this entity.

     *

     * @see [HasKotlinDependencies.implementationConfigurationName]

     *

     * @param dependencyNotation The module dependency notation, as per [DependencyHandler.create].

     * @param configure additional configuration for the created module dependency.

     * @return The module dependency, or `null` if dependencyNotation is a provider.

     */",f14927:m205
58900,"public fun <T, A: Appendable> Sequence<T>.joinTo(buffer: A, separator: CharSequence = "", "", prefix: CharSequence = """", postfix: CharSequence = """", limit: Int = -1, truncated: CharSequence = ""..."", transform: ((T) -> CharSequence)? = null): A","{
    buffer.append(prefix)
    var count = 0
    for (element in this) {
        if (++count > 1) buffer.append(separator)
        if (limit < 0 || count <= limit) {
            buffer.appendElement(element, transform)
        } else break
    }
    if (limit >= 0 && count > limit) buffer.append(truncated)
    buffer.append(postfix)
    return buffer
}","/**

 * Appends the string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.

 * 

 * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]

 * elements will be appended, followed by the [truncated] string (which defaults to ""..."").

 *

 * The operation is _terminal_.

 * 

 * @sample samples.collections.Collections.Transformations.joinTo

 */",f17096:m5757
13516,public operator fun rangeTo(other: Byte): IntRange,"IntRange(this.toInt(), other.toInt())",/** Creates a range from this value to the specified [other] value. */,f3686:m603
63633,"@SinceKotlin(""1.4"") public actual fun <T: Comparable<T>> maxOf(a: T, vararg other: T): T","{
    var max = a
    for (e in other) max = maxOf(max, e)
    return max
}","/**

 * Returns the greater of the given values.

 * 

 * If there are multiple equal maximal values, returns the first of them.

 */",f17406:m299
43429,"infix fun <A, B> Sequence<A>.x(that: Iterable<B>): Sequence<Pair<A, B>>","sequence { for (a in this@x) {
    for (b in that) {
        yield(a to b)
    }
} }","/**

 * Cartesian product of a sequence and a collection.

 * Returns a sequence of all possible pairs between elements from [this] and [that]

 */",f13431:m87
58948,public inline fun String.dropLastWhile(predicate: (Char) -> Boolean): String,"{
    for (index in lastIndex downTo 0) if (!predicate(this[index])) return substring(0, index + 1)
    return """"
}","/**

 * Returns a string containing all characters except last characters that satisfy the given [predicate].

 * 

 * @sample samples.text.Strings.drop

 */",f17097:m765
57308,@kotlin.internal.InlineOnly public actual inline fun FloatArray.copyOf(newSize: Int): FloatArray,"{
    return java.util.Arrays.copyOf(this, newSize)
}","/**

 * Returns new array which is a copy of the original array, resized to the given [newSize].

 * The copy is either truncated or padded at the end with zero values if necessary.

 * 

 * - If [newSize] is less than the size of the original array, the copy array is truncated to the [newSize].

 * - If [newSize] is greater than the size of the original array, the extra elements in the copy array are filled with zero values.

 * 

 * @sample samples.collections.Arrays.CopyOfOperations.resizedPrimitiveCopyOf

 */",f16970:m2531
59050,"@SinceKotlin(""1.4"") public inline fun CharSequence.reduceIndexedOrNull(operation: (index: Int, acc: Char, Char) -> Char): Char?","{
    if (isEmpty()) return null
    var accumulator = this[0]
    for (index in 1 .. lastIndex) {
        accumulator = operation(index, accumulator, this[index])
    }
    return accumulator
}","/**

 * Accumulates value starting with the first character and applying [operation] from left to right

 * to current accumulator value and each character with its index in the original char sequence.

 * 

 * Returns `null` if the char sequence is empty.

 * 

 * @param [operation] function that takes the index of a character, current accumulator value and the character itself,

 * and calculates the next accumulator value.

 * 

 * @sample samples.collections.Collections.Aggregates.reduceOrNull

 */",f17097:m3675
14798,"@Deprecated(""Use Kotlin compiler 1.4 to avoid deprecation warning."") @SinceKotlin(""1.3"") @DeprecatedSinceKotlin(hiddenSince = ""1.4"") @ExperimentalUnsignedTypes public fun UByteArray.contentHashCode(): Int","{
    return this.contentHashCode()
}","/**

 * Returns a hash code based on the contents of this array as if it is [List].

 */",f3828:m443
12270,fun Compilation.precompileHeaders(): CompilationWithPCH,"withIndex(excludeDeclarationsFromPCH = false) { index ->
    val options = CXTranslationUnit_ForSerialization or CXTranslationUnit_DetailedPreprocessingRecord
    val translationUnit = copyWithArgsForPCH().parse(index, options)
    try {
        translationUnit.ensureNoCompileErrors()
        withPrecompiledHeader(translationUnit)
    } finally {
        clang_disposeTranslationUnit(translationUnit)
    }
}","/**

 * Precompiles the headers of this library.

 *

 * @return the library which includes the precompiled header instead of original ones.

 */",f3631:m817
55110,@kotlin.internal.IntrinsicConstEvaluation public inline operator fun compareTo(other: Short): Int,this.compareTo(other.toLong()),"/**

     * Compares this value with the specified value for order.

     * Returns zero if this value is equal to the specified other value, a negative number if it's less than other,

     * or a positive number if it's greater than other.

     */",f16727:m2419
48409,"internal fun <T> Project.valueSourceWithExecProviderCompat(clazz: Class<out ValueSource<T, ValueSourceParameters.None>>): Provider<T>","{
    return if (GradleVersion.current() < GradleVersion.version(""7.5"")) {
        val vs = project.objects.newInstance(clazz)
        project.provider { vs.obtain() }
    } else {
        providers.of(clazz) {}
    }
}","/**

 * ValueSources with injected ExecOperations are supported with Configuration Cache in Gradle 7.5+

 * https://docs.gradle.org/7.5/release-notes.html#running-external-processes-at-configuration-time

 */",f15623:m197
36928,"private fun tryDownload(url: URL, tmpFile: File)","{
    val connection = url.openConnection()
    (connection as? HttpURLConnection)?.checkHTTPResponse(HttpURLConnection.HTTP_OK, url)
    if (connection is HttpURLConnection && tmpFile.exists()) {
        resumeDownload(url, connection, tmpFile)
    } else {
        connection.connect()
        val totalBytes = connection.contentLengthLong
        doDownload(url, connection, tmpFile, 0, totalBytes, false)
    }
}",/** Performs an attempt to download a specified file into the specified location */,f11657:m279
43611,fun BuildResult.assertTasksExecuted(taskPaths: Collection<String>),"{
    assertTasksExecuted(*taskPaths.toTypedArray())
}","/**

 * Asserts given [taskPaths] have [TaskOutcome.SUCCESS] execution state.

 */",f13463:m115
58234,@kotlin.internal.InlineOnly public inline operator fun times(other: UInt): ULong,this.times(other.toULong()),/** Multiplies this value by the other value. */,f17066:m211
56812,"private fun retainOrRemoveAllInternal(rangeOffset: Int, rangeLength: Int, elements: Collection<E>, retain: Boolean): Int","{
    val removed = if (parent != null) {
        parent.retainOrRemoveAllInternal(rangeOffset, rangeLength, elements, retain)
    } else {
        root.retainOrRemoveAllInternal(rangeOffset, rangeLength, elements, retain)
    }
    if (removed > 0) registerModification()
    length -= removed
    return removed
}",/** Retains elements if [retain] == true and removes them it [retain] == false. */,f16926:m1089
16592,private fun FirPropertyAccessor.inBodyInvalidation(): Boolean,"{
    val body = body ?: return false
    val newPhase = invalidateBody(body) ?: return true
    val property = propertySymbol.fir
    property.decreasePhase(newPhase)
    val newPropertyResolveState = if (isGetter) {
        FirPropertyBodyResolveState.INITIALIZER_RESOLVED
    } else {
        FirPropertyBodyResolveState.INITIALIZER_AND_GETTER_RESOLVED
    }
    property.replaceBodyResolveState(minOf(property.bodyResolveState, newPropertyResolveState))
    return true
}","/**

 * Drop body and all related stuff.

 * We should drop:

 * * body

 * * control flow graph reference, because it depends on the body

 * * property body resolution state

 * * reduce phase if needed

 *

 * Depends on the body, but we shouldn't drop:

 * * implicit type, because the change mustn't change the resulting type

 * * contract, because a change inside a contract description is OOBM, so this function won't be called in this case

 *

 * @return **false** if it is an out-of-block change

 */",f4136:m205
59041,"@SinceKotlin(""1.4"") public fun CharSequence.minOrNull(): Char?","{
    if (isEmpty()) return null
    var min = this[0]
    for (i in 1 .. lastIndex) {
        val e = this[i]
        if (min > e) min = e
    }
    return min
}","/**

 * Returns the smallest character or `null` if there are no characters.

 */",f17097:m3419
69880,internal fun hackForTypeIntersector(types: Collection<KotlinType>): KotlinType?,"{
    if (types.size < 2) return types.firstOrNull()
    return types.firstOrNull { candidate -> types.all { ErrorTypesAreEqualToAnything.isSubtypeOf(candidate, it) } }
}","/**

 * This is temporary hack for type intersector.

 *

 * It is almost save, because:

 *  - it running only if general algorithm is failed

 *  - returned type is subtype of all [types].

 *

 * But it is hack, because it can give unstable result, but it better than exception.

 * See KT-11266.

 */",f19564:m41
57223,"@SinceKotlin(""1.4"") @OptIn(kotlin.experimental.ExperimentalTypeInference::class) @OverloadResolutionByLambdaReturnType @kotlin.jvm.JvmName(""sumOfBigInteger"") @kotlin.internal.InlineOnly public inline fun CharSequence.sumOf(selector: (Char) -> java.math.BigInteger): java.math.BigInteger","{
    var sum: java.math.BigInteger = 0.toBigInteger()
    for (element in this) {
        sum += selector(element)
    }
    return sum
}","/**

 * Returns the sum of all values produced by [selector] function applied to each character in the char sequence.

 */",f16969:m183
13483,@kotlin.internal.IntrinsicConstEvaluation public inline operator fun plus(other: Short): Int,this.toInt() + other.toInt(),/** Adds the other value to this value. */,f3686:m201
33524,"@SinceKotlin(""1.1"") fun KProperty1<*, *>.getExtensionDelegate(): Any?","{
    @Suppress(""UNCHECKED_CAST"") return (this as KProperty1<Any?, *>).getDelegate(KPropertyImpl.EXTENSION_PROPERTY_DELEGATE)
}","/**

 * Returns the instance of a delegated **extension property**, or `null` if this property is not delegated.

 * Throws an exception if this is not an extension property.

 *

 * @see [KProperty1.getDelegate]

 */",f11195:m49
64214,@kotlin.internal.IntrinsicConstEvaluation public inline operator fun compareTo(other: Byte): Int,this.compareTo(other.toLong()),"/**

     * Compares this value with the specified value for order.

     * Returns zero if this value is equal to the specified other value, a negative number if it's less than other,

     * or a positive number if it's greater than other.

     */",f17455:m2831
11473,"internal fun saveOptionWithoutParameter(argValue: ParsingValue<*, *>)","{
    if (argValue.descriptor.fullName == ""help"") {
        usedSubcommand?.let { it.parse(listOf(""${it.optionFullFormPrefix}${argValue.descriptor.fullName}"")) }
        println(makeUsage())
        exitProcess(0)
    }
    saveAsOption(argValue, ""true"")
}","/**

     * Save option without parameter.

     *

     * @param argValue argument value with all information about option.

     */",f3554:m861
54748,public actual operator fun IntArray.plus(elements: Collection<Int>): IntArray,"{
    var index = size
    val result = this.copyOf(size + elements.size)
    for (element in elements) result[index++] = element
    return result
}","/**

 * Returns an array containing all elements of the original array and then all elements of the given [elements] collection.

 */",f16713:m2815
14150,"@Suppress(""UNCHECKED_CAST"") private fun <T> createSimpleCoroutineForSuspendFunction(completion: Continuation<T>): Continuation<T>","{
    val context = completion.context
    return if (context === EmptyCoroutineContext) object : RestrictedContinuationImpl(completion as Continuation<Any?>) {
        override fun invokeSuspend(result: Result<Any?>): Any? {
            return result.getOrThrow()
        }
    } else object : ContinuationImpl(completion as Continuation<Any?>, context) {
        override fun invokeSuspend(result: Result<Any?>): Any? {
            return result.getOrThrow()
        }
    }
}","/**

 * This function is used when [startCoroutineUninterceptedOrReturn] encounters suspending lambda that does not extend BaseContinuationImpl.

 *

 * It happens in two cases: callable reference to suspending function or tail-call lambdas.

 *

 * This function is the same as above, but does not run lambda itself - the caller is expected to call [invoke] manually.

 */",f3737:m599
15003,public actual fun FloatArray.toTypedArray(): Array<Float>,"{
    return Array(size) { index -> this[index] }
}","/**

 * Returns a *typed* object array containing all of the elements of this primitive array.

 */",f3831:m5103
16517,"inline fun withWriteLock(target: FirElementWithResolveState, phase: FirResolvePhase, action: () -> Unit)","{
    checker.lazyResolveToPhaseInside(phase) { target.withLock(toPhase = phase, updatePhase = true, action = action) }
}","/**

     * Locks an a [FirElementWithResolveState] to resolve from `phase - 1` to [phase] and

     * then updates the [FirElementWithResolveState.resolveState] to a [phase].

     * Does nothing if [target] already has at least [phase] phase.

     *

     * [action] will be executed once if [target] is not yet resolved to [phase] phase.

     *

     * @see withReadLock

     * @see withJumpingLock

     */",f4129:m83
23107,"@JvmOverloads fun Project.kotlinTest(suffix: String? = null, classifier: String? = null): Any","{
    return if (kotlinBuildProperties.isInJpsBuildIdeaSync) {
        kotlinDep(listOfNotNull(""test"", suffix?.lowercase()).joinToString(""-""), bootstrapKotlinVersion, classifier)
    } else {
        val elementsType = when (classifier) {
            null -> ""Runtime""
            ""sources"" -> ""Sources""
            else -> error(""Unsupported kotlin-test classifier: $classifier"")
        }
        val configuration = when (suffix?.lowercase()) {
            null -> classifier?.let { ""jvm${elementsType}Elements"" }
            ""junit"" -> ""jvmJUnit${elementsType}Elements""
            ""junit5"" -> ""jvmJUnit5${elementsType}Elements""
            ""testng"" -> ""jvmTestNG${elementsType}Elements""
            ""js"" -> ""js${elementsType}Elements""
            else -> error(""Unsupported kotlin-test flavor: $suffix"")
        }
        dependencies.project("":kotlin-test"", configuration)
    }
}","/**

 * Use this function to declare a dependency on kotlin-test project artifacts.

 *

 * It creates either a project dependency or a binary dependency on bootstrap artifacts when JPS build is imported.

 *

 * @param suffix Supported suffixes are:

 * - `null` for the default project dependency, variant is resolved by attributes

 * - `junit`, `junit5`, `testng` - jvm variants with annotation typealiases for different test frameworks,

 * - `js` - js variant with assertions and annotations

 * @param classifier Supported classifiers are: `null` for the runtime artifact, `sources` for the sources jar artifact

 */",f8843:m127
58887,@kotlin.internal.InlineOnly public inline fun <T> Sequence<T>.minusElement(element: T): Sequence<T>,"{
    return minus(element)
}","/**

 * Returns a sequence containing all elements of the original sequence without the first occurrence of the given [element].

 *

 * The operation is _intermediate_ and _stateless_.

 */",f17096:m5373
58479,"public inline fun <K, V> Map<out K, V>.any(predicate: (Map.Entry<K, V>) -> Boolean): Boolean","{
    if (isEmpty()) return false
    for (element in this) if (predicate(element)) return true
    return false
}","/**

 * Returns `true` if at least one entry matches the given [predicate].

 * 

 * @sample samples.collections.Collections.Aggregates.anyWithPredicate

 */",f17089:m363
58838,"@SinceKotlin(""1.4"") public fun <T: Comparable<T>> Sequence<T>.maxOrNull(): T?","{
    val iterator = iterator()
    if (!iterator.hasNext()) return null
    var max = iterator.next()
    while (iterator.hasNext()) {
        val e = iterator.next()
        if (max < e) max = e
    }
    return max
}","/**

 * Returns the largest element or `null` if there are no elements.

 *

 * The operation is _terminal_.

 */",f17096:m3365
57049,@kotlin.internal.InlineOnly public inline fun print(message: Double),"{
    System.out.print(message)
}",/** Prints the given [message] to the standard output stream. */,f16953:m129
53122,public actual fun String.toByte(): Byte,toByteOrNull() ?: numberFormatError(this),"/**

 * Parses the string as a signed [Byte] number and returns the result.

 * @throws NumberFormatException if the string is not a valid representation of a number.

 */",f16618:m33
54762,"@Suppress(""NOTHING_TO_INLINE"") public actual inline operator fun CharArray.plus(elements: CharArray): CharArray","{
    return primitiveArrayConcat(this, elements)
}","/**

 * Returns an array containing all elements of the original array and then all elements of the given [elements] array.

 */",f16713:m3051
56847,"@SinceKotlin(""1.2"") @kotlin.internal.InlineOnly public inline fun Int.toBigInteger(): BigInteger",BigInteger.valueOf(this.toLong()),"/**

 * Returns the value of this [Int] number as a [BigInteger].

 */",f16927:m193
55119,@kotlin.internal.IntrinsicConstEvaluation public inline operator fun plus(other: Float): Float,this.toFloat().plus(other),/** Adds the other value to this value. */,f16727:m2549
14144,"@SinceKotlin(""1.3"") @Suppress(""UNCHECKED_CAST"") public actual fun <T> (suspend () -> T).createCoroutineUnintercepted(completion: Continuation<T>): Continuation<Unit>","{
    val probeCompletion = probeCoroutineCreated(completion)
    return if (this is BaseContinuationImpl) create(probeCompletion) else createCoroutineFromSuspendFunction(probeCompletion) { this.startCoroutineUninterceptedOrReturn(it) }
}","/**

 * Creates unintercepted coroutine without receiver and with result type [T].

 * This function creates a new, fresh instance of suspendable computation every time it is invoked.

 *

 * To start executing the created coroutine, invoke `resume(Unit)` on the returned [Continuation] instance.

 * The [completion] continuation is invoked when coroutine completes with result or exception.

 *

 * This function returns unintercepted continuation.

 * Invocation of `resume(Unit)` starts coroutine immediately in the invoker's call stack without going through the

 * [ContinuationInterceptor] that might be present in the completion's [CoroutineContext].

 * It is the invoker's responsibility to ensure that a proper invocation context is established.

 * Note that [completion] of this function may get invoked in an arbitrary context.

 *

 * [Continuation.intercepted] can be used to acquire the intercepted continuation.

 * Invocation of `resume(Unit)` on intercepted continuation guarantees that execution of

 * both the coroutine and [completion] happens in the invocation context established by

 * [ContinuationInterceptor].

 *

 * Repeated invocation of any resume function on the resulting continuation corrupts the

 * state machine of the coroutine and may result in arbitrary behaviour or exception.

 */",f3737:m237
58688,public infix fun Short.until(to: Int): IntRange,"{
    if (to <= Int.MIN_VALUE) return IntRange.EMPTY
    return this.toInt() .. (to - 1).toInt()
}","/**

 * Returns a range from this value up to but excluding the specified [to] value.

 * 

 * If the [to] value is less than or equal to `this` value, then the returned range is empty.

 */",f17092:m2235
55744,"@ExperimentalStdlibApi @SinceKotlin(""1.9"") @ExperimentalUnsignedTypes @InlineOnly public inline fun UByteArray.toHexString(startIndex: Int = 0, endIndex: Int = size, format: HexFormat = HexFormat.Default): String","storage.toHexString(startIndex, endIndex, format)","/**

 * Formats bytes in this array using the specified [HexFormat].

 *

 * Note that only [HexFormat.upperCase] and [HexFormat.BytesHexFormat] affect formatting.

 *

 * @param startIndex the beginning (inclusive) of the subrange to format, 0 by default.

 * @param endIndex the end (exclusive) of the subrange to format, size of this array by default.

 * @param format the [HexFormat] to use for formatting, [HexFormat.Default] by default.

 *

 * @throws IndexOutOfBoundsException when [startIndex] or [endIndex] is out of range of this array indices.

 * @throws IllegalArgumentException when `startIndex > endIndex`.

 * @throws IllegalArgumentException if the result length is more than [String] maximum capacity.

 */",f16790:m53
59002,"public inline fun <R: Any, C: MutableCollection<in R>> CharSequence.mapNotNullTo(destination: C, transform: (Char) -> R?): C","{
    forEach { element -> transform(element)?.let { destination.add(it) } }
    return destination
}","/**

 * Applies the given [transform] function to each character in the original char sequence

 * and appends only the non-null results to the given [destination].

 */",f17097:m2063
63274,"internal fun Char.Companion.toCodePoint(high: Char, low: Char): Int",(((high - MIN_HIGH_SURROGATE) shl 10) or (low - MIN_LOW_SURROGATE)) + 0x10000,/** Converts a surrogate pair to a unicode code point. Doesn't validate that the characters are a valid surrogate pair. */,f17357:m59
15413,fun test_ulp_f(),"{
    assertTrue(""Should return NaN"", Float.isNaN(ulp(Float.NaN)))
    assertEquals(""Returned incorrect value"", Float.POSITIVE_INFINITY, ulp(Float.POSITIVE_INFINITY), 0f)
    assertEquals(""Returned incorrect value"", Float.POSITIVE_INFINITY, ulp(Float.NEGATIVE_INFINITY), 0f)
    assertEquals(""Returned incorrect value"", Float.MIN_VALUE, ulp(0.0f), 0f)
    assertEquals(""Returned incorrect value"", Float.MIN_VALUE, ulp(+0.0f), 0f)
    assertEquals(""Returned incorrect value"", Float.MIN_VALUE, ulp(-0.0f), 0f)
    assertEquals(""Returned incorrect value"", 2.028241E31f, ulp(Float.MAX_VALUE), 0f)
    assertEquals(""Returned incorrect value"", 2.028241E31f, ulp(-Float.MAX_VALUE), 0f)
    assertEquals(""Returned incorrect value"", 1.4E-45f, ulp(Float.MIN_VALUE), 0f)
    assertEquals(""Returned incorrect value"", 1.4E-45f, ulp(-Float.MIN_VALUE), 0f)
    assertEquals(""Returned incorrect value"", 1.1920929E-7f, ulp(1.0f), 0f)
    assertEquals(""Returned incorrect value"", 1.1920929E-7f, ulp(-1.0f), 0f)
    assertEquals(""Returned incorrect value"", 1.2207031E-4f, ulp(1153.0f), 0f)
    assertEquals(""Returned incorrect value"", 5.6E-45f, ulp(9.403954E-38f), 0f)
}","/**

     * Tests kotlin.Float.ulp

     */",f3868:m1449
53316,override fun equals(other: Any?): Boolean,"{
    if (other === this) return true
    if (other !is List<*>) return false
    return AbstractList.orderedEquals(this, other)
}","/**

     * Checks if the two specified lists are *structurally* equal to one another.

     *

     * Two lists are considered structurally equal if they have the same size, and elements at corresponding indices are equal.

     * Elements are compared for equality using the [equals][Any.equals] function.

     * For floating point numbers, this means `NaN` is equal to itself and `-0.0` is not equal to `0.0`.

     *

     * @param other the list to compare with this list.

     * @return `true` if [other] is a [List] that is structurally equal to this list, `false` otherwise.

     */",f16655:m203
58492,"@SinceKotlin(""1.4"") @OptIn(kotlin.experimental.ExperimentalTypeInference::class) @OverloadResolutionByLambdaReturnType @kotlin.internal.InlineOnly public inline fun <K, V, R> Map<out K, V>.maxOfWithOrNull(comparator: Comparator<in R>, selector: (Map.Entry<K, V>) -> R): R?","{
    return entries.maxOfWithOrNull(comparator, selector)
}","/**

 * Returns the largest value according to the provided [comparator]

 * among all values produced by [selector] function applied to each entry in the map or `null` if there are no entries.

 */",f17089:m689
63294,"@ExperimentalAssociatedObjects @Suppress(""NON_PUBLIC_CALL_FROM_PUBLIC_INLINE"") public inline fun <reified T: Annotation> KClass<*>.findAssociatedObject(): Any?","findAssociatedObject(this, wasmTypeId<T>())","/**

 * If [T] is an @[AssociatedObjectKey]-annotated annotation class and [this] class is annotated with @[T] (`S::class`),

 * returns object `S`.

 *

 * Otherwise returns `null`.

 */",f17367:m67
54675,"@SinceKotlin(""1.4"") public actual fun ShortArray?.contentHashCode(): Int","{
    return contentHashCodeInternal()
}","/**

 * Returns a hash code based on the contents of this array as if it is [List].

 */",f16713:m919
1299,"private fun tryToMapLibrarySourceFile(dependencies: Iterable<ModuleDescriptor>, sourceMapPath: String): String?","{
    for (dependency in dependencies) {
        val libraryFile = try {
            File(testServices.libraryProvider.getPathByDescriptor(dependency))
        } catch (e: NoSuchElementException) {
            continue
        }
        val sourceRoot: File = libraryFile.parentFile?.parentFile?.parentFile?.parentFile?.parentFile ?: continue
        val searchPaths = listOf(sourceRoot, sourceRoot.resolve(""build""))
        for (searchPath in searchPaths) {
            val resolved = searchPath.resolve(sourceMapPath)
            if (resolved.exists()) {
                return resolved.absolutePath
            }
        }
    }
    return null
}","/**

     * Some heuristics to find the library source file that this [sourceMapPath] should point to.

     * May not work in 100% of cases, but should be good enough for our tests.

     */",f328:m111
64256,public operator fun rangeTo(other: Int): LongRange,"LongRange(this, other.toLong())",/** Creates a range from this value to the specified [other] value. */,f17455:m3375
53165,"private fun codePointFrom4(bytes: ByteArray, byte1: Int, index: Int, endIndex: Int, throwOnMalformed: Boolean): Int","{
    if (index >= endIndex) {
        malformed(0, index, throwOnMalformed)
    }
    val byte2 = bytes[index].toInt()
    if (byte1 and 0xF == 0x0) {
        if (byte2 and 0xF0 <= 0x80) {
            return malformed(0, index, throwOnMalformed)
        }
    } else if (byte1 and 0xF == 0x4) {
        if (byte2 and 0xF0 != 0x80) {
            return malformed(0, index, throwOnMalformed)
        }
    } else if (byte1 and 0xF > 0x4) {
        return malformed(0, index, throwOnMalformed)
    } else if (byte2 and 0xC0 != 0x80) {
        return malformed(0, index, throwOnMalformed)
    }
    if (index + 1 == endIndex) {
        return malformed(1, index, throwOnMalformed)
    }
    val byte3 = bytes[index + 1].toInt()
    if (byte3 and 0xC0 != 0x80) {
        return malformed(1, index, throwOnMalformed)
    }
    if (index + 2 == endIndex) {
        return malformed(2, index, throwOnMalformed)
    }
    val byte4 = bytes[index + 2].toInt()
    if (byte4 and 0xC0 != 0x80) {
        return malformed(2, index, throwOnMalformed)
    }
    return (byte1 shl 18) xor (byte2 shl 12) xor (byte3 shl 6) xor byte4 xor 0x381F80
}","/**

 * Returns code point corresponding to UTF-8 sequence of four bytes,

 * where the first byte of the sequence is the [byte1] and the others are in the [bytes] array starting from the [index].

 * Returns a non-positive value indicating number of bytes from [bytes] included in malformed sequence

 * if the sequence is malformed and [throwOnMalformed] is false.

 *

 * @throws CharacterCodingException if the sequence of four bytes is malformed and [throwOnMalformed] is true.

 */",f16626:m177
20235,"public fun createExtensionCandidateChecker(originalFile: KtFile, nameExpression: KtSimpleNameExpression, explicitReceiver: KtExpression?): KtCompletionExtensionCandidateChecker","{
    return analysisSession.completionCandidateChecker.createExtensionCandidateChecker(originalFile, nameExpression, explicitReceiver)
}","/**

     * Returns an extension applicability checker for the given context [nameExpression].

     * The function is meant to only be used for providing auto-completion for Kotlin in IntelliJ IDEA.

     *

     * The returned checker does not cache the results for individual callable candidates.

     *

     * @param originalFile The file being edited.

     * @param nameExpression The expression under the caret in an in-memory copy of [originalFile]

     *     with a dummy identifier inserted. Also see `CompletionUtilCore.DUMMY_IDENTIFIER` in IntelliJ IDEA.

     * @param explicitReceiver A receiver expression, if available (also from the in-memory copy of [originalFile]).

     */",f5799:m135
57523,"@SinceKotlin(""1.4"") @OptIn(kotlin.experimental.ExperimentalTypeInference::class) @OverloadResolutionByLambdaReturnType @Suppress(""INAPPLICABLE_JVM_NAME"") @kotlin.jvm.JvmName(""sumOfBigInteger"") @ExperimentalUnsignedTypes @kotlin.internal.InlineOnly public inline fun UShortArray.sumOf(selector: (UShort) -> java.math.BigInteger): java.math.BigInteger","{
    var sum: java.math.BigInteger = 0.toBigInteger()
    for (element in this) {
        sum += selector(element)
    }
    return sum
}","/**

 * Returns the sum of all values produced by [selector] function applied to each element in the array.

 */",f16971:m1275
56870,"@SinceKotlin(""1.4"") @kotlin.internal.InlineOnly public actual inline fun Long.countOneBits(): Int",java.lang.Long.bitCount(this),"/**

 * Counts the number of set bits in the binary representation of this [Long] number.

 */",f16929:m331
54724,"public actual fun DoubleArray.copyOfRange(fromIndex: Int, toIndex: Int): DoubleArray","{
    AbstractList.checkRangeIndexes(fromIndex, toIndex, size)
    return this.asDynamic().slice(fromIndex, toIndex)
}","/**

 * Returns a new array which is a copy of the specified range of the original array.

 * 

 * @param fromIndex the start of the range (inclusive) to copy.

 * @param toIndex the end of the range (exclusive) to copy.

 * 

 * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.

 * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].

 */",f16713:m2241
64323,@kotlin.internal.IntrinsicConstEvaluation public override fun toLong(): Long,wasm_i64_trunc_sat_f32_s(this),"/**

     * Converts this [Float] value to [Long].

     *

     * The fractional part, if any, is rounded down towards zero.

     * Returns zero if this `Float` value is `NaN`, [Long.MIN_VALUE] if it's less than `Long.MIN_VALUE`,

     * [Long.MAX_VALUE] if it's bigger than `Long.MAX_VALUE`.

     */",f17455:m4481
20259,public fun KtDeclaration.recordOriginalDeclaration(declaration: KtDeclaration),"{
    withValidityAssertion { analysisSession.originalPsiProvider.recordOriginalDeclaration(this, declaration) }
}","/**

     * Records [declaration] as an original declaration for [this].

     */",f5806:m67
16226,fun popCycledSymbolIfExists(): FirCallableSymbol<*>?,cycledSymbol?.also { cycledSymbol = null },"/**

     * Pop [FirCallableSymbol] with a recursion return type if it was [pushed][pushCycledSymbol]

     *

     * @see pushCycledSymbol

     * @see org.jetbrains.kotlin.analysis.low.level.api.fir.element.builder.LLFirReturnTypeCalculatorWithJump.resolveDeclaration

     */",f4086:m231
30801,fun printlnMultiLine(s: String): SmartPrinter,"{
    printer.printlnWithNoIndent(s.replaceIndent(currentIndent).lines().joinToString(separator = ""\n"") { it.ifBlank { """" } })
    notFirstPrint = false
    return this
}","/**

     * Prints the multi-line string literal [s] while respecting [currentIndent].

     * Whitespace-only lines are made empty.

     */",f10779:m87
57159,"@SinceKotlin(""1.4"") public actual fun maxOf(a: Double, vararg other: Double): Double","{
    var max = a
    for (e in other) max = maxOf(max, e)
    return max
}","/**

 * Returns the greater of the given values.

 * 

 * If any value is `NaN`, returns `NaN`.

 */",f16966:m433
58818,public inline fun <T> Sequence<T>.count(predicate: (T) -> Boolean): Int,"{
    var count = 0
    for (element in this) if (predicate(element)) checkCountOverflow(++count)
    return count
}","/**

 * Returns the number of elements matching the given [predicate].

 *

 * The operation is _terminal_.

 */",f17096:m2531
54669,"@SinceKotlin(""1.4"") public actual infix fun FloatArray?.contentEquals(other: FloatArray?): Boolean","{
    return contentEqualsInternal(other)
}","/**

 * Checks if the two specified arrays are *structurally* equal to one another.

 * 

 * Two arrays are considered structurally equal if they have the same size, and elements at corresponding indices are equal.

 * Elements are compared for equality using the [equals][Any.equals] function.

 * This means `NaN` is equal to itself and `-0.0` is not equal to `0.0`.

 * 

 * The arrays are also considered structurally equal if both are `null`.

 * 

 * @param other the array to compare with this array.

 * @return `true` if the two arrays are structurally equal, `false` otherwise.

 * 

 * @sample samples.collections.Arrays.ContentOperations.doubleArrayContentEquals

 */",f16713:m743
55997,"public fun <K, V> mapOf(vararg pairs: Pair<K, V>): Map<K, V>",if (pairs.size > 0) pairs.toMap(LinkedHashMap(mapCapacity(pairs.size))) else emptyMap(),"/**

 * Returns a new read-only map with the specified contents, given as a list of pairs

 * where the first value is the key and the second is the value.

 *

 * If multiple pairs have the same key, the resulting map will contain the value from the last of those pairs.

 *

 * Entries of the map are iterated in the order they were specified.

 *

 * The returned map is serializable (JVM).

 *

 * @sample samples.collections.Maps.Instantiation.mapFromPairs

 */",f16823:m83
13541,@kotlin.internal.IntrinsicConstEvaluation public inline operator fun plus(other: Byte): Int,this.toInt() + other.toInt(),/** Adds the other value to this value. */,f3686:m1057
58281,"@SinceKotlin(""1.5"") @WasExperimental(ExperimentalUnsignedTypes::class) public fun UInt.toString(radix: Int): String","uintToString(this.toInt(), checkRadix(radix))","/**

 * Returns a string representation of this [Int] value in the specified [radix].

 *

 * @throws IllegalArgumentException when [radix] is not a valid radix for number to string conversion.

 */",f17067:m61
45612,fun compilerOptions(configure: CO.() -> Unit),"{
    configure(compilerOptions)
}","/**

     * Configures the [compilerOptions] with the provided configuration.

     */",f14889:m63
58640,"@kotlin.jvm.JvmName(""byteRangeContains"") @SinceKotlin(""1.9"") @WasExperimental(ExperimentalStdlibApi::class) public operator fun OpenEndRange<Byte>.contains(value: Short): Boolean","{
    return value.toByteExactOrNull().let { if (it != null) contains(it) else false }
}","/**

 * Checks if the specified [value] belongs to this range.

 */",f17092:m1479
33588,"@SinceKotlin(""1.1"") @PlatformDependent public fun getOrDefault(key: K, defaultValue: @UnsafeVariance V): V","{
    throw NotImplementedError()
}","/**

     * Returns the value corresponding to the given [key], or [defaultValue] if such a key is not present in the map.

     *

     * @since JDK 1.8

     */",f11207:m643
55121,@kotlin.internal.IntrinsicConstEvaluation public inline operator fun minus(other: Byte): Long,this.minus(other.toLong()),/** Subtracts the other value from this value. */,f16727:m2569
52490,"override fun matches(startIndex: Int, testString: CharSequence, matchResult: MatchResultImpl): Int","{
    val start = matchResult.getConsumed(groupIndex)
    matchResult.setConsumed(groupIndex, startIndex)
    children.forEach {
        val shift = it.matches(startIndex, testString, matchResult)
        if (shift >= 0) {
            return shift
        }
    }
    matchResult.setConsumed(groupIndex, start)
    return -1
}","/**

     * Returns startIndex+shift, the next position to match

     */",f16525:m59
24364,"private fun checkInvoke(expression: FirQualifiedAccessExpression, context: CheckerContext, reporter: DiagnosticReporter)","{
    val param = (expression.dispatchReceiver as? FirPropertyAccessExpression)?.calleeReference?.toResolvedValueParameterSymbol() ?: return
    if (param.resolvedReturnTypeRef.hasDisallowComposableCallsAnnotation(context.session) || !param.containingFunctionSymbol.isInline) {
        return
    }
    context.visitCurrentScope(visitInlineLambdaParameter = { parameter -> if (parameter.returnTypeRef.hasDisallowComposableCallsAnnotation(context.session)) {
        reporter.reportOn(param.source, ComposeErrors.MISSING_DISALLOW_COMPOSABLE_CALLS_ANNOTATION, param, parameter.symbol, parameter.containingFunctionSymbol, context)
    } })
}","/**

 * Reports an error if we are invoking a lambda parameter of an inline function in a context

 * where composable calls are not allowed, unless the lambda parameter is itself annotated

 * with `@DisallowComposableCalls`.

 */",f9187:m497
53136,"@SinceKotlin(""1.2"") public actual fun Int.toString(radix: Int): String",asDynamic().toString(checkRadix(radix)),"/**

 * Returns a string representation of this [Int] value in the specified [radix].

 *

 * @throws IllegalArgumentException when [radix] is not a valid radix for number to string conversion.

 */",f16618:m237
58521,"@SinceKotlin(""1.5"") @WasExperimental(ExperimentalUnsignedTypes::class) @kotlin.internal.InlineOnly public inline fun UIntRange.random(): UInt","{
    return random(Random)
}","/**

 * Returns a random element from this range.

 * 

 * @throws IllegalArgumentException if this range is empty.

 */",f17090:m213
14994,"@SinceKotlin(""1.4"") @Suppress(""ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS"") public actual fun FloatArray.sort(fromIndex: Int = 0, toIndex: Int = size): Unit","{
    AbstractList.checkRangeIndexes(fromIndex, toIndex, size)
    sortArray(this, fromIndex, toIndex)
}","/**

 * Sorts a range in the array in-place.

 * 

 * @param fromIndex the start of the range (inclusive) to sort, 0 by default.

 * @param toIndex the end of the range (exclusive) to sort, size of this array by default.

 * 

 * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.

 * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].

 * 

 * @sample samples.collections.Arrays.Sorting.sortRangeOfArray

 */",f3831:m4887
63242,"@SinceKotlin(""1.9"") @kotlin.internal.InlineOnly public actual inline fun StringBuilder.appendLine(value: Int): StringBuilder",append(value).appendLine(),"/** Appends [value] to this [StringBuilder], followed by a line feed character (`\n`). */",f17351:m39
59075,"@SinceKotlin(""1.2"") public fun CharSequence.windowed(size: Int, step: Int = 1, partialWindows: Boolean = false): List<String>","{
    return windowed(size, step, partialWindows) { it.toString() }
}","/**

 * Returns a list of snapshots of the window of the given [size]

 * sliding along this char sequence with the given [step], where each

 * snapshot is a string.

 * 

 * Several last strings may have fewer characters than the given [size].

 * 

 * Both [size] and [step] must be positive and can be greater than the number of elements in this char sequence.

 * @param size the number of elements to take in each window

 * @param step the number of elements to move the window forward by on an each step, by default 1

 * @param partialWindows controls whether or not to keep partial windows in the end if any,

 * by default `false` which means partial windows won't be preserved

 * 

 * @sample samples.collections.Sequences.Transformations.takeWindows

 */",f17097:m4625
14112,"internal fun <E> Array<E>.resetRange(fromIndex: Int, toIndex: Int)","{
    arrayFill(@Suppress(""UNCHECKED_CAST"") (this as Array<Any?>), fromIndex, toIndex, null)
}","/**

 * Resets a range of array elements at a specified [fromIndex] (inclusive) to [toIndex] (exclusive) range of indices

 * to some implementation-specific _uninitialized_ value.

 * In particular, references stored in these elements are released and become available for garbage collection.

 * Attempts to read _uninitialized_ values work in implementation-dependent manner,

 * either throwing exception or returning some kind of implementation-specific default value.

 */",f3730:m147
58519,"@SinceKotlin(""1.7"") public fun UIntProgression.lastOrNull(): UInt?","{
    return if (isEmpty()) null else this.last
}","/**

 * Returns the last element, or `null` if the progression is empty.

 * 

 * @sample samples.collections.Collections.Elements.last

 */",f17090:m173
52884,"@SinceKotlin(""1.6"") @WasExperimental(ExperimentalStdlibApi::class) public actual fun Long.rotateLeft(bitCount: Int): Long","{
    if ((bitCount and 31) != 0) {
        val low = this.low
        val high = this.high
        val newLow = low.shl(bitCount) or high.ushr(-bitCount)
        val newHigh = high.shl(bitCount) or low.ushr(-bitCount)
        return if ((bitCount and 32) == 0) Long(newLow, newHigh) else Long(newHigh, newLow)
    } else {
        return if ((bitCount and 32) == 0) this else Long(high, low)
    }
}","/**

 * Rotates the binary representation of this [Long] number left by the specified [bitCount] number of bits.

 * The most significant bits pushed out from the left side reenter the number as the least significant bits on the right side.

 *

 * Rotating the number left by a negative bit count is the same as rotating it right by the negated bit count:

 * `number.rotateLeft(-n) == number.rotateRight(n)`

 *

 * Rotating by a multiple of [Long.SIZE_BITS] (64) returns the same number, or more generally

 * `number.rotateLeft(n) == number.rotateLeft(n % 64)`

 */",f16581:m451
43619,fun BuildResult.assertTasksPackedToCache(vararg taskPaths: String),"{
    taskPaths.forEach { assertOutputContains(""Stored cache entry for task '$it' with cache key "") }
}","/**

 * Assert new cache entry was created for given [taskPaths].

 */",f13463:m251
40431,internal fun runTestCase(testCaseId: TestCaseId),"{
    val testRun = testRunProvider.getSingleTestRun(testCaseId, testRunSettings)
    performTestRun(testRun)
}","/**

     * Run JUnit test.

     *

     * This function should be called from a method annotated with [org.junit.jupiter.api.Test].

     */",f12847:m101
63597,public actual fun BooleanArray.toTypedArray(): Array<Boolean>,"{
    return Array(size) { index -> this[index] }
}","/**

 * Returns a *typed* object array containing all of the elements of this primitive array.

 */",f17396:m5237
63252,public actual fun String.toShort(): Short,toShortOrNull() ?: numberFormatError(this),"/**

 * Parses the string as a [Short] number and returns the result.

 * @throws NumberFormatException if the string is not a valid representation of a number.

 */",f17352:m59
15014,private fun Char.getLetterType(): Int,"{
    val ch = this.code
    val index = binarySearchRange(rangeStart, ch)
    val rangeStart = rangeStart[index]
    val rangeEnd = rangeStart + rangeLength[index] - 1
    val code = rangeCategory[index]
    if (ch > rangeEnd) {
        return 0
    }
    val lastTwoBits = code and 0x3
    if (lastTwoBits == 0) {
        var shift = 2
        var threshold = rangeStart
        for (i in 0 .. 1) {
            threshold += (code shr shift) and 0x7f
            if (threshold > ch) {
                return 3
            }
            shift += 7
            threshold += (code shr shift) and 0x7f
            if (threshold > ch) {
                return 0
            }
            shift += 7
        }
        return 3
    }
    if (code <= 0x7) {
        return lastTwoBits
    }
    val distance = (ch - rangeStart)
    val shift = if (code <= 0x1F) distance % 2 else distance
    return (code shr (2 * shift)) and 0x3
}","/**

 * Returns

 *   - `1` if the character is a lower case letter,

 *   - `2` if the character is an upper case letter,

 *   - `3` if the character is a letter but not a lower or upper case letter,

 *   - `0` otherwise.

 */",f3835:m161
57089,"public fun File.forEachLine(charset: Charset = Charsets.UTF_8, action: (line: String) -> Unit): Unit","{
    BufferedReader(InputStreamReader(FileInputStream(this), charset)).forEachLine(action)
}","/**

 * Reads this file line by line using the specified [charset] and calls [action] for each line.

 * Default charset is UTF-8.

 *

 * You may use this function on huge files.

 *

 * @param charset character set to use.

 * @param action function to process file lines.

 */",f16956:m465
54722,"public actual fun LongArray.copyOfRange(fromIndex: Int, toIndex: Int): LongArray","{
    AbstractList.checkRangeIndexes(fromIndex, toIndex, size)
    return withType(""LongArray"", this.asDynamic().slice(fromIndex, toIndex))
}","/**

 * Returns a new array which is a copy of the specified range of the original array.

 * 

 * @param fromIndex the start of the range (inclusive) to copy.

 * @param toIndex the end of the range (exclusive) to copy.

 * 

 * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.

 * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].

 */",f16713:m2185
63496,public actual fun FloatArray.copyOf(): FloatArray,"{
    return this.copyOfUninitializedElements(size)
}","/**

 * Returns new array which is a copy of the original array.

 * 

 * @sample samples.collections.Arrays.CopyOfOperations.copyOf

 */",f17396:m2755
48024,private fun DefaultKotlinSourceSet.addDependencyForLegacyImport(libraries: FileCollection),"{
    @Suppress(""DEPRECATION"") val metadataConfigurationName = if (project.isIntransitiveMetadataConfigurationEnabled) {
        intransitiveMetadataConfigurationName
    } else {
        implementationMetadataConfigurationName
    }
    project.dependencies.add(metadataConfigurationName, libraries)
}","/**

 * Legacy resolves [implementationMetadataConfigurationName] and [intransitiveMetadataConfigurationName]

 * to get dependencies for given source set. Therefore, compileDependencyFiles and dependencies in those configurations

 * must be synced.

 */",f15515:m203
61688,public infix fun UShort.until(to: UShort): UIntRange,"{
    if (to <= UShort.MIN_VALUE) return UIntRange.EMPTY
    return this.toUInt() .. (to - 1u).toUInt()
}","/**

 * Returns a range from this value up to but excluding the specified [to] value.

 *

 * If the [to] value is less than or equal to `this` value, then the returned range is empty.

 */",f17250:m81
58699,public fun Short.coerceAtLeast(minimumValue: Short): Short,"{
    return if (this < minimumValue) minimumValue else this
}","/**

 * Ensures that this value is not less than the specified [minimumValue].

 * 

 * @return this value if it's greater than or equal to the [minimumValue] or the [minimumValue] otherwise.

 * 

 * @sample samples.comparisons.ComparableOps.coerceAtLeast

 */",f17092:m2451
58634,"@kotlin.jvm.JvmName(""longRangeContains"") public operator fun ClosedRange<Long>.contains(value: Short): Boolean","{
    return contains(value.toLong())
}","/**

 * Checks if the specified [value] belongs to this range.

 */",f17092:m1367
59012,"public inline fun <R> CharSequence.foldRight(initial: R, operation: (Char, acc: R) -> R): R","{
    var index = lastIndex
    var accumulator = initial
    while (index >= 0) {
        accumulator = operation(get(index--), accumulator)
    }
    return accumulator
}","/**

 * Accumulates value starting with [initial] value and applying [operation] from right to left

 * to each character and current accumulator value.

 * 

 * Returns the specified [initial] value if the char sequence is empty.

 * 

 * @param [operation] function that takes a character and current accumulator value, and calculates the next accumulator value.

 */",f17097:m2277
14792,"@Deprecated(""Use Kotlin compiler 1.4 to avoid deprecation warning."") @SinceKotlin(""1.3"") @DeprecatedSinceKotlin(hiddenSince = ""1.4"") @ExperimentalUnsignedTypes public infix fun UIntArray.contentEquals(other: UIntArray): Boolean","{
    return this.contentEquals(other)
}","/**

 * Checks if the two specified arrays are *structurally* equal to one another.

 * 

 * Two arrays are considered structurally equal if they have the same size, and elements at corresponding indices are equal.

 * 

 * @param other the array to compare with this array.

 * @return `true` if the two arrays are structurally equal, `false` otherwise.

 * 

 * @sample samples.collections.Arrays.ContentOperations.intArrayContentEquals

 */",f3828:m255
48031,private fun CInteropMetadataDependencyTransformationTask.configureTaskOrder(),"{
    val tasksForVisibleSourceSets = Callable {
        val allVisibleSourceSets = sourceSet.dependsOnClosure + sourceSet.getAdditionalVisibleSourceSets()
        project.tasks.withType<CInteropMetadataDependencyTransformationTask>().matching { it.sourceSet in allVisibleSourceSets }
    }
    mustRunAfter(tasksForVisibleSourceSets)
}","/**

 * The transformation tasks will internally access the lazy [GranularMetadataTransformation.metadataDependencyResolutionsOrEmpty] property

 * which internally will potentially resolve dependencies. Having multiple tasks accessing this synchronized lazy property

 * during execution and/or configuration phase will result in an internal deadlock in Gradle

 * `DefaultResourceLockCoordinationService.withStateLock`

 *

 * To avoid this deadlock tasks shall be ordered, so that dependsOn source sets (and source sets visible based on associate compilations)

 * will run the transformation first.

 */",f15517:m179
57149,"@SinceKotlin(""1.1"") @kotlin.internal.InlineOnly public actual inline fun maxOf(a: Int, b: Int, c: Int): Int","{
    return maxOf(a, maxOf(b, c))
}","/**

 * Returns the greater of three values.

 */",f16966:m225
43496,fun Path.addPublicVal(): Path,"{
    appendText(""\nval integerValue${changeCounter.incrementAndGet()} = 25\n"")
    return this
}","/**

 * Appends top-level `public val` to the content of the file.

 * Throws SecurityException or IOException, if append failed.

 * Every call to [addPrivateVal] or [addPublicVal] generates a new value name.

 */",f13446:m47
23019,"fun Project.configureCommonPublicationSettingsForGradle(signingRequired: Boolean, sbom: Boolean = true)","{
    plugins.withId(""maven-publish"") { extensions.configure<PublishingExtension> { publications.withType<MavenPublication>().configureEach {
        configureKotlinPomAttributes(project)
        if (sbom && project.name !in internalPlugins) {
            if (name == ""pluginMaven"") {
                val sbomTask = configureSbom(target = ""PluginMaven"")
                artifact(sbomTask) {
                    extension = ""spdx.json""
                    builtBy(sbomTask)
                }
            } else if (name == ""Main"") {
                val sbomTask = configureSbom()
                artifact(sbomTask) {
                    extension = ""spdx.json""
                    builtBy(sbomTask)
                }
            }
        }
    } } }
    configureDefaultPublishing(signingRequired)
}","/**

 * Configures common pom configuration parameters

 */",f8830:m139
48202,fun hasFailedTests(path: String): Boolean,"{
    return reportHasFailedTests[path] ?: false
}","/**

     * Checks whether [KotlinTestReport] defined by [path] contains any children test tasks that failed during the build

     */",f15572:m101
18964,private fun mustNotBeWrittenToStubs(flags: Int): Boolean,"{
    return Flags.MEMBER_KIND.get(flags) == MemberKind.FAKE_OVERRIDE
}","/**

 * @see org.jetbrains.kotlin.analysis.decompiler.psi.text.mustNotBeWrittenToDecompiledText

 */",f5588:m179
58942,public inline fun CharSequence.singleOrNull(predicate: (Char) -> Boolean): Char?,"{
    var single: Char? = null
    var found = false
    for (element in this) {
        if (predicate(element)) {
            if (found) return null
            single = element
            found = true
        }
    }
    if (!found) return null
    return single
}","/**

 * Returns the single character matching the given [predicate], or `null` if character was not found or more than one character was found.

 */",f17097:m611
58287,"@SinceKotlin(""1.5"") @WasExperimental(ExperimentalUnsignedTypes::class) public fun String.toUInt(): UInt",toUIntOrNull() ?: numberFormatError(this),"/**

 * Parses the string as an [UInt] number and returns the result.

 * @throws NumberFormatException if the string is not a valid representation of a number.

 */",f17067:m171
52020,"fun render(withSeverity: Boolean = true, withLocation: Boolean = true, withException: Boolean = true, withStackTrace: Boolean = false): String","buildString {
    if (withSeverity) {
        append(severity.name)
        append(' ')
    }
    append(message)
    if (withLocation && (sourcePath != null || location != null)) {
        append("" ("")
        sourcePath?.let { append(it.substringAfterLast(File.separatorChar)) }
        location?.let {
            append(':')
            append(it.start.line)
            append(':')
            append(it.start.col)
        }
        append(')')
    }
    if (withException && exception != null) {
        append("": "")
        append(exception)
        if (withStackTrace) { ByteArrayOutputStream().use { os ->
            val ps = PrintStream(os)
            exception.printStackTrace(ps)
            ps.flush()
            append(""\n"")
            append(os.toString())
        } }
    }
}","/**

     * Render diagnostics message as a string in a form:

     * ""[SEVERITY ]message[ (file:line:column)][: exception message[\n exception stacktrace]]""

     * @param withSeverity add severity prefix, true by default

     * @param withLocation add error location in the compiled script, if present, true by default

     * @param withException add exception message, if present, true by default

     * @param withStackTrace add exception stacktrace, if exception is present and [withException] is true, false by default

     */",f16426:m91
63674,"@Deprecated(""Use Kotlin compiler 1.4 to avoid deprecation warning."") @SinceKotlin(""1.3"") @DeprecatedSinceKotlin(hiddenSince = ""1.4"") @ExperimentalUnsignedTypes public fun UIntArray.contentHashCode(): Int","{
    return this.contentHashCode()
}","/**

 * Returns a hash code based on the contents of this array as if it is [List].

 */",f17408:m399
20185,public fun KtCallableSymbol.getDirectlyOverriddenSymbols(): List<KtCallableSymbol>,withValidityAssertion { analysisSession.symbolDeclarationOverridesProvider.getDirectlyOverriddenSymbols(this) },"/**

     * Return a list of explicitly declared symbols which are **directly** overridden by symbol

     **

     * E.g., if we have `A.foo` overrides `B.foo` overrides `C.foo`, only declarations directly overridden `B.foo` will be returned

     *

     * Unwraps substituted overridden symbols

     * (see [INTERSECTION_OVERRIDE][org.jetbrains.kotlin.analysis.api.symbols.KtSymbolOrigin.INTERSECTION_OVERRIDE] and [SUBSTITUTION_OVERRIDE][org.jetbrains.kotlin.analysis.api.symbols.KtSymbolOrigin.SUBSTITUTION_OVERRIDE]),

     * so such fake declaration won't be returned.

     *

     *  @see getAllOverriddenSymbols

     */",f5787:m75
14904,public actual fun FloatArray.copyOf(): FloatArray,"{
    return this.copyOfUninitializedElements(size)
}","/**

 * Returns new array which is a copy of the original array.

 * 

 * @sample samples.collections.Arrays.CopyOfOperations.copyOf

 */",f3831:m2703
14891,"@SinceKotlin(""1.3"") @Suppress(""ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS"") public actual fun ByteArray.copyInto(destination: ByteArray, destinationOffset: Int = 0, startIndex: Int = 0, endIndex: Int = size): ByteArray","{
    arrayCopy(this, startIndex, destination, destinationOffset, endIndex - startIndex)
    return destination
}","/**

 * Copies this array or its subrange into the [destination] array and returns that array.

 * 

 * It's allowed to pass the same array in the [destination] and even specify the subrange so that it overlaps with the destination range.

 * 

 * @param destination the array to copy to.

 * @param destinationOffset the position in the [destination] array to copy to, 0 by default.

 * @param startIndex the beginning (inclusive) of the subrange to copy, 0 by default.

 * @param endIndex the end (exclusive) of the subrange to copy, size of this array by default.

 * 

 * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of this array indices or when `startIndex > endIndex`.

 * @throws IndexOutOfBoundsException when the subrange doesn't fit into the [destination] array starting at the specified [destinationOffset],

 * or when that index is out of the [destination] array indices range.

 * 

 * @return the [destination] array.

 */",f3831:m2245
54771,public actual fun <T: Comparable<T>> Array<out T>.sort(): Unit,"{
    if (size > 1) sortArray(this)
}","/**

 * Sorts the array in-place according to the natural order of its elements.

 * 

 * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.

 * 

 * @sample samples.collections.Arrays.Sorting.sortArrayOfComparable

 */",f16713:m3211
59021,"@SinceKotlin(""1.4"") @OptIn(kotlin.experimental.ExperimentalTypeInference::class) @OverloadResolutionByLambdaReturnType @kotlin.internal.InlineOnly public inline fun <R: Comparable<R>> CharSequence.maxOf(selector: (Char) -> R): R","{
    if (isEmpty()) throw NoSuchElementException()
    var maxValue = selector(this[0])
    for (i in 1 .. lastIndex) {
        val v = selector(this[i])
        if (maxValue < v) {
            maxValue = v
        }
    }
    return maxValue
}","/**

 * Returns the largest value among all values produced by [selector] function

 * applied to each character in the char sequence.

 * 

 * @throws NoSuchElementException if the char sequence is empty.

 */",f17097:m2607
13560,@kotlin.internal.IntrinsicConstEvaluation public inline operator fun div(other: Short): Int,this.toInt() / other.toInt(),"/** Divides this value by the other value, truncating the result to an integer that is closer to zero. */",f3686:m1247
57248,"public fun IntArray.binarySearch(element: Int, fromIndex: Int = 0, toIndex: Int = size): Int","{
    return java.util.Arrays.binarySearch(this, fromIndex, toIndex, element)
}","/**

 * Searches the array or the range of the array for the provided [element] using the binary search algorithm.

 * The array is expected to be sorted, otherwise the result is undefined.

 * 

 * If the array contains multiple elements equal to the specified [element], there is no guarantee which one will be found.

 * 

 * @param element the to search for.

 * @param fromIndex the start of the range (inclusive) to search in, 0 by default.

 * @param toIndex the end of the range (exclusive) to search in, size of this array by default.

 * 

 * @return the index of the element, if it is contained in the array within the specified range;

 * otherwise, the inverted insertion point `(-insertion point - 1)`.

 * The insertion point is defined as the index at which the element should be inserted,

 * so that the array (or the specified subrange of array) still remains sorted.

 * 

 * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.

 * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].

 */",f16970:m673
56970,"@SinceKotlin(""1.3"") public actual fun <R, T> (suspend R.() -> T).createCoroutineUnintercepted(receiver: R, completion: Continuation<T>): Continuation<Unit>","{
    val probeCompletion = probeCoroutineCreated(completion)
    return if (this is BaseContinuationImpl) create(receiver, probeCompletion) else {
        createCoroutineFromSuspendFunction(probeCompletion) { (this as Function2<R, Continuation<T>, Any?>).invoke(receiver, it) }
    }
}","/**

 * Creates unintercepted coroutine with receiver type [R] and result type [T].

 * This function creates a new, fresh instance of suspendable computation every time it is invoked.

 *

 * To start executing the created coroutine, invoke `resume(Unit)` on the returned [Continuation] instance.

 * The [completion] continuation is invoked when coroutine completes with result or exception.

 *

 * This function returns unintercepted continuation.

 * Invocation of `resume(Unit)` starts coroutine immediately in the invoker's call stack without going through the

 * [ContinuationInterceptor] that might be present in the completion's [CoroutineContext].

 * It is the invoker's responsibility to ensure that a proper invocation context is established.

 * Note that [completion] of this function may get invoked in an arbitrary context.

 *

 * [Continuation.intercepted] can be used to acquire the intercepted continuation.

 * Invocation of `resume(Unit)` on intercepted continuation guarantees that execution of

 * both the coroutine and [completion] happens in the invocation context established by

 * [ContinuationInterceptor].

 *

 * Repeated invocation of any resume function on the resulting continuation corrupts the

 * state machine of the coroutine and may result in arbitrary behaviour or exception.

 */",f16944:m269
56253,"@SinceKotlin(""1.5"") @kotlin.internal.InlineOnly @kotlin.internal.IntrinsicConstEvaluation public inline fun Double.mod(other: Float): Double",this.mod(other.toDouble()),"/**

 * Calculates the remainder of flooring division of this value (dividend) by the other value (divisor).

 *

 * The result is either zero or has the same sign as the _divisor_ and has the absolute value less than the absolute value of the divisor.

 *

 * If the result cannot be represented exactly, it is rounded to the nearest representable number. In this case the absolute value of the result can be less than or _equal to_ the absolute value of the divisor.

 */",f16842:m681
58286,"@SinceKotlin(""1.5"") @WasExperimental(ExperimentalUnsignedTypes::class) public fun String.toUShort(radix: Int): UShort",toUShortOrNull(radix) ?: numberFormatError(this),"/**

 * Parses the string as a [UShort] number and returns the result.

 * @throws NumberFormatException if the string is not a valid representation of a number.

 * @throws IllegalArgumentException when [radix] is not a valid radix for string to number conversion.

 */",f17067:m153
59086,"@SinceKotlin(""1.5"") @WasExperimental(ExperimentalUnsignedTypes::class) public fun maxOf(a: ULong, b: ULong): ULong","{
    return if (a >= b) a else b
}","/**

 * Returns the greater of two values.

 */",f17098:m55
14920,"public actual fun IntArray.copyOfRange(fromIndex: Int, toIndex: Int): IntArray","{
    checkCopyOfRangeArguments(fromIndex, toIndex, size)
    return copyOfUninitializedElements(fromIndex, toIndex)
}","/**

 * Returns a new array which is a copy of the specified range of the original array.

 * 

 * @param fromIndex the start of the range (inclusive) to copy.

 * @param toIndex the end of the range (exclusive) to copy.

 * 

 * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.

 * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].

 */",f3831:m3093
14859,"@Deprecated(""Use Kotlin compiler 1.4 to avoid deprecation warning."") @SinceKotlin(""1.1"") @DeprecatedSinceKotlin(hiddenSince = ""1.4"") public fun FloatArray.contentHashCode(): Int","{
    return this.contentHashCode()
}","/**

 * Returns a hash code based on the contents of this array as if it is [List].

 */",f3831:m1505
57146,"@SinceKotlin(""1.1"") public actual fun <T: Comparable<T>> maxOf(a: T, b: T, c: T): T","{
    return maxOf(a, maxOf(b, c))
}","/**

 * Returns the greater of three values.

 * 

 * If there are multiple equal maximal values, returns the first of them.

 */",f16966:m169
54780,"@SinceKotlin(""1.4"") @Suppress(""ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS"") public actual fun CharArray.sort(fromIndex: Int = 0, toIndex: Int = size): Unit","{
    AbstractList.checkRangeIndexes(fromIndex, toIndex, size)
    sortArrayWith(this.unsafeCast<Array<Char>>(), fromIndex, toIndex, naturalOrder())
}","/**

 * Sorts a range in the array in-place.

 * 

 * @param fromIndex the start of the range (inclusive) to sort, 0 by default.

 * @param toIndex the end of the range (exclusive) to sort, size of this array by default.

 * 

 * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.

 * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].

 * 

 * @sample samples.collections.Arrays.Sorting.sortRangeOfArray

 */",f16713:m3521
10016,"inline fun <T: PhaseContext, R> newEngine(newContext: T, action: (PhaseEngine<T>) -> R): R","{
    val newEngine = PhaseEngine(phaseConfig, phaserState, newContext)
    return action(newEngine)
}","/**

     * Create a new PhaseEngine instance for an existing context that should not be disposed after the action.

     * This is useful for creating engines for a sub/super context type.

     */",f3404:m241
53174,"@LowPriorityInOverloadResolution @Deprecated(message = ""This API is moved to another package, use 'kotlinx.dom.appendElement' instead."", replaceWith = ReplaceWith(""this.appendElement(name, init)"", ""kotlinx.dom.appendElement"")) @DeprecatedSinceKotlin(warningSince = ""1.4"", errorSince = ""1.6"") @Suppress(""NOTHING_TO_INLINE"") public inline fun Element.appendElement(name: String, noinline init: Element.() -> Unit): Element","this.newAppendElement(name, init)","/**

 * Appends a newly created element with the specified [name] to this element.

 *

 * The element is initialized with the specified [init] function.

 */",f16630:m55
54681,"@SinceKotlin(""1.4"") public actual fun CharArray?.contentHashCode(): Int","{
    return contentHashCodeInternal()
}","/**

 * Returns a hash code based on the contents of this array as if it is [List].

 */",f16713:m1015
64875,"@Deprecated(""Provided for binary compatibility"", level = DeprecationLevel.HIDDEN) @JvmName(""assertFails"") public fun assertFailsNoInline(message: String?, block: () -> Unit): Throwable","assertFails(message, block)",/** @suppress */,f17532:m79
58078,@kotlin.internal.InlineOnly public inline operator fun plus(other: UByte): UInt,this.toUInt().plus(other.toUInt()),/** Adds the other value to this value. */,f17059:m147
14797,"@Deprecated(""Use Kotlin compiler 1.4 to avoid deprecation warning."") @SinceKotlin(""1.3"") @DeprecatedSinceKotlin(hiddenSince = ""1.4"") @ExperimentalUnsignedTypes public fun ULongArray.contentHashCode(): Int","{
    return this.contentHashCode()
}","/**

 * Returns a hash code based on the contents of this array as if it is [List].

 */",f3828:m421
58726,public operator fun <T> Set<T>.minus(elements: Sequence<T>): Set<T>,"{
    val result = LinkedHashSet<T>(this)
    result.removeAll(elements)
    return result
}","/**

 * Returns a set containing all elements of the original set except the elements contained in the given [elements] sequence.

 * 

 * The returned set preserves the element iteration order of the original set.

 */",f17095:m117
52872,"@SinceKotlin(""1.4"") public actual fun Int.countOneBits(): Int","{
    var v = this
    v = (v and 0x55555555) + (v.ushr(1) and 0x55555555)
    v = (v and 0x33333333) + (v.ushr(2) and 0x33333333)
    v = (v and 0x0F0F0F0F) + (v.ushr(4) and 0x0F0F0F0F)
    v = (v and 0x00FF00FF) + (v.ushr(8) and 0x00FF00FF)
    v = (v and 0x0000FFFF) + (v.ushr(16))
    return v
}","/**

 * Counts the number of set bits in the binary representation of this [Int] number.

 */",f16581:m195
58231,@kotlin.internal.InlineOnly public inline operator fun minus(other: ULong): ULong,ULong(this.data.minus(other.data)),/** Subtracts the other value from this value. */,f17066:m191
9885,"private fun ObjCExportCodeGenerator.createReverseAdapter(irFunction: IrFunction, baseMethod: ObjCMethodSpec.BaseMethod<IrSimpleFunctionSymbol>, vtableIndex: Int?, itablePlace: ClassLayoutBuilder.InterfaceTablePlace?): ObjCExportCodeGenerator.KotlinToObjCMethodAdapter","{
    val selector = baseMethod.selector
    val kotlinToObjC = generateKotlinToObjCBridge(irFunction, baseMethod).bitcast(llvm.int8PtrType)
    return KotlinToObjCMethodAdapter(selector, itablePlace ?: ClassLayoutBuilder.InterfaceTablePlace.INVALID, vtableIndex ?: -1, kotlinToObjC)
}","/**

 * Reverse adapters are required when Kotlin code invokes virtual method which might be overriden on Objective-C side.

 * Example:

 *

 * ```kotlin

 * interface I {

 *     fun foo()

 * }

 *

 * fun usage(i: I) {

 *     i.foo() // Here we invoke

 * }

 * ```

 *

 * ```swift

 * class C : I {

 *     override func foo() { ... }

 * }

 *

 * FileKt.usage(C()) // C.foo is invoked via reverse method adapter.

 * ```

 */",f3387:m2809
9832,fun autoreleaseAndRet(value: LLVMValueRef),"{
    onReturn()
    val result = call(objCExportCodegen.objcAutoreleaseReturnValue, listOf(value))
    LLVMSetTailCall(result, 1)
    rawRet(result)
}","/**

     * autoreleases and returns [value].

     * It is equivalent to `ret(autorelease(value))`, but optimizes the autorelease out if the caller is prepared for it.

     *

     * See the Clang documentation and the Obj-C runtime source code for more details:

     * https://clang.llvm.org/docs/AutomaticReferenceCounting.html#arc-runtime-objc-autoreleasereturnvalue

     * https://github.com/opensource-apple/objc4/blob/cd5e62a5597ea7a31dccef089317abb3a661c154/runtime/objc-object.h#L930

     */",f3387:m123
58773,"public inline fun <T, R: Comparable<R>> Sequence<T>.sortedByDescending(crossinline selector: (T) -> R?): Sequence<T>","{
    return sortedWith(compareByDescending(selector))
}","/**

 * Returns a sequence that yields elements of this sequence sorted descending according to natural sort order of the value returned by specified [selector] function.

 * 

 * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.

 *

 * The operation is _intermediate_ and _stateful_.

 */",f17096:m1219
56083,@kotlin.internal.InlineOnly public inline operator fun <T> MutableCollection<in T>.plusAssign(elements: Sequence<T>),"{
    this.addAll(elements)
}","/**

 * Adds all elements of the given [elements] sequence to this mutable collection.

 */",f16825:m137
63367,"@Suppress(""UNCHECKED_CAST"") @kotlin.internal.InlineOnly public actual inline fun <T> (suspend () -> T).startCoroutineUninterceptedOrReturn(completion: Continuation<T>): Any?","startCoroutineUninterceptedOrReturnIntrinsic0(this, if (this !is CoroutineImpl) createSimpleCoroutineFromSuspendFunction(completion) else completion)","/**

 * Starts an unintercepted coroutine without a receiver and with result type [T] and executes it until its first suspension.

 * Returns the result of the coroutine or throws its exception if it does not suspend or [COROUTINE_SUSPENDED] if it suspends.

 * In the latter case, the [completion] continuation is invoked when the coroutine completes with a result or an exception.

 *

 * The coroutine is started directly in the invoker's thread without going through the [ContinuationInterceptor] that might

 * be present in the completion's [CoroutineContext]. It is the invoker's responsibility to ensure that a proper invocation

 * context is established.

 *

 * This function is designed to be used from inside of [suspendCoroutineUninterceptedOrReturn] to resume the execution of the suspended

 * coroutine using a reference to the suspending function.

 */",f17386:m21
54817,"@SinceKotlin(""1.4"") public actual fun maxOf(a: Float, vararg other: Float): Float","{
    var max = a
    for (e in other) max = maxOf(max, e)
    return max
}","/**

 * Returns the greater of the given values.

 * 

 * If any value is `NaN`, returns `NaN`.

 */",f16714:m405
54679,"@SinceKotlin(""1.4"") public actual fun DoubleArray?.contentHashCode(): Int","{
    return contentHashCodeInternal()
}","/**

 * Returns a hash code based on the contents of this array as if it is [List].

 */",f16713:m983
56154,@kotlin.internal.InlineOnly public inline fun <R> run(block: () -> R): R,"{
    contract { callsInPlace(block, InvocationKind.EXACTLY_ONCE) }
    return block()
}","/**

 * Calls the specified function [block] and returns its result.

 *

 * For detailed usage information see the documentation for [scope functions](https://kotlinlang.org/docs/reference/scope-functions.html#run).

 */",f16833:m67
55967,"@SinceKotlin(""1.3"") @kotlin.internal.InlineOnly @Suppress(""UPPER_BOUND_CANNOT_BE_ARRAY"") public inline fun <C, R> C.ifEmpty(defaultValue: () -> R): R where C : Array<*>, C : R","{
    contract { callsInPlace(defaultValue, InvocationKind.AT_MOST_ONCE) }
    return if (isEmpty()) defaultValue() else this
}","/**

 * Returns this array if it's not empty

 * or the result of calling [defaultValue] function if the array is empty.

 *

 * @sample samples.collections.Arrays.Usage.arrayIfEmpty

 */",f16821:m113
16524,"fun withJumpingLock(target: FirElementWithResolveState, phase: FirResolvePhase, actionUnderLock: () -> Unit, actionOnCycle: () -> Unit)","{
    checker.lazyResolveToPhaseInside(phase) { target.withJumpingLockImpl(phase, actionUnderLock, actionOnCycle) }
}","/**

     * Locks on an a [FirElementWithResolveState] to resolve from `phase - 1` to [phase] and

     * then updates the [resolve state][FirElementWithResolveState.resolveState] to a [phase].

     * Does nothing if [target] already has at least [phase] phase.

     *

     * @param actionUnderLock will be executed once under the lock if [target] is not yet resolved to [phase] phase and there are no cycles

     * @param actionOnCycle will be executed once without the lock if [target] is not yet resolved to [phase] phase and a resolution cycle is found

     *

     * @see withWriteLock

     * @see withJumpingLockImpl

     */",f4129:m371
55129,@kotlin.internal.IntrinsicConstEvaluation public inline operator fun times(other: Int): Long,this.times(other.toLong()),/** Multiplies this value by the other value. */,f16727:m2649
56515,"@SinceKotlin(""1.4"") @kotlin.internal.InlineOnly public inline fun StringBuilder.appendLine(value: StringBuffer?): StringBuilder",append(value).appendLine(),"/** Appends [value] to this [StringBuilder], followed by a line feed character (`\n`). */",f16890:m397
64139,@kotlin.internal.IntrinsicConstEvaluation public override fun toFloat(): Float,wasm_f32_convert_i32_s(this.toInt()),"/**

     * Converts this [Short] value to [Float].

     *

     * The resulting `Float` value represents the same numerical value as this `Short`.

     */",f17455:m1687
14246,"public fun compareAndSwap(expected: Long, newValue: Long): Long","this::value.compareAndExchangeField(expected, newValue)","/**

     * Atomically sets the value to the given [new value][newValue] if the current value equals the [expected value][expected]

     * and returns the old value in any case.

     *

     * Provides sequential consistent ordering guarantees and cannot fail spuriously.

     */",f3762:m225
53129,public actual fun String.toLong(radix: Int): Long,toLongOrNull(radix) ?: numberFormatError(this),"/**

 * Parses the string as a [Long] number and returns the result.

 * @throws NumberFormatException if the string is not a valid representation of a number.

 * @throws IllegalArgumentException when [radix] is not a valid radix for string to number conversion.

 */",f16618:m125
57125,public fun onEnter(function: (File) -> Boolean): FileTreeWalk,"{
    return FileTreeWalk(start, direction, onEnter = function, onLeave = onLeave, onFail = onFail, maxDepth = maxDepth)
}","/**

     * Sets a predicate [function], that is called on any entered directory before its files are visited

     * and before it is visited itself.

     *

     * If the [function] returns `false` the directory is not entered and neither it nor its files are visited.

     */",f16960:m425
14940,internal fun FloatArray.copyOfUninitializedElements(newSize: Int): FloatArray,"{
    return copyOfUninitializedElements(0, newSize)
}","/**

 * Returns new array which is a copy of the original array with new elements filled with **lateinit** _uninitialized_ values.

 * Attempts to read _uninitialized_ values from this array work in implementation-dependent manner,

 * either throwing exception or returning some kind of implementation-specific default value.

 */",f3831:m3639
58623,@kotlin.internal.InlineOnly public inline operator fun LongRange.contains(value: Int): Boolean,"{
    return (this as ClosedRange<Long>).contains(value)
}","/**

 * Checks if the specified [value] belongs to this range.

 */",f17092:m1171
11890,"@Suppress(""FINAL_UPPER_BOUND"") @ExperimentalForeignApi public fun <T: Short> NativePlacement.alloc(value: T): ShortVarOf<T>",alloc<ShortVarOf<T>> { this.value = value },"/**

 * Allocates variable with given value type and initializes it with given value.

 */",f3606:m53
55634,"@SinceKotlin(""1.1"") @kotlin.internal.InlineOnly public inline infix fun Byte.or(other: Byte): Byte",(this.toInt() or other.toInt()).toByte(),/** Performs a bitwise OR operation between the two values. */,f16775:m25
55959,"@SinceKotlin(""1.1"") public inline fun <T, K, R> Grouping<T, K>.fold(initialValue: R, operation: (accumulator: R, element: T) -> R): Map<K, R>","@Suppress(""UNCHECKED_CAST"") aggregate { _, acc, e, first -> operation(if (first) initialValue else acc as R, e) }","/**

 * Groups elements from the [Grouping] source by key and applies [operation] to the elements of each group sequentially,

 * passing the previously accumulated value and the current element as arguments, and stores the results in a new map.

 * An initial value of accumulator is the same [initialValue] for each group.

 *

 * @param operation a function that is invoked on each element with the following parameters:

 *  - `accumulator`: the current value of the accumulator of the group;

 *  - `element`: the element from the source being accumulated.

 *

 * @return a [Map] associating the key of each group with the result of accumulating the group elements.

 * @sample samples.collections.Grouping.foldByEvenLengthWithConstantInitialValue

 */",f16820:m291
13991,"@SinceKotlin(""1.3"") @Suppress(""ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS"") public actual fun String.toCharArray(startIndex: Int = 0, endIndex: Int = this.length): CharArray","{
    AbstractList.checkBoundsIndexes(startIndex, endIndex, length)
    val rangeSize = endIndex - startIndex
    return toCharArray(this, CharArray(rangeSize), 0, startIndex, rangeSize)
}","/**

 * Returns a [CharArray] containing characters of this string or its substring.

 *

 * @param startIndex the beginning (inclusive) of the substring, 0 by default.

 * @param endIndex the end (exclusive) of the substring, length of this string by default.

 *

 * @throws IndexOutOfBoundsException if [startIndex] is less than zero or [endIndex] is greater than the length of this string.

 * @throws IllegalArgumentException if [startIndex] is greater than [endIndex].

 */",f3713:m719
55635,"@SinceKotlin(""1.1"") @kotlin.internal.InlineOnly public inline infix fun Byte.xor(other: Byte): Byte",(this.toInt() xor other.toInt()).toByte(),/** Performs a bitwise XOR operation between the two values. */,f16775:m35
54710,public actual fun ShortArray.copyOf(newSize: Int): ShortArray,"{
    require(newSize >= 0) { ""Invalid new array size: $newSize."" }
    return fillFrom(this, ShortArray(newSize))
}","/**

 * Returns new array which is a copy of the original array, resized to the given [newSize].

 * The copy is either truncated or padded at the end with zero values if necessary.

 * 

 * - If [newSize] is less than the size of the original array, the copy array is truncated to the [newSize].

 * - If [newSize] is greater than the size of the original array, the extra elements in the copy array are filled with zero values.

 * 

 * @sample samples.collections.Arrays.CopyOfOperations.resizedPrimitiveCopyOf

 */",f16713:m1845
54728,"@SinceKotlin(""1.3"") @Suppress(""ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS"") public actual fun ByteArray.fill(element: Byte, fromIndex: Int = 0, toIndex: Int = size): Unit","{
    AbstractList.checkRangeIndexes(fromIndex, toIndex, size)
    nativeFill(element, fromIndex, toIndex)
}","/**

 * Fills this array or its subrange with the specified [element] value.

 * 

 * @param fromIndex the start of the range (inclusive) to fill, 0 by default.

 * @param toIndex the end of the range (exclusive) to fill, size of this array by default.

 * 

 * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.

 * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].

 */",f16713:m2357
55753,"@ExperimentalStdlibApi @SinceKotlin(""1.9"") @InlineOnly public inline fun String.hexToULong(format: HexFormat = HexFormat.Default): ULong",hexToLong(format).toULong(),"/**

 * Parses an `ULong` value from this string using the specified [format].

 *

 * Note that only [HexFormat.NumberHexFormat] affects parsing,

 * and parsing is performed in case-insensitive manner.

 *

 * @param format the [HexFormat] to use for parsing, [HexFormat.Default] by default.

 *

 * @throws IllegalArgumentException if this string does not comply with the specified [format].

 */",f16790:m507
63482,"@SinceKotlin(""1.3"") @Suppress(""ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS"") public actual fun <T> Array<out T>.copyInto(destination: Array<T>, destinationOffset: Int = 0, startIndex: Int = 0, endIndex: Int = size): Array<T>","{
    AbstractList.checkRangeIndexes(startIndex, endIndex, this.size)
    val rangeSize = endIndex - startIndex
    AbstractList.checkRangeIndexes(destinationOffset, destinationOffset + rangeSize, destination.size)
    kotlin.wasm.internal.copyWasmArray(this.storage, destination.storage, startIndex, destinationOffset, rangeSize)
    return destination
}","/**

 * Copies this array or its subrange into the [destination] array and returns that array.

 * 

 * It's allowed to pass the same array in the [destination] and even specify the subrange so that it overlaps with the destination range.

 * 

 * @param destination the array to copy to.

 * @param destinationOffset the position in the [destination] array to copy to, 0 by default.

 * @param startIndex the beginning (inclusive) of the subrange to copy, 0 by default.

 * @param endIndex the end (exclusive) of the subrange to copy, size of this array by default.

 * 

 * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of this array indices or when `startIndex > endIndex`.

 * @throws IndexOutOfBoundsException when the subrange doesn't fit into the [destination] array starting at the specified [destinationOffset],

 * or when that index is out of the [destination] array indices range.

 * 

 * @return the [destination] array.

 */",f17396:m2197
56490,"@SinceKotlin(""1.1"") public actual fun String.toDoubleOrNull(): Double?","screenFloatValue(this, java.lang.Double::parseDouble)","/**

 * Parses the string as a [Double] number and returns the result

 * or `null` if the string is not a valid representation of a number.

 */",f16885:m287
53466,"@SinceKotlin(""1.4"") public fun Element.removeClass(vararg cssClasses: String): Boolean","{
    if (cssClasses.any { hasClass(it) }) {
        val toBeRemoved = cssClasses.toSet()
        className = className.trim().split(""\\s+"".toRegex()).filter { it !in toBeRemoved }.joinToString("" "")
        return true
    }
    return false
}","/**

 * Removes all [cssClasses] from element. Has no effect if all specified classes are missing in class attribute of the element

 *

 * @return true if at least one class has been removed

 */",f16680:m73
58471,"public inline fun <K, V, R, C: MutableCollection<in R>> Map<out K, V>.flatMapTo(destination: C, transform: (Map.Entry<K, V>) -> Iterable<R>): C","{
    for (element in this) {
        val list = transform(element)
        destination.addAll(list)
    }
    return destination
}","/**

 * Appends all elements yielded from results of [transform] function being invoked on each entry of original map, to the given [destination].

 */",f17089:m185
41476,fun WasmModule.calculateIds(),"{
    fun List<WasmNamedModuleField>.calculateIds(startIndex: Int = 0) {
        for ((index, field) in this.withIndex()) {
            field.id = index + startIndex
        }
    }
    functionTypes.calculateIds()
    recGroupTypes.calculateIds(startIndex = functionTypes.size)
    importedFunctions.calculateIds()
    importedMemories.calculateIds()
    importedTables.calculateIds()
    importedGlobals.calculateIds()
    importedTags.calculateIds()
    elements.calculateIds()
    definedFunctions.calculateIds(startIndex = importedFunctions.size)
    globals.calculateIds(startIndex = importedGlobals.size)
    memories.calculateIds(startIndex = importedMemories.size)
    tables.calculateIds(startIndex = importedTables.size)
    tags.calculateIds(startIndex = importedTags.size)
}","/**

 * Calculate declaration IDs of linked wasm module

 */",f13049:m15
14783,internal fun Char.isWhitespaceImpl(): Boolean,"{
    val ch = this.code
    return ch in 0x0009 .. 0x000d || ch in 0x001c .. 0x0020 || ch == 0x00a0 || ch > 0x1000 && (ch == 0x1680 || ch in 0x2000 .. 0x200a || ch == 0x2028 || ch == 0x2029 || ch == 0x202f || ch == 0x205f || ch == 0x3000)
}","/**

 * Returns `true` if this character is a whitespace.

 */",f3827:m27
16529,fun pop(): FirInProcessOfResolvingToJumpingPhaseState,"{
    val states = stateStackHolder.get()
    val currentState = states.removeLast()
    val prevState = states.lastOrNull()
    requireWithAttachment(condition = prevState == null || prevState.waitingFor === currentState, message = { ""The lock contact is violated"" })
    prevState?.waitingFor = null
    if (states.isEmpty()) {
        stateStackHolder.remove()
    }
    return currentState
}","/**

     * Pops from the top of the stack the last state and return it.

     * Updates [waitingFor][FirInProcessOfResolvingToJumpingPhaseState.waitingFor] for

     * the previous state if needed

     *

     * Note: it doesn't release the [lock][FirInProcessOfResolvingToJumpingPhaseState.latch]

     */",f4129:m779
58909,"@kotlin.jvm.JvmName(""averageOfDouble"") public fun Sequence<Double>.average(): Double","{
    var sum: Double = 0.0
    var count: Int = 0
    for (element in this) {
        sum += element
        checkCountOverflow(++count)
    }
    return if (count == 0) Double.NaN else sum / count
}","/**

 * Returns an average value of elements in the sequence.

 *

 * The operation is _terminal_.

 */",f17096:m6023
58013,"@SinceKotlin(""1.5"") @WasExperimental(ExperimentalUnsignedTypes::class, ExperimentalStdlibApi::class) @kotlin.internal.InlineOnly public inline fun UShort.countLeadingZeroBits(): Int",toShort().countLeadingZeroBits(),"/**

 * Counts the number of consecutive most significant bits that are zero in the binary representation of this [UShort] number.

 */",f17056:m471
14069,"public fun compareAndExchange(expected: T, newValue: T): T","this::value.compareAndExchangeField(expected, newValue)","/**

     * Atomically sets the value to the given [new value][newValue] if the current value equals the [expected value][expected]

     * and returns the old value in any case.

     *

     * Provides sequential consistent ordering guarantees and cannot fail spuriously.

     *

     * Comparison of values is done by reference.

     */",f3718:m325
54773,"@SinceKotlin(""1.4"") @Suppress(""ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS"") public actual fun <T: Comparable<T>> Array<out T>.sort(fromIndex: Int = 0, toIndex: Int = size): Unit","{
    AbstractList.checkRangeIndexes(fromIndex, toIndex, size)
    sortArrayWith(this, fromIndex, toIndex, naturalOrder())
}","/**

 * Sorts a range in the array in-place.

 * 

 * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.

 * 

 * @param fromIndex the start of the range (inclusive) to sort, 0 by default.

 * @param toIndex the end of the range (exclusive) to sort, size of this array by default.

 * 

 * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.

 * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].

 * 

 * @sample samples.collections.Arrays.Sorting.sortRangeOfArrayOfComparable

 */",f16713:m3255
14900,public actual fun ByteArray.copyOf(): ByteArray,"{
    return this.copyOfUninitializedElements(size)
}","/**

 * Returns new array which is a copy of the original array.

 * 

 * @sample samples.collections.Arrays.CopyOfOperations.copyOf

 */",f3831:m2631
14942,internal fun BooleanArray.copyOfUninitializedElements(newSize: Int): BooleanArray,"{
    return copyOfUninitializedElements(0, newSize)
}","/**

 * Returns new array which is a copy of the original array with new elements filled with **lateinit** _uninitialized_ values.

 * Attempts to read _uninitialized_ values from this array work in implementation-dependent manner,

 * either throwing exception or returning some kind of implementation-specific default value.

 */",f3831:m3675
58832,"@SinceKotlin(""1.4"") @OptIn(kotlin.experimental.ExperimentalTypeInference::class) @OverloadResolutionByLambdaReturnType @kotlin.internal.InlineOnly public inline fun <T> Sequence<T>.maxOfOrNull(selector: (T) -> Float): Float?","{
    val iterator = iterator()
    if (!iterator.hasNext()) return null
    var maxValue = selector(iterator.next())
    while (iterator.hasNext()) {
        val v = selector(iterator.next())
        maxValue = maxOf(maxValue, v)
    }
    return maxValue
}","/**

 * Returns the largest value among all values produced by [selector] function

 * applied to each element in the sequence or `null` if there are no elements.

 * 

 * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.

 *

 * The operation is _terminal_.

 */",f17096:m3101
52546,"@SinceKotlin(""1.2"") public actual fun <T> Iterable<T>.shuffled(): List<T>",toMutableList().apply { shuffle() },"/**

 * Returns a new list with the elements of this collection randomly shuffled.

 */",f16542:m195
55914,public fun <T> linkedSetOf(vararg elements: T): LinkedHashSet<T>,elements.toCollection(LinkedHashSet(mapCapacity(elements.size))),"/**

 * Returns a new [LinkedHashSet] with the given elements.

 * Elements of the set are iterated in the order they were specified.

 * @sample samples.collections.Collections.Sets.linkedHashSet

 */",f16817:m191
53127,public actual fun String.toInt(radix: Int): Int,toIntOrNull(radix) ?: numberFormatError(this),"/**

 * Parses the string as an [Int] number and returns the result.

 * @throws NumberFormatException if the string is not a valid representation of a number.

 * @throws IllegalArgumentException when [radix] is not a valid radix for string to number conversion.

 */",f16618:m99
49099,internal fun IdeJvmAndAndroidPlatformBinaryDependencyResolver(project: Project): IdeDependencyResolver,"IdeBinaryDependencyResolver(binaryType = IdeaKotlinBinaryDependency.KOTLIN_COMPILE_BINARY_TYPE, artifactResolutionStrategy = IdeBinaryDependencyResolver.ArtifactResolutionStrategy.PlatformLikeSourceSet(setupPlatformResolutionAttributes = {
    attributes.setAttribute(Usage.USAGE_ATTRIBUTE, project.usageByName(Usage.JAVA_API))
    attributes.setAttribute(Category.CATEGORY_ATTRIBUTE, project.objects.named(Category.LIBRARY))
    attributes.setAttribute(KotlinPlatformType.attribute, KotlinPlatformType.jvm)
    attributes.setAttribute(TargetJvmEnvironment.TARGET_JVM_ENVIRONMENT_ATTRIBUTE, project.objects.named(TargetJvmEnvironment.STANDARD_JVM))
}, componentFilter = { identifier -> identifier !is ProjectComponentIdentifier }, dependencySubstitution = ::substituteStdlibCommonWithAndroidJvm))","/**

 * Resolves dependencies of jvm and Android source sets from the perspective jvm

 */",f15759:m53
22240,fun getLightClassMethod(parameter: KtParameter): PsiMethod?,"{
    return getPsiMethodWrapper(parameter)
}","/**

     * Returns the light method generated from the parameter of an annotation class.

     */",f8724:m289
63634,"@SinceKotlin(""1.4"") public actual fun maxOf(a: Byte, vararg other: Byte): Byte","{
    var max = a
    for (e in other) max = maxOf(max, e)
    return max
}","/**

 * Returns the greater of the given values.

 */",f17406:m323
54826,"@SinceKotlin(""1.1"") public actual fun <T: Comparable<T>> minOf(a: T, b: T, c: T): T","{
    return minOf(a, minOf(b, c))
}","/**

 * Returns the smaller of three values.

 * 

 * If there are multiple equal minimal values, returns the first of them.

 */",f16714:m589
70034,"private fun <T: DoubleColonLHS> tryResolveLHS(doubleColonExpression: KtDoubleColonExpression, context: ExpressionTypingContext, criterion: (KtDoubleColonExpression) -> Boolean, resolve: (KtExpression, ExpressionTypingContext) -> T?): LHSResolutionResult<T>?","{
    val expression = doubleColonExpression.receiverExpression ?: return null
    if (!criterion(doubleColonExpression)) return null
    val traceAndCache = TemporaryTraceAndCache.create(context, ""resolve '::' LHS"", doubleColonExpression)
    val c = context.replaceTraceAndCache(traceAndCache).replaceExpectedType(NO_EXPECTED_TYPE).replaceContextDependency(ContextDependency.INDEPENDENT)
    val lhs = resolve(expression, c)
    return LHSResolutionResult(lhs, expression, traceAndCache)
}","/**

     * Returns null if the LHS is definitely not an expression. Returns a non-null result if a resolution was attempted and led to

     * either a successful result or not.

     */",f19580:m829
52629,override fun equals(other: Any?): Boolean,"{
    if (other === this) return true
    if (other !is List<*>) return false
    return AbstractList.orderedEquals(this, other)
}","/**

     * Checks if the two specified lists are *structurally* equal to one another.

     *

     * Two lists are considered structurally equal if they have the same size, and elements at corresponding indices are equal.

     * Elements are compared for equality using the [equals][Any.equals] function.

     * For floating point numbers, this means `NaN` is equal to itself and `-0.0` is not equal to `0.0`.

     *

     * @param other the list to compare with this list.

     * @return `true` if [other] is a [List] that is structurally equal to this list, `false` otherwise.

     */",f16553:m183
14263,"public fun compareAndSwap(expected: NativePtr, newValue: NativePtr): NativePtr","this::value.compareAndExchangeField(expected, newValue)","/**

     * Atomically sets the value to the given [new value][newValue] if the current value equals the [expected value][expected]

     * and returns the old value in any case.

     *

     * Provides sequential consistent ordering guarantees and cannot fail spuriously.

     *

     * Comparison of values is done by value.

     */",f3762:m501
58617,"@kotlin.jvm.JvmName(""shortRangeContains"") public operator fun ClosedRange<Short>.contains(value: Int): Boolean","{
    return value.toShortExactOrNull().let { if (it != null) contains(it) else false }
}","/**

 * Checks if the specified [value] belongs to this range.

 */",f17092:m1055
11091,"fun addDeviceTask(id: Int, priority: Int, queue: Packet?)","{
    this.addTask(id, priority, queue, DeviceTask(this))
}","/**

     * Add a handler task to this scheduler.

     * @param {int} id the identity of the task

     * @param {int} priority the task's priority

     * @param {Packet} queue the queue of work to be processed by the task

     */",f3500:m267
55672,"@ExperimentalStdlibApi @SinceKotlin(""1.9"") public fun Long.toHexString(format: HexFormat = HexFormat.Default): String","{
    val digits = if (format.upperCase) UPPER_CASE_HEX_DIGITS else LOWER_CASE_HEX_DIGITS
    val numberFormat = format.number
    if (numberFormat.isDigitsOnly) {
        val charArray = CharArray(16)
        val value = this
        charArray[0] = digits[((value shr 60) and 0xF).toInt()]
        charArray[1] = digits[((value shr 56) and 0xF).toInt()]
        charArray[2] = digits[((value shr 52) and 0xF).toInt()]
        charArray[3] = digits[((value shr 48) and 0xF).toInt()]
        charArray[4] = digits[((value shr 44) and 0xF).toInt()]
        charArray[5] = digits[((value shr 40) and 0xF).toInt()]
        charArray[6] = digits[((value shr 36) and 0xF).toInt()]
        charArray[7] = digits[((value shr 32) and 0xF).toInt()]
        charArray[8] = digits[((value shr 28) and 0xF).toInt()]
        charArray[9] = digits[((value shr 24) and 0xF).toInt()]
        charArray[10] = digits[((value shr 20) and 0xF).toInt()]
        charArray[11] = digits[((value shr 16) and 0xF).toInt()]
        charArray[12] = digits[((value shr 12) and 0xF).toInt()]
        charArray[13] = digits[((value shr 8) and 0xF).toInt()]
        charArray[14] = digits[((value shr 4) and 0xF).toInt()]
        charArray[15] = digits[(value and 0xF).toInt()]
        return if (numberFormat.removeLeadingZeros) charArray.concatToString(startIndex = (countLeadingZeroBits() shr 2).coerceAtMost(15)) else charArray.concatToString()
    }
    return toHexStringImpl(numberFormat, digits, bits = 64)
}","/**

 * Formats this `Long` value using the specified [format].

 *

 * Note that only [HexFormat.upperCase] and [HexFormat.NumberHexFormat] affect formatting.

 *

 * @param format the [HexFormat] to use for formatting, [HexFormat.Default] by default.

 */",f16779:m1601
55113,@kotlin.internal.IntrinsicConstEvaluation public inline operator fun compareTo(other: Float): Int,this.toFloat().compareTo(other),"/**

     * Compares this value with the specified value for order.

     * Returns zero if this value is equal to the specified other value, a negative number if it's less than other,

     * or a positive number if it's greater than other.

     */",f16727:m2473
58629,"@kotlin.jvm.JvmName(""intRangeContains"") @SinceKotlin(""1.9"") @WasExperimental(ExperimentalStdlibApi::class) public operator fun OpenEndRange<Int>.contains(value: Long): Boolean","{
    return value.toIntExactOrNull().let { if (it != null) contains(it) else false }
}","/**

 * Checks if the specified [value] belongs to this range.

 */",f17092:m1275
53151,"@Suppress(""ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS"") public actual fun String?.equals(other: String?, ignoreCase: Boolean = false): Boolean","{
    if (this == null) return other == null
    if (other == null) return false
    if (!ignoreCase) return this == other
    if (this.length != other.length) return false
    for (index in 0 until this.length) {
        val thisChar = this[index]
        val otherChar = other[index]
        if (!thisChar.equals(otherChar, ignoreCase)) {
            return false
        }
    }
    return true
}","/**

 * Returns `true` if this string is equal to [other], optionally ignoring character case.

 *

 * Two strings are considered to be equal if they have the same length and the same character at the same index.

 * If [ignoreCase] is true, the result of `Char.uppercaseChar().lowercaseChar()` on each character is compared.

 *

 * @param ignoreCase `true` to ignore character case when comparing strings. By default `false`.

 */",f16624:m113
43559,"fun assertFilesCombinedContains(files: List<Path>, vararg expectedText: String): String","{
    files.forEach { assertFileExists(it) }
    val text = files.joinToString(separator = ""\n"") { it.readText() }
    val textNotInTheFile = expectedText.filterNot { text.contains(it) }
    assert(textNotInTheFile.isEmpty()) { """"""
    
            |$files does not contain:
    
            |${textNotInTheFile.joinToString(separator = ""\n"")}
    
            |
    
            |actual content:
    
            |""$text""
    
            |       
    
            """""".trimMargin() }
    return text
}","/**

 * Asserts files together contains all the lines from [expectedText]

 */",f13456:m463
64373,@kotlin.internal.IntrinsicConstEvaluation public override fun toLong(): Long,wasm_i64_trunc_sat_f64_s(this),"/**

     * Converts this [Double] value to [Long].

     *

     * The fractional part, if any, is rounded down towards zero.

     * Returns zero if this `Double` value is `NaN`, [Long.MIN_VALUE] if it's less than `Long.MIN_VALUE`,

     * [Long.MAX_VALUE] if it's bigger than `Long.MAX_VALUE`.

     */",f17455:m5281
63564,public actual operator fun ByteArray.plus(elements: ByteArray): ByteArray,"{
    val thisSize = size
    val arraySize = elements.size
    val result = copyOfUninitializedElements(thisSize + arraySize)
    elements.copyInto(result, thisSize)
    return result
}","/**

 * Returns an array containing all elements of the original array and then all elements of the given [elements] array.

 */",f17396:m4469
15403,fun test_powDD(),"{
    assertTrue(""pow returned incorrect value"", 2.0.pow(8.0).toLong() == 256L)
    assertTrue(""pow returned incorrect value"", 2.0.pow(-8.0) == 0.00390625)
    assertEquals(""Incorrect root returned1"", 2.0, sqrt(sqrt(2.0).pow(4.0)), 0.0)
}","/**

     * @tests java.lang.Math#pow(double, double)

     */",f3868:m1103
57485,"@SinceKotlin(""1.3"") @ExperimentalUnsignedTypes public actual fun ULongArray.asList(): List<ULong>","{
    return object : AbstractList<ULong>(), RandomAccess {
        override val size: Int get() = this@asList.size
    
        override fun isEmpty(): Boolean = this@asList.isEmpty()
    
        override fun contains(element: ULong): Boolean = this@asList.contains(element)
    
        override fun get(index: Int): ULong = this@asList[index]
    
        override fun indexOf(element: ULong): Int = this@asList.indexOf(element)
    
        override fun lastIndexOf(element: ULong): Int = this@asList.lastIndexOf(element)
    }
}","/**

 * Returns a [List] that wraps the original array.

 */",f16971:m167
59023,"@SinceKotlin(""1.4"") @OptIn(kotlin.experimental.ExperimentalTypeInference::class) @OverloadResolutionByLambdaReturnType @kotlin.internal.InlineOnly public inline fun CharSequence.maxOfOrNull(selector: (Char) -> Float): Float?","{
    if (isEmpty()) return null
    var maxValue = selector(this[0])
    for (i in 1 .. lastIndex) {
        val v = selector(this[i])
        maxValue = maxOf(maxValue, v)
    }
    return maxValue
}","/**

 * Returns the largest value among all values produced by [selector] function

 * applied to each character in the char sequence or `null` if there are no characters.

 * 

 * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.

 */",f17097:m2691
19994,"public inline fun <R> analyze(useSiteKtModule: KtModule, crossinline action: KtAnalysisSession.() -> R): R","{
    val sessionProvider = KtAnalysisSessionProvider.getInstance(useSiteKtModule.project)
    return sessionProvider.analyze(useSiteKtModule, action)
}","/**

 * Executes the given [action] in a [KtAnalysisSession] context.

 *

 * The project will be analyzed from the perspective of the given [useSiteKtModule].

 *

 * @see KtAnalysisSession

 * @see KtLifetimeTokenFactory

 */",f5731:m63
58040,@kotlin.internal.InlineOnly public inline operator fun rem(other: UShort): UInt,this.toUInt().rem(other.toUInt()),"/**

     * Calculates the remainder of truncating division of this value (dividend) by the other value (divisor).

     *

     * The result is always less than the divisor.

     */",f17058:m265
61697,public actual fun println(message: Any?),"{
    printlnImpl(message?.toString())
}",/** Prints the given [message] and the line separator to the standard output stream. */,f17252:m51
58884,public operator fun <T> Sequence<T>.minus(elements: Array<out T>): Sequence<T>,"{
    if (elements.isEmpty()) return this
    return object : Sequence<T> {
        override fun iterator(): Iterator<T> {
            return this@minus.filterNot { it in elements }.iterator()
        }
    }
}","/**

 * Returns a sequence containing all elements of original sequence except the elements contained in the given [elements] array.

 * 

 * Note that the source sequence and the array being subtracted are iterated only when an `iterator` is requested from

 * the resulting sequence. Changing any of them between successive calls to `iterator` may affect the result.

 *

 * The operation is _intermediate_ and _stateful_.

 */",f17096:m5259
49131,override fun close(),"{
    for (service in services.values) {
        service.close()
    }
    services.clear()
}","/**

     * Unregisters all the registered JMX services and may release other resources allocated by a service.

     */",f15767:m151
34870,private fun selectSubstitutionClassifierId(types: List<CirClassOrTypeAliasType>): CirEntityId?,"{
    val forwardSubstitutionAllowed = typeCommonizer.context.enableForwardTypeAliasSubstitution
    val backwardsSubstitutionAllowed = typeCommonizer.context.enableBackwardsTypeAliasSubstitution
    if (!forwardSubstitutionAllowed && !backwardsSubstitutionAllowed) {
        return null
    }
    val associatedIds = types.singleDistinctValueOrNull { classifiers.associatedIdsResolver.resolveAssociatedIds(it.classifierId) } ?: return null
    val typeSubstitutionCandidates = resolveTypeSubstitutionCandidates(associatedIds, types).onEach { typeSubstitutionCandidate ->
        assert(typeSubstitutionCandidate.typeDistance.isZero.not()) { ""Expected no zero typeDistance"" }
        assert(typeSubstitutionCandidate.typeDistance.isReachable) { ""Expected substitution candidate to be reachable"" }
    }
    return typeSubstitutionCandidates.minByOrNull { it.typeDistance.penalty }?.id
}","/**

     * Will select *the* associated classifier that is

     * - reachable from all [types] on all platforms

     * - Has the lowest penalty score (where penalty score will be the maximum penalty on all platforms)

     *

     * Will return null if

     * - No substitution is allowed

     * - The input [types] do not have a single distinct set of associated ids

     */",f11426:m421
11614,fun String.toBooleanStrictOrNull(): Boolean?,"when {
    this.equals(""true"", ignoreCase = true) -> true
    this.equals(""false"", ignoreCase = true) -> false
    else -> null
}","/**

 * Returns `true` if the contents of this string is equal to the word ""true"", ignoring case, `false` if content equals ""false"",

 * and returns `null` otherwise.

 */",f3576:m131
58147,@kotlin.internal.InlineOnly public inline operator fun plus(other: UInt): UInt,UInt(this.data.plus(other.data)),/** Adds the other value to this value. */,f17063:m159
64454,"@SinceKotlin(""1.5"") @WasExperimental(ExperimentalPathApi::class) @Throws(IOException::class) public fun Path.appendText(text: CharSequence, charset: Charset = Charsets.UTF_8)","{
    writeText(text, charset, StandardOpenOption.APPEND)
}","/**

 * Appends [text] to the content of this file using UTF-8 or the specified [charset].

 *

 * @param text text to append to file.

 * @param charset character set to use for writing text, UTF-8 by default.

 */",f17469:m381
14872,"@Deprecated(""Use Kotlin compiler 1.4 to avoid deprecation warning."") @SinceKotlin(""1.1"") @DeprecatedSinceKotlin(hiddenSince = ""1.4"") public fun <T> Array<out T>.contentToString(): String","{
    return this.contentToString()
}","/**

 * Returns a string representation of the contents of the specified array as if it is [List].

 * 

 * @sample samples.collections.Arrays.ContentOperations.contentToString

 */",f3831:m1801
30908,"infix fun <T, R> Collection<T>.memoryOptimizedZip(other: Collection<R>): List<Pair<T, R>>","{
    return when {
        isEmpty() || other.isEmpty() -> emptyList()
        min(size, other.size) == 1 -> listOf(first() to other.first())
        else -> zip(other) { t1, t2 -> t1 to t2 }
    }
}","/**

 * A memory-optimized version of [Iterable.zip].

 * @see Iterable.zip

 */",f10791:m187
57277,"@SinceKotlin(""1.4"") @kotlin.internal.InlineOnly public actual inline fun <T> Array<out T>?.contentToString(): String","{
    return java.util.Arrays.toString(this)
}","/**

 * Returns a string representation of the contents of the specified array as if it is [List].

 * 

 * @sample samples.collections.Arrays.ContentOperations.contentToString

 */",f16970:m1627
51952,fun String.toScriptSource(name: String? = null): SourceCode,"StringScriptSource(this, name)","/**

 * Converts the String into the SourceCode

 */",f16417:m247
52880,"@SinceKotlin(""1.4"") public actual fun Long.countLeadingZeroBits(): Int","when (val high = this.high) {
    0 -> Int.SIZE_BITS + low.countLeadingZeroBits()
    else -> high.countLeadingZeroBits()
}","/**

 * Counts the number of consecutive most significant bits that are zero in the binary representation of this [Long] number.

 */",f16581:m367
53096,"@SinceKotlin(""1.4"") public actual fun CharArray.concatToString(): String","{
    var result = """"
    for (char in this) {
        result += char
    }
    return result
}","/**

 * Concatenates characters in this [CharArray] into a String.

 */",f16617:m85
58502,"@SinceKotlin(""1.4"") @OptIn(kotlin.experimental.ExperimentalTypeInference::class) @OverloadResolutionByLambdaReturnType @kotlin.internal.InlineOnly public inline fun <K, V, R: Comparable<R>> Map<out K, V>.minOfOrNull(selector: (Map.Entry<K, V>) -> R): R?","{
    return entries.minOfOrNull(selector)
}","/**

 * Returns the smallest value among all values produced by [selector] function

 * applied to each entry in the map or `null` if there are no entries.

 */",f17089:m957
29395,"fun abiMetadataProcessor(annotationVisitor: AnnotationVisitor, removeDataClassCopyIfConstructorIsPrivate: Boolean, preserveDeclarationOrder: Boolean, classesToBeDeleted: Set<String>, pruneClass: Boolean, treatInternalAsPrivate: Boolean): AnnotationVisitor","kotlinClassHeaderVisitor { header ->
    val metadataVersion = header.metadataVersion.takeIf { v ->
        val major = v.getOrNull(0) ?: 0
        val minor = v.getOrNull(1) ?: 0
        major > 1 || major == 1 && minor >= 4
    } ?: intArrayOf(1, 4)
    val newHeader = runCatching { KotlinClassMetadata.transform(header) { metadata -> when (metadata) {
        is KotlinClassMetadata.Class -> {
            metadata.kmClass.removePrivateDeclarations(removeDataClassCopyIfConstructorIsPrivate, preserveDeclarationOrder, classesToBeDeleted, pruneClass, treatInternalAsPrivate)
        }
        is KotlinClassMetadata.FileFacade -> {
            metadata.kmPackage.removePrivateDeclarations(preserveDeclarationOrder, pruneClass, treatInternalAsPrivate)
        }
        is KotlinClassMetadata.MultiFileClassPart -> {
            metadata.kmPackage.removePrivateDeclarations(preserveDeclarationOrder, pruneClass, treatInternalAsPrivate)
        }
        else -> Unit
    } } }.getOrElse { cause ->
        if (System.getProperty(""idea.is.unit.test"").toBoolean()) {
            val actual = ""${metadataVersion[0]}.${metadataVersion[1]}""
            val expected = JvmMetadataVersion.LATEST_STABLE_SUPPORTED.toString()
            throw AssertionError(""jvm-abi-gen can't process class file with the new metadata version because the version of kotlinx-metadata-jvm "" + ""it depends on is too old.\n"" + ""Class file has metadata version $actual, but default metadata version of kotlinx-metadata-jvm is "" + ""$expected, so it can process class files with metadata version up to +1 from that (because of "" + ""Kotlin/JVM's one-version forward compatibility policy).\n"" + ""To fix this error, ensure that jvm-abi-gen depends on the latest version of kotlinx-metadata-jvm.\n"" + ""If this happens during the update of the default language version in the project, make sure that "" + ""a version of kotlinx-metadata-jvm has been published that supports this version, and update "" + ""\""versions.kotlinx-metadata-jvm\"" in `gradle/versions.properties`."", cause)
        }
        header
    }
    annotationVisitor.visitKotlinMetadata(newHeader)
}","/**

 * Wrap the visitor for a Kotlin Metadata annotation to strip out private and local

 * functions, properties, and type aliases as well as local delegated properties.

 */",f10310:m27
29092,"override fun Int.write(parcel: Parcel, flags: Int)","{
    parcel.writeInt(this)
}","/**

     * Writes the [T] instance state to the [parcel].

     */",f10233:m73
46799,"internal fun String.indented(nSpaces: Int = 4, skipFirstLine: Boolean = false): String","{
    val spaces = String(CharArray(nSpaces) { ' ' })
    return lines().withIndex().joinToString(separator = ""\n"") { (index, line) ->
        if (skipFirstLine && index == 0) return@joinToString line
        if (line.isNotBlank()) ""$spaces$line"" else line
    }
}","/**

 * @param skipFirstLine if true doesn't indent first line

 */",f15122:m69
56594,"public fun <K, V> Map<out K, V>.toSortedMap(comparator: Comparator<in K>): SortedMap<K, V>","TreeMap<K, V>(comparator).apply { putAll(this@toSortedMap) }","/**

 * Converts this [Map] to a [SortedMap]. The resulting [SortedMap] determines the equality and order of keys according to the sorting order provided by the given [comparator].

 *

 * Note that if the `comparator` considers any two keys of this map equal, only the value associated with the last of them gets into the resulting map.

 *

 * @sample samples.collections.Maps.Transformations.mapToSortedMapWithComparator

 */",f16913:m177
55704,"@SinceKotlin(""1.5"") @WasExperimental(ExperimentalStdlibApi::class) public fun Int.digitToChar(): Char","{
    if (this in 0 .. 9) {
        return '0' + this
    }
    throw IllegalArgumentException(""Int $this is not a decimal digit"")
}","/**

 * Returns the Char that represents this decimal digit.

 * Throws an exception if this value is not in the range `0..9`.

 *

 * If this value is in `0..9`, the decimal digit Char with code `'0'.code + this` is returned.

 *

 * @sample samples.text.Chars.digitToChar

 */",f16785:m163
16749,"fun lazyResolve(target: FirElementWithResolveState, toPhase: FirResolvePhase)","{
    if (target.resolvePhase >= toPhase) return
    lazyResolve(target, toPhase, LLFirResolveDesignationCollector::getDesignationToResolve)
}","/**

     * Lazily resolves the [target] to a given [toPhase].

     *

     * Might resolve additional required declarations.

     *

     * Resolution is performed under the lock specific to each declaration that is going to be resolved.

     */",f4163:m63
64451,"@SinceKotlin(""1.5"") @WasExperimental(ExperimentalPathApi::class) @Throws(IOException::class) @kotlin.internal.InlineOnly public inline fun Path.appendBytes(array: ByteArray)","{
    Files.write(this, array, StandardOpenOption.APPEND)
}","/**

 * Appends an [array] of bytes to the content of this file.

 *

 * @param array byte array to append to this file.

 */",f17469:m261
14949,"@SinceKotlin(""1.3"") @Suppress(""ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS"") public actual fun FloatArray.fill(element: Float, fromIndex: Int = 0, toIndex: Int = size): Unit","{
    arrayFill(this, fromIndex, toIndex, element)
}","/**

 * Fills this array or its subrange with the specified [element] value.

 * 

 * @param fromIndex the start of the range (inclusive) to fill, 0 by default.

 * @param toIndex the end of the range (exclusive) to fill, size of this array by default.

 * 

 * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.

 * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].

 */",f3831:m3861
58606,"@Deprecated(""This `contains` operation mixing integer and floating point arguments has ambiguous semantics and is going to be removed."") @DeprecatedSinceKotlin(warningSince = ""1.3"", errorSince = ""1.4"", hiddenSince = ""1.5"") @kotlin.jvm.JvmName(""byteRangeContains"") public operator fun ClosedRange<Byte>.contains(value: Double): Boolean","{
    return value.toByteExactOrNull().let { if (it != null) contains(it) else false }
}","/**

 * Checks if the specified [value] belongs to this range.

 */",f17092:m851
11464,"fun <T: Any> option(type: ArgType<T>, fullName: String? = null, shortName: String? = null, description: String? = null, deprecatedWarning: String? = null): SingleNullableOption<T>","{
    if (prefixStyle == OptionPrefixStyle.GNU && shortName != null) require(shortName.length == 1) { """"""
    
                    GNU standart for options allow to use short form which consists of one character. 
    
                    For more information, please, see https://www.gnu.org/software/libc/manual/html_node/Argument-Syntax.html
    
                    """""".trimIndent() }
    val option = SingleNullableOption(OptionDescriptor(optionFullFormPrefix, optionShortFromPrefix, type, fullName, shortName, description, deprecatedWarning = deprecatedWarning), CLIEntityWrapper())
    option.owner.entity = option
    declaredOptions.add(option.owner)
    return option
}","/**

     * Declares a named option and returns an object which can be used to access the option value

     * after all arguments are parsed or to delegate a property for accessing the option value to.

     *

     * By default, the option supports only a single value, is optional, and has no default value,

     * therefore its value's type is `T?`.

     *

     * You can alter the option properties by chaining extensions for the option type on the returned object:

     *   - [AbstractSingleOption.default] to provide a default value that is used when the option is not specified;

     *   - [SingleNullableOption.required] to make the option non-optional;

     *   - [AbstractSingleOption.delimiter] to allow specifying multiple values in one command line argument with a delimiter;

     *   - [AbstractSingleOption.multiple] to allow specifying the option several times.

     *

     * @param type The type describing how to parse an option value from a string,

     * an instance of [ArgType], e.g. [ArgType.String] or [ArgType.Choice].

     * @param fullName the full name of the option, can be omitted if the option name is inferred

     * from the name of a property delegated to this option.

     * @param shortName the short name of the option, `null` if the option cannot be specified in a short form.

     * @param description the description of the option used when rendering the usage information.

     * @param deprecatedWarning the deprecation message for the option.

     * Specifying anything except `null` makes this option deprecated. The message is rendered in a help message and

     * issued as a warning when the option is encountered when parsing command line arguments.

     */",f3554:m427
58624,"@kotlin.jvm.JvmName(""intRangeContains"") public operator fun ClosedRange<Int>.contains(value: Long): Boolean","{
    return value.toIntExactOrNull().let { if (it != null) contains(it) else false }
}","/**

 * Checks if the specified [value] belongs to this range.

 */",f17092:m1187
63628,"@SinceKotlin(""1.1"") @kotlin.internal.InlineOnly public actual inline fun maxOf(a: Short, b: Short, c: Short): Short","{
    return maxOf(a.toInt(), maxOf(b.toInt(), c.toInt())).toShort()
}","/**

 * Returns the greater of three values.

 */",f17406:m201
16352,override fun visitField(field: FirField),"withProcessor(field) {
    dumpContext(field, ContextKind.SELF)
    processSignatureAnnotations(field)
    onActiveBody {
        field.lazyResolveToPhase(FirResolvePhase.BODY_RESOLVE)
        context.withField(field) {
            dumpContext(field, ContextKind.BODY)
            onActive { process(field.initializer) }
        }
    }
}","/**

     * We visit fields to properly handle supertypes delegation:

     *

     * ```kt

     * class Foo : Bar by baz

     * ```

     *

     * In the code above, `baz` expression is saved into a separate synthetic field.

     * It's not accessible from the delegated constructor, it's just added to the

     * `Foo` class body.

     */",f4108:m1163
64380,@kotlin.internal.IntrinsicConstEvaluation public override fun get(index: Int): Char,"{
    rangeCheck(index, this.length)
    return chars.get(index)
}","/**

     * Returns the character of this string at the specified [index].

     *

     * If the [index] is out of bounds of this string, throws an [IndexOutOfBoundsException] except in Kotlin/JS

     * where the behavior is unspecified.

     */",f17457:m63
57265,"@SinceKotlin(""1.4"") @kotlin.internal.InlineOnly public actual inline infix fun DoubleArray?.contentEquals(other: DoubleArray?): Boolean","{
    return java.util.Arrays.equals(this, other)
}","/**

 * Checks if the two specified arrays are *structurally* equal to one another.

 * 

 * Two arrays are considered structurally equal if they have the same size, and elements at corresponding indices are equal.

 * Elements are compared for equality using the [equals][Any.equals] function.

 * This means `NaN` is equal to itself and `-0.0` is not equal to `0.0`.

 * 

 * The arrays are also considered structurally equal if both are `null`.

 * 

 * @param other the array to compare with this array.

 * @return `true` if the two arrays are structurally equal, `false` otherwise.

 * 

 * @sample samples.collections.Arrays.ContentOperations.doubleArrayContentEquals

 */",f16970:m1353
49076,private fun Project.copyCInteropFileForIdeIfNecessary(file: File): File,"{
    if (!file.exists()) return file
    val newFileName = ""${file.nameWithoutExtension}-${file.crc32ChecksumString()}.${file.extension}""
    val outputFile = kotlinCInteropLibraryDirectoryForIde.resolve(newFileName)
    if (!outputFile.exists()) {
        file.copyTo(outputFile)
    }
    return outputFile
}","/**

     * Copies the file into a directory specifically for the IDE, so it survives ./gradlew clean

     */",f15749:m63
56108,public fun <T> MutableList<T>.retainAll(predicate: (T) -> Boolean): Boolean,"filterInPlace(predicate, false)","/**

 * Retains only elements of this [MutableList] that match the given [predicate].

 *

 * @return `true` if any element was removed from this collection, or `false` when all elements were retained and collection was not modified.

 */",f16825:m543
41215,"fun append(key: KEY, element: E)","{
    append(key, listOf(element))
}",/** Adds the given [element] to the collection corresponding to the given [key]. */,f12995:m117
54741,"@Suppress(""NOTHING_TO_INLINE"") public actual inline operator fun FloatArray.plus(element: Float): FloatArray","{
    return plus(floatArrayOf(element))
}","/**

 * Returns an array containing all elements of the original array and then the given [element].

 */",f16713:m2695
55701,"@SinceKotlin(""1.5"") @WasExperimental(ExperimentalStdlibApi::class) public fun Char.digitToInt(radix: Int): Int","{
    return digitToIntOrNull(radix) ?: throw IllegalArgumentException(""Char $this is not a digit in the given radix=$radix"")
}","/**

 * Returns the numeric value of the digit that this Char represents in the specified [radix].

 * Throws an exception if the [radix] is not in the range `2..36` or if this Char is not a valid digit in the specified [radix].

 *

 * A Char is considered to represent a digit in the specified [radix] if at least one of the following is true:

 *  - [isDigit] is `true` for the Char and the Unicode decimal digit value of the character is less than the specified [radix]. In this case the decimal digit value is returned.

 *  - The Char is one of the uppercase Latin letters 'A' through 'Z' and its [code] is less than `radix + 'A'.code - 10`. In this case, `this.code - 'A'.code + 10` is returned.

 *  - The Char is one of the lowercase Latin letters 'a' through 'z' and its [code] is less than `radix + 'a'.code - 10`. In this case, `this.code - 'a'.code + 10` is returned.

 *  - The Char is one of the fullwidth Latin capital letters '\uFF21' through '\uFF3A' and its [code] is less than `radix + 0xFF21 - 10`. In this case, `this.code - 0xFF21 + 10` is returned.

 *  - The Char is one of the fullwidth Latin small letters '\uFF41' through '\uFF5A' and its [code] is less than `radix + 0xFF41 - 10`. In this case, `this.code - 0xFF41 + 10` is returned.

 *

 * @sample samples.text.Chars.digitToInt

 */",f16785:m55
58969,public inline fun String.takeLastWhile(predicate: (Char) -> Boolean): String,"{
    for (index in lastIndex downTo 0) {
        if (!predicate(this[index])) {
            return substring(index + 1)
        }
    }
    return this
}","/**

 * Returns a string containing last characters that satisfy the given [predicate].

 * 

 * @sample samples.text.Strings.take

 */",f17097:m1229
17232,public fun Project.createProjectWideOutOfBlockModificationTracker(): ModificationTracker,KotlinModificationTrackerFactory.getInstance(this).createProjectWideOutOfBlockModificationTracker(),"/**

 * Creates an **OOBM** tracker which is incremented every time there is an OOB change in some source project module.

 *

 * See [KotlinModificationTrackerFactory.createProjectWideOutOfBlockModificationTracker] for the definition of **OOBM**.

 * @see ModificationTracker

 */",f5190:m147
64458,"@SinceKotlin(""1.5"") @WasExperimental(ExperimentalPathApi::class) @Throws(IOException::class) @kotlin.internal.InlineOnly public inline fun Path.readLines(charset: Charset = Charsets.UTF_8): List<String>","{
    return Files.readAllLines(this, charset)
}","/**

 * Reads the file content as a list of lines.

 *

 * It's not recommended to use this function on huge files.

 * For reading lines of a large file or a file of unknown size, use [Path.forEachLine] or [Path.useLines].

 *

 * @param charset character set to use for reading text, UTF-8 by default.

 * @return list of file lines.

 */",f17469:m503
32263,fun compareTo(visibility: DescriptorVisibility): Int?,"{
    return delegate.compareTo(visibility.delegate)
}","/**

     * @return null if the answer is unknown

     */",f10965:m125
23507,"private fun InstructionAdapter.putReifyMarkerIfNeeded(type: IrType, intrinsicType: IntrinsicType): Boolean","with(typeSystemContext) {
    val typeDescriptor = type.typeConstructor().getTypeParameterClassifier()
    if (typeDescriptor != null) {
        ReifiedTypeInliner.putReifiedOperationMarkerIfNeeded(typeDescriptor, type.isMarkedNullable(), ReifiedTypeInliner.OperationKind.TYPE_OF, this@putReifyMarkerIfNeeded, typeSystemContext)
        aconst(null)
        aconst(intrinsicType.magicMarkerString())
        invokestatic(pluginIntrinsicsMarkerOwner, pluginIntrinsicsMarkerMethod, pluginIntrinsicsMarkerSignature, false)
        if (intrinsicType is IntrinsicType.WithModule) {
            load(intrinsicType.storedIndex, serializersModuleType)
            swap()
        }
        invokestatic(serializersKtInternalName, callMethodName, intrinsicType.methodDescriptor, false)
        return true
    }
    return false
}","/**

     * This function produces identical to TYPE_OF reification marker. This is needed for compatibility reasons:

     * old compiler should be able to inline and run newer versions of kotlinx-serialization or other libraries.

     *

     * Operation detection in new compilers performed by voidMagicApiCall.

     */",f8983:m459
48533,"@JvmOverloads fun executable(namePrefix: String, buildTypes: Collection<NativeBuildType> = NativeBuildType.DEFAULT_BUILD_TYPES, configure: Executable.() -> Unit = {})","createBinaries(namePrefix, namePrefix, NativeOutputKind.EXECUTABLE, buildTypes, ::Executable, configure)",/** Creates an executable with the given [namePrefix] for each build type and configures it. */,f15652:m341
56185,"@kotlin.internal.InlineOnly public inline fun <T: Any> requireNotNull(value: T?, lazyMessage: () -> Any): T","{
    contract { returns() implies (value != null) }
    if (value == null) {
        val message = lazyMessage()
        throw IllegalArgumentException(message.toString())
    } else {
        return value
    }
}","/**

 * Throws an [IllegalArgumentException] with the result of calling [lazyMessage] if the [value] is null. Otherwise

 * returns the not null value.

 *

 * @sample samples.misc.Preconditions.failRequireNotNullWithLazyMessage

 */",f16839:m105
56612,public actual fun <T: Comparable<T>> MutableList<T>.sort(): Unit,"{
    if (size > 1) java.util.Collections.sort(this)
}","/**

 * Sorts elements in the list in-place according to their natural sort order.

 *

 * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.

 *

 * @sample samples.collections.Collections.Sorting.sortMutableList

 */",f16918:m45
58630,"@kotlin.jvm.JvmName(""byteRangeContains"") @SinceKotlin(""1.9"") @WasExperimental(ExperimentalStdlibApi::class) public operator fun OpenEndRange<Byte>.contains(value: Long): Boolean","{
    return value.toByteExactOrNull().let { if (it != null) contains(it) else false }
}","/**

 * Checks if the specified [value] belongs to this range.

 */",f17092:m1295
58504,"@SinceKotlin(""1.4"") @OptIn(kotlin.experimental.ExperimentalTypeInference::class) @OverloadResolutionByLambdaReturnType @kotlin.internal.InlineOnly public inline fun <K, V, R> Map<out K, V>.minOfWithOrNull(comparator: Comparator<in R>, selector: (Map.Entry<K, V>) -> R): R?","{
    return entries.minOfWithOrNull(comparator, selector)
}","/**

 * Returns the smallest value according to the provided [comparator]

 * among all values produced by [selector] function applied to each entry in the map or `null` if there are no entries.

 */",f17089:m1009
63570,public actual operator fun BooleanArray.plus(elements: BooleanArray): BooleanArray,"{
    val thisSize = size
    val arraySize = elements.size
    val result = copyOfUninitializedElements(thisSize + arraySize)
    elements.copyInto(result, thisSize)
    return result
}","/**

 * Returns an array containing all elements of the original array and then all elements of the given [elements] array.

 */",f17396:m4601
22333,private fun tryResolveMarkerInterfaceFQName(classId: ClassId): String?,"{
    for (mapping in JavaToKotlinClassMap.mutabilityMappings) {
        if (mapping.kotlinReadOnly == classId) {
            return ""kotlin.jvm.internal.markers.KMappedMarker""
        } else if (mapping.kotlinMutable == classId) {
            return ""kotlin.jvm.internal.markers.K"" + classId.relativeClassName.asString().replace(""MutableEntry"", ""Entry"").replace(""."", ""$"")
        }
    }
    return null
}","/***

     * @see org.jetbrains.kotlin.codegen.ImplementationBodyCodegen

     */",f8733:m133
63198,"@SinceKotlin(""1.2"") public actual fun Float.toBits(): Int",if (isNaN()) Float.NaN.toRawBits() else toRawBits(),"/**

 * Returns a bit representation of the specified floating-point value as [Int]

 * according to the IEEE 754 floating-point ""single format"" bit layout.

 */",f17314:m383
55664,"@ExperimentalStdlibApi @SinceKotlin(""1.9"") public fun String.hexToByte(format: HexFormat = HexFormat.Default): Byte","hexToByte(0, length, format)","/**

 * Parses a `Byte` value from this string using the specified [format].

 *

 * Note that only [HexFormat.NumberHexFormat] affects parsing,

 * and parsing is performed in case-insensitive manner.

 *

 * @param format the [HexFormat] to use for parsing, [HexFormat.Default] by default.

 *

 * @throws IllegalArgumentException if this string does not comply with the specified [format].

 */",f16779:m1263
56857,"@SinceKotlin(""1.2"") @kotlin.internal.InlineOnly public actual inline fun Double.toBits(): Long",java.lang.Double.doubleToLongBits(this),"/**

 * Returns a bit representation of the specified floating-point value as [Long]

 * according to the IEEE 754 floating-point ""double format"" bit layout.

 */",f16929:m95
14967,public actual operator fun FloatArray.plus(elements: Collection<Float>): FloatArray,"{
    var index = size
    val result = copyOfUninitializedElements(index + elements.size)
    for (element in elements) result[index++] = element
    return result
}","/**

 * Returns an array containing all elements of the original array and then all elements of the given [elements] collection.

 */",f3831:m4261
58896,"public infix fun <T, R> Sequence<T>.zip(other: Sequence<R>): Sequence<Pair<T, R>>","{
    return MergingSequence(this, other) { t1, t2 -> t1 to t2 }
}","/**

 * Returns a sequence of values built from the elements of `this` sequence and the [other] sequence with the same index.

 * The resulting sequence ends as soon as the shortest input sequence ends.

 *

 * The operation is _intermediate_ and _stateless_.

 * 

 * @sample samples.collections.Sequences.Transformations.zip

 */",f17096:m5631
47160,internal inline fun <reified T: KotlinTarget> KotlinTargetSideEffect(crossinline effect: (T) -> Unit),KotlinTargetSideEffect { target -> if (target is T) effect(target) },"/**

 * see [KotlinTargetSideEffect]

 */",f15248:m63
57088,"public fun File.forEachBlock(blockSize: Int, action: (buffer: ByteArray, bytesRead: Int) -> Unit): Unit","{
    val arr = ByteArray(blockSize.coerceAtLeast(MINIMUM_BLOCK_SIZE))
    inputStream().use { input -> do {
        val size = input.read(arr)
        if (size <= 0) {
            break
        } else {
            action(arr, size)
        }
    } while (true) }
}","/**

 * Reads file by byte blocks and calls [action] for each block read.

 * This functions passes the byte array and amount of bytes in the array to the [action] function.

 *

 * You can use this function for huge files.

 *

 * @param action function to process file blocks.

 * @param blockSize size of a block, replaced by 512 if it's less, 4096 by default.

 */",f16956:m417
59066,"@SinceKotlin(""1.4"") @OptIn(kotlin.experimental.ExperimentalTypeInference::class) @OverloadResolutionByLambdaReturnType @kotlin.jvm.JvmName(""sumOfLong"") @kotlin.internal.InlineOnly public inline fun CharSequence.sumOf(selector: (Char) -> Long): Long","{
    var sum: Long = 0.toLong()
    for (element in this) {
        sum += selector(element)
    }
    return sum
}","/**

 * Returns the sum of all values produced by [selector] function applied to each character in the char sequence.

 */",f17097:m4313
25638,fun verifyGolden(testInfo: GoldenTransformTestInfo),"{
    if (generateGoldens || (!goldenFile.exists() && generateMissingGoldens) || goldenFile.nameWithoutExtension in generateGoldenFiles) {
        saveGolden(testInfo)
    }
    if (!goldenFile.exists()) {
        throw FileNotFoundException(""Could not find golden file: ${goldenFile.absolutePath}"")
    }
    val loadedTestInfo = try {
        GoldenTransformTestInfo.fromEncodedString(goldenFile.readText())
    } catch (e: IllegalStateException) {
        error(""Golden ${goldenFile.absolutePath} file could not be parsed.\n${e.message}"")
    }
    Assert.assertEquals(""Transformed source does not match golden file:"" + ""\n${goldenFile.absolutePath}\n"" + ""To regenerate golden files, set GENERATE_GOLDEN=\""${
    
                        goldenFile.nameWithoutExtension}\"" as an env variable (or set it to 'true' "" + ""to generate all the files).\n"" + ""The environment variable can be a comma delimited list of names (the quotes are "" + ""optional)"", loadedTestInfo.transformed, testInfo.transformed)
}","/**

     * Verify the current test against the matching golden file.

     * If generateGoldens is true, the golden file will first be generated.

     */",f9271:m147
14048,"public fun compareAndSet(expected: Int, newValue: Int): Boolean","this::value.compareAndSetField(expected, newValue)","/**

     * Atomically sets the value to the given [new value][newValue] if the current value equals the [expected value][expected],

     * returns true if the operation was successful and false only if the current value was not equal to the expected value.

     *

     * Provides sequential consistent ordering guarantees and cannot fail spuriously.

     */",f3718:m51
54670,"@SinceKotlin(""1.4"") public actual infix fun DoubleArray?.contentEquals(other: DoubleArray?): Boolean","{
    return contentEqualsInternal(other)
}","/**

 * Checks if the two specified arrays are *structurally* equal to one another.

 * 

 * Two arrays are considered structurally equal if they have the same size, and elements at corresponding indices are equal.

 * Elements are compared for equality using the [equals][Any.equals] function.

 * This means `NaN` is equal to itself and `-0.0` is not equal to `0.0`.

 * 

 * The arrays are also considered structurally equal if both are `null`.

 * 

 * @param other the array to compare with this array.

 * @return `true` if the two arrays are structurally equal, `false` otherwise.

 * 

 * @sample samples.collections.Arrays.ContentOperations.doubleArrayContentEquals

 */",f16713:m781
14796,"@Deprecated(""Use Kotlin compiler 1.4 to avoid deprecation warning."") @SinceKotlin(""1.3"") @DeprecatedSinceKotlin(hiddenSince = ""1.4"") @ExperimentalUnsignedTypes public fun UIntArray.contentHashCode(): Int","{
    return this.contentHashCode()
}","/**

 * Returns a hash code based on the contents of this array as if it is [List].

 */",f3828:m399
11456,"fun <T: Any, DefaultRequired: DefaultRequiredType> AbstractSingleOption<T, *, DefaultRequired>.delimiter(delimiterValue: String): MultipleOption<T, MultipleOptionType.Delimited, DefaultRequired>","{
    val newOption = with((delegate.cast<ParsingValue<T, T>>()).descriptor as OptionDescriptor) { MultipleOption<T, MultipleOptionType.Delimited, DefaultRequired>(OptionDescriptor(optionFullFormPrefix, optionShortFromPrefix, type, fullName, shortName, description, listOfNotNull(defaultValue), required, multiple, delimiterValue, deprecatedWarning), owner) }
    owner.entity = newOption
    return newOption
}","/**

 * Allows the option to have several values joined with [delimiter] specified in command line string.

 * Number of values is unlimited.

 *

 * The value of the argument is an empty list in case if no value was specified in command line string.

 *

 * @param delimiterValue delimiter used to separate string value to option values list.

 */",f3549:m439
63576,public actual fun ShortArray.sort(): Unit,"{
    if (size > 1) sortArray(this, 0, size)
}","/**

 * Sorts the array in-place.

 * 

 * @sample samples.collections.Arrays.Sorting.sortArray

 */",f17396:m4715
56238,"@SinceKotlin(""1.5"") @kotlin.internal.InlineOnly @kotlin.internal.IntrinsicConstEvaluation public inline fun Int.mod(other: Short): Short",this.mod(other.toInt()).toShort(),"/**

 * Calculates the remainder of flooring division of this value (dividend) by the other value (divisor).

 *

 * The result is either zero or has the same sign as the _divisor_ and has the absolute value less than the absolute value of the divisor.

 */",f16842:m367
58866,"@SinceKotlin(""1.4"") public inline fun <S, T: S> Sequence<T>.reduceOrNull(operation: (acc: S, T) -> S): S?","{
    val iterator = this.iterator()
    if (!iterator.hasNext()) return null
    var accumulator: S = iterator.next()
    while (iterator.hasNext()) {
        accumulator = operation(accumulator, iterator.next())
    }
    return accumulator
}","/**

 * Accumulates value starting with the first element and applying [operation] from left to right

 * to current accumulator value and each element.

 * 

 * Returns `null` if the sequence is empty.

 * 

 * @param [operation] function that takes current accumulator value and an element,

 * and calculates the next accumulator value.

 *

 * The operation is _terminal_.

 * 

 * @sample samples.collections.Collections.Aggregates.reduceOrNull

 */",f17096:m4537
